<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ArrayPrimitive:LearnMoreBottomSheetScreen.kt$Array&lt;Int></ID>
    <ID>ClassNaming:CloudConsentSuccessState.kt$CloudConsentSuccessState$DEVICE_FOUND : CloudConsentSuccessState</ID>
    <ID>ClassNaming:CloudConsentSuccessState.kt$CloudConsentSuccessState$NO_DEVICE : CloudConsentSuccessState</ID>
    <ID>ClassNaming:PreChatFormViewModel.kt$PreChatFormViewModel$preChatInfo</ID>
    <ID>ComplexCondition:BrowserFragment.kt$BrowserFragment.&lt;no name provided>$url.startsWith(WebView.SCHEME_TEL) || url.startsWith("sms:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith(WebView.SCHEME_GEO) || url.startsWith("maps:")</ID>
    <ID>ComplexCondition:DependentFormAdapter.kt$DependentFormAdapter$newField.type == DependentRelationshipSchemaField.TYPE_CHECKBOX &amp;&amp; field.lowercase(Locale.getDefault()) == "true" &amp;&amp; newField.message.isNotEmpty() || newField.type != DependentRelationshipSchemaField.TYPE_CHECKBOX &amp;&amp; newField.message.isNotEmpty()</ID>
    <ID>ComplexCondition:IterableExtension.kt$p1 != null &amp;&amp; p2 != null &amp;&amp; p3 != null &amp;&amp; p4 != null</ID>
    <ID>ComplexCondition:IterableExtension.kt$p1 != null &amp;&amp; p2 != null &amp;&amp; p3 != null &amp;&amp; p4 != null &amp;&amp; p5 != null</ID>
    <ID>ComplexCondition:LeagueChatMessage.kt$LeagueChatMessage$senderId == null &amp;&amp; senderName == null &amp;&amp; message.isBlank() &amp;&amp; imagePath.isNullOrEmpty()</ID>
    <ID>ComplexCondition:LeagueNavigation.kt$LeagueNavigation$( navigationTarget?.target == NavigationTarget.BROWSER &amp;&amp; deepLinker.navigateToDeepLink( activity, uri, navController = navController, navOptions ) ) || deepLinker.navigateToDeepLink( activity, uri, navController = navController, navOptions ) || directNavigation(activity, navigationTarget, setRootNavigation, enterAnim, exitAnim)</ID>
    <ID>ComplexCondition:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$(reason != null &amp;&amp; reason != SignOutReason.ExpiredTimeout) || ( localUserId != null &amp;&amp; !privacyLockUtils.getHasUserEnabledPrivacyLock( localUserId ) )</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isEmpty() &amp;&amp; this.outOfNetworkBalance.familySpend.isEmpty()) &amp;&amp; (this.inNetworkBalance.individualSpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isEmpty() &amp;&amp; this.outOfNetworkBalance.familySpend.isEmpty()) &amp;&amp; (this.inNetworkBalance.individualSpend.isNotEmpty() || this.outOfNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.familySpend.isNotEmpty()) &amp;&amp; (this.inNetworkBalance.individualSpend.isEmpty() &amp;&amp; this.outOfNetworkBalance.individualSpend.isEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.familySpend.isNotEmpty()) &amp;&amp; (this.outOfNetworkBalance.individualSpend.isNotEmpty() || this.inNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isNotEmpty() || this.outOfNetworkBalance.familySpend.isNotEmpty()) &amp;&amp; (this.inNetworkBalance.individualSpend.isEmpty() || this.outOfNetworkBalance.individualSpend.isEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isNotEmpty() || this.outOfNetworkBalance.familySpend.isNotEmpty()) &amp;&amp; (this.inNetworkBalance.individualSpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$(this.inNetworkBalance.familySpend.isNotEmpty() || this.outOfNetworkBalance.familySpend.isNotEmpty()) &amp;&amp; (this.inNetworkBalance.individualSpend.isNotEmpty() || this.outOfNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>ComplexCondition:LiveBalancesViewData.kt$this.inNetworkBalance.familySpend.isNotEmpty() &amp;&amp; this.inNetworkBalance.individualSpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.familySpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.individualSpend.isNotEmpty()</ID>
    <ID>ComplexCondition:MainActivity.kt$MainActivity$destination.id == R.id.marketplaceWebFragment || destination.id == R.id.healthJourneyFragment || destination.id == R.id.triageMenuFragment || destination.id == R.id.triageSubMenuFragment</ID>
    <ID>ComplexCondition:MarketplaceWebFragment.kt$MarketplaceWebFragment$uri.host?.contains(Regex(MARKETPLACE_STAGE_HOST_REGEX)) == true || uri.host?.contains(Regex(MARKETPLACE_HOST_REGEX)) == true || uri.host?.lowercase(Locale.ROOT)?.contains("shopify") == true || uri.host?.lowercase(Locale.ROOT)?.contains("cashier.boldcommerce.com") == true || uri.host?.lowercase(Locale.ROOT)?.contains("boldapps.net") == true || uri.host?.lowercase(Locale.ROOT)?.contains("pay.google.com") == true || uri.host?.lowercase(Locale.ROOT)?.contains("checkout.us.shopifycs.com") == true</ID>
    <ID>ComplexCondition:PCHealthAuthenticator.kt$PCHealthAuthenticator$(reason != null &amp;&amp; reason != SignOutReason.ExpiredTimeout) || ( localUserId != null &amp;&amp; !privacyLockUtils.getHasUserEnabledPrivacyLock( localUserId ) )</ID>
    <ID>ComplexCondition:PcoSignUpActivity.kt$PcoSignUpActivity.&lt;no name provided>$url.startsWith(WebView.SCHEME_TEL) || url.startsWith("sms:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith(WebView.SCHEME_GEO) || url.startsWith("maps:") || url.contains("play.google.com", ignoreCase = true)</ID>
    <ID>ComplexCondition:WalletCardUtils.kt$url.startsWith(WebView.SCHEME_TEL) || url.startsWith(SCHEME_SMS) || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith(WebView.SCHEME_GEO) || url.startsWith(SCHEME_MAPS)</ID>
    <ID>ComplexCondition:WebBrowserFragment.kt$WebBrowserFragment.&lt;no name provided>$url.startsWith(WebView.SCHEME_TEL) || url.startsWith("sms:") || url.startsWith(WebView.SCHEME_MAILTO) || url.startsWith(WebView.SCHEME_GEO) || url.startsWith("maps:")</ID>
    <ID>ComplexMethod:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$public override fun fromJson(reader: JsonReader): AchievementDetail</ID>
    <ID>ComplexMethod:AddressJsonAdapter.kt$AddressJsonAdapter$public override fun fromJson(reader: JsonReader): Address</ID>
    <ID>ComplexMethod:AgentAvailabilityFragment.kt$AgentAvailabilityFragment$override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View?</ID>
    <ID>ComplexMethod:AlertJsonAdapter.kt$AlertJsonAdapter$public override fun fromJson(reader: JsonReader): Alert</ID>
    <ID>ComplexMethod:Alert_ActionJsonAdapter.kt$Alert_ActionJsonAdapter$public override fun fromJson(reader: JsonReader): Alert.Action</ID>
    <ID>ComplexMethod:AnswersJsonAdapter.kt$AnswersJsonAdapter$public override fun fromJson(reader: JsonReader): Answers</ID>
    <ID>ComplexMethod:AppLogJsonAdapter.kt$AppLogJsonAdapter$public override fun fromJson(reader: JsonReader): AppLog</ID>
    <ID>ComplexMethod:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): AppointmentAttributes</ID>
    <ID>ComplexMethod:ArticleJsonAdapter.kt$ArticleJsonAdapter$public override fun fromJson(reader: JsonReader): Article</ID>
    <ID>ComplexMethod:ArticleListJsonAdapter.kt$ArticleListJsonAdapter$public override fun fromJson(reader: JsonReader): ArticleList</ID>
    <ID>ComplexMethod:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentFrictionFragmentArgs</ID>
    <ID>ComplexMethod:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentsExitFragmentArgs</ID>
    <ID>ComplexMethod:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentsExitFragmentArgs</ID>
    <ID>ComplexMethod:BenefitCoverageJsonAdapter.kt$BenefitCoverageJsonAdapter$public override fun fromJson(reader: JsonReader): BenefitCoverage</ID>
    <ID>ComplexMethod:CTAJsonAdapter.kt$CTAJsonAdapter$public override fun fromJson(reader: JsonReader): CTA</ID>
    <ID>ComplexMethod:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChallengeHealthActivityItemResponse</ID>
    <ID>ComplexMethod:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChallengeItemResponse</ID>
    <ID>ComplexMethod:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChallengeResponse</ID>
    <ID>ComplexMethod:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$public override fun fromJson(reader: JsonReader): ChatProviderDetailItems</ID>
    <ID>ComplexMethod:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChatProviderResponse</ID>
    <ID>ComplexMethod:ChatTranscriptMessagesResponseJsonAdapter.kt$ChatTranscriptMessagesResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChatTranscriptMessagesResponse</ID>
    <ID>ComplexMethod:ChatTranscriptResponse_TranscriptJsonAdapter.kt$ChatTranscriptResponse_TranscriptJsonAdapter$public override fun fromJson(reader: JsonReader): ChatTranscriptResponse.Transcript</ID>
    <ID>ComplexMethod:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$public override fun fromJson(reader: JsonReader): ContentJson</ID>
    <ID>ComplexMethod:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$public override fun fromJson(reader: JsonReader): CovidHealthAssessmentInformation</ID>
    <ID>ComplexMethod:CovidHealthAssessmentResultJsonAdapter.kt$CovidHealthAssessmentResultJsonAdapter$public override fun fromJson(reader: JsonReader): CovidHealthAssessmentResult</ID>
    <ID>ComplexMethod:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): CreateAppointmentAttributes</ID>
    <ID>ComplexMethod:CreateAppointmentLocationJsonAdapter.kt$CreateAppointmentLocationJsonAdapter$public override fun fromJson(reader: JsonReader): CreateAppointmentLocation</ID>
    <ID>ComplexMethod:DateUtils.kt$DateUtils$fun differenceBetweenDate(start: Date?, end: Date?): String?</ID>
    <ID>ComplexMethod:DependentFormAdapter.kt$DependentFormAdapter$fun validateFields(): Boolean</ID>
    <ID>ComplexMethod:DependentFormAdapter.kt$DependentFormAdapter$private fun updateShownDynamicFields()</ID>
    <ID>ComplexMethod:DependentJsonAdapter.kt$DependentJsonAdapter$public override fun fromJson(reader: JsonReader): Dependent</ID>
    <ID>ComplexMethod:DependentsActivity.kt$DependentsActivity$private fun observeData()</ID>
    <ID>ComplexMethod:DependentsViewModel.kt$DependentsViewModel$private fun getDependentRelationshipSchema( eventType: DependentUiEventType, dependent: Dependent? = null )</ID>
    <ID>ComplexMethod:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$public override fun fromJson(reader: JsonReader): EmptyState</ID>
    <ID>ComplexMethod:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$public override fun fromJson(reader: JsonReader): Environment</ID>
    <ID>ComplexMethod:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter$public override fun fromJson(reader: JsonReader): ExitScreen</ID>
    <ID>ComplexMethod:FileJsonAdapter.kt$FileJsonAdapter$public override fun fromJson(reader: JsonReader): File</ID>
    <ID>ComplexMethod:FormJsonAdapter.kt$FormJsonAdapter$public override fun fromJson(reader: JsonReader): Form</ID>
    <ID>ComplexMethod:FullScreenContentJsonAdapter.kt$FullScreenContentJsonAdapter$public override fun fromJson(reader: JsonReader): FullScreenContent</ID>
    <ID>ComplexMethod:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$public override fun fromJson(reader: JsonReader): GenericCard</ID>
    <ID>ComplexMethod:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$public override fun fromJson(reader: JsonReader): HealthJourneyItemCompletionScreen</ID>
    <ID>ComplexMethod:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$public override fun fromJson(reader: JsonReader): HealthJourneyItemDetail</ID>
    <ID>ComplexMethod:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$public override fun fromJson(reader: JsonReader): HealthJourneyItem</ID>
    <ID>ComplexMethod:HealthJourneyItemScreen.kt$@Composable private fun PillStatus(modifier: Modifier = Modifier, healthJourneyItem: HealthJourneyItemDetail)</ID>
    <ID>ComplexMethod:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$public override fun fromJson(reader: JsonReader): HealthNeed</ID>
    <ID>ComplexMethod:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$public override fun fromJson(reader: JsonReader): HealthNeedRecommendation</ID>
    <ID>ComplexMethod:HealthProfileController.kt$HealthProfileController$override fun buildModels()</ID>
    <ID>ComplexMethod:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$public override fun fromJson(reader: JsonReader): HealthProfile</ID>
    <ID>ComplexMethod:HealthProgramDetailsFragment.kt$@Composable private fun HealthProgramScreen( modifier: Modifier = Modifier, state: State&lt;HealthProgramDetails>?, onCloseClick: () -> Unit, actionLoading: Boolean, onActionClick: (HealthProgramDetails) -> Unit, onLoadingError: () -> Unit, showAchievements: Boolean, onCobrandingButtonClick: (HealthProgramDetails, Modal) -> Unit, onRemoveClick: (HealthProgramDetails) -> Unit )</ID>
    <ID>ComplexMethod:HealthProgramDetailsFragment.kt$HealthProgramDetailsFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>ComplexMethod:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$public override fun fromJson(reader: JsonReader): HealthProgramDetails</ID>
    <ID>ComplexMethod:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$public override fun fromJson(reader: JsonReader): HealthProgram</ID>
    <ID>ComplexMethod:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$public override fun fromJson(reader: JsonReader): HealthPrograms</ID>
    <ID>ComplexMethod:HealthSolutionCategoryJsonAdapter.kt$HealthSolutionCategoryJsonAdapter$public override fun fromJson(reader: JsonReader): HealthSolutionCategory</ID>
    <ID>ComplexMethod:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$public override fun fromJson(reader: JsonReader): HelpfulTip</ID>
    <ID>ComplexMethod:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$public override fun fromJson(reader: JsonReader): HomeBanner</ID>
    <ID>ComplexMethod:HomeController.kt$HomeController$private fun buildBannerModel(id: String?)</ID>
    <ID>ComplexMethod:HomeFragment.kt$HomeFragment$private fun setupObservers()</ID>
    <ID>ComplexMethod:HomeViewModel.kt$HomeViewModel$private fun populateHomeLayout( location: Location?, homeLayoutConfig: HomeLayout )</ID>
    <ID>ComplexMethod:HoursPricingJsonAdapter.kt$HoursPricingJsonAdapter$public override fun fromJson(reader: JsonReader): HoursPricing</ID>
    <ID>ComplexMethod:IdentityJsonAdapter.kt$IdentityJsonAdapter$public override fun fromJson(reader: JsonReader): Identity</ID>
    <ID>ComplexMethod:ImportedUserReadingJsonAdapter.kt$ImportedUserReadingJsonAdapter$public override fun fromJson(reader: JsonReader): ImportedUserReading</ID>
    <ID>ComplexMethod:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$public override fun fromJson(reader: JsonReader): InputAnswer</ID>
    <ID>ComplexMethod:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$public override fun fromJson(reader: JsonReader): InsightCard</ID>
    <ID>ComplexMethod:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$public override fun fromJson(reader: JsonReader): Insurance</ID>
    <ID>ComplexMethod:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter$public override fun fromJson(reader: JsonReader): JsonApiError</ID>
    <ID>ComplexMethod:LeagueNavigation.kt$LeagueNavigation$override fun handleNavigation( activity: Activity, navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController? ): Boolean</ID>
    <ID>ComplexMethod:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$public override fun fromJson(reader: JsonReader): LifemarketMerchList</ID>
    <ID>ComplexMethod:LiveBalancesViewData.kt$private fun getNetworksType(userLiveBalances: UserLiveBalances): LiveBalanceDataNetworkTypes</ID>
    <ID>ComplexMethod:MainActivity.kt$MainActivity$override fun handleNavigation( navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int? ): Boolean</ID>
    <ID>ComplexMethod:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter$public override fun fromJson(reader: JsonReader): MaplePostConsults</ID>
    <ID>ComplexMethod:MaplePostConsultsRowJsonAdapter.kt$MaplePostConsultsRowJsonAdapter$public override fun fromJson(reader: JsonReader): MaplePostConsultsRow</ID>
    <ID>ComplexMethod:MemberJsonAdapter.kt$MemberJsonAdapter$public override fun fromJson(reader: JsonReader): Member</ID>
    <ID>ComplexMethod:MilestoneJsonAdapter.kt$MilestoneJsonAdapter$public override fun fromJson(reader: JsonReader): Milestone</ID>
    <ID>ComplexMethod:ModuleJsonAdapter.kt$ModuleJsonAdapter$public override fun fromJson(reader: JsonReader): Module</ID>
    <ID>ComplexMethod:MultipleChoiceAnswerJsonAdapter.kt$MultipleChoiceAnswerJsonAdapter$public override fun fromJson(reader: JsonReader): MultipleChoiceAnswer</ID>
    <ID>ComplexMethod:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$public override fun fromJson(reader: JsonReader): MultipleSelectionAnswer</ID>
    <ID>ComplexMethod:NotificationJsonAdapter.kt$NotificationJsonAdapter$public override fun fromJson(reader: JsonReader): Notification</ID>
    <ID>ComplexMethod:OnboardingPageJsonAdapter.kt$OnboardingPageJsonAdapter$public override fun fromJson(reader: JsonReader): OnboardingPage</ID>
    <ID>ComplexMethod:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$public override fun fromJson(reader: JsonReader): OutcomesSuggestions</ID>
    <ID>ComplexMethod:PCHPolicyJsonAdapter.kt$PCHPolicyJsonAdapter$public override fun fromJson(reader: JsonReader): PCHPolicy</ID>
    <ID>ComplexMethod:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): PatientAttributes</ID>
    <ID>ComplexMethod:PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter.kt$PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter$public override fun fromJson(reader: JsonReader): PcoAccountUtils.PcHealthBiometricAuthInfo</ID>
    <ID>ComplexMethod:PersonalInfoFragment.kt$PersonalInfoFragment$private fun setOnTextChangedListeners()</ID>
    <ID>ComplexMethod:PersonalInfoFragment.kt$PersonalInfoFragment$private fun setupObservables()</ID>
    <ID>ComplexMethod:PersonalInfoViewModel.kt$PersonalInfoViewModel$// If any of the below checks are false, the isNotModified will return false, // indicating that it is modified fun isModified(): Boolean</ID>
    <ID>ComplexMethod:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun isDataValid(): Boolean</ID>
    <ID>ComplexMethod:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun saveData()</ID>
    <ID>ComplexMethod:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$public override fun fromJson(reader: JsonReader): PersonalStoreCreditBalance</ID>
    <ID>ComplexMethod:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): PractitionerAttributes</ID>
    <ID>ComplexMethod:PulseCheckJsonAdapter.kt$PulseCheckJsonAdapter$public override fun fromJson(reader: JsonReader): PulseCheck</ID>
    <ID>ComplexMethod:QuestionJsonAdapter.kt$QuestionJsonAdapter$public override fun fromJson(reader: JsonReader): Question</ID>
    <ID>ComplexMethod:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$public override fun fromJson(reader: JsonReader): QuickActionDetailItem</ID>
    <ID>ComplexMethod:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$public override fun fromJson(reader: JsonReader): QuickActionMenuItem</ID>
    <ID>ComplexMethod:ReadingJsonAdapter.kt$ReadingJsonAdapter$public override fun fromJson(reader: JsonReader): Reading</ID>
    <ID>ComplexMethod:RecommendationJsonAdapter.kt$RecommendationJsonAdapter$public override fun fromJson(reader: JsonReader): Recommendation</ID>
    <ID>ComplexMethod:RewardsTransactionJsonAdapter.kt$RewardsTransactionJsonAdapter$public override fun fromJson(reader: JsonReader): RewardsTransaction</ID>
    <ID>ComplexMethod:SelectPrescriptionsScreen.kt$@Preview @Composable fun PreviewSelectPrescriptionsScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>ComplexMethod:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): ServiceAttributes</ID>
    <ID>ComplexMethod:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$private fun setupObservables()</ID>
    <ID>ComplexMethod:SfChatTranscriptJsonAdapter.kt$SfChatTranscriptJsonAdapter$public override fun fromJson(reader: JsonReader): SfChatTranscript</ID>
    <ID>ComplexMethod:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$public override fun fromJson(reader: JsonReader): ShopifyProduct</ID>
    <ID>ComplexMethod:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): SpecialtyAttributes</ID>
    <ID>ComplexMethod:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): SpecialtyLocationsAttributes</ID>
    <ID>ComplexMethod:StackSelectQuestion.kt$StackSelectQuestion$private fun optionSelected(item: Option, option: OptionFillParent)</ID>
    <ID>ComplexMethod:StatusCountsJsonAdapter.kt$StatusCountsJsonAdapter$public override fun fromJson(reader: JsonReader): StatusCounts</ID>
    <ID>ComplexMethod:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>ComplexMethod:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter$public override fun fromJson(reader: JsonReader): SuccessScreen</ID>
    <ID>ComplexMethod:SysJsonAdapter.kt$SysJsonAdapter$public override fun fromJson(reader: JsonReader): Sys</ID>
    <ID>ComplexMethod:ThirdPartyDetailsJsonAdapter.kt$ThirdPartyDetailsJsonAdapter$public override fun fromJson(reader: JsonReader): ThirdPartyDetails</ID>
    <ID>ComplexMethod:TopicJsonAdapter.kt$TopicJsonAdapter$public override fun fromJson(reader: JsonReader): Topic</ID>
    <ID>ComplexMethod:UserChallengeRequestJsonAdapter.kt$UserChallengeRequestJsonAdapter$public override fun fromJson(reader: JsonReader): UserChallengeRequest</ID>
    <ID>ComplexMethod:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$public override fun fromJson(reader: JsonReader): UserConfig</ID>
    <ID>ComplexMethod:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$public override fun fromJson(reader: JsonReader): UserDependent</ID>
    <ID>ComplexMethod:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$public override fun fromJson(reader: JsonReader): UserDocument</ID>
    <ID>ComplexMethod:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$public override fun fromJson(reader: JsonReader): UserFlags</ID>
    <ID>ComplexMethod:UserJsonAdapter.kt$UserJsonAdapter$public override fun fromJson(reader: JsonReader): User</ID>
    <ID>ComplexMethod:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$public override fun fromJson(reader: JsonReader): UserReading</ID>
    <ID>ComplexMethod:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter$public override fun fromJson(reader: JsonReader): ValidicUser</ID>
    <ID>ComplexMethod:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter$public override fun fromJson(reader: JsonReader): VerifiableActivityProgressDetail</ID>
    <ID>ComplexMethod:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$public override fun fromJson(reader: JsonReader): WalletCardAction</ID>
    <ID>ComplexMethod:WalletCardDetailController.kt$WalletCardDetailController$private fun getPolicyTableRows(card: GenericCard)</ID>
    <ID>ComplexMethod:WalletJsonAdapter.kt$WalletJsonAdapter$public override fun fromJson(reader: JsonReader): Wallet</ID>
    <ID>ComplexMethod:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$public override fun fromJson(reader: JsonReader): WearableDevice</ID>
    <ID>ComplexMethod:WellnessStationAPI_GetAddedReadingsJsonAdapter.kt$WellnessStationAPI_GetAddedReadingsJsonAdapter$public override fun fromJson(reader: JsonReader): WellnessStationAPI.GetAddedReadings</ID>
    <ID>ComplexMethod:WellnessStationAPI_GetReadingsJsonAdapter.kt$WellnessStationAPI_GetReadingsJsonAdapter$public override fun fromJson(reader: JsonReader): WellnessStationAPI.GetReadings</ID>
    <ID>ComplexMethod:WellnessStationAPI_RemoveReadingsJsonAdapter.kt$WellnessStationAPI_RemoveReadingsJsonAdapter$public override fun fromJson(reader: JsonReader): WellnessStationAPI.RemoveReadings</ID>
    <ID>ConstructorParameterNaming:HealthProfile.kt$HealthProfile$@Json(name = "last_updated_date") val LastUpdatedDate: Date? = null</ID>
    <ID>EmptyCatchBlock:InputFilterMinMax.kt$InputFilterMinMax${ }</ID>
    <ID>EmptyCatchBlock:MainNavHostFragment.kt$MainNavHostFragment${ }</ID>
    <ID>EmptyCatchBlock:ValueQuestion.kt$ValueQuestion${ }</ID>
    <ID>EmptyDefaultConstructor:AccountDeletionRequest.kt$AccountDeletionRequest$()</ID>
    <ID>EmptyDefaultConstructor:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreNumberViewModel$()</ID>
    <ID>EmptyDefaultConstructor:PreChatFormViewModel.kt$PreChatFormViewModel$()</ID>
    <ID>EmptyDefaultConstructor:SelectPronounViewModel.kt$SelectPronounViewModel$()</ID>
    <ID>EmptyFunctionBlock:AgentChatPresenter.kt$AgentChatPresenter${ }</ID>
    <ID>EmptyFunctionBlock:Auth0Authenticator.kt$Auth0Authenticator${ }</ID>
    <ID>EmptyFunctionBlock:ChatInput.kt$ChatInput.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:CreateProfileViewModel.kt$CreateProfileViewModel${ }</ID>
    <ID>EmptyFunctionBlock:DependentFormAdapter.kt$DependentFormAdapter.SpinnerViewHolder.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:DotsIndexIndicator.kt$DotsIndexIndicator${ }</ID>
    <ID>EmptyFunctionBlock:DropDown.kt$DropDown.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreNumberViewModel${ }</ID>
    <ID>EmptyFunctionBlock:GenesisPresenterImageLoader.kt$GenesisPresenterImageLoader${}</ID>
    <ID>EmptyFunctionBlock:HeaderController.kt$HeaderController${ }</ID>
    <ID>EmptyFunctionBlock:HomeFragment.kt$HomeFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:InsightDetailsFragment.kt$InsightDetailsFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:LaunchActivity.kt$LaunchActivity${ }</ID>
    <ID>EmptyFunctionBlock:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator${ }</ID>
    <ID>EmptyFunctionBlock:LineChartView.kt$LineChartView${ }</ID>
    <ID>EmptyFunctionBlock:MainActivity.kt$MainActivity${ }</ID>
    <ID>EmptyFunctionBlock:NotificationController.kt$NotificationController${ }</ID>
    <ID>EmptyFunctionBlock:QRCodeViewModel.kt$QRCodeViewModel.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:RootActivity.kt$RootActivity${ }</ID>
    <ID>EmptyFunctionBlock:RootFragment.kt$RootFragment${ }</ID>
    <ID>EmptyFunctionBlock:SettingsFragment.kt$SettingsFragment${ }</ID>
    <ID>EmptyFunctionBlock:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist${ }</ID>
    <ID>EmptyFunctionBlock:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague${ }</ID>
    <ID>EmptyFunctionBlock:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth${ }</ID>
    <ID>EmptyFunctionBlock:StackSelectQuestion.kt$StackSelectQuestion.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:VaccineFormInterfaceTest.kt$VaccineFormInterfaceTest.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:WelcomeFragment.kt$WelcomeFragment${ }</ID>
    <ID>EmptyKtFile:DigitalPharmacyScreen.kt$.DigitalPharmacyScreen.kt</ID>
    <ID>EmptyWhileBlock:LoginWelcomeBackFragment.kt$LoginWelcomeBackFragment${ }</ID>
    <ID>EmptyWhileBlock:MainActivity.kt$MainActivity${ }</ID>
    <ID>EndOfSentenceFormat:API.kt$API : Listener</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * Contains pending requests awaiting a response */ internal val pendingRequests = hashMapOf&lt;String, PendingRequest>()</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * Contains the timers for the pending requests */ internal val pendingRequestTimers = hashMapOf&lt;String, Timer>()</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * Holds connection listeners */ internal val connectionListeners = mutableListOf&lt;ConnectionListener>()</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * Messages queued to send while we're authenticating */ internal val messageQueue: Queue&lt;String> = LinkedList()</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * The web socket that communicates with the server */ internal var webSocket: WebSocket? = null</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * Unsolicited server errors sent in the socket can be listened to here */ val serverErrorListeners: MutableSet&lt;(ServerError) -> Unit> = mutableSetOf()</ID>
    <ID>EndOfSentenceFormat:API.kt$API$/** * Used to check whether the client has been authenticated */ var isAuthenticated = false</ID>
    <ID>EndOfSentenceFormat:API.kt$API$ConnectionListener</ID>
    <ID>EndOfSentenceFormat:API.kt$API$MessageType</ID>
    <ID>EndOfSentenceFormat:API.kt$API.Companion$/** * API Version */ const val API_VERSION = 7</ID>
    <ID>EndOfSentenceFormat:API.kt$API.Companion$/** * Set the timeout limit for requests to 60 seconds */ internal const val REQUEST_TIMEOUT: Long = 60 * 1000</ID>
    <ID>EndOfSentenceFormat:API.kt$API.ConnectionListener$ fun onReconnected()</ID>
    <ID>EndOfSentenceFormat:API.kt$API.MessageListener$ @Throws(Exception::class) fun handleMessagesWithoutCallback(messageType: String, info: JSONObject)</ID>
    <ID>EndOfSentenceFormat:API.kt$API.MessageType.Companion$ fun getMessageType(messageType: String): MessageType?</ID>
    <ID>EndOfSentenceFormat:API_Auth.kt$ fun API.requestPhoneNumberChange( phoneCountryCode: Int, phoneNumber: String, voiceCall: Boolean = false, callback: RequestCallback&lt;Empty> )</ID>
    <ID>EndOfSentenceFormat:API_Auth.kt$ internal fun API.requestDeviceAuth( phoneCountryCode: Int? = null, phoneNumber: String? = null, voiceCall: Boolean = false, callback: RequestCallback&lt;Empty> )</ID>
    <ID>EndOfSentenceFormat:API_Auth.kt$ internal fun API.setUserCredentials( email: String, password: String, signInMethod: SignInMethod, tenantId: String, callback: RequestCallback&lt;Credential.UserCredential> )</ID>
    <ID>EndOfSentenceFormat:API_Auth.kt$ suspend fun API.authenticateJWT(jwt: String): Outcome&lt;Empty></ID>
    <ID>EndOfSentenceFormat:API_Auth.kt$ suspend fun API.authorizeDevice( deviceAuthorizationCode: String ): Outcome&lt;AuthInfo></ID>
    <ID>EndOfSentenceFormat:API_Auth.kt$ suspend fun API.confirmPhoneNumberChange( smsCode: String, ): Outcome&lt;AuthInfo></ID>
    <ID>EndOfSentenceFormat:API_Authentication.kt$ fun API.onAuthenticated()</ID>
    <ID>EndOfSentenceFormat:API_Authentication.kt$ suspend fun API.configureConnection(): Outcome&lt;Empty></ID>
    <ID>EndOfSentenceFormat:API_Claim.kt$ fun API.uploadClaim(claim: Claim, callback: RequestCallback&lt;ClaimSubmitted>)</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ @Synchronized fun API.addConnectionListener(listener: API.ConnectionListener)</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ @Synchronized fun API.onNetworkChanged(isAlive: Boolean)</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ @Synchronized fun API.removeConnectionListener(listener: API.ConnectionListener)</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ fun API.connect(locale: Locale)</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ fun API.disconnect()</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ fun API.reconnect()</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ fun API.updateLocale(locale: Locale)</ID>
    <ID>EndOfSentenceFormat:API_Connection.kt$ internal fun API.updateWebSocketEndpoint(webSocketEndpoint: String)</ID>
    <ID>EndOfSentenceFormat:API_JWT.kt$ fun API.authenticateJWT(jwt: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>EndOfSentenceFormat:API_Messages.kt$ internal fun API.handleMessage(message: String)</ID>
    <ID>EndOfSentenceFormat:API_Messages.kt$ private fun API.handleCommonMessageTypes( messageId: String, messageType: API.MessageType, info: JSONObject ): Boolean</ID>
    <ID>EndOfSentenceFormat:API_Messages.kt$ private fun API.handleUnauthorized( messageId: String, messageType: API.MessageType, json: JSONObject )</ID>
    <ID>EndOfSentenceFormat:API_Messages.kt$ private fun invokeCallback( messageType: String, json: JSONObject, trace: RemoteTrace?, log: Logger, jsonAdapter: JsonAdapter, callback: RequestCallback&lt;*> )</ID>
    <ID>EndOfSentenceFormat:API_SendData.kt$ fun API.clearMessageQueue()</ID>
    <ID>EndOfSentenceFormat:API_SendData.kt$ fun API.sendAndReceiveData( json: JSONObject, callback: RequestCallback&lt;*> )</ID>
    <ID>EndOfSentenceFormat:API_SendData.kt$ fun API.sendAndReceiveData( json: JSONObject, requiresAuthentication: Boolean, callback: RequestCallback&lt;*> )</ID>
    <ID>EndOfSentenceFormat:API_SendData.kt$ fun API.sendAndReceiveData( json: JSONObject, responseMessageType: String? = null, requiresAuthentication: Boolean = true, callback: RequestCallback&lt;*> )</ID>
    <ID>EndOfSentenceFormat:API_SendData.kt$ fun API.sendData( jsonString: String, isSensitive: Boolean = false, queueOnDisconnect: Boolean = true, requiresAuthentication: Boolean = true )</ID>
    <ID>EndOfSentenceFormat:AchievementsRepository.kt$AchievementsRepository</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$ internal fun AnalyticsTracker.trackActivityRemove(healthJourneyItem: HealthJourneyItemDetail)</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$ internal fun AnalyticsTracker.trackCloseProgressConfirmation(healthJourneyItem: HealthJourneyItemDetail)</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$ internal fun AnalyticsTracker.trackMMSEditActivityProgress( healthJourneyItem: HealthJourneyItemDetail, updatedProgress: Int )</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$ internal fun AnalyticsTracker.trackSaveProgressConfirmation(healthJourneyItem: HealthJourneyItemDetail)</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$ internal fun AnalyticsTracker.viewEditCurrentProgressDialog()</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$ internal fun AnalyticsTracker.viewSaveYourProgressDialog()</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$HealthJourneyAnalytics.Pages$/** * String value for showing the edit progress dialog for manual multi-step */ const val EDIT_PROGRESS_DIALOG_VIEWED = "Health Journey Activities Goal Progress"</ID>
    <ID>EndOfSentenceFormat:AnalyticsTracker_HealthJourney.kt$HealthJourneyAnalytics.Pages$/** * String value for showing the save your progress for the day dialog (manual multi-step */ const val SAVE_PROGRESS_DIALOG_VIEWED = "Health Journey Activities Goal Complete Confirmation"</ID>
    <ID>EndOfSentenceFormat:AppLoggingRepositoryImpl.kt$AppLoggingRepositoryImpl$ override fun shouldUpload(remoteEnabledSeverityLevels: String, severityLevel: String)</ID>
    <ID>EndOfSentenceFormat:AppLoggingRepositoryImpl.kt$AppLoggingRepositoryImpl$/** * This check is necessary to avoid overloading the database */ val cacheLogSize = cacheDao?.getLogsCount() ?: DEFAULT_LOGS_COUNT</ID>
    <ID>EndOfSentenceFormat:ApplicationModule.kt$ApplicationModule</ID>
    <ID>EndOfSentenceFormat:AssessmentContract.kt$ViewState</ID>
    <ID>EndOfSentenceFormat:AssessmentLoadingFragment.kt$AssessmentLoadingFragment : RootFragment</ID>
    <ID>EndOfSentenceFormat:AssessmentQuestionFragment.kt$AssessmentQuestionFragment$/**we need this inorder to avoid module being passed via bundles**/ private val parentViewModel: AssessmentViewModel by koinNavGraphViewModel(R.id.assessment_nav_graph)</ID>
    <ID>EndOfSentenceFormat:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$ fun initializeModule( getViewIndexForQuestion: (String) -> Int )</ID>
    <ID>EndOfSentenceFormat:AssessmentViewModel.kt$AssessmentViewModel : ViewModel</ID>
    <ID>EndOfSentenceFormat:AssessmentViewModel.kt$AssessmentViewModel$ fun storeInitialData(moduleId: String?, retakeAssessment: Boolean?, campaignId: String, activityId: String)</ID>
    <ID>EndOfSentenceFormat:AssessmentViewModel.kt$AssessmentViewModel$AssessmentFlows</ID>
    <ID>EndOfSentenceFormat:Auth0Authenticator.kt$Auth0Authenticator : LeagueSocketAPIAuthenticatorContentAPIAuthenticatorLeagueRestAPIAuthenticator</ID>
    <ID>EndOfSentenceFormat:Auth0Authenticator.kt$Auth0Authenticator$ override suspend fun authenticateUsingBiometrics( activity: FragmentActivity, promptTitle: String ): Boolean</ID>
    <ID>EndOfSentenceFormat:Auth0Authenticator.kt$UserCredentials</ID>
    <ID>EndOfSentenceFormat:Auth0BrowserSdkAuthenticator.kt$Auth0BrowserSdkAuthenticator</ID>
    <ID>EndOfSentenceFormat:Auth0BrowserSdkAuthenticator.kt$Auth0BrowserSdkAuthenticator$/** * [isLoggedIn] is true if the user is logged in */ val isLoggedIn: Boolean</ID>
    <ID>EndOfSentenceFormat:Auth0BrowserSdkAuthenticatorImpl.kt$Auth0BrowserSdkAuthenticatorImpl : Auth0AuthenticatorAuth0BrowserSdkAuthenticator</ID>
    <ID>EndOfSentenceFormat:AuthInfo.kt$AuthInfo</ID>
    <ID>EndOfSentenceFormat:BarcodeView.kt$BarcodeView : ConstraintLayout</ID>
    <ID>EndOfSentenceFormat:BuildInfoUtils.kt$BuildInfoUtils</ID>
    <ID>EndOfSentenceFormat:CategorizedActionRowsList.kt$CategorizedActionRowsList : LinearLayout</ID>
    <ID>EndOfSentenceFormat:CodeScanner.kt$CodeScanner : FrameLayout</ID>
    <ID>EndOfSentenceFormat:CompletionMethod.kt$CompletionMethod$CounterMultiStep : CompletionMethod</ID>
    <ID>EndOfSentenceFormat:ComponentBrowserScreen.kt$ // Remove once production ready @Composable fun ComponentBrowserScreen()</ID>
    <ID>EndOfSentenceFormat:CompositeCache.kt$CompositeCache : Cache</ID>
    <ID>EndOfSentenceFormat:Content.kt$Content</ID>
    <ID>EndOfSentenceFormat:Content.kt$Content$/** * Content ID as received from server */ var contentId: String?</ID>
    <ID>EndOfSentenceFormat:Content.kt$Content$/** * Content type */ var contentType: String?</ID>
    <ID>EndOfSentenceFormat:Content.kt$Content$/** * Path of the image */ var imagePath: String?</ID>
    <ID>EndOfSentenceFormat:ContentAPI.kt$ContentAPI$ fun getContentUrl(contentId: String?): String</ID>
    <ID>EndOfSentenceFormat:ContentAPI.kt$ContentAPI$ internal fun getContentSaveUrl(): String</ID>
    <ID>EndOfSentenceFormat:ContentAPI.kt$ContentAPI$/** * HTTP Client */ val httpClient: OkHttpClient by lazy { // Cache OkHttpClient to avoid allocating multiple instances. val builder = OkHttpClient() .newBuilder() .authenticator(this) .addInterceptor { chain -> // only authenticate calls to the content server if (isContentServerRequest(chain.request())) { chain.proceed(authenticator.buildNewAuthenticatedRequest(chain.request())) } else { chain.proceed(chain.request()) } } return@lazy builder.build() }</ID>
    <ID>EndOfSentenceFormat:ContentAPI.kt$ContentAPI$ContentType</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Download.kt$ fun ContentAPI.downloadContent( contentId: String, destinationFileName: String, cacheDir: File, completion: RequestCallback&lt;File> )</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Download.kt$ private fun ContentAPI.saveAndReturnFile( filesDir: File, fileName: String, responseBody: ResponseBody? ): File?</ID>
    <ID>EndOfSentenceFormat:ContentAPI_OpenContent.kt$ fun ContentAPI.downloadAndOpenContent( activity: Activity, contentId: String, contentFileName: String )</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ @Throws(IOException::class) private fun downscaleImage(imageFilePath: String, reqWidth: Int)</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ fun ContentAPI.uploadContent( contentList: List&lt;Content>, contentType: ContentAPI.ContentType, callback: RequestCallback&lt;SparseArray&lt;String>> )</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ fun ContentAPI.uploadContent( imageFilePath: String, contentType: ContentAPI.ContentType? = null, callback: RequestCallback&lt;JSONObject> )</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ fun ContentAPI.uploadContent( imageFilePath: String, contentType: String? = null, callback: RequestCallback&lt;JSONObject> )</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ private fun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int): Int</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ private fun decodeSampledBitmap(imageFilePath: String, reqWidth: Int): Bitmap</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ private fun getTotalFileSize(contentList: List&lt;Content>): Long</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$ private fun getUploadDetails(contentList: List&lt;Content>, startUpload: Long): String</ID>
    <ID>EndOfSentenceFormat:ContentAPI_Upload.kt$UploadContentException : Exception</ID>
    <ID>EndOfSentenceFormat:ContextExtension.kt$ fun Context.getColorStateListFromAttr( @AttrRes pressed: Int, @AttrRes default: Int )</ID>
    <ID>EndOfSentenceFormat:ContextExtension.kt$ fun densityToPixel(dp: Float): Float</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$Core$/** * Helper class that standardizes getting info about the current build and user's device */ @JvmStatic val buildInfoUtils: BuildInfoUtils get() = configuration.koinApplication.koin.get()</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$CoreSettings$/** * Settings used for remote logging, if this is null remote logging will be disabled */ val remoteLogSettings: RemoteLogSettings? = null</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$CoreSettings$/** * The default host name to use when opening a webview */ val appHost: String</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$RemoteLogSettings</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$RemoteLogSettings$/** * App name used for remote logging */ val applicationName: String = ""</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$RemoteLogSettings$/** * Enabled severity levels for remote log filtering, expects a comma delimited list * Valid values are: "DEFAULT,DEBUG,INFO,NOTICE,WARNING,ERROR,CRITICAL,ALERT,EMERGENCY" */ val enabledSeverityLevelsProvider: () -> String</ID>
    <ID>EndOfSentenceFormat:CoreConfiguration.kt$RemoteLogSettings$/** * This is the maximum number of logs that can be cached */ val maxCacheSize: Int</ID>
    <ID>EndOfSentenceFormat:CoreConfigurationExtension.kt$ @Suppress("LongMethod", "LongParameterList") fun Core.initialize( applicationContext: Context, tenantId: String, applicationId: String, applicationVersionName: String, environment: Environment, // Make this more user friendly? appWebHost: String, isDebug: Boolean = false, logDelegate: ((priority: Int, tag: String, message: String, th: Throwable?) -> Unit)? = null, remoteLogSettings: RemoteLogSettings? = null, analyticsTracker: AnalyticsTracker? = null ): LeagueCommonServices</ID>
    <ID>EndOfSentenceFormat:CoreNavigation.kt$CoreNavigation$ fun navigateToDeeplink( activity: Activity, url: String, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null, navOptions: NavOptions? = null ): Boolean</ID>
    <ID>EndOfSentenceFormat:CreateAppointmentEventsUseCase.kt$CreateAppointmentEventsUseCase</ID>
    <ID>EndOfSentenceFormat:CreateAppointmentEventsUseCaseTest.kt$CreateAppointmentEventsUseCaseTest$ @Test fun `createAppointment successful - payment required - Payment Form returned`()</ID>
    <ID>EndOfSentenceFormat:CreateAppointmentUseCase.kt$CreateAppointmentUseCase</ID>
    <ID>EndOfSentenceFormat:CurrencyUtil.kt$CurrencyUtil$ @JvmStatic fun formatCurrency( locale: Locale, amount: Double, currency: String ): String</ID>
    <ID>EndOfSentenceFormat:DateSelectionUseCase.kt$Date</ID>
    <ID>EndOfSentenceFormat:DateSelectionUseCase.kt$DateToLocalDateUseCase</ID>
    <ID>EndOfSentenceFormat:DateUtils.kt$DateUtils$ @JvmStatic fun formatDate12HrMinuteSecond( locale: Locale, date: Date?, useUTC: Boolean = false ): String</ID>
    <ID>EndOfSentenceFormat:DateUtils.kt$DateUtils$ @JvmStatic fun formatDatePolicy(locale: Locale, date: Date?, useUTC: Boolean = false): String</ID>
    <ID>EndOfSentenceFormat:DateUtils.kt$DateUtils$ @JvmStatic fun formatDatePolicyFullMonth(locale: Locale, date: Date?, useUTC: Boolean = false): String</ID>
    <ID>EndOfSentenceFormat:DependentInviteSuccessFragment.kt$ private fun String.createEmailString( email: String, secondaryColor: Color ): AnnotatedString</ID>
    <ID>EndOfSentenceFormat:EmptyStateBanner.kt$EmptyStateBanner : ConstraintLayout</ID>
    <ID>EndOfSentenceFormat:ExpiredSession.kt$ExpiredSession</ID>
    <ID>EndOfSentenceFormat:FeatureFlagsRepository.kt$FeatureFlagsRepository$ fun &lt;T> save(flag: FeatureFlag&lt;T>, value: T)</ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ fun &lt;T, R> Flow&lt;List&lt;T>>.mapEach(callback: (T) -> R): Flow&lt;List&lt;R>></ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ fun &lt;T, R> Flow&lt;Outcome&lt;T>>.flatMapSuccess(transform: (T) -> Flow&lt;Outcome&lt;R>>): Flow&lt;Outcome&lt;R>></ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ fun &lt;T1, T2, R> combineSuccess( flow1: Flow&lt;Outcome&lt;T1>>, flow2: Flow&lt;Outcome&lt;T2>>, transform: suspend (T1, T2) -> R ): Flow&lt;Outcome&lt;R>></ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ fun &lt;T> Flow&lt;Outcome&lt;T>>.state(): Flow&lt;State&lt;T>></ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ fun &lt;T> Flow&lt;T>.bindLifecycle(stateFlow: MutableStateFlow&lt;Boolean>)</ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ fun &lt;T> Flow&lt;T>.debug(tag: String = "FlowDebug", logDelegate: LogDelegate = Log.logDelegate): Flow&lt;T></ID>
    <ID>EndOfSentenceFormat:FlowExtension.kt$ inline fun &lt;T, reified R> Flow&lt;Outcome&lt;T>>.asStateIn( scope: CoroutineScope, crossinline onSuccess: (T) -> R ): StateFlow&lt;State&lt;R>></ID>
    <ID>EndOfSentenceFormat:FullInformationalBanner.kt$FullInformationalBanner : ConstraintLayout</ID>
    <ID>EndOfSentenceFormat:GenderIdentity.kt$GenderIdentity</ID>
    <ID>EndOfSentenceFormat:GenesisButton.kt$ButtonStyle</ID>
    <ID>EndOfSentenceFormat:GenesisCalendarView.kt$ @Composable @ExperimentalGenesisCalendarApi @OptIn(ExperimentalPagerApi::class) fun GenesisCalendarView( modifier: Modifier = Modifier, calendarMonthModifier: Modifier = Modifier, minDate: Date, maxDate: Date, isSelected: (Date) -> Boolean, isEnabled: (Date) -> Boolean, dateSelected: (Date, Boolean) -> Unit, pagerState: PagerState = rememberPagerState(), )</ID>
    <ID>EndOfSentenceFormat:GenesisEmptyStateWidget.kt$ @Composable fun GenesisEmptyStateContentWidget( modifier: Modifier = Modifier, title: String, description: String, titleAlign: TextAlign = TextAlign.Left, descriptionAlign: TextAlign = TextAlign.Left, headerContent: @Composable() ColumnScope.() -> Unit )</ID>
    <ID>EndOfSentenceFormat:GenesisEmptyStateWidget.kt$ @Composable fun GenesisEmptyStateRemoteImageWidget( title: String, description: String, imageId: String, modifier: Modifier = Modifier, imageModifier: Modifier = Modifier, titleAlign: TextAlign = TextAlign.Left, descriptionAlign: TextAlign = TextAlign.Left, contentScale: ContentScale = ContentScale.None )</ID>
    <ID>EndOfSentenceFormat:GenesisInputDecorations.kt$ @Composable fun decoratePlaceholder( enabled: Boolean, textStyle: TextStyle = GenesisTheme.typography.body1, colors: GenesisTextFieldColors = genesisTextFieldColors(), placeholder: @Composable() (() -> Unit)?, ): @Composable (() -> Unit)?</ID>
    <ID>EndOfSentenceFormat:GenesisShapes.kt$GenesisShapes</ID>
    <ID>EndOfSentenceFormat:GenesisSpacing.kt$ @Composable fun QuarterVerticalSpacer()</ID>
    <ID>EndOfSentenceFormat:GenesisSpacing.kt$GenesisSpacing</ID>
    <ID>EndOfSentenceFormat:GenesisSwitch.kt$ @Composable @OptIn(ExperimentalMaterialApi::class) fun GenesisSwitch( checked: Boolean, onCheckedChange: ((Boolean) -> Unit)?, modifier: Modifier = Modifier, enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: SwitchColors = genesisSwitchColors() )</ID>
    <ID>EndOfSentenceFormat:GenesisTagHandler.kt$GenesisTagHandler.Companion$ private fun appendNewLine(text: Editable)</ID>
    <ID>EndOfSentenceFormat:GenesisTextField.kt$ @Composable private fun GenesisTextFieldColors.toOutlinedTextFieldColors()</ID>
    <ID>EndOfSentenceFormat:GenesisTextField.kt$GenesisTextFieldColors$ @Composable private fun toTextFieldColors()</ID>
    <ID>EndOfSentenceFormat:GenesisTheme.kt$ @Composable fun GenesisTheme( theme: Theme = Genesis.theme, background: @Composable () -> Color = { GenesisTheme.colors.backgroundPrimary }, content: @Composable () -> Unit )</ID>
    <ID>EndOfSentenceFormat:GenesisToolbar.kt$GenesisToolbar$ private fun applyContentInsets()</ID>
    <ID>EndOfSentenceFormat:GenesisToolbar.kt$GenesisToolbar$/** * if true, show an X else show a back button */ var isModal: Boolean = false set(value) { field = value // TODO: Get french translations for the following strings @DrawableRes val icon = if (value) { setNavigationContentDescription(R.string.genesis_dismiss_screen) R.drawable.ic_navigation_close } else { setNavigationContentDescription(R.string.genesis_go_back) R.drawable.ic_navigation_back_arrow } navigationIcon = ContextCompat.getDrawable(context, icon) navigationIcon?.setTint(accentColor) }</ID>
    <ID>EndOfSentenceFormat:GlobalPaymentsActivity.kt$GlobalPaymentsActivity.Companion$/** * A callback that will be triggered when the global payments has finished * @param Successful - represents weather the payments authorization was successful or not */ internal var onComplete: (PaymentsResult) -> Unit = {}</ID>
    <ID>EndOfSentenceFormat:GoalProgress.kt$/** * This represents the max value you can type * into the text field dialog */ private const val MAX_EDIT_TEXT_VALUE = 100000</ID>
    <ID>EndOfSentenceFormat:GoalProgress.kt$MultiStepProgressPlusMinusListener$ fun onDecrementedValue(item: HealthJourneyItemDetail, newValue: Float)</ID>
    <ID>EndOfSentenceFormat:GoalProgress.kt$MultiStepProgressPlusMinusListener$ fun onIncrementedValue(item: HealthJourneyItemDetail, newValue: Float)</ID>
    <ID>EndOfSentenceFormat:HealthJourneyEntryPoint.kt$HealthJourneyEntryPoint$ACTIVITIES : HealthJourneyEntryPoint</ID>
    <ID>EndOfSentenceFormat:HealthJourneyEntryPoint.kt$HealthJourneyEntryPoint$HEALTHJOURNEY : HealthJourneyEntryPoint</ID>
    <ID>EndOfSentenceFormat:HealthJourneyEntryPoint.kt$HealthJourneyEntryPoint$PROGRAMLIBRARY : HealthJourneyEntryPoint</ID>
    <ID>EndOfSentenceFormat:HealthJourneyEntryPoint.kt$HealthJourneyEntryPoint$PROGRESS : HealthJourneyEntryPoint</ID>
    <ID>EndOfSentenceFormat:HealthJourneyItemDetail.kt$Counter : Serializable</ID>
    <ID>EndOfSentenceFormat:HealthJourneyItemDetail.kt$Counter.Companion$/** * This string signifies the type of multi-step activity * that lets the user change their progress with +/- buttons */ const val INCREMENT_DECREMENT_COUNTER_TYPE = "single"</ID>
    <ID>EndOfSentenceFormat:HealthJourneyItemDetail.kt$Counter.Companion$/** * This string signifies the type of multi-step activity that lets the user free type their progress */ const val FREE_TEXT_COUNTER_TYPE = "multi"</ID>
    <ID>EndOfSentenceFormat:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$ActivityVerificationProgress</ID>
    <ID>EndOfSentenceFormat:HealthProfileViewModel.kt$HealthProfileViewModel : ViewModel</ID>
    <ID>EndOfSentenceFormat:HealthProfileViewModel.kt$HealthProfileViewModel$ fun getInitialData()</ID>
    <ID>EndOfSentenceFormat:HealthProgramStart.kt$HealthProgramStart : Serializable</ID>
    <ID>EndOfSentenceFormat:ImageViewExtension.kt$ fun ImageView.setImageAttrResourceAndVisibility(@AttrRes attrRes: Int)</ID>
    <ID>EndOfSentenceFormat:InsightsBanner.kt$InsightsBanner : ConstraintLayout</ID>
    <ID>EndOfSentenceFormat:InsightsBanner.kt$InsightsBanner$InsightBannerState</ID>
    <ID>EndOfSentenceFormat:IntExtensions.kt$ fun Flow&lt;Int>.isIncrementing()</ID>
    <ID>EndOfSentenceFormat:IntExtensions.kt$ fun Int?.lessThan(other: Int?): Boolean</ID>
    <ID>EndOfSentenceFormat:JSONObjectExtension.kt$ fun JSONObject.redactFields(vararg keys: String)</ID>
    <ID>EndOfSentenceFormat:JSONObjectExtension.kt$ fun JSONObject?.toStringMap(logDelegate: LogDelegate): MutableMap&lt;String, String></ID>
    <ID>EndOfSentenceFormat:JSONObjectExtension.kt$ internal fun JSONArray.stripNulls()</ID>
    <ID>EndOfSentenceFormat:JSONObjectExtension.kt$ internal fun JSONObject.stripNulls()</ID>
    <ID>EndOfSentenceFormat:JsonAdapter.kt$JsonAdapter$ fun &lt;T> toJSONObject(type: Class&lt;T>, obj: T): JSONObject</ID>
    <ID>EndOfSentenceFormat:JsonAdapter.kt$JsonAdapter$ fun &lt;T> toJson(type: Class&lt;T>, obj: T): String</ID>
    <ID>EndOfSentenceFormat:JsonApiAdapter.kt$DataElementTraits</ID>
    <ID>EndOfSentenceFormat:JsonApiAdapter.kt$ObjectTraits</ID>
    <ID>EndOfSentenceFormat:JsonApiAdapter.kt$RelationshipElementTraits</ID>
    <ID>EndOfSentenceFormat:JsonApiLinks.kt$/** * Returns the query string as a map, used to easily supply parameter for pagination enabled apis * * This will throw an exception if the string is not a valid url */ val JsonApiLink.queryMap: Map&lt;String, String> get() { val uri = Uri.parse(this) val paramNames = uri.queryParameterNames val queryParameters = mutableMapOf&lt;String, String>() paramNames.forEach { queryParameters[it] = uri.getQueryParameter(it) ?: "" } return queryParameters }</ID>
    <ID>EndOfSentenceFormat:KoinExtension.kt$ @OptIn(KoinInternalApi::class) @Composable inline fun &lt;reified T : ViewModel> Koin.getViewModel( qualifier: Qualifier? = null, owner: ViewModelStoreOwner? = null, scope: Scope = this.scopeRegistry.rootScope, noinline parameters: ParametersDefinition? = null, ): T</ID>
    <ID>EndOfSentenceFormat:LeagueRestAPI.kt$TokenAuthenticator$ @Synchronized override fun authenticate(route: Route?, response: Response): Request?</ID>
    <ID>EndOfSentenceFormat:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$ override fun setupAuthCookiesForHostedWebview(url: String, includeDeviceToken: Boolean)</ID>
    <ID>EndOfSentenceFormat:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$/** * [sessionId] is an auth token used along with [deviceToken] to authenticate network requests */ var sessionId: String? get() = sharedPrefs.getString( LegacyLeagueAuthenticator::sessionId.name, defaultValue = null, useCache = true, shouldDecrypt = true ) private set(value) { sharedPrefs.putString( LegacyLeagueAuthenticator::sessionId.name, value, useCache = true, shouldEncrypt = true ) }</ID>
    <ID>EndOfSentenceFormat:LineChartView.kt$LineChartView$ fun initializeChart(graphData: GraphData, onNoReadings: () -> Unit)</ID>
    <ID>EndOfSentenceFormat:LineChartView.kt$LineChartView$ private fun getLinesData( lines: List&lt;LineConfig>, userReading: UserReading ): List&lt;ArrayList&lt;Entry>></ID>
    <ID>EndOfSentenceFormat:LineChartView.kt$LineChartView$ private fun getSessionValuesString(readings: List&lt;String>): SpannableString</ID>
    <ID>EndOfSentenceFormat:LineChartView.kt$LineChartView$ private fun setInitialSelectedValue()</ID>
    <ID>EndOfSentenceFormat:LineChartView.kt$LineChartView$ private fun setupHeight(noOfIntervals: Int)</ID>
    <ID>EndOfSentenceFormat:LinkButton.kt$LinkButton$ private fun setupMinHeight()</ID>
    <ID>EndOfSentenceFormat:LiveBalance.kt$LiveBalance.Companion$/** * on a scale of 0..100 */ private const val MIN_DISPLAYABLE_PROGRESS = 2</ID>
    <ID>EndOfSentenceFormat:LoginFragment.kt$ internal fun User.trackFtuxDiscrepency(analyticsTracker: AnalyticsTracker)</ID>
    <ID>EndOfSentenceFormat:LoginFragment.kt$LoginFragment$ override fun onConnectionFailed(connectionResult: ConnectionResult)</ID>
    <ID>EndOfSentenceFormat:LoginFragment.kt$LoginFragment$ private fun handleLegacyAuthenticated(u: Uri)</ID>
    <ID>EndOfSentenceFormat:LoginFragment.kt$LoginFragment$ private fun handleThirdPartyAuthentication(u: Uri)</ID>
    <ID>EndOfSentenceFormat:MemoryExtension.kt$ fun freeMemory()</ID>
    <ID>EndOfSentenceFormat:NavigationExtension.kt$ fun Fragment.findNavControllerSafely(): NavController?</ID>
    <ID>EndOfSentenceFormat:NullCoreNavigation.kt$NullCoreNavigation : CoreNavigation</ID>
    <ID>EndOfSentenceFormat:OutcomeSuggestionsUseCase.kt$OutcomeSuggestionsUseCase$ private fun getPrimaryAndSecondarySuggestions(suggestions: List&lt;Suggestion>): Pair&lt;List&lt;Suggestion>, List&lt;Suggestion>></ID>
    <ID>EndOfSentenceFormat:OutcomesAnalytics.kt$ fun AnalyticsTracker.trackReloadErrorScreen()</ID>
    <ID>EndOfSentenceFormat:OutcomesAnalytics.kt$ fun AnalyticsTracker.viewFrictionScreen()</ID>
    <ID>EndOfSentenceFormat:PCHealthAuthenticator.kt$PCHealthAuthenticator$/** * [sessionId] is an auth token used along with [deviceToken] to authenticate network requests */ var sessionId: String? get() = sharedPrefs.getString( PCHealthAuthenticator::sessionId.name, defaultValue = null, useCache = false, shouldDecrypt = true ) private set(value) { sharedPrefs.putString( PCHealthAuthenticator::sessionId.name, value, useCache = false, shouldEncrypt = true ) }</ID>
    <ID>EndOfSentenceFormat:PCHealthStationReadingViewModel.kt$PCHealthStationReadingViewModel : ViewModel</ID>
    <ID>EndOfSentenceFormat:PagerControls.kt$ @ExperimentalPagerApi @Composable fun PagerControls( modifier: Modifier = Modifier, pagerState: PagerState, onDoneClick: () -> Unit, showDoneButton: Boolean, doneButtonText: String )</ID>
    <ID>EndOfSentenceFormat:PaymentsCoordinator.kt$PaymentsCoordinator</ID>
    <ID>EndOfSentenceFormat:PaymentsCoordinator.kt$PaymentsResult</ID>
    <ID>EndOfSentenceFormat:PaymentsCoordinator.kt$PaymentsResult$Success : PaymentsResult</ID>
    <ID>EndOfSentenceFormat:PaymentsCoordinator.kt$PaymentsResult.Error$Unknown : Error</ID>
    <ID>EndOfSentenceFormat:PcoAPIInterceptor.kt$TokenAuthenticator$ @Synchronized override fun authenticate(route: Route?, response: Response): Request?</ID>
    <ID>EndOfSentenceFormat:PcoAccountUtils.kt$PcoAccountUtils$ suspend fun refreshAuthTokens(api: API, analyticsTracker: AnalyticsTracker): Boolean</ID>
    <ID>EndOfSentenceFormat:PendingRequest.kt$PendingRequest</ID>
    <ID>EndOfSentenceFormat:PricingExtensions.kt$ @Composable internal fun Pricing.formatServiceCostOrFree(): String</ID>
    <ID>EndOfSentenceFormat:Pronoun.kt$Pronoun</ID>
    <ID>EndOfSentenceFormat:Province.kt$Province : Parcelable</ID>
    <ID>EndOfSentenceFormat:ProvinceIE.kt$ProvinceIE</ID>
    <ID>EndOfSentenceFormat:QRCodeScanner.kt$QRCodeScanner : ConstraintLayoutPermissionManager</ID>
    <ID>EndOfSentenceFormat:QRCodeUseCase.kt$QRCodeUseCase$ fun getClaimCode(accessToken: String): Flow&lt;Outcome&lt;Bitmap?>></ID>
    <ID>EndOfSentenceFormat:QrCodeScannerUseCase.kt$QrCodeScannerUseCase$ fun getAddedReadings(claimCode: String, accessToken: String): Flow&lt;Outcome&lt;QRCodeAddedReading>></ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun displayBarGraph( graphMax: Int, graphProgress: Int )</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun displayHeader( leaguePoints: String, remainingPoints: String, canRedeem: Boolean, nextTier: Reward, currency: String, redeemableAmount: Int )</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun displayRewardStatus( currentTier: Reward, nextTier: Reward, isMax: Boolean, currency: String )</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun parseData(rewardDetails: RewardDetails)</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun refreshRewards()</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun setupObservers()</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun showPointsWorthDialog( currency: String, rewardLevels: List&lt;Reward> )</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun showRedeemConfirmDialog( redeemResult: RedeemResult, currency: String )</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$ private fun showRedeemDialog(rewardDetails: RewardDetails)</ID>
    <ID>EndOfSentenceFormat:RedeemRewardActivity.kt$RedeemRewardActivity$/** * use _binding to clear binding object and avoid leaks * use binding to access elements in our binding object */ private var _binding: ActivityRewardsBinding? = null</ID>
    <ID>EndOfSentenceFormat:RemoteTrace.kt$RemoteTrace$ fun putAttribute(name: String, value: String)</ID>
    <ID>EndOfSentenceFormat:RemoteTrace.kt$RemoteTrace$ fun start()</ID>
    <ID>EndOfSentenceFormat:RemoteTrace.kt$RemoteTrace$ fun stop()</ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$ inline fun &lt;reified T> requestCallback( executeOnBackgroundThread: Boolean = false, crossinline callback: Callback&lt;T> ): RequestCallback&lt;T></ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$/** * Defines Callback lambda */ typealias Callback&lt;T> = (result: Outcome&lt;T>) -> Unit</ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$ApiSuccess&lt;out T> : Success</ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$Failure : Outcome</ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$RequestCallback$ fun handleParsingUsingJSONAdapter( jsonAdapter: JsonAdapter, jsonObject: JSONObject, logger: Logger )</ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$RequestCallback$ inline fun post(crossinline codeBlock: () -> Unit)</ID>
    <ID>EndOfSentenceFormat:RequestCallback.kt$Success&lt;out T> : Outcome</ID>
    <ID>EndOfSentenceFormat:RewardDirections.kt$RewardDirections</ID>
    <ID>EndOfSentenceFormat:RewardRepository.kt$RewardRepository</ID>
    <ID>EndOfSentenceFormat:RewardUseCase.kt$RewardUseCase</ID>
    <ID>EndOfSentenceFormat:RewardUseCase.kt$RewardUseCase$ fun getLeagueBalance(): Flow&lt;State&lt;RewardDetails>></ID>
    <ID>EndOfSentenceFormat:RewardUseCase.kt$RewardUseCase$ fun redeemBalance(redeemablePoints: Long): Flow&lt;Outcome&lt;LeagueBalanceResponse>></ID>
    <ID>EndOfSentenceFormat:RewardUseCase.kt$RewardUseCase$ private fun extractRewardDetails(leagueBalanceResponse: LeagueBalanceResponse, rewardLevelsResponse: RewardLevelsResponse): RewardDetails</ID>
    <ID>EndOfSentenceFormat:RewardViewModel.kt$RewardViewModel$ fun getLeagueBalance()</ID>
    <ID>EndOfSentenceFormat:RewardViewModel.kt$RewardViewModel$ fun redeemRewards( redeemablePoints: Long, redeemableAmount: Int, currency: String )</ID>
    <ID>EndOfSentenceFormat:RoadRunnerFirebaseMessagingService.kt$RoadRunnerFirebaseMessagingService : FirebaseMessagingServiceKoinComponent</ID>
    <ID>EndOfSentenceFormat:RootActivity.kt$RootActivity$ @JvmOverloads fun promptForActions( showCloseButton: Boolean = true, title: String = getString(R.string.core_choose_an_option), actions: Array&lt;ActionBottomSheetDialog.Action>, onCancel: (() -> Unit)? = null )</ID>
    <ID>EndOfSentenceFormat:RootActivity.kt$RootActivity$ private fun debugMemoryLeaks()</ID>
    <ID>EndOfSentenceFormat:RootFragment.kt$RootFragment$ fun Fragment.findNavControllerSafely(): NavController?</ID>
    <ID>EndOfSentenceFormat:SampleJsonApi.kt$SampleJsonApi</ID>
    <ID>EndOfSentenceFormat:ScrollViewExtension.kt$ fun ScrollView.onCanScroll(onResult: (Boolean) -> Unit)</ID>
    <ID>EndOfSentenceFormat:ScrollViewExtension.kt$/** * Returns if the scrollview has enough content to scroll */ val ScrollView.canScroll: Boolean get() { val child = this.getChildAt(0) if (child != null) { val childHeight = child.height return height &lt; childHeight + paddingTop + paddingBottom } return false }</ID>
    <ID>EndOfSentenceFormat:SelectCommonAppointmentDetailsUseCase.kt$SelectCommonAppointmentDetailsUseCase$ private fun fetchPatientName( userRepository: UserRepository, patientRepository: PatientRepository, patientId: PatientId?, ): Flow&lt;Outcome&lt;String>></ID>
    <ID>EndOfSentenceFormat:SelectPatientUseCase.kt$SelectPatientUseCase</ID>
    <ID>EndOfSentenceFormat:ServerError.kt$ServerError</ID>
    <ID>EndOfSentenceFormat:ServerError.kt$ServerError$/** * Code sent by response */ val code = info?.optString("code") ?: ""</ID>
    <ID>EndOfSentenceFormat:ServerError.kt$ServerError$/** * Message sent by response */ val message = info?.optString("message") ?: ""</ID>
    <ID>EndOfSentenceFormat:ServerError.kt$ServerError$/** * Reason sent by response */ val reason = info?.optString("reason") ?: ""</ID>
    <ID>EndOfSentenceFormat:SessionUtils.kt$SessionUtils$ fun generateSessionId()</ID>
    <ID>EndOfSentenceFormat:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$ fun putString( key: String, value: String?, useCache: Boolean = true, shouldEncrypt: Boolean = false )</ID>
    <ID>EndOfSentenceFormat:States.kt$States</ID>
    <ID>EndOfSentenceFormat:StaticPointsRepository.kt$StaticPointsRepository : PointsRepository</ID>
    <ID>EndOfSentenceFormat:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$ private fun initClaim()</ID>
    <ID>EndOfSentenceFormat:TagBanner.kt$ @Composable fun TagBanner( modifier: Modifier = Modifier, style: Style = Style.AVAILABLE, onClick: () -> Unit, tagContent: @Composable BoxScope.() -> Unit, bannerContent: @Composable ColumnScope.() -> Unit, )</ID>
    <ID>EndOfSentenceFormat:TestCoroutineRule.kt$TestCoroutineRule$/** * Inject this dispatcher into your view model from your unit test (Only to replace * Dispatchers.Io and Dispatchers.Default */ val testDispatcher: TestCoroutineDispatcher = TestCoroutineDispatcher()</ID>
    <ID>EndOfSentenceFormat:TokenSdkAuthenticator.kt$TokenSdkAuthenticator</ID>
    <ID>EndOfSentenceFormat:TokenSdkAuthenticator.kt$TokenSdkAuthenticator$ suspend fun signInOrRefreshWithJWT(jwt: String): Boolean</ID>
    <ID>EndOfSentenceFormat:TokenSdkAuthenticator.kt$TokenSdkAuthenticator$ suspend fun signOut(localContext: Context)</ID>
    <ID>EndOfSentenceFormat:TokenSdkAuthenticator.kt$TokenSdkAuthenticator$/** * Returns the JWT token stored in the keychain * @return jwt The JWT token that is used to log into league. If it does not exist it will return null * */ val jwtToken: String?</ID>
    <ID>EndOfSentenceFormat:TokenSdkAuthenticator.kt$TokenSdkAuthenticator$/** * This method returns if the user is in the state of signed in or signed out * @return true if the user is signed in, false otherwise * */ val isLoggedIn: Boolean</ID>
    <ID>EndOfSentenceFormat:TriageMenuViewModel.kt$TriageMenuViewModel$/** * Immediately triggers the [FetchQuickActionsUseCase] without input */ private val quickActions: Flow&lt;Outcome&lt;QuickActions>> = fetchQuickActionsUseCase()</ID>
    <ID>EndOfSentenceFormat:TriageMenuViewModel.kt$TriageMenuViewModel$/** * Outputs state based on the outputs from [providers] and [quickActions] */ val state: Flow&lt;State&lt;TriageMenuState>> = combineWithDefaults( fetchAppointments(GetAppointmentsRequest.Criteria.upcoming), quickActions, providers, ) { appointments, quickActions, providers -> if (quickActions == null) return@combineWithDefaults null when (quickActions) { is Success -> Loaded( TriageMenuState( upcomingAppointments = if (featureFlagsRepository.getValue(TriageFeatureFlags.serviceBooking)) { UpcomingAppointmentsState( (appointments as? Success)?.invoke()?.size ?: 0 ) } else { null }, quickActions = quickActions().quickActionMainPage, providers = providers?.providers, showAllProvidersButton = providers?.showAllButton ?: false, ) ) is Failure -> Failed(quickActions.errorResponse) }.exhaustive } .filterNotNull() .distinctUntilChanged() .stateIn(viewModelScope, SharingStarted.WhileSubscribed(), Loading())</ID>
    <ID>EndOfSentenceFormat:TriageRetrofitService.kt$TriageRetrofitService$ @GET("/v1/appointments/{appointment_id}") suspend fun getAppointment( @Header(X_TENANT_ID_TOKEN_HEADER) idToken: String?, @Path("appointment_id") appointmentId: String, ): Outcome&lt;JsonApiData&lt;AppointmentResponse>></ID>
    <ID>EndOfSentenceFormat:TriageRetrofitService.kt$TriageRetrofitService$ @POST("/v1/weburls/{partner_id}") suspend fun createWebUrl( @Header(X_TENANT_ID_TOKEN_HEADER) idToken: String?, @Query("partner_org_id") orgId: String, ): Outcome&lt;Unit></ID>
    <ID>EndOfSentenceFormat:TurbineUtils.kt$ suspend fun &lt;T> FlowTurbine&lt;Outcome&lt;T>>.expectSuccessItem(): T</ID>
    <ID>EndOfSentenceFormat:TurbineUtils.kt$ suspend fun &lt;T> FlowTurbine&lt;State&lt;T>>.expectLoadedItem(): T</ID>
    <ID>EndOfSentenceFormat:ValueQuestion.kt$MeasureUnit</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$ @Synchronized fun connect(locale: Locale)</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$ fun disconnect()</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$ fun sendData(jsonString: String?)</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$/** * Checks whether we are still trying to connect to the backend */ private var isConnecting = false</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$/** * The actual web socket object that connects to the backend */ private var webSocket: com.neovisionaries.ws.client.WebSocket? = null</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$/** * Used to check if web socket has connected to the backend */ internal var isConnected = false</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$LeagueWebSocketAdapter : WebSocketAdapter</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket$Listener</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket.Listener$ fun onConnected()</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket.Listener$ fun onError(e: java.lang.Exception)</ID>
    <ID>EndOfSentenceFormat:WebSocket.kt$WebSocket.Listener$ fun onMessage(message: String)</ID>
    <ID>EndOfSentenceFormat:WellnessStationUseCase.kt$WellnessStationUseCase$ fun getInsightCards(accessToken: String): Flow&lt;Outcome&lt;WellnessStationHighlightResponse>></ID>
    <ID>EndOfSentenceFormat:WellnessStationsAnalytics.kt$ fun AnalyticsTracker.trackCloseInfoModal()</ID>
    <ID>EndOfSentenceFormat:WellnessStationsAnalytics.kt$ fun AnalyticsTracker.viewWellnessStationEmptyState()</ID>
    <ID>EndOfSentenceFormat:WellnessStationsRepository.kt$WellnessStationsRepository</ID>
    <ID>EqualsWithHashCodeExist:Address.kt$Address</ID>
    <ID>EqualsWithHashCodeExist:RealmStringMap.kt$RealmStringMap : RealmObject</ID>
    <ID>EqualsWithHashCodeExist:StringMap.kt$StringMap</ID>
    <ID>ExplicitGarbageCollectionCall:MemoryExtension.kt$gc()</ID>
    <ID>ExplicitGarbageCollectionCall:MemoryExtension.kt$runFinalization()</ID>
    <ID>ForbiddenComment:AccountDetailsViewModelTest.kt$AccountDetailsViewModelTest$// TODO: Complete these tests</ID>
    <ID>ForbiddenComment:AnalyticsTracker_Login.kt$// TODO: Track sign up close</ID>
    <ID>ForbiddenComment:AnalyticsTracker_Login.kt$// TODO: Track sign up screen view</ID>
    <ID>ForbiddenComment:AnalyticsTracker_Login.kt$LoginAnalytics.Actions$// TODO: We need register actions</ID>
    <ID>ForbiddenComment:AssessmentOnboardingFragment.kt$AssessmentOnboardingFragment$// TODO: look into putting the content for this button in the backend</ID>
    <ID>ForbiddenComment:Auth0Authenticator.kt$Auth0Authenticator$// TODO: add privacy lock challenge</ID>
    <ID>ForbiddenComment:Auth0Authenticator.kt$Auth0Authenticator$// TODO: make this private so it's only called from clearState</ID>
    <ID>ForbiddenComment:Auth0Authenticator.kt$Auth0Authenticator.&lt;no name provided>$// TODO: should we try to manually clear state anyways??</ID>
    <ID>ForbiddenComment:AuthenticationViewModel.kt$AuthenticationViewModel$// TODO: refactor this callback out of a view model where it doesn't belong, it's causing a</ID>
    <ID>ForbiddenComment:BenefitSticker.kt$BenefitSticker$// TODO: Hard-coded colors not from theme</ID>
    <ID>ForbiddenComment:BottomSheetDrawer.kt$// TODO: Move this to Genesis</ID>
    <ID>ForbiddenComment:ChatAvailabilityResponse.kt$ChatAvailabilityResponse$// TODO: Change this to use json serializer</ID>
    <ID>ForbiddenComment:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths.MapleSignOn$// TODO: change this pattern when the deeplink is actually defined</ID>
    <ID>ForbiddenComment:Content.kt$// TODO: Uncomment below when Document object in league app moved over to room</ID>
    <ID>ForbiddenComment:ContextExtension.kt$// TODO: Hard-coded color not from theme</ID>
    <ID>ForbiddenComment:ContextExtension.kt$// TODO: find a better way to handle when this is called after the activity's onSaveEvent</ID>
    <ID>ForbiddenComment:CurrencyStringExtension.kt$// FIXME: the 0 case for this isn't formatted by locale</ID>
    <ID>ForbiddenComment:CurrencyStringExtension.kt$// FIXME: this isn't scaleable to other currencies</ID>
    <ID>ForbiddenComment:CurrencyUtil.kt$CurrencyUtil$// FIXME: remove french specific checks and format this in a more generic way</ID>
    <ID>ForbiddenComment:EditPhoneNumber.kt$EditPhoneNumber$// TODO: override onClick on the phone number control to make it accessible</ID>
    <ID>ForbiddenComment:ErrorFragment.kt$ErrorFragment$// TODO: rewrite this and make it a proper genesis component</ID>
    <ID>ForbiddenComment:FeatureFlagDetailFragment.kt$// TODO: replace with with a component that wraps an input field and includes labels and error messages (Like TextInputRow)</ID>
    <ID>ForbiddenComment:FeatureFlagsViewModelTest.kt$FeatureFlagsViewModelTest$// TODO: test combining feature flag with value states</ID>
    <ID>ForbiddenComment:FileUtils.kt$FileUtils$// TODO: Make the directory configurable, in the future we might want to make more than photos</ID>
    <ID>ForbiddenComment:FragmentExtension.kt$// TODO: this logic should only exist in chat somehow. The chat fragments should use their own custom function for this</ID>
    <ID>ForbiddenComment:GenesisButton.kt$ButtonStyle$* GenesisButton - Jetpack replacement control for the old genesis Button control * TODO: change the click states from a ripple effect to a solid change (or ask design if current ripples are okay)</ID>
    <ID>ForbiddenComment:GenesisCheckbox.kt$// TODO: replace with proper declarative non-android alternative when ready (b/158188351)</ID>
    <ID>ForbiddenComment:GenesisProgressBar.kt$// todo: no corresponding new token</ID>
    <ID>ForbiddenComment:GenesisTheme.kt$// TODO: Why do we do this here?</ID>
    <ID>ForbiddenComment:GenesisToolbar.kt$GenesisToolbar$// TODO: Get french translations for the following strings</ID>
    <ID>ForbiddenComment:GenesisToolbar.kt$GenesisToolbar$// TODO: Hard-coded color not from theme</ID>
    <ID>ForbiddenComment:GenesisTopAppBar.kt$// TODO: Get french translations for the following strings</ID>
    <ID>ForbiddenComment:HealthJourneyItemFragment.kt$HealthJourneyItemFragment$// TODO: Put RatingUtils.incrementNumHealthJourneyActivitiesCompleted() in the view model</ID>
    <ID>ForbiddenComment:HealthProfileController.kt$HealthProfileController$// TODO: based on points system</ID>
    <ID>ForbiddenComment:HealthProfileController.kt$HealthProfileController$// TODO: remove hardcoding of `health_assessment_lite` when the backend adds it to the HealthProfile model</ID>
    <ID>ForbiddenComment:HealthProgramExt.kt$// Todo: colour to be confirmed</ID>
    <ID>ForbiddenComment:HomeController.kt$HomeController$// TODO: refactor HomeController to use StringProvider instead of context</ID>
    <ID>ForbiddenComment:HorizontalProgressBar.kt$HorizontalProgressBar$// TODO: Hard-coded colors, not from generic theme.</ID>
    <ID>ForbiddenComment:InputAnswer.kt$InputAnswer$// TODO: change this when the backend changes</ID>
    <ID>ForbiddenComment:LeagueNavigation.kt$LeagueNavigation$// TODO: break this hybrid handling of navigation inside and outside of activities</ID>
    <ID>ForbiddenComment:LeagueNavigation.kt$LeagueNavigation$// TODO: fix the dependancy graph for the user repository</ID>
    <ID>ForbiddenComment:LeagueRootActivity.kt$// TODO:</ID>
    <ID>ForbiddenComment:LeagueRootActivity.kt$LeagueRootActivity$// TODO: replace all toolbars with the GenesisToolbar so we don't need this anymore</ID>
    <ID>ForbiddenComment:ListSpacingDecoration.kt$ListSpacingDecoration$// TODO: make an interface where this can be defined by the views themselves!</ID>
    <ID>ForbiddenComment:LoginFragment.kt$LoginFragment$// TODO: Show loading state while getting user profile</ID>
    <ID>ForbiddenComment:LoginFragment.kt$LoginFragment$// TODO: consider integrating this with Authenticator</ID>
    <ID>ForbiddenComment:LoginFragment.kt$LoginFragment$// TODO: create a view model for this view (in a separate PR)</ID>
    <ID>ForbiddenComment:LoginFragment.kt$LoginFragment$// TODO: refactor this callback out of the view model</ID>
    <ID>ForbiddenComment:LoginFragment.kt$LoginFragment.LeagueWebViewClient$// TODO: Clean this up when these events are consolidated on the server.</ID>
    <ID>ForbiddenComment:LoginWelcomeBackFragment.kt$LoginWelcomeBackFragment$// TODO: look into combining authenticateUsingBiometrics and authSocket into one method?</ID>
    <ID>ForbiddenComment:LoginWelcomeBackFragment.kt$LoginWelcomeBackFragment$// TODO: save the user's name</ID>
    <ID>ForbiddenComment:MainActivity.kt$// TODO: update FirebaseInstanceId to non-deprecated methods</ID>
    <ID>ForbiddenComment:MainActivity.kt$MainActivity$// TODO: handle navigating to the deeplink after signing in</ID>
    <ID>ForbiddenComment:MainActivity.kt$MainActivity$// TODO: setContentDescription to close menu here</ID>
    <ID>ForbiddenComment:MarketplaceWebFragment.kt$MarketplaceWebFragment$// TODO: get a full list of host names to whitelist</ID>
    <ID>ForbiddenComment:Module.kt$PreviousResponse$// TODO: align this with results status</ID>
    <ID>ForbiddenComment:PCHealthAuthenticator.kt$PCHealthAuthenticator$// TODO: find a better way to deal with the API and analytics tracker deps</ID>
    <ID>ForbiddenComment:PCHealthAuthenticator.kt$PCHealthAuthenticator$// TODO: put this outside of this class to resolve dependancy</ID>
    <ID>ForbiddenComment:PcoAccountUtils.kt$PcoAccountUtils$* The thread calling this function will be blocked until tokens have been refreshed * TODO: this doesn't really belong here, it should be a use case or something like that</ID>
    <ID>ForbiddenComment:PersonalInfoViewModelTest.kt$PersonalInfoViewModelTest$// TODO: Complete these tests</ID>
    <ID>ForbiddenComment:PresenterActivity.kt$PresenterActivity$// TODO: make a better swapping UX with a menu</ID>
    <ID>ForbiddenComment:RatingUtils.kt$RatingUtils$// TODO: make RatingUtils more abstracted so that wallet and goal stuff isn't in core</ID>
    <ID>ForbiddenComment:RatingUtils.kt$RatingUtils$// TODO: refactor RatingUtils to use the SharedPreferencesUtils class</ID>
    <ID>ForbiddenComment:RatingUtils.kt$RatingUtils$// TODO: write unit tests for RatingUtils</ID>
    <ID>ForbiddenComment:RealmCache.kt$RealmCache$// TODO: fix exception: io.realm.exceptions.RealmException: 'Form' doesn't exist in current schema.</ID>
    <ID>ForbiddenComment:Repository_Claim.kt$// TODO: update this to support getting and caching single claims too</ID>
    <ID>ForbiddenComment:RequestCallback.kt$Failure$@property jsonApiErrors The deserialized json:api rest body of the error response if it exists * TODO: we should find a way to separate out jsonApi failures and socket failures, it likely * will require us to create a new Outcome object to do it cleanly.</ID>
    <ID>ForbiddenComment:RoadRunnerFirebaseMessagingService.kt$RoadRunnerFirebaseMessagingService$* TODO: confirm messages work through generic notifications</ID>
    <ID>ForbiddenComment:RootActivity.kt$RootActivity$// TODO: Remove this try and catch once roadrunner gets an injection class</ID>
    <ID>ForbiddenComment:RootActivity.kt$RootActivity$// TODO: put this in extension methods, need to deal with MainActivity overrides first though</ID>
    <ID>ForbiddenComment:RootActivity.kt$RootActivity$//region store rating TODO: refactor this out of RootActivity`</ID>
    <ID>ForbiddenComment:SalesforceChatMapResponse.kt$SalesforceChatMapResponse$// TODO: Change this to use json serializer</ID>
    <ID>ForbiddenComment:SelectGenderIdentityViewModel.kt$SelectGenderIdentityViewModel$// TODO: Refactor; this method breaks MVVM by accessing the state directly instead of via an observer</ID>
    <ID>ForbiddenComment:SelectPrescriptionsFragment.kt$SelectPrescriptionsFragment$// TODO: pass StateFlow instead of individual lists into SelectPrescriptionsScreen</ID>
    <ID>ForbiddenComment:SelectPrescriptionsScreen.kt$// TODO: provide proper image resource</ID>
    <ID>ForbiddenComment:SelectPrescriptionsScreen.kt$// TODO: replace text by info tile</ID>
    <ID>ForbiddenComment:SelectPronounViewModel.kt$SelectPronounViewModel$// TODO: Refactor; this method breaks MVVM by accessing the state directly instead of via an observer,</ID>
    <ID>ForbiddenComment:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$// TODO: Add this conditional navigation code to back button click</ID>
    <ID>ForbiddenComment:TypeformUrlResponse.kt$TypeformUrlResponse$// TODO: Get Moshi working so we can use the above to parse json</ID>
    <ID>ForbiddenComment:UserRepository.kt$UserRepository$// TODO: these flags are application specific, find a way to make flags more generic</ID>
    <ID>ForbiddenComment:UserRepositoryImpl.kt$UserRepositoryImpl$// TODO: update getUserConfig calls so that it does not use the event bus</ID>
    <ID>ForbiddenComment:VaccineLandingViewModel.kt$VaccineLandingViewModel$// TODO: Handle error state</ID>
    <ID>ForbiddenComment:WalletConfiguration.kt$Wallet$// TODO: Setup a wallet specific Koin configuration separate from the app</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Action Row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "ActionRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ActionRowPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Asset Banner", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "AssetBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun AssetBannerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Avatar Header", showkaseGroup = "Header", packageName = "life.league.genesis.compose.component.header", packageSimpleName = "header", showkaseElementName = "AvatarHeaderPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun AvatarHeaderPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Basic Icon Banner", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "BasicIconBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun BasicIconBannerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "body1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body1_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "body1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body1_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "body2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body2_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "body2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body2_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Bottom To Top Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "BottomToTopAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun BottomToTopAnimationPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "button1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button1_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "button1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button1_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "button2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button2_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "button2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button2_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "caption_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun caption_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "caption_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun caption_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Circle Button", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "CircleButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun CircleButtonPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Circular Progress Bar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "CircularProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun CircularProgressBarPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Date Field", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisDateFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisDateFieldPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Drop Down", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisDropDownPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisDropDownPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Expandable Text", showkaseGroup = "Text", packageName = "life.league.genesis.compose.component.text", packageSimpleName = "text", showkaseElementName = "ExpandableTextPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ExpandableTextPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Fade In Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FadeInAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FadeInAnimationPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Fade Out Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FadeOutAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FadeOutAnimationPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "FadingText Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FadingTextPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FadingTextPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Finite Pulse Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FinitePulsePreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FinitePulsePreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Bordered Radio Field", showkaseGroup = "Radio Input", packageName = "life.league.genesis.compose.component.input.radio", packageSimpleName = "radio", showkaseElementName = "GenesisBorderedRadioFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", showkaseWidthDp = 350, previewParameterClass = [ThemeProvider::class] ) public fun GenesisBorderedRadioFieldPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Button", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "GenesisButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisButtonPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Buttons Footer", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "GenesisButtonsFooterPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisButtonsFooterPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Checkbox", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input.checkbox", packageSimpleName = "checkbox", showkaseElementName = "GenesisCheckboxPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisCheckboxPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Empty Section View", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewGenesisEmptySectionView", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewGenesisEmptySectionView(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Empty State Widget", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewGenesisEmptyStateWidget", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewGenesisEmptyStateWidget(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Horizontal Pager", showkaseGroup = "Pager", packageName = "life.league.genesis.compose.component.pager", packageSimpleName = "pager", showkaseElementName = "GenesisHorizontalPagerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisHorizontalPagerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Radio Button", showkaseGroup = "Radio Input", packageName = "life.league.genesis.compose.component.input.radio", packageSimpleName = "radio", showkaseElementName = "GenesisRadioButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisRadioButtonPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Radio Field", showkaseGroup = "Radio Input", packageName = "life.league.genesis.compose.component.input.radio", packageSimpleName = "radio", showkaseElementName = "GenesisRadioFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", showkaseWidthDp = 350, previewParameterClass = [ThemeProvider::class] ) public fun GenesisRadioFieldPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Switch", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisSwithPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisSwithPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "GenesisErrorView", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "ErrorScreenPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ErrorScreenPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "GenesisGridView", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "GridViewSample", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GridViewSample(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "GenesisNoScrollGridView", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "NoScrollGridViewSample", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun NoScrollGridViewSample(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h1_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h1_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h2_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h2_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h3_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h3_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h3_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h3_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h4_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h4_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h4_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h4_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Horizontal Divider", showkaseGroup = "Divider", packageName = "life.league.genesis.compose.component.divider", packageSimpleName = "divider", showkaseElementName = "HorizontalDividerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun HorizontalDividerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Horizontal Progress Bar with Delay", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "HorizontalProgressBarWithDelayPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun HorizontalProgressBarWithDelayPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Horizontal Progress Bar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "HorizontalProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun HorizontalProgressBarPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Image Prompt", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewImagePromptWidget", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewImagePromptWidget(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Indeterminate Circular Progress Bar", showkaseGroup = "Progress Bars", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "GenesisIntermittentProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisIntermittentProgressBarPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Key Value row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "KeyValueRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun KeyValueRowPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "label_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun label_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "label_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun label_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "LargeImageRow", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "LargeImageBannerRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun LargeImageBannerRowPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Left To Right Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "LeftToRightAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun LeftToRightAnimationPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Multi Select Calendar", showkaseGroup = "Calendar", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "MultiSelectGenesisCalendarViewPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun MultiSelectGenesisCalendarViewPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "MultiHorizontalProgressBar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "MultiHorizontalProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun MultiHorizontalProgressBarPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Navigation Buttons", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "NavigationButtonsPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun NavigationButtonsPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "overline_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun overline_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "overline_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun overline_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Page Footer", showkaseGroup = "Footer", packageName = "life.league.genesis.compose.component.footer", packageSimpleName = "footer", showkaseElementName = "PageFooterPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PageFooterPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Page Header", showkaseGroup = "Header", packageName = "life.league.genesis.compose.component.header", packageSimpleName = "header", showkaseElementName = "PageHeaderPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PageHeaderPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Pager Controls", showkaseGroup = "Pager", packageName = "life.league.genesis.compose.component.pager", packageSimpleName = "pager", showkaseElementName = "PagerControlsPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PagerControlsPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Pill Button", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "PillButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PillButtonPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "PreviewInformationalSlide", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewInformationalSlide", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewInformationalSlide(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "PreviewLinkButton", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "PreviewLinkButton", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewLinkButton(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Progress Bar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "GenesisProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisProgressBarPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Progress Row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "ProgressRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ProgressRowPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "RemoteImage (by Url)", showkaseGroup = "Remote Image", packageName = "life.league.genesis.compose.accompanist", packageSimpleName = "accompanist", showkaseElementName = "RemoteImagePreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun RemoteImagePreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "RemoteImageContent (by content id)", showkaseGroup = "Remote Image", packageName = "life.league.genesis.compose.accompanist", packageSimpleName = "accompanist", showkaseElementName = "RemoteImageContentPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun RemoteImageContentPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Right To Left Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "RightToLeftAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun RightToLeftAnimationPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Single Select Calendar", showkaseGroup = "Calendar", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "SingleSelectGenesisCalendarViewPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun SingleSelectGenesisCalendarViewPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "SmallImageRow", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "SmallImageBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun SmallImageBannerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Static TextField", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisStaticDropdownPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisStaticDropdownPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "subtitle1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle1_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "subtitle1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle1_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "subtitle2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle2_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "subtitle2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle2_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "tab_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun tab_default(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "tab_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun tab_fusion(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tag Banner", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "TagBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun TagBannerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Text Field", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisTextFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisTextFieldPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tooltip Header Row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "TooltipHeaderRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun TooltipHeaderRowPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Top App Bar", showkaseGroup = "App Bar", packageName = "life.league.genesis.compose.component.appbar", packageSimpleName = "appbar", showkaseElementName = "GenesisTopAppBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisTopAppBarPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Top To Bottom Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "TopToBottomAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun TopToBottomAnimationPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Vertical FadingText Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "VerticalFadingTextPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun VerticalFadingTextPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Warning Banner with link", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "WarningBannerPreviewWithLink", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun WarningBannerPreviewWithLink(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Warning Banner", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "WarningBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun WarningBannerPreview(): Unit</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "body1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body1_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "body2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body2_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "button1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button1_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "button2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button2_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "caption_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun caption_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h1_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h2_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h3_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h3_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h4_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h4_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "label_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun label_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "overline_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun overline_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "subtitle1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle1_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "subtitle2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle2_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "tab_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun tab_league()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "body1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body1_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "body2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body2_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "button1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button1_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "button2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button2_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "caption_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun caption_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h1_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h2_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h3_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h3_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h4_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h4_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "label_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun label_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "overline_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun overline_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "subtitle1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle1_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "subtitle2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle2_pchealth()</ID>
    <ID>FunctionNaming:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "tab_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun tab_pchealth()</ID>
    <ID>FunctionOnlyReturningConstant:TestModelJSONKt.kt$TestModelJSONKt$@JvmStatic fun getBrainTreeToken(): String</ID>
    <ID>FunctionParameterNaming:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator$UserRepository: UserRepository</ID>
    <ID>FunctionParameterNaming:GenesisStaticDropdown.kt$ComposableContent: @Composable RowScope.() -> Unit</ID>
    <ID>ImplicitDefaultLocale:CovidOnboardingSlide.kt$CovidOnboardingSlide$String.format("%X", labelColor)</ID>
    <ID>ImplicitDefaultLocale:CurrencyStringExtension.kt$String.format("%,d", this)</ID>
    <ID>ImplicitDefaultLocale:CurrencyStringExtension.kt$String.format("%,d", this.toLong())</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d days ago", minutes / (60 * 24))</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d hours ago", minutes / 60)</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d minutes ago", minutes)</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d months ago", minutes / (60 * 24 * 28))</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d seconds ago", seconds)</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d weeks ago", minutes / (60 * 24 * 7))</ID>
    <ID>ImplicitDefaultLocale:DateUtils.kt$DateUtils$String.format("%d years ago", minutes / (60 * 24 * 365))</ID>
    <ID>ImplicitDefaultLocale:QRCodeGenerationFragment.kt$String.format("%02d", timeRemaining % 3600 % 60)</ID>
    <ID>ImplicitDefaultLocale:WalletCardAddCreditActivity.kt$WalletCardAddCreditActivity$String.format("%.2f", state.data.second)</ID>
    <ID>LargeClass:DependentsActivity.kt$DependentsActivity : LeagueRootActivityOnDependentClickListener</ID>
    <ID>LargeClass:GenesisColors.kt$GenesisColors</ID>
    <ID>LargeClass:MainActivity.kt$MainActivity : LeagueRootActivityView</ID>
    <ID>LargeClass:ModuleTest.kt$ModuleTest</ID>
    <ID>LargeClass:MyRootModuleCodegen.kt$MyRootModuleCodegen : ShowkaseProvider</ID>
    <ID>LargeClass:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist</ID>
    <ID>LongMethod:AccountController.kt$AccountController$override fun buildModels()</ID>
    <ID>LongMethod:AccountDetailsFragment.kt$AccountDetailsFragment$private fun setupObservables()</ID>
    <ID>LongMethod:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$public override fun fromJson(reader: JsonReader): AchievementDetail</ID>
    <ID>LongMethod:AddPatientFragment.kt$@Composable fun AddPatientForm( modifier: Modifier = Modifier, formData: AddPatientFormData, )</ID>
    <ID>LongMethod:AddPatientFragment.kt$@Composable fun DateSelectionInputRow( state: DateSelectionState, label: String, placeholder: String, )</ID>
    <ID>LongMethod:AgentAvailabilityFragment.kt$AgentAvailabilityFragment$override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View?</ID>
    <ID>LongMethod:AlertJsonAdapter.kt$AlertJsonAdapter$public override fun fromJson(reader: JsonReader): Alert</ID>
    <ID>LongMethod:Alert_ActionJsonAdapter.kt$Alert_ActionJsonAdapter$public override fun fromJson(reader: JsonReader): Alert.Action</ID>
    <ID>LongMethod:AnswersJsonAdapter.kt$AnswersJsonAdapter$public override fun fromJson(reader: JsonReader): Answers</ID>
    <ID>LongMethod:AppLogJsonAdapter.kt$AppLogJsonAdapter$public override fun fromJson(reader: JsonReader): AppLog</ID>
    <ID>LongMethod:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): AppointmentAttributes</ID>
    <ID>LongMethod:AppointmentDetailsScreen.kt$@Composable @SuppressLint("UnusedCrossfadeTargetStateParameter") private fun AppointmentDetailsScreen( state: State&lt;AppointmentDetailsModel>, navController: NavController?, onRetry: () -> Unit, )</ID>
    <ID>LongMethod:AppointmentListScreen.kt$@SuppressLint("UnusedCrossfadeTargetStateParameter") @Composable private fun AppointmentListScreen( state: State&lt;AppointmentsState>, onBack: () -> Unit, onBookAnAppointmentClick: () -> Unit, onRetry: () -> Unit )</ID>
    <ID>LongMethod:ArticleJsonAdapter.kt$ArticleJsonAdapter$public override fun fromJson(reader: JsonReader): Article</ID>
    <ID>LongMethod:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentFrictionFragmentArgs</ID>
    <ID>LongMethod:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentFrictionFragmentArgs</ID>
    <ID>LongMethod:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$private fun nextQuestion()</ID>
    <ID>LongMethod:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentsExitFragmentArgs</ID>
    <ID>LongMethod:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentsExitFragmentArgs</ID>
    <ID>LongMethod:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter$public override fun fromJson(reader: JsonReader): AuthInfo</ID>
    <ID>LongMethod:BMIInfoFragment.kt$@Composable fun BMIInfoContent(onLinkClicked: () -> Unit, onClose: () -> Unit)</ID>
    <ID>LongMethod:BalancesJsonAdapter.kt$BalancesJsonAdapter$public override fun fromJson(reader: JsonReader): Balances</ID>
    <ID>LongMethod:BannerController.kt$BannerController$override fun buildModels()</ID>
    <ID>LongMethod:BloodPressureInfoFragment.kt$@Composable fun BloodPressureInfoContent( onBackClicked: () -> Unit )</ID>
    <ID>LongMethod:BuilderDailyScreenerFragment.kt$BuilderDailyScreenerFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:BuilderDailyScreenerResponsesFragment.kt$BuilderDailyScreenerResponsesFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:Button.kt$Button$@JvmOverloads @ModelProp fun setButtonStyle(@ButtonStyle buttonStyle: Int = BUTTON_STYLE_PRIMARY)</ID>
    <ID>LongMethod:CTAJsonAdapter.kt$CTAJsonAdapter$public override fun fromJson(reader: JsonReader): CTA</ID>
    <ID>LongMethod:CalendarExtensionKtTest.kt$CalendarExtensionKtTest$@Test fun normalizeToSunday()</ID>
    <ID>LongMethod:CardController.kt$CardController$override fun buildModels()</ID>
    <ID>LongMethod:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChallengeHealthActivityItemResponse</ID>
    <ID>LongMethod:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChallengeItemResponse</ID>
    <ID>LongMethod:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChallengeResponse</ID>
    <ID>LongMethod:ChatController.kt$ChatController$override fun buildModels()</ID>
    <ID>LongMethod:ChatHistoryController.kt$ChatHistoryController$override fun buildModels()</ID>
    <ID>LongMethod:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$public override fun fromJson(reader: JsonReader): ChatProviderDetailItems</ID>
    <ID>LongMethod:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChatProviderResponse</ID>
    <ID>LongMethod:ChatTranscriptMessagesResponseJsonAdapter.kt$ChatTranscriptMessagesResponseJsonAdapter$public override fun fromJson(reader: JsonReader): ChatTranscriptMessagesResponse</ID>
    <ID>LongMethod:ChatTranscriptResponse_TranscriptJsonAdapter.kt$ChatTranscriptResponse_TranscriptJsonAdapter$public override fun fromJson(reader: JsonReader): ChatTranscriptResponse.Transcript</ID>
    <ID>LongMethod:CircularProgressBar.kt$@Composable fun CircularProgressBar( modifier: Modifier = Modifier, percentage: Float, radius: Dp = 50.dp, strokeWidth: Dp = GenesisTheme.spacing.half, padding: Dp = GenesisTheme.spacing.half, animationDuration: Int = 0, progressArcUnFilledColor: Color = GenesisTheme.colors.surfaceCardDisable, )</ID>
    <ID>LongMethod:ColorLoading.kt$private fun getGenesisColorsFromTypedArray(ta: TypedArray): GenesisColors</ID>
    <ID>LongMethod:ComponentBrowserScreen.kt$@Preview @Composable private fun PrescriptionTileVariation()</ID>
    <ID>LongMethod:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$public override fun fromJson(reader: JsonReader): ContentJson</ID>
    <ID>LongMethod:CovidDataSharingFragment.kt$CovidDataSharingFragment$fun setupObservables()</ID>
    <ID>LongMethod:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$public override fun fromJson(reader: JsonReader): CovidHealthAssessmentInformation</ID>
    <ID>LongMethod:CovidHealthAssessmentResultJsonAdapter.kt$CovidHealthAssessmentResultJsonAdapter$public override fun fromJson(reader: JsonReader): CovidHealthAssessmentResult</ID>
    <ID>LongMethod:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): CreateAppointmentAttributes</ID>
    <ID>LongMethod:CreateProfileScreen.kt$@Composable fun TermsOfUseInfoRow()</ID>
    <ID>LongMethod:CreateProfileScreen.kt$@Composable private fun CreateProfileFormContent( formState: CreateProfileData, onContinueClick: () -> Unit, onBackClick: () -> Unit, onSecurityQuestionClick: () -> Unit )</ID>
    <ID>LongMethod:CurrentLocationButton.kt$@Composable internal fun CurrentLocationButton(onPermissionGranted: () -> Unit)</ID>
    <ID>LongMethod:CustomNavigationScreen.kt$ @Composable fun CustomNavigationScreen( onReturnedClick: (banner: Banner) -> Unit, onNewUserClick: () -> Unit, onWelcomeClick: (banner: Banner) -> Unit, onBrowserClick: () -> Unit, onCreateProfileClick: () -> Unit, onFindPharmacyClick: () -> Unit, onSelectPharmacyClick: () -> Unit, onSelectPharmacyRefillClick: () -> Unit, onCreateProfileSuccessClick: () -> Unit, onFindPharmacyWithStore: () -> Unit, onLockedOutStoreClick: () -> Unit, onLockedOutDominionStoreClick: () -> Unit, onPrescriptionDetailsClick: () -> Unit, onContactUsClick: () -> Unit, onContactUsDominionClick: () -> Unit, onSettingsClick: (userType: UserType) -> Unit, onProfileVerificationScreenClick: () -> Unit )</ID>
    <ID>LongMethod:DailyScreenerResultsController.kt$DailyScreenerResultsController$override fun buildModels()</ID>
    <ID>LongMethod:DashboardScreen.kt$@Composable fun DashboardScreenContent( userInfo: UserInfo, onClick: (banner: Banner) -> Unit, onAccountSettingsClick: (banner: UserType) -> Unit, contactUsClick: () -> Unit )</ID>
    <ID>LongMethod:DependentCardController.kt$DependentCardController$override fun buildModels()</ID>
    <ID>LongMethod:DependentJsonAdapter.kt$DependentJsonAdapter$public override fun fromJson(reader: JsonReader): Dependent</ID>
    <ID>LongMethod:DependentJsonAdapter.kt$DependentJsonAdapter$public override fun toJson(writer: JsonWriter, value_: Dependent?): Unit</ID>
    <ID>LongMethod:DependentsActivity.kt$DependentsActivity$private fun observeData()</ID>
    <ID>LongMethod:DependentsController.kt$DependentsController$override fun buildModels()</ID>
    <ID>LongMethod:DependentsViewModel.kt$DependentsViewModel$private fun getDependentRelationshipSchema( eventType: DependentUiEventType, dependent: Dependent? = null )</ID>
    <ID>LongMethod:DialogActivity.kt$DialogActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$public override fun fromJson(reader: JsonReader): EmptyState</ID>
    <ID>LongMethod:EnableNotificationScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable private fun EnableNotificationScreenContent( onActionClick: () -> Unit, uiState: EnableNotificationData, isAREnabled: Boolean )</ID>
    <ID>LongMethod:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$public override fun fromJson(reader: JsonReader): Environment</ID>
    <ID>LongMethod:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$@Composable fun EnvironmentSwitcherContent( environmentNames: List&lt;String>, environmentViewModel: EnvironmentViewModel = viewModel() )</ID>
    <ID>LongMethod:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter$public override fun fromJson(reader: JsonReader): ExitScreen</ID>
    <ID>LongMethod:FeatureFlagDetailFragment.kt$@Composable fun FeatureFlagDetailContent( featureFlag: FeatureFlagWithValueState&lt;*>, isNewValueValid: Boolean, onSaveBoolean: (Boolean) -> Unit, onSaveField: (String) -> Unit, onClearOverride: () -> Unit )</ID>
    <ID>LongMethod:FeatureFlagsFragment.kt$@Composable fun FeatureFlagsContent( featureFlags: List&lt;FeatureFlagWithValueState&lt;*>>, onFeatureFlagClick: (FeatureFlagWithValueState&lt;*>) -> Unit, onClearAllOverrides: () -> Unit )</ID>
    <ID>LongMethod:FileJsonAdapter.kt$FileJsonAdapter$public override fun fromJson(reader: JsonReader): File</ID>
    <ID>LongMethod:FindLocationWithRxAndStoreNumberScreen.kt$@Composable private fun FindLocationWithRxAndStoreNumberForm( findPharmacyFormState: FindLocationWithRxAndStoreData, onContinueClick: () -> Unit )</ID>
    <ID>LongMethod:FormJsonAdapter.kt$FormJsonAdapter$public override fun fromJson(reader: JsonReader): Form</ID>
    <ID>LongMethod:FusionColors.kt$GenesisColors$fun update(other: GenesisColors)</ID>
    <ID>LongMethod:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$public override fun fromJson(reader: JsonReader): GenericCard</ID>
    <ID>LongMethod:GenesisBordedListTile.kt$@Preview( name = "Genesis Bordered Radio Field", group = "Radio Input" ) @Composable fun GenesisBorderedListTilePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:GenesisButton.kt$@Preview(name = "Genesis Button", group = "Button") @Composable fun GenesisButtonPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:GenesisCalendarView.kt$ @Composable @ExperimentalGenesisCalendarApi @OptIn(ExperimentalPagerApi::class) fun GenesisCalendarView( modifier: Modifier = Modifier, calendarMonthModifier: Modifier = Modifier, minDate: Date, maxDate: Date, isSelected: (Date) -> Boolean, isEnabled: (Date) -> Boolean, dateSelected: (Date, Boolean) -> Unit, pagerState: PagerState = rememberPagerState(), )</ID>
    <ID>LongMethod:GenesisCheckbox.kt$@Composable private fun CheckboxImpl( modifier: Modifier, enabled: Boolean, state: ToggleableState, colors: CheckboxColors, error: Boolean, onClick: (() -> Unit)?, interactionSource: MutableInteractionSource, )</ID>
    <ID>LongMethod:GenesisColors.kt$GenesisColors$fun update(other: GenesisColors)</ID>
    <ID>LongMethod:GenesisEmptySectionView.kt$@Composable fun GenesisEmptySectionView( modifier: Modifier = Modifier, sectionHeader: String = "", title: String, description: String, ctaText: String = "", ctaAction: () -> Unit = {}, navigationText: String = "", navigationAction: () -> Unit = {}, showToolTip: Boolean = false, toolTipAction: () -> Unit = {} )</ID>
    <ID>LongMethod:GetAllAchievementsTestData.kt$GetAllAchievementsTestData$fun getCompletedStreaks(): List&lt;AchievementDetail></ID>
    <ID>LongMethod:GetAllAchievementsTestData.kt$GetAllAchievementsTestData$private fun getCompletedActivities(): List&lt;AchievementDetail></ID>
    <ID>LongMethod:GetAllAchievementsTestData.kt$GetAllAchievementsTestData$private fun getCompletedPrograms(): List&lt;AchievementDetail></ID>
    <ID>LongMethod:HeaderController.kt$HeaderController$override fun buildModels()</ID>
    <ID>LongMethod:HealthJourneyItemCompleteBottomSheetDialog.kt$@Composable private fun CompleteBanner( completeItem: HealthJourneyItemCompletionScreen, onClickDismiss: () -> Unit )</ID>
    <ID>LongMethod:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$public override fun fromJson(reader: JsonReader): HealthJourneyItemCompletionScreen</ID>
    <ID>LongMethod:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View</ID>
    <ID>LongMethod:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$public override fun fromJson(reader: JsonReader): HealthJourneyItemDetail</ID>
    <ID>LongMethod:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$public override fun toJson(writer: JsonWriter, value_: HealthJourneyItemDetail?): Unit</ID>
    <ID>LongMethod:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$public override fun fromJson(reader: JsonReader): HealthJourneyItem</ID>
    <ID>LongMethod:HealthJourneyRemovalConfirmationBottomSheetDialog.kt$@Composable private fun RemovalConfirmationBanner( isProgram: Boolean, isLoading: Boolean, onClickDismiss: (wasCancelled: Boolean) -> Unit, onClickRemove: () -> Unit )</ID>
    <ID>LongMethod:HealthNeedController.kt$HealthNeedController$override fun buildModels()</ID>
    <ID>LongMethod:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$public override fun fromJson(reader: JsonReader): HealthNeed</ID>
    <ID>LongMethod:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$public override fun fromJson(reader: JsonReader): HealthNeedRecommendation</ID>
    <ID>LongMethod:HealthNeedSummaryJsonAdapter.kt$HealthNeedSummaryJsonAdapter$public override fun fromJson(reader: JsonReader): HealthNeedSummary</ID>
    <ID>LongMethod:HealthProfileController.kt$HealthProfileController$override fun buildModels()</ID>
    <ID>LongMethod:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$public override fun fromJson(reader: JsonReader): HealthProfile</ID>
    <ID>LongMethod:HealthProgramDetailsFragment.kt$@Composable private fun HealthProgramScreen( modifier: Modifier = Modifier, state: State&lt;HealthProgramDetails>?, onCloseClick: () -> Unit, actionLoading: Boolean, onActionClick: (HealthProgramDetails) -> Unit, onLoadingError: () -> Unit, showAchievements: Boolean, onCobrandingButtonClick: (HealthProgramDetails, Modal) -> Unit, onRemoveClick: (HealthProgramDetails) -> Unit )</ID>
    <ID>LongMethod:HealthProgramDetailsFragment.kt$HealthProgramDetailsFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$public override fun fromJson(reader: JsonReader): HealthProgramDetails</ID>
    <ID>LongMethod:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$public override fun fromJson(reader: JsonReader): HealthProgram</ID>
    <ID>LongMethod:HealthProgramLibraryFragment.kt$@Composable private fun HealthProgramLibraryScreen( modifier: Modifier, state: HealthProgramLibraryViewModel.HealthProgramLibraryViewState?, onCloseClick: () -> Unit, onEnrollmentLimitBannerClick: (ProgramEnrollmentLimitDetails) -> Unit, onCobrandingBannerClick: (String, Info) -> Unit, onProgramClickInAllPrograms: (HealthProgram) -> Unit, onProgramClickInCuratedCarousel: (HealthProgram, Int, String) -> Unit, onProgramClickInSuggestedCarousel: (HealthProgram, Int, String) -> Unit, onCategoryClick: (HealthProgramsCategory) -> Unit, onCarouselActionClick: (HealthProgramsCarousel) -> Unit, onChallengeClick: (ProgramLibraryChallenge) -> Unit )</ID>
    <ID>LongMethod:HealthProgramLibraryFragment.kt$HealthProgramLibraryFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$public override fun fromJson(reader: JsonReader): HealthPrograms</ID>
    <ID>LongMethod:HealthSolutionCategoryJsonAdapter.kt$HealthSolutionCategoryJsonAdapter$public override fun fromJson(reader: JsonReader): HealthSolutionCategory</ID>
    <ID>LongMethod:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$public override fun fromJson(reader: JsonReader): HelpfulTip</ID>
    <ID>LongMethod:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$public override fun fromJson(reader: JsonReader): HomeBanner</ID>
    <ID>LongMethod:HomeController.kt$HomeController$private fun buildBannerModel(id: String?)</ID>
    <ID>LongMethod:HomeController.kt$HomeController$private fun buildJourney()</ID>
    <ID>LongMethod:HomeController.kt$HomeController$private fun buildLifemarketModels()</ID>
    <ID>LongMethod:HomeController.kt$HomeController$private fun buildLifemarketModels(id: String?)</ID>
    <ID>LongMethod:HomeFragment.kt$HomeFragment$private fun setupObservers()</ID>
    <ID>LongMethod:HomeViewModel.kt$HomeViewModel$private fun loadDailyScreenerInfo()</ID>
    <ID>LongMethod:HomeViewModel.kt$HomeViewModel$private fun populateHomeLayout( location: Location?, homeLayoutConfig: HomeLayout )</ID>
    <ID>LongMethod:IdentityJsonAdapter.kt$IdentityJsonAdapter$public override fun fromJson(reader: JsonReader): Identity</ID>
    <ID>LongMethod:ImportedUserReadingJsonAdapter.kt$ImportedUserReadingJsonAdapter$public override fun fromJson(reader: JsonReader): ImportedUserReading</ID>
    <ID>LongMethod:InputActivity.kt$InputActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$public override fun fromJson(reader: JsonReader): InputAnswer</ID>
    <ID>LongMethod:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$public override fun fromJson(reader: JsonReader): InsightCard</ID>
    <ID>LongMethod:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$public override fun fromJson(reader: JsonReader): Insurance</ID>
    <ID>LongMethod:IntakeFormResponseJsonAdapter.kt$IntakeFormResponseJsonAdapter$public override fun fromJson(reader: JsonReader): IntakeFormResponse</ID>
    <ID>LongMethod:JsonApiAdapterTest.kt$JsonApiAdapterTest$@Test fun `resources - embedded resources`()</ID>
    <ID>LongMethod:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter$public override fun fromJson(reader: JsonReader): JsonApiError</ID>
    <ID>LongMethod:JsonApiLinksJsonAdapter.kt$JsonApiLinksJsonAdapter$public override fun fromJson(reader: JsonReader): JsonApiLinks</ID>
    <ID>LongMethod:LandingFragment.kt$LandingFragment$@Composable private fun NavigationBrowser()</ID>
    <ID>LongMethod:LaunchFragment.kt$@Composable fun LaunchContent( isLoggedIn: Boolean, isLoading: Boolean, canUseBiometrics: Boolean, snackbarHostState: SnackbarHostState, currentEnvironment: String, onBrowseFeature: () -> Unit, onLogin: () -> Unit, onLogout: () -> Unit, onBiometrics: () -> Unit, onSwitchEnvironment: () -> Unit, onFeatureFlag: () -> Unit, onShareScreenshotFeature: () -> Unit, )</ID>
    <ID>LongMethod:LaunchFragment.kt$@Composable fun LaunchContent( isLoggedIn: Boolean, isLoading: Boolean, snackbarHostState: SnackbarHostState, currentEnvironment: String, onBrowseFeature: () -> Unit, onLogin: () -> Unit, onLogout: () -> Unit, onSwitchEnvironment: () -> Unit, onFeatureFlag: () -> Unit )</ID>
    <ID>LongMethod:LeagueApplication.kt$LeagueApplication$override fun onCreate()</ID>
    <ID>LongMethod:LeagueNavigation.kt$LeagueNavigation$override fun handleNavigation( activity: Activity, navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController? ): Boolean</ID>
    <ID>LongMethod:LeagueRestAPITest.kt$LeagueRestAPITest$@Test fun `TokenAuthenticator authenticate`()</ID>
    <ID>LongMethod:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$public override fun fromJson(reader: JsonReader): LifemarketMerchList</ID>
    <ID>LongMethod:ListController.kt$ListController$override fun buildModels()</ID>
    <ID>LongMethod:LiveBalanceController.kt$LiveBalanceController$override fun buildModels()</ID>
    <ID>LongMethod:LoginFragment.kt$LoginFragment$private fun setupObservables()</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$override fun handleNavigation( navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int? ): Boolean</ID>
    <ID>LongMethod:MapleIntroFragment.kt$MapleIntroFragment$private fun setupObservables()</ID>
    <ID>LongMethod:MapleIntroFragment.kt$MapleIntroFragment$private fun setupViews(response: ChatProviderResponse)</ID>
    <ID>LongMethod:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter$public override fun fromJson(reader: JsonReader): MaplePostConsults</ID>
    <ID>LongMethod:MemberJsonAdapter.kt$MemberJsonAdapter$public override fun fromJson(reader: JsonReader): Member</ID>
    <ID>LongMethod:ModuleJsonAdapter.kt$ModuleJsonAdapter$public override fun fromJson(reader: JsonReader): Module</ID>
    <ID>LongMethod:MultiStepHealthJourneyItemCompletionFragment.kt$MultiStepHealthJourneyItemCompletionFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MultiStepHealthJourneyItemCompletionFragmentArgs</ID>
    <ID>LongMethod:MultiStepHealthJourneyItemCompletionScreen.kt$@ExperimentalPagerApi @Composable internal fun MultiStepHealthJourneyItemScreen( modifier: Modifier = Modifier, onCloseClick: () -> Unit, onDoneClick: () -> Unit, doneText: String, steps: List&lt;String>, lifecycleCoroutineScope: LifecycleCoroutineScope?, onPageChange: (Int) -> Unit, onNextPage: (Int) -> Unit, onPreviousPage: (Int) -> Unit, showDoneButton: Boolean, )</ID>
    <ID>LongMethod:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$public override fun fromJson(reader: JsonReader): MultipleSelectionAnswer</ID>
    <ID>LongMethod:NotificationJsonAdapter.kt$NotificationJsonAdapter$public override fun fromJson(reader: JsonReader): Notification</ID>
    <ID>LongMethod:OnboardingPageJsonAdapter.kt$OnboardingPageJsonAdapter$public override fun fromJson(reader: JsonReader): OnboardingPage</ID>
    <ID>LongMethod:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$public override fun fromJson(reader: JsonReader): OutcomesSuggestions</ID>
    <ID>LongMethod:PCHealthAuthenticator_RefreshAndAuthenticateJWT.kt$// refreshAndAuthenticateJwt can only have one request in session, however it's likely that multiple threads // and context will discover the JwtToken is expired and try to call this. We resolve this by calling it once // and queuing all subsequent requests. Then when the first request returns, we call all of the queued callbacks. fun PCHealthAuthenticator.refreshAndAuthenticateJwt( api: API, sessionId: String, deviceToken: String, callback: RequestCallback&lt;AuthInfo>? = null )</ID>
    <ID>LongMethod:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$@Composable fun AddNewReadingsContent( onClickListener: () -> Unit )</ID>
    <ID>LongMethod:PageWithTabController.kt$PageWithTabController$override fun buildModels()</ID>
    <ID>LongMethod:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): PatientAttributes</ID>
    <ID>LongMethod:PcoAccountUtils.kt$PcoAccountUtils$ suspend fun refreshAuthTokens(api: API, analyticsTracker: AnalyticsTracker): Boolean</ID>
    <ID>LongMethod:PersonalInfoFragment.kt$PersonalInfoFragment$private fun setOnTextChangedListeners()</ID>
    <ID>LongMethod:PersonalInfoFragment.kt$PersonalInfoFragment$private fun setupObservables()</ID>
    <ID>LongMethod:PersonalInfoViewModel.kt$PersonalInfoViewModel$private fun fetchPersonalInfo()</ID>
    <ID>LongMethod:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$public override fun fromJson(reader: JsonReader): PersonalStoreCreditBalance</ID>
    <ID>LongMethod:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): PractitionerAttributes</ID>
    <ID>LongMethod:PractitionerSelectionComposable.kt$@Preview @Composable private fun PractitionerSelectionComposablePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:PractitionerSelectionComposable.kt$@Preview @Composable private fun PractitionerSelectionNextAvailableComposablePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:PrescriptionTile.kt$@Preview(name = "Prescription tile") @Composable fun PrescriptionTilePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:QRCodeGenerationFragment.kt$@Composable fun LoadedView(time: Int, bitmap: Bitmap?, onCtaClicked: () -> Unit)</ID>
    <ID>LongMethod:QuestionController.kt$QuestionController$override fun buildModels()</ID>
    <ID>LongMethod:QuestionJsonAdapter.kt$QuestionJsonAdapter$public override fun fromJson(reader: JsonReader): Question</ID>
    <ID>LongMethod:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$public override fun fromJson(reader: JsonReader): QuickActionDetailItem</ID>
    <ID>LongMethod:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$public override fun fromJson(reader: JsonReader): QuickActionMenuItem</ID>
    <ID>LongMethod:ReadingJsonAdapter.kt$ReadingJsonAdapter$public override fun fromJson(reader: JsonReader): Reading</ID>
    <ID>LongMethod:RecommendationJsonAdapter.kt$RecommendationJsonAdapter$public override fun fromJson(reader: JsonReader): Recommendation</ID>
    <ID>LongMethod:RewardsTransactionJsonAdapter.kt$RewardsTransactionJsonAdapter$public override fun fromJson(reader: JsonReader): RewardsTransaction</ID>
    <ID>LongMethod:RichTextController.kt$RichTextController$override fun buildModels()</ID>
    <ID>LongMethod:RoadrunnerApplication.kt$RoadrunnerApplication$override fun onCreate()</ID>
    <ID>LongMethod:RowController.kt$RowController$override fun buildModels()</ID>
    <ID>LongMethod:SalesforceProvinceState.kt$SalesforceProvinceState.Companion$fun getAll(): List&lt;SalesforceProvinceState></ID>
    <ID>LongMethod:SelectPharmacyRefillScreen.kt$@Composable fun SelectPharmacyScreen( onSelectYourPharmacyClick: (id: String) -> Unit, onBackClick: () -> Unit, listItems: List&lt;Pharmacy> = listOf() )</ID>
    <ID>LongMethod:SelectPharmacyScreen.kt$@Composable fun SelectPharmacyScreen( viewModel: SelectPharmacyViewModel = SelectPharmacyViewModel(), onSelectYourPharmacyClick: (id: String) -> Unit, onBackClick: () -> Unit, listItems: List&lt;Pharmacy> = listOf() )</ID>
    <ID>LongMethod:SelectPrescriptionsScreen.kt$@Composable fun SelectPrescriptionsScreen( refillListItems: List&lt;Prescription> = listOf(), renewalListItems: List&lt;Prescription> = listOf(), unavailableListItems: List&lt;Prescription> = listOf(), isPrescriptionSelected: (prescriptionId: String, prescriptions: List&lt;String>) -> Boolean, isContinueButtonEnabled: (prescriptions: List&lt;String>) -> Boolean, onBackClick: () -> Unit, onContinueClick: (id: List&lt;String>) -> Unit, onDetailClick: (id: String) -> Unit, onSelectUnselectClick: (prescriptionId: String, prescriptions: List&lt;String>) -> List&lt;String> )</ID>
    <ID>LongMethod:SelectPrescriptionsScreen.kt$@Composable private fun DisplayPrescriptionList( modifier: Modifier = Modifier, refillListItems: List&lt;Prescription>, renewalListItems: List&lt;Prescription>, unavailableListItems: List&lt;Prescription>, prescriptionList: Set&lt;String>, isPrescriptionSelected: (prescriptionId: String, prescriptions: List&lt;String>) -> Boolean, onSelectClick: (String) -> Unit, onDetailClick: (String) -> Unit )</ID>
    <ID>LongMethod:SelectPrescriptionsScreen.kt$@Preview @Composable fun PreviewSelectPrescriptionsScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:SelectServiceFragment.kt$@Preview(heightDp = 900) @Composable fun SelectServiceScreenPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:SettingsFragment.kt$SettingsFragment$private fun setupViews(binding: FragmentSettingsBinding)</ID>
    <ID>LongMethod:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$private fun setupObservables()</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable fun SettingsScreenContent( formState: SettingsData, screenTitle: String, navigationOnClick: () -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit, onSecurityQuestionClick: () -> Unit )</ID>
    <ID>LongMethod:SfChatTranscriptJsonAdapter.kt$SfChatTranscriptJsonAdapter$public override fun fromJson(reader: JsonReader): SfChatTranscript</ID>
    <ID>LongMethod:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$public override fun fromJson(reader: JsonReader): ShopifyProduct</ID>
    <ID>LongMethod:SpecialtyLocationMappingTest.kt$SpecialtyLocationMappingTest$@Test fun `toSpecialtyLocationList() - successfully maps`()</ID>
    <ID>LongMethod:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$public override fun fromJson(reader: JsonReader): SpecialtyLocationsAttributes</ID>
    <ID>LongMethod:StatusCountsJsonAdapter.kt$StatusCountsJsonAdapter$public override fun fromJson(reader: JsonReader): StatusCounts</ID>
    <ID>LongMethod:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter$public override fun fromJson(reader: JsonReader): SuccessScreen</ID>
    <ID>LongMethod:SysJsonAdapter.kt$SysJsonAdapter$public override fun fromJson(reader: JsonReader): Sys</ID>
    <ID>LongMethod:TableActivity.kt$TableActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:TagBanner.kt$@Preview(name = "Tag Banner", group = "Banner") @Composable fun TagBannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>LongMethod:TextInputUseCaseTest.kt$TextInputUseCaseTest$@Test fun `test all text states - ensure that selected characters are banned - make sure all other updates are shown`()</ID>
    <ID>LongMethod:ThirdPartyDetailsJsonAdapter.kt$ThirdPartyDetailsJsonAdapter$public override fun fromJson(reader: JsonReader): ThirdPartyDetails</ID>
    <ID>LongMethod:TopicJsonAdapter.kt$TopicJsonAdapter$public override fun fromJson(reader: JsonReader): Topic</ID>
    <ID>LongMethod:TriageMenuController.kt$TriageMenuController$override fun buildModels()</ID>
    <ID>LongMethod:TriageMenuFragment.kt$TriageMenuFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?, ): View?</ID>
    <ID>LongMethod:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$public override fun fromJson(reader: JsonReader): UserConfig</ID>
    <ID>LongMethod:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$public override fun fromJson(reader: JsonReader): UserDependent</ID>
    <ID>LongMethod:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$public override fun fromJson(reader: JsonReader): UserDocument</ID>
    <ID>LongMethod:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$public override fun fromJson(reader: JsonReader): UserFlags</ID>
    <ID>LongMethod:UserJsonAdapter.kt$UserJsonAdapter$public override fun fromJson(reader: JsonReader): User</ID>
    <ID>LongMethod:UserJsonAdapter.kt$UserJsonAdapter$public override fun toJson(writer: JsonWriter, value_: User?): Unit</ID>
    <ID>LongMethod:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$public override fun fromJson(reader: JsonReader): UserReading</ID>
    <ID>LongMethod:VaccineLandingController.kt$VaccineLandingController$override fun buildModels()</ID>
    <ID>LongMethod:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter$public override fun fromJson(reader: JsonReader): ValidicUser</ID>
    <ID>LongMethod:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter$public override fun fromJson(reader: JsonReader): VerifiableActivityProgressDetail</ID>
    <ID>LongMethod:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$public override fun fromJson(reader: JsonReader): WalletCardAction</ID>
    <ID>LongMethod:WalletCardDetailActivity.kt$WalletCardDetailActivity$private fun observeData()</ID>
    <ID>LongMethod:WalletCardDetailController.kt$WalletCardDetailController$override fun buildModels()</ID>
    <ID>LongMethod:WalletCardDetailController.kt$WalletCardDetailController$private fun setupLiveBalances(liveBalancesData: LiveBalancesViewData)</ID>
    <ID>LongMethod:WalletCategoriesController.kt$WalletCategoriesController$override fun buildModels()</ID>
    <ID>LongMethod:WalletCategoriesResponseTest.kt$WalletCategoriesResponseTest$@Test fun `getWalletCategories - active cards`()</ID>
    <ID>LongMethod:WalletCategoriesResponseTest.kt$WalletCategoriesResponseTest$@Test fun `getWalletCategories - pending cards`()</ID>
    <ID>LongMethod:WalletCategoriesViewModelTest.kt$WalletCategoriesViewModelTest$@Test fun `getCategories - success - past, pending, and active cards`()</ID>
    <ID>LongMethod:WalletIndividualLiveBalanceController.kt$WalletIndividualLiveBalanceController$override fun buildModels()</ID>
    <ID>LongMethod:WalletJsonAdapter.kt$WalletJsonAdapter$public override fun fromJson(reader: JsonReader): Wallet</ID>
    <ID>LongMethod:WearableConsentPrimerView.kt$@Composable private fun WearableConsentPrimerView( modifier: Modifier = Modifier, icon: Int, title: String, description: String, deviceStrId: Int, additionalDataPoints: List&lt;String>?, requiredDataPoints: List&lt;String>, primaryCtaAction: () -> Unit = {}, secondaryCtaAction: () -> Unit = {}, navigationOnClick: () -> Unit = {}, )</ID>
    <ID>LongMethod:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$public override fun fromJson(reader: JsonReader): WearableDevice</ID>
    <ID>LongMethod:WelcomeNewUserScreen.kt$@ExperimentalMaterialApi @Composable fun WelcomeNewUserScreenContent( coroutineScope: CoroutineScope, bottomSheetScaffoldState: ModalBottomSheetState, userInfo: UserInfo, isNewfoundlandLabrador: Boolean, onProfileClick: () -> Unit, onPharmacyClick: () -> Unit )</ID>
    <ID>LongParameterList:API_Document.kt$( contentIds: SparseArray&lt;String>, name: String, type: String, description: String, notes: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>LongParameterList:API_Document.kt$( name: String, type: String, description: String, notes: String, documents: List&lt;Document>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>LongParameterList:API_HealthProfile.kt$( questionId: String, moduleId: String? = null, answers: Answers, campaignId: String? = null, activityId: String? = null, callback: RequestCallback&lt;CompleteQuestionResponse> )</ID>
    <ID>LongParameterList:API_Messages.kt$( messageType: String, json: JSONObject, trace: RemoteTrace?, log: Logger, jsonAdapter: JsonAdapter, callback: RequestCallback&lt;*> )</ID>
    <ID>LongParameterList:AnalyticsTracker_HealthGoal.kt$( programName: String, programId: String, carouselName: String, carouselIndex: Int, numberOfActivePrograms: Int?, programLimit: Int? )</ID>
    <ID>LongParameterList:AnalyticsTracker_HealthJourney.kt$(activityType: String, activityName: String, activityId: String, contentType: String, contentUrl: String, linkName: String)</ID>
    <ID>LongParameterList:AnalyticsTracker_HealthProfile.kt$( moduleId: String, moduleType: String, pageName: String?, questionId: String, questionNumber: Int, totalQuestions: Int )</ID>
    <ID>LongParameterList:AnalyticsTracker_HealthProfile.kt$( moduleId: String, moduleType: String, questionTitle: String, questionId: String, questionNumber: Int, totalQuestions: Int )</ID>
    <ID>LongParameterList:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$( selectedDevice: String? = null, dataPoints: String? = null, dataPointsString: String? = null, fromJourney: Boolean = false, device: String? = null, moduleIdentifier: String? = null )</ID>
    <ID>LongParameterList:AssessmentCompleteFragmentDirections.kt$AssessmentCompleteFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$( points: Int = 0, moduleId: String, moduleType: String, isRetake: Boolean = false, navigationTarget: Int = 38, successScreen: SuccessScreen )</ID>
    <ID>LongParameterList:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$( moduleId: String, moduleType: String, previousResponse: PreviousResponse? = null, retakeAssessment: Boolean = false, campaignId: String = "\"\"", activityId: String = "\"\"" )</ID>
    <ID>LongParameterList:AssessmentNavGraphDirections.kt$AssessmentNavGraphDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:AssessmentQuestionFragment.kt$AssessmentQuestionFragment$( exitScreen: ExitScreen?, completionPoints: Int, moduleId: String, moduleType: String, questionId: String, questionNumber: Int, totalQuestions: Int, redirectUrl: String? )</ID>
    <ID>LongParameterList:AssessmentQuestionFragment.kt$AssessmentQuestionFragment$( moduleId: String, moduleType: String, questionId: String, points: Int, answers: Answers, successScreen: SuccessScreen? )</ID>
    <ID>LongParameterList:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$( points: Int = 0, moduleId: String, moduleType: String, isRetake: Boolean = false, navigationTarget: Int = 38, successScreen: SuccessScreen )</ID>
    <ID>LongParameterList:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$( points: Int = 0, questionId: String, moduleId: String, moduleType: String, answers: Answers?, isRetake: Boolean = false, successScreen: SuccessScreen? = null, frictionScreen: FrictionScreen? = null )</ID>
    <ID>LongParameterList:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$( points: Int = 0, questionId: String, moduleId: String, moduleType: String, answers: Answers?, isRetake: Boolean = false, successScreen: SuccessScreen? = null, frictionScreen: FrictionScreen? = null )</ID>
    <ID>LongParameterList:ContentAPI_Upload.kt$( imageContentIds: SparseArray&lt;String>, index: Int, referenceId: String?, contentList: List&lt;Content>, uiHandler: Handler, callback: RequestCallback&lt;SparseArray&lt;String>>, contentType: ContentAPI.ContentType )</ID>
    <ID>LongParameterList:CoreNavigation.kt$CoreNavigation$( activity: Activity, navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null )</ID>
    <ID>LongParameterList:CoreNavigation.kt$CoreNavigation$( activity: Activity, uri: Uri, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController?, navOptions: NavOptions? )</ID>
    <ID>LongParameterList:CoreNavigation.kt$CoreNavigation$( activity: Activity, url: String, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null, navOptions: NavOptions? = null )</ID>
    <ID>LongParameterList:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:FetchPractitionersUseCase.kt$FetchPractitionersUseCase$( specialtyId: String, serviceId: String, appointmentType: AppointmentType, orgId: OrgId, province: Province, locationId: String? = null, patientId: String? = null )</ID>
    <ID>LongParameterList:FusionColors.kt$GenesisColors$( fillPrimary: Color = debugColor, fillSecondary: Color = debugColor, fillTertiary: Color = debugColor, fillQuaternary: Color = debugColor, fillLight: Color = debugColor, fillDisabled: Color = debugColor, fillGoalActiveContrast: Color = debugColor, fillNeutralDark: Color = debugColor, fillNeutralLight: Color = debugColor, fillIndicator: Color = debugColor, backgroundProgressBar: Color = debugColor, fillProgressBarPrimary: Color = debugColor, fillProgressBarSecondary: Color = debugColor, fillMultiProgressBarPrimary: Color = debugColor, fillMultiProgressBarSecondary: Color = debugColor, fillMultiProgressBarTertiary: Color = debugColor, fillMultiProgressBarQuaternary: Color = debugColor, fillMultiProgressBarQuinary: Color = debugColor, fillMultiProgressBarSenary: Color = debugColor, backgroundPrimary: Color = debugColor, backgroundPrimaryHighlight: Color = debugColor, backgroundSecondary: Color = debugColor, backgroundSecondaryHighlight: Color = debugColor, backgroundEmergency: Color = debugColor, backgroundDanger: Color = debugColor, backgroundDangerHighlight: Color = debugColor, backgroundInfo: Color = debugColor, backgroundInfoHighlight: Color = debugColor, backgroundInfoLight: Color = debugColor, backgroundSuccess: Color = debugColor, backgroundSuccessHighlight: Color = debugColor, backgroundDisabled: Color = debugColor, backgroundDark: Color = debugColor, backgroundPointsDark: Color = debugColor, backgroundGoalActive: Color = debugColor, backgroundButtonPrimary: Color = debugColor, backgroundButtonPrimaryPressed: Color = debugColor, backgroundButtonSecondary: Color = debugColor, backgroundButtonSecondaryPressed: Color = debugColor, backgroundButtonSubtle: Color = debugColor, backgroundButtonSubtlePressed: Color = debugColor, backgroundButtonDanger: Color = debugColor, backgroundButtonDangerPressed: Color = debugColor, backgroundButtonDisabled: Color = debugColor, backgroundButtonCircularSelected: Color = debugColor, backgroundButtonCircularSelectedPressed: Color = debugColor, backgroundButtonCircularUnselectedPressed: Color = debugColor, backgroundButtonPill: Color = debugColor, backgroundButtonPillPressed: Color = debugColor, backgroundInputDefault: Color = debugColor, backgroundInputDisabled: Color = debugColor, backgroundCheckedInputDefault: Color = debugColor, backgroundCheckedInputDisabled: Color = debugColor, backgroundPageSwoopPrimary: Color = debugColor, backgroundPageSwoopSecondary: Color = debugColor, backgroundPageSwoopTertiary: Color = debugColor, backgroundBottomNav: Color = debugColor, backgroundTabSelected: Color = debugColor, backgroundTabUnselected: Color = debugColor, backgroundTopicOverline: Color = debugColor, backgroundFeedback: Color = debugColor, backgroundWarning: Color = debugColor, backgroundWarningHighlight: Color = debugColor, backgroundOptionUnselected: Color = debugColor, backgroundOptionSelected: Color = debugColor, backgroundToolbar: Color = debugColor, textPrimary: Color = debugColor, textSecondary: Color = debugColor, textDark: Color = debugColor, textLight: Color = debugColor, textLightSecondary: Color = debugColor, textLightTertiary: Color = debugColor, textDanger: Color = debugColor, textLabel: Color = debugColor, textHint: Color = debugColor, textLinkDefault: Color = debugColor, textLinkPressed: Color = debugColor, textLinkDisabled: Color = debugColor, textChoiceDefault: Color = debugColor, textChoiceDisabled: Color = debugColor, textButtonPrimary: Color = debugColor, textButtonSecondary: Color = debugColor, textButtonDanger: Color = debugColor, textButtonSubtle: Color = debugColor, textButtonSubtleSecondary: Color = debugColor, textButtonDisabled: Color = debugColor, textInputDefault: Color = debugColor, textInputDisabled: Color = debugColor, textInputPlaceholder: Color = debugColor, textCardDescription: Color = debugColor, textCardCaption: Color = debugColor, textGoalActiveContrast: Color = debugColor, textGoalActiveContrastSubtle: Color = debugColor, textGoalDisabled: Color = debugColor, textGoalOverline: Color = debugColor, textButtonCircularUnselected: Color = debugColor, textButtonCircularSelected: Color = debugColor, textButtonPill: Color = debugColor, textActionBarButton: Color = debugColor, textOptionUnselected: Color = debugColor, textOptionSelected: Color = debugColor, textOptionDescriptionSelected: Color = debugColor, textOptionDescriptionUnselected: Color = debugColor, textPointsEarned: Color = debugColor, borderDefault: Color = debugColor, borderButtonSubtle: Color = debugColor, borderInputDefault: Color = debugColor, borderInputFocused: Color = debugColor, borderInputDisabled: Color = debugColor, borderInputDanger: Color = debugColor, borderButtonSecondary: Color = debugColor, borderPrimary: Color = debugColor, borderButtonCircular: Color = debugColor, borderNeutralLighter: Color = debugColor, borderOptionUnselected: Color = debugColor, borderOptionSelected: Color = debugColor, dividerPrimary: Color = debugColor )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisBackgroundColors$( val backgroundProgressBar: Color = Color(0xFFEDE8FA), val backgroundPrimary: Color = Color(0xFFFFFFFF), val backgroundPrimaryHighlight: Color = Color(0xFFEDE8FA), val backgroundSecondary: Color = Color(0xFFF8F8F8), val backgroundSecondaryHighlight: Color = Color(0xFFEAEEFB), val backgroundEmergency: Color = Color(0xFFF9DEE3), val backgroundDanger: Color = Color(0xFFF9DEE3), val backgroundDangerHighlight: Color = Color(0xFFDA2045), val backgroundInfo: Color = Color(0xFFEAEEFB), val backgroundInfoHighlight: Color = Color(0xFF2E5CDF), val backgroundInfoLight: Color = Color(0xFF2E5CDF), val backgroundSuccess: Color = Color(0xFFE5F6F1), val backgroundSuccessHighlight: Color = Color(0xFF00A876), val backgroundDisabled: Color = Color(0xFFF0F0F0), val backgroundDark: Color = Color(0xFF250D53), val backgroundPointsDark: Color = Color(0xFFEDE8FA), val backgroundGoalActive: Color = Color(0xFF250D53), val backgroundButtonPrimary: Color = Color(0xFF501CD2), val backgroundButtonPrimaryPressed: Color = Color(0xFF3E16A3), val backgroundButtonSecondary: Color = Color(0xFFEDE8FA), val backgroundButtonSecondaryPressed: Color = Color(0xFFDCD2F6), val backgroundButtonSubtle: Color = Color(0xFFFFFFFF).copy(alpha = 0f), val backgroundButtonSubtlePressed: Color = Color(0xFFF8F8F8), val backgroundButtonDanger: Color = Color(0xFFDA2045), val backgroundButtonDangerPressed: Color = Color(0xFFBA1B3B), val backgroundButtonDisabled: Color = Color(0xFFD7D7D7), val backgroundButtonCircularSelected: Color = Color(0xFF501CD2), val backgroundButtonCircularSelectedPressed: Color = Color(0xFF3E16A3), val backgroundButtonCircularUnselectedPressed: Color = Color(0xFF3E16A3), val backgroundButtonPill: Color = Color(0xFFEDE8FA), val backgroundButtonPillPressed: Color = Color(0xFFDCD2F6), val backgroundInputDefault: Color = Color(0xFFFFFFFF), val backgroundInputDisabled: Color = Color(0xFFF0F0F0), val backgroundCheckedInputDefault: Color = Color(0xFF501CD2), val backgroundCheckedInputDisabled: Color = Color(0xFF949494), val backgroundPageControls: Color = Color(0xFFEDE8FA), val backgroundPageSwoopPrimary: Color = Color(0xFFEAEEFB), val backgroundPageSwoopSecondary: Color = Color(0xFFE5F6F1), val backgroundPageSwoopTertiary: Color = Color(0xFFE0F6F6), val backgroundBottomNav: Color = Color(0xFFFFFFFF), val backgroundTabSelected: Color = Color(0xFF501CD2), val backgroundTabUnselected: Color = Color(0xFF949494), val backgroundTopicOverline: Color = Color(0xFF250D53), val backgroundFeedback: Color = Color(0xFFEDE8FA), val backgroundWarning: Color = Color(0xFFFEF3E6), val backgroundWarningSubdued: Color = debugColor, val backgroundWarningHighlight: Color = Color(0xFFFD9833), val backgroundOptionUnselected: Color = Color(0xFFFFFFFF), val backgroundOptionSelected: Color = Color(0xFFDCD2F6), val backgroundToolbar: Color = debugColor, val backgroundSuggestedDark: Color = Color(0xFFE5CF73), val backgroundSuggested: Color = Color(0xFFE5CF73), val backgroundSubduedHighlight: Color = Color(0xFFEAEEFB), )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisBorderColors$( val borderDefault: Color = Color(0xFF949494), val borderButtonSubtle: Color = Color(0xFF949494), val borderInputDefault: Color = Color(0xFFD7D7D7), val borderInputFocused: Color = Color(0xFF501CD2), val borderInputDisabled: Color = Color(0xFFD7D7D7), val borderInputDanger: Color = Color(0xFFDA2045), val borderButtonSecondary: Color = Color(0xFFFFFFFF).copy(alpha = 0f), val borderPrimary: Color = Color(0xFFD7D7D7), val borderButtonCircular: Color = Color(0xFF501CD2), val borderNeutralLighter: Color = Color(0xFFF0F0F0), val borderOptionUnselected: Color = Color(0xFFD7D7D7), val borderOptionSelected: Color = Color(0xFF501CD2), val dividerPrimary: Color = Color(0xFFD7D7D7), )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisColors$( fillColors: GenesisFillColors, backgroundColors: GenesisBackgroundColors, textColors: GenesisTextColors, borderColors: GenesisBorderColors, // NEW TOKENS// genesisSurfaceColors: GenesisSurfaceColors, genesisOnSurfaceColors: GenesisOnSurfaceColors, genesisPrimaryColors: GenesisPrimaryColors, genesisSecondaryColors: GenesisSecondaryColors, genesisTertiaryColors: GenesisTertiaryColors, genesisInteractiveColors: GenesisInteractiveColors, genesisCriticalColors: GenesisCriticalColors, genesisWarningColors: GenesisWarningColors, genesisSuccessColors: GenesisSuccessColors, genesisHighlightColors: GenesisHighlightColors, genesisDecorativeColors: GenesisDecorativeColors )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisDecorativeColors$( val decorativeBrandPrimaryDarkest: Color = Color(0xFF250D53), val decorativeBrandPrimaryDark: Color = Color(0xFF3E16A3), val decorativeBrandPrimaryDefault: Color = Color(0xFF501CD2), val decorativeBrandPrimaryBright: Color = Color(0xFFB9A4ED), val decorativeBrandPrimaryBrightest: Color = Color(0xFFDCD2F6), val decorativeBrandPrimaryPastel: Color = Color(0xFFEDE8FA), val decorativeBrandSecondaryDarkest: Color = Color(0xFFFFFFFF), val decorativeBrandSecondaryDark: Color = Color(0xFF15846D), val decorativeBrandSecondaryDefault: Color = Color(0xFF01C3A2), val decorativeBrandSecondaryBright: Color = Color(0xFFE8F8F5), val decorativeBrandSecondaryBrightest: Color = Color(0xFFFFFFFF), val decorativeBrandSecondaryPastel: Color = Color(0xFFFFFFFF), /*decorativeBrandTertiaryDarkest: Color = debugColor, decorativeBrandTertiaryDark: Color = debugColor, decorativeBrandTertiaryDefault: Color = debugColor, decorativeBrandTertiaryBright: Color = debugColor, decorativeBrandTertiaryBrightest: Color = debugColor, decorativeBrandTertiaryPastel: Color = debugColor*/ )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisFillColors$( val fillPrimary: Color = Color(0xFF66686B), val fillSecondary: Color = Color(0xFF00A886), val fillTertiary: Color = Color(0xFF250D53), val fillQuaternary: Color = Color(0xFFEDE8FA), val fillLight: Color = Color(0xFFFFFFFF), val fillDisabled: Color = Color(0xFF767676), val fillGoalActiveContrast: Color = Color(0xFFFFFFFF), val fillNeutralDark: Color = Color(0xFF66686B), val fillNeutralLight: Color = Color(0xFFD7D7D7), val fillIndicator: Color = Color(0xFF501CD2), val fillProgressBarPrimary: Color = Color(0xFF501CD2), val fillProgressBarSecondary: Color = Color(0xFFB9A4ED), val fillMultiProgressBarPrimary: Color = Color(0xFFF1A1B1), val fillMultiProgressBarSecondary: Color = Color(0xFF01C3A2), val fillMultiProgressBarTertiary: Color = Color(0xFFFD9833), val fillMultiProgressBarQuaternary: Color = Color(0xFF39C5C2), val fillMultiProgressBarQuinary: Color = Color(0xFF2E5CDF), val fillMultiProgressBarSenary: Color = Color(0xFFE5CF73), )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisInteractiveColors$( val interactiveBackgroundDefault: Color = Color(0xFFFFFFFF), val interactiveBackgroundDisable: Color = Color(0xFFF0F0F0), val interactiveActionPrimary: Color = Color(0xFF501CD2), val interactiveActionHovered: Color = Color(0xFF37209A), val interactiveActionPressed: Color = Color(0xFF251669), val interactiveActionSubdued: Color = Color(0xFF66686B), val interactiveActionDisable: Color = Color(0xFFD6D6D6), val interactiveBorderDefault: Color = Color(0xFF949494), val interactiveBorderHovered: Color = Color(0xFF501CD2), val interactiveBorderDisable: Color = Color(0xFFD6D6D6), val interactiveBorderCriticalDefault: Color = Color(0xFFBA1B3B), val interactiveFocus: Color = Color(0xFF501CD2), val interactiveIconDefault: Color = Color(0xFFFFFFFF), val interactiveIconDisable: Color = Color(0xFF949494) )</ID>
    <ID>LongParameterList:GenesisColors.kt$GenesisTextColors$( val textPrimary: Color = Color(0xFF250D53), val textSecondary: Color = Color(0xFF66686B), val textDark: Color = Color(0xFF250D53), val textLight: Color = Color(0xFFFFFFFF), val textLightSecondary: Color = Color(0xFFEDE8FA), val textLightTertiary: Color = Color(0xFFB9A4ED), val textDanger: Color = Color(0xFFDA2045), val textLabel: Color = Color(0xFF66686B), val textHint: Color = Color(0xFF767676), val textLinkDefault: Color = Color(0xFF501CD2), val textLinkPressed: Color = Color(0xFF250D53), val textLinkDisabled: Color = Color(0xFFF8F7F6), val textChoiceDefault: Color = Color(0xFF250D53), val textChoiceDisabled: Color = Color(0xFF767676), val textButtonPrimary: Color = Color(0xFFFFFFFF), val textButtonSecondary: Color = Color(0xFF501CD2), val textButtonDanger: Color = Color(0xFFFFFFFF), val textButtonSubtle: Color = Color(0xFF501CD2), val textButtonSubtleSecondary: Color = Color(0xFF767676), val textButtonDisabled: Color = Color(0xFF767676), val textInputDefault: Color = Color(0xFF250D53), val textInputDisabled: Color = Color(0xFF66686B), val textInputPlaceholder: Color = Color(0xFF767676), val textCardDescription: Color = Color(0xFF767676), val textCardCaption: Color = Color(0xFF250D53), val textGoalActiveContrast: Color = Color(0xFFFFFFFF), val textGoalActiveContrastSubtle: Color = Color(0xFFB9A4ED), val textGoalDisabled: Color = Color(0xFF767676), val textGoalOverline: Color = Color(0xFF501CD2), val textButtonCircularUnselected: Color = Color(0xFF501CD2), val textButtonCircularSelected: Color = Color(0xFFFFFFFF), val textButtonPill: Color = Color(0xFF501CD2), val textActionBarButton: Color = Color(0xFF501CD2), val textOptionUnselected: Color = Color(0xFF767676), val textOptionSelected: Color = Color(0xFF250D53), val textOptionDescriptionSelected: Color = Color(0xFF250D53), val textOptionDescriptionUnselected: Color = Color(0xFF767676), val textPointsEarned: Color = Color(0xFF01C3A2), )</ID>
    <ID>LongParameterList:GenesisDateField.kt$( dialogBuilder: AlertDialog.Builder, datePicker: DatePicker, dateState: (Date) -> Unit, dateLabel: (String) -> Unit, title: String = "", message: String = "", defaultDate: Date? = null, maxDate: Date? = null, minDate: Date? = null, positiveButtonText: String = "", negativeButtonText: String = "" )</ID>
    <ID>LongParameterList:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections.Companion$( steps: CompletionMethod.MultiStep, doneText: String, activityName: String, activityId: String, activityType: String, complete: Boolean )</ID>
    <ID>LongParameterList:HealthProgramLibraryFragment.kt$( modifier: Modifier = Modifier, numberOfColumns: Int, horizontalSpacing: Dp = 0.dp, verticalSpacing: Dp = 0.dp, items: List&lt;T>, content: @Composable BoxScope.(T) -> Unit )</ID>
    <ID>LongParameterList:HomeContract.kt$HomeContract.View$(moduleId: String, moduleType: String, subtitleText: String, description: String?, @DrawableRes imageRes: Int, deepLink: String)</ID>
    <ID>LongParameterList:IterableExtension.kt$(p1: T1?, p2: T2?, p3: T3?, p4: T4?, p5: T5?, block: (T1, T2, T3, T4, T5) -> R?)</ID>
    <ID>LongParameterList:ListSpacingDecoration.kt$ListSpacingDecoration$(outRect: Rect, parent: RecyclerView, childCount: Int, childIndex: Int, itemSpanSize: Int, spanIndex: Int, isCarousel: Boolean, isPageHeader: Boolean)</ID>
    <ID>LongParameterList:LiveBalancesEpoxyPopulator.kt$( id: String, locale: Locale, spendType: SpendType, liveBalanceNetworkData: LiveBalanceNetworkData, lastUpdatedDate: Date, coverageProvider: String, individualSpendOnClick: (() -> Unit) = {}, openDeductibleTooltip: () -> Unit, openOutOfPocketTooltip: () -> Unit )</ID>
    <ID>LongParameterList:LiveBalancesEpoxyPopulator.kt$( lastUpdatedDate: Date, coverageProvider: String, individualSpendOnClick: (() -> Unit), locale: Locale, spendType: SpendType, liveBalanceNetworkData: LiveBalanceNetworkData, liveBalanceModel: LiveBalanceNetworkWidgetModel_ )</ID>
    <ID>LongParameterList:OutcomeSuggestionsFragmentDirections.kt$OutcomeSuggestionsFragmentDirections.Companion$( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null )</ID>
    <ID>LongParameterList:PractitionerRepository.kt$PractitionerRepository$( specialtyId: String, serviceId: String, appointmentType: AppointmentType, orgId: OrgId, province: Province, locationId: String?, patientId: String? )</ID>
    <ID>LongParameterList:RedeemRewardActivity.kt$RedeemRewardActivity$( leaguePoints: String, remainingPoints: String, canRedeem: Boolean, nextTier: Reward, currency: String, redeemableAmount: Int )</ID>
    <ID>LongParameterList:Repository_HealthProfile.kt$( questionId: String, moduleId: String? = null, answers: Answers, campaignId: String, activityId: String, callback: RequestCallback&lt;CompleteQuestionResponse> )</ID>
    <ID>LongParameterList:RootActivity.kt$RootActivity$( url: String, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null, navOptions: NavOptions? = null )</ID>
    <ID>LongParameterList:SelectServiceUseCase.kt$SelectServiceUseCase$( specialtyId: String, orgId: OrgId, appointmentType: AppointmentType, selectedProvince: Province, locationId: LocationId? = null, patientId: PatientId? = null, )</ID>
    <ID>LongParameterList:ServiceRepository.kt$ServiceRepository$( specialtyId: String, orgId: OrgId, appointmentType: AppointmentType, province: Province, locationId: String?, patientId: PatientId?, )</ID>
    <ID>LongParameterList:TimeslotRepository.kt$TimeslotRepository$( specialtyId: String, serviceId: String, orgId: OrgId, appointmentType: AppointmentType, effectiveStartDate: LocalDate = LocalDate.now(), province: Province, practitionerId: String?, locationId: String? )</ID>
    <ID>LongParameterList:WalletCardDetailController.kt$WalletCardDetailController$( private val uiListener: WalletDetailClickListener, private val analyticsTracker: AnalyticsTracker, private val stringProvider: StringProvider, private val locale: Locale, private val labelMemberId: String, private val labelGroupId: String, private val labelRxBin: String, private val labelRxPcn: String, private val labelRxGroup: String, private val labelRxId: String, private val labelRxCarrier: String, private val labelPolicyNumberTable: String, private val cardName: String, private val context: Context, )</ID>
    <ID>LongParameterList:WalletCardUtils.kt$( context: Context, action: WalletCardAction, startActivity: (intent: Intent) -> Unit, handleDeeplink: (deepLinkUrl: String) -> Unit, openBrowser: (name: String, body: String) -> Unit, openWebView: (webViewUrl: String) -> Unit, saveCard: (() -> Unit)? = null )</ID>
    <ID>MagicNumber:API_Enrollment.kt$3</ID>
    <ID>MagicNumber:API_Notification.kt$100</ID>
    <ID>MagicNumber:API_Rewards.kt$100</ID>
    <ID>MagicNumber:API_Wallet.kt$3</ID>
    <ID>MagicNumber:AccountDeletionResponseJsonAdapter.kt$AccountDeletionResponseJsonAdapter$45</ID>
    <ID>MagicNumber:AccountSetupNavHostFragment.kt$AccountSetupNavHostFragment$100</ID>
    <ID>MagicNumber:AccountSetupNavHostFragment.kt$AccountSetupNavHostFragment$25</ID>
    <ID>MagicNumber:AccountSetupNavHostFragment.kt$AccountSetupNavHostFragment$50</ID>
    <ID>MagicNumber:AccountSetupNavHostFragment.kt$AccountSetupNavHostFragment$75</ID>
    <ID>MagicNumber:AccountSetupPersonalInfoFragment.kt$AccountSetupPersonalInfoFragment$16</ID>
    <ID>MagicNumber:AchievementCelebration.kt$0.1f</ID>
    <ID>MagicNumber:AchievementCelebration.kt$0.85f</ID>
    <ID>MagicNumber:AchievementCompletionResponse.kt$AchievementDetail$100</ID>
    <ID>MagicNumber:AchievementCompletionResponseJsonAdapter.kt$AchievementCompletionResponseJsonAdapter$51</ID>
    <ID>MagicNumber:AchievementCriteriaJsonAdapter.kt$AchievementCriteriaJsonAdapter$41</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$10</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$11</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$3</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$39</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$4</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$5</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$6</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$7</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$8</ID>
    <ID>MagicNumber:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter$9</ID>
    <ID>MagicNumber:AchievementImageJsonAdapter.kt$AchievementImageJsonAdapter$38</ID>
    <ID>MagicNumber:AchievementProgressJsonAdapter.kt$AchievementProgressJsonAdapter$41</ID>
    <ID>MagicNumber:AchievementSection.kt$0.3F</ID>
    <ID>MagicNumber:AchievementsApi_FetchAchievementInfoOnCompletionJsonAdapter.kt$AchievementsApi_FetchAchievementInfoOnCompletionJsonAdapter$70</ID>
    <ID>MagicNumber:AchievementsApi_FetchAchievementsProgressJsonAdapter.kt$AchievementsApi_FetchAchievementsProgressJsonAdapter$63</ID>
    <ID>MagicNumber:AchievementsApi_FetchAllAchievementsJsonAdapter.kt$AchievementsApi_FetchAllAchievementsJsonAdapter$58</ID>
    <ID>MagicNumber:AchievementsApi_FetchRecentlyEarnedAchievementsJsonAdapter.kt$AchievementsApi_FetchRecentlyEarnedAchievementsJsonAdapter$69</ID>
    <ID>MagicNumber:ActionRow.kt$ActionRow.IconSize.LARGE$80</ID>
    <ID>MagicNumber:ActionRow.kt$ActionRow.IconSize.MEDIUM$48</ID>
    <ID>MagicNumber:ActionRow.kt$ActionRow.IconSize.SEMI_LARGE$64</ID>
    <ID>MagicNumber:ActionRow.kt$ActionRow.IconSize.SMALL$24</ID>
    <ID>MagicNumber:ActivityBannerJsonAdapter.kt$ActivityBannerJsonAdapter$36</ID>
    <ID>MagicNumber:ActivityCompletion.kt$1000</ID>
    <ID>MagicNumber:ActivityCompletion.kt$2000</ID>
    <ID>MagicNumber:AddedReadingJsonAdapter.kt$AddedReadingJsonAdapter$34</ID>
    <ID>MagicNumber:AdditionalResourceJsonAdapter.kt$AdditionalResourceJsonAdapter$3</ID>
    <ID>MagicNumber:AdditionalResourceJsonAdapter.kt$AdditionalResourceJsonAdapter$40</ID>
    <ID>MagicNumber:AddressJsonAdapter.kt$AddressJsonAdapter$29</ID>
    <ID>MagicNumber:AddressJsonAdapter.kt$AddressJsonAdapter$3</ID>
    <ID>MagicNumber:AddressJsonAdapter.kt$AddressJsonAdapter$4</ID>
    <ID>MagicNumber:AddressJsonAdapter.kt$AddressJsonAdapter$5</ID>
    <ID>MagicNumber:AddressJsonAdapter.kt$AddressJsonAdapter$6</ID>
    <ID>MagicNumber:AlertJsonAdapter.kt$AlertJsonAdapter$27</ID>
    <ID>MagicNumber:AlertJsonAdapter.kt$AlertJsonAdapter$3</ID>
    <ID>MagicNumber:AlertJsonAdapter.kt$AlertJsonAdapter$4</ID>
    <ID>MagicNumber:AlertJsonAdapter.kt$AlertJsonAdapter$5</ID>
    <ID>MagicNumber:AlertJsonAdapter.kt$AlertJsonAdapter$6</ID>
    <ID>MagicNumber:AlertJsonAdapter.kt$AlertJsonAdapter$7</ID>
    <ID>MagicNumber:Alert_ActionJsonAdapter.kt$Alert_ActionJsonAdapter$3</ID>
    <ID>MagicNumber:Alert_ActionJsonAdapter.kt$Alert_ActionJsonAdapter$34</ID>
    <ID>MagicNumber:Alert_ActionJsonAdapter.kt$Alert_ActionJsonAdapter$4</ID>
    <ID>MagicNumber:AmountsJsonAdapter.kt$AmountsJsonAdapter$29</ID>
    <ID>MagicNumber:AnalyticsTracker_HealthJourney.kt$1000</ID>
    <ID>MagicNumber:AnswersJsonAdapter.kt$AnswersJsonAdapter$29</ID>
    <ID>MagicNumber:AnswersJsonAdapter.kt$AnswersJsonAdapter$3</ID>
    <ID>MagicNumber:AnswersJsonAdapter.kt$AnswersJsonAdapter$4</ID>
    <ID>MagicNumber:AnswersJsonAdapter.kt$AnswersJsonAdapter$5</ID>
    <ID>MagicNumber:AppAlertsResponseJsonAdapter.kt$AppAlertsResponseJsonAdapter$39</ID>
    <ID>MagicNumber:AppLogBundleJsonAdapter.kt$AppLogBundleJsonAdapter$34</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$10</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$11</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$12</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$13</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$28</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$3</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$4</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$5</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$6</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$7</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$8</ID>
    <ID>MagicNumber:AppLogJsonAdapter.kt$AppLogJsonAdapter$9</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$10</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$11</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$12</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$13</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$14</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$15</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$43</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$6</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$7</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$8</ID>
    <ID>MagicNumber:AppointmentAttributesJsonAdapter.kt$AppointmentAttributesJsonAdapter$9</ID>
    <ID>MagicNumber:AppointmentLocationResponseJsonAdapter.kt$AppointmentLocationResponseJsonAdapter$3</ID>
    <ID>MagicNumber:AppointmentLocationResponseJsonAdapter.kt$AppointmentLocationResponseJsonAdapter$4</ID>
    <ID>MagicNumber:AppointmentLocationResponseJsonAdapter.kt$AppointmentLocationResponseJsonAdapter$49</ID>
    <ID>MagicNumber:AppointmentLocationResponseJsonAdapter.kt$AppointmentLocationResponseJsonAdapter$5</ID>
    <ID>MagicNumber:AppointmentLocationResponseJsonAdapter.kt$AppointmentLocationResponseJsonAdapter$6</ID>
    <ID>MagicNumber:AppointmentPatientResponseJsonAdapter.kt$AppointmentPatientResponseJsonAdapter$48</ID>
    <ID>MagicNumber:AppointmentPaymentInfoResponseJsonAdapter.kt$AppointmentPaymentInfoResponseJsonAdapter$3</ID>
    <ID>MagicNumber:AppointmentPaymentInfoResponseJsonAdapter.kt$AppointmentPaymentInfoResponseJsonAdapter$52</ID>
    <ID>MagicNumber:AppointmentPractitionerInfoResponseJsonAdapter.kt$AppointmentPractitionerInfoResponseJsonAdapter$57</ID>
    <ID>MagicNumber:AppointmentResponseJsonAdapter.kt$AppointmentResponseJsonAdapter$41</ID>
    <ID>MagicNumber:ArticleJsonAdapter.kt$ArticleJsonAdapter$29</ID>
    <ID>MagicNumber:ArticleJsonAdapter.kt$ArticleJsonAdapter$3</ID>
    <ID>MagicNumber:ArticleJsonAdapter.kt$ArticleJsonAdapter$4</ID>
    <ID>MagicNumber:ArticleJsonAdapter.kt$ArticleJsonAdapter$5</ID>
    <ID>MagicNumber:ArticleJsonAdapter.kt$ArticleJsonAdapter$6</ID>
    <ID>MagicNumber:ArticleJsonAdapter.kt$ArticleJsonAdapter$7</ID>
    <ID>MagicNumber:ArticleListJsonAdapter.kt$ArticleListJsonAdapter$3</ID>
    <ID>MagicNumber:ArticleListJsonAdapter.kt$ArticleListJsonAdapter$33</ID>
    <ID>MagicNumber:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$38</ID>
    <ID>MagicNumber:AssessmentIntro.kt$AssessmentIntro$2.1f</ID>
    <ID>MagicNumber:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$1e-6</ID>
    <ID>MagicNumber:AssessmentResponseSummaryJsonAdapter.kt$AssessmentResponseSummaryJsonAdapter$47</ID>
    <ID>MagicNumber:AssetBanner.kt$AssetBanner$64</ID>
    <ID>MagicNumber:AssociateReadingJsonAdapter.kt$AssociateReadingJsonAdapter$38</ID>
    <ID>MagicNumber:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter$3</ID>
    <ID>MagicNumber:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter$30</ID>
    <ID>MagicNumber:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter$4</ID>
    <ID>MagicNumber:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter$5</ID>
    <ID>MagicNumber:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter$6</ID>
    <ID>MagicNumber:AvailableTimeslotsResponseJsonAdapter.kt$AvailableTimeslotsResponseJsonAdapter$48</ID>
    <ID>MagicNumber:BadgeDetail.kt$0.3F</ID>
    <ID>MagicNumber:BalancesJsonAdapter.kt$BalancesJsonAdapter$3</ID>
    <ID>MagicNumber:BalancesJsonAdapter.kt$BalancesJsonAdapter$30</ID>
    <ID>MagicNumber:BannerController.kt$BannerController$1.05f</ID>
    <ID>MagicNumber:BannerController.kt$BannerController$10000</ID>
    <ID>MagicNumber:BannerController.kt$BannerController$5</ID>
    <ID>MagicNumber:BannerController.kt$BannerController$9900</ID>
    <ID>MagicNumber:BannerController.kt$BannerController$9999999</ID>
    <ID>MagicNumber:BannersJsonAdapter.kt$BannersJsonAdapter$29</ID>
    <ID>MagicNumber:BarcodeOverlayView.kt$BarcodeOverlayView$3</ID>
    <ID>MagicNumber:BenefitCoverageJsonAdapter.kt$BenefitCoverageJsonAdapter$37</ID>
    <ID>MagicNumber:BrandedPointsBanner.kt$BrandedPointsBanner$100.0</ID>
    <ID>MagicNumber:BrowserActivity.kt$BrowserActivity$130</ID>
    <ID>MagicNumber:BrowserActivity.kt$BrowserActivity$255</ID>
    <ID>MagicNumber:ButtonActivity.kt$ButtonActivity$3000</ID>
    <ID>MagicNumber:ButtonJsonAdapter.kt$ButtonJsonAdapter$28</ID>
    <ID>MagicNumber:CTAJsonAdapter.kt$CTAJsonAdapter$25</ID>
    <ID>MagicNumber:CTAJsonAdapter.kt$CTAJsonAdapter$3</ID>
    <ID>MagicNumber:CTAJsonAdapter.kt$CTAJsonAdapter$4</ID>
    <ID>MagicNumber:CalendarExtension.kt$6</ID>
    <ID>MagicNumber:CalendarExtension.kt$7</ID>
    <ID>MagicNumber:CampaignContentConfigJsonAdapter.kt$CampaignContentConfigJsonAdapter$43</ID>
    <ID>MagicNumber:CardController.kt$CardController$1.05f</ID>
    <ID>MagicNumber:CardController.kt$CardController$1000</ID>
    <ID>MagicNumber:CardController.kt$CardController$2.10f</ID>
    <ID>MagicNumber:CardController.kt$CardController$2.15f</ID>
    <ID>MagicNumber:CardController.kt$CardController$3</ID>
    <ID>MagicNumber:CardController.kt$CardController$30</ID>
    <ID>MagicNumber:CardController.kt$CardController$5</ID>
    <ID>MagicNumber:CardController.kt$CardController$500</ID>
    <ID>MagicNumber:CardController.kt$CardController$750</ID>
    <ID>MagicNumber:CareProviderHistoryJsonAdapter.kt$CareProviderHistoryJsonAdapter$41</ID>
    <ID>MagicNumber:CareProviderHistory_ChatHistoryRowJsonAdapter.kt$CareProviderHistory_ChatHistoryRowJsonAdapter$56</ID>
    <ID>MagicNumber:CategoryJsonAdapter.kt$CategoryJsonAdapter$3</ID>
    <ID>MagicNumber:CategoryJsonAdapter.kt$CategoryJsonAdapter$30</ID>
    <ID>MagicNumber:CategoryJsonAdapter.kt$CategoryJsonAdapter$4</ID>
    <ID>MagicNumber:CategoryJsonAdapter.kt$CategoryJsonAdapter$5</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$10</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$11</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$12</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$13</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$14</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$15</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$16</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$57</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter$9</ID>
    <ID>MagicNumber:ChallengeInfoJsonAdapter.kt$ChallengeInfoJsonAdapter$35</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$10</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$11</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$12</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$13</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$14</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$43</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter$9</ID>
    <ID>MagicNumber:ChallengeJsonApiResponseJsonAdapter.kt$ChallengeJsonApiResponseJsonAdapter$46</ID>
    <ID>MagicNumber:ChallengeLandingScreen.kt$BottomArcShape$3</ID>
    <ID>MagicNumber:ChallengeLandingScreen.kt$BottomArcShape$4</ID>
    <ID>MagicNumber:ChallengeListJsonApiResponseJsonAdapter.kt$ChallengeListJsonApiResponseJsonAdapter$50</ID>
    <ID>MagicNumber:ChallengeRequestJsonAdapter.kt$ChallengeRequestJsonAdapter$38</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$10</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$11</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$12</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$13</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$14</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$15</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$16</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$17</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$39</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ChallengeResponseJsonAdapter.kt$ChallengeResponseJsonAdapter$9</ID>
    <ID>MagicNumber:ChartConfigJsonAdapter.kt$ChartConfigJsonAdapter$33</ID>
    <ID>MagicNumber:ChatHistoryFragment.kt$ChatHistoryFragment$50</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$3</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$4</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$45</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$5</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$6</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$7</ID>
    <ID>MagicNumber:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter$8</ID>
    <ID>MagicNumber:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$42</ID>
    <ID>MagicNumber:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ChatProvidersJsonAdapter.kt$ChatProvidersJsonAdapter$35</ID>
    <ID>MagicNumber:ChatTranscriptMessagesResponseJsonAdapter.kt$ChatTranscriptMessagesResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ChatTranscriptMessagesResponseJsonAdapter.kt$ChatTranscriptMessagesResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ChatTranscriptMessagesResponseJsonAdapter.kt$ChatTranscriptMessagesResponseJsonAdapter$52</ID>
    <ID>MagicNumber:ChatTranscriptMessagesResponse_MessageJsonAdapter.kt$ChatTranscriptMessagesResponse_MessageJsonAdapter$60</ID>
    <ID>MagicNumber:ChatTranscriptResponseJsonAdapter.kt$ChatTranscriptResponseJsonAdapter$44</ID>
    <ID>MagicNumber:ChatTranscriptResponse_TranscriptJsonAdapter.kt$ChatTranscriptResponse_TranscriptJsonAdapter$3</ID>
    <ID>MagicNumber:ChatTranscriptResponse_TranscriptJsonAdapter.kt$ChatTranscriptResponse_TranscriptJsonAdapter$4</ID>
    <ID>MagicNumber:ChatTranscriptResponse_TranscriptJsonAdapter.kt$ChatTranscriptResponse_TranscriptJsonAdapter$55</ID>
    <ID>MagicNumber:CheckboxInputRow.kt$CheckboxInputRow$23</ID>
    <ID>MagicNumber:CircularProgressBar.kt$225f</ID>
    <ID>MagicNumber:CircularProgressBar.kt$270f</ID>
    <ID>MagicNumber:ClaimCodeDataJsonAdapter.kt$ClaimCodeDataJsonAdapter$35</ID>
    <ID>MagicNumber:ColorViewModel.kt$ColorViewModel$0xFFFFFF</ID>
    <ID>MagicNumber:CompleteQuestionResponseJsonAdapter.kt$CompleteQuestionResponseJsonAdapter$46</ID>
    <ID>MagicNumber:ConnectivityUtils.kt$ConnectivityUtils$19</ID>
    <ID>MagicNumber:ConsentAttributesJsonAdapter.kt$ConsentAttributesJsonAdapter$39</ID>
    <ID>MagicNumber:ConsentResponseJsonAdapter.kt$ConsentResponseJsonAdapter$37</ID>
    <ID>MagicNumber:ContentAPI_Upload.kt$100</ID>
    <ID>MagicNumber:ContentAPI_Upload.kt$180f</ID>
    <ID>MagicNumber:ContentAPI_Upload.kt$90f</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$3</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$33</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$4</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$5</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$6</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$7</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$8</ID>
    <ID>MagicNumber:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter$9</ID>
    <ID>MagicNumber:ContentTypeJsonAdapter.kt$ContentTypeJsonAdapter$33</ID>
    <ID>MagicNumber:ContextExtension.kt$0.5</ID>
    <ID>MagicNumber:ContextExtension.kt$0x00FFFFFF</ID>
    <ID>MagicNumber:CounterJsonAdapter.kt$CounterJsonAdapter$29</ID>
    <ID>MagicNumber:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$3</ID>
    <ID>MagicNumber:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$4</ID>
    <ID>MagicNumber:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$5</ID>
    <ID>MagicNumber:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$54</ID>
    <ID>MagicNumber:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$6</ID>
    <ID>MagicNumber:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter$7</ID>
    <ID>MagicNumber:CovidHealthAssessmentResultJsonAdapter.kt$CovidHealthAssessmentResultJsonAdapter$3</ID>
    <ID>MagicNumber:CovidHealthAssessmentResultJsonAdapter.kt$CovidHealthAssessmentResultJsonAdapter$4</ID>
    <ID>MagicNumber:CovidHealthAssessmentResultJsonAdapter.kt$CovidHealthAssessmentResultJsonAdapter$49</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$10</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$11</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$12</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$13</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$14</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$15</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$49</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$6</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$7</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$8</ID>
    <ID>MagicNumber:CreateAppointmentAttributesJsonAdapter.kt$CreateAppointmentAttributesJsonAdapter$9</ID>
    <ID>MagicNumber:CreateAppointmentLocationJsonAdapter.kt$CreateAppointmentLocationJsonAdapter$3</ID>
    <ID>MagicNumber:CreateAppointmentLocationJsonAdapter.kt$CreateAppointmentLocationJsonAdapter$4</ID>
    <ID>MagicNumber:CreateAppointmentLocationJsonAdapter.kt$CreateAppointmentLocationJsonAdapter$47</ID>
    <ID>MagicNumber:CreateAppointmentLocationJsonAdapter.kt$CreateAppointmentLocationJsonAdapter$5</ID>
    <ID>MagicNumber:CreateAppointmentLocationJsonAdapter.kt$CreateAppointmentLocationJsonAdapter$6</ID>
    <ID>MagicNumber:CreateAppointmentPatientJsonAdapter.kt$CreateAppointmentPatientJsonAdapter$46</ID>
    <ID>MagicNumber:CreateAppointmentPractitionerJsonAdapter.kt$CreateAppointmentPractitionerJsonAdapter$51</ID>
    <ID>MagicNumber:CreateAppointmentRequestBodyJsonAdapter.kt$CreateAppointmentRequestBodyJsonAdapter$50</ID>
    <ID>MagicNumber:CreateAppointmentResponseAttributesJsonAdapter.kt$CreateAppointmentResponseAttributesJsonAdapter$57</ID>
    <ID>MagicNumber:CreateAppointmentResponseJsonAdapter.kt$CreateAppointmentResponseJsonAdapter$47</ID>
    <ID>MagicNumber:CreateIntakeFormJsonAdapter.kt$CreateIntakeFormJsonAdapter$3</ID>
    <ID>MagicNumber:CreateIntakeFormJsonAdapter.kt$CreateIntakeFormJsonAdapter$38</ID>
    <ID>MagicNumber:CreatePatientRequestJsonAdapter.kt$CreatePatientRequestJsonAdapter$42</ID>
    <ID>MagicNumber:CreateUserChallengeRequestJsonAdapter.kt$CreateUserChallengeRequestJsonAdapter$48</ID>
    <ID>MagicNumber:CreateWebUrlRequestAttributesJsonAdapter.kt$CreateWebUrlRequestAttributesJsonAdapter$51</ID>
    <ID>MagicNumber:CreateWebUrlRequestJsonAdapter.kt$CreateWebUrlRequestJsonAdapter$41</ID>
    <ID>MagicNumber:CreateWebUrlResponseAttributesJsonAdapter.kt$CreateWebUrlResponseAttributesJsonAdapter$52</ID>
    <ID>MagicNumber:CreateWebUrlResponseJsonAdapter.kt$CreateWebUrlResponseJsonAdapter$42</ID>
    <ID>MagicNumber:CtaJsonAdapter.kt$CtaJsonAdapter$25</ID>
    <ID>MagicNumber:CurrencyUtil.kt$CurrencyUtil$3</ID>
    <ID>MagicNumber:CustomFieldsJsonAdapter.kt$CustomFieldsJsonAdapter$34</ID>
    <ID>MagicNumber:DailyScreenerResultsController.kt$DailyScreenerResultsController$56</ID>
    <ID>MagicNumber:DatabasePreferencesUtils.kt$DatabasePreferencesUtils$30</ID>
    <ID>MagicNumber:DateExt.kt$12</ID>
    <ID>MagicNumber:DateExtension.kt$12</ID>
    <ID>MagicNumber:DateExtension.kt$30</ID>
    <ID>MagicNumber:DateExtension.kt$7</ID>
    <ID>MagicNumber:DateOfBirthInputState.kt$DateOfBirthInputState$16</ID>
    <ID>MagicNumber:DateQuestion.kt$DateQuestion$40</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$120</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$14</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$24</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$25</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$28</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$30</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$31</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$335</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$365</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$5</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$60</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$7</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$731</ID>
    <ID>MagicNumber:DefaultHealthJourneyAPI.kt$DefaultHealthJourneyAPI$1000</ID>
    <ID>MagicNumber:DeletedReadingJsonAdapter.kt$DeletedReadingJsonAdapter$36</ID>
    <ID>MagicNumber:DeletedReadingResponseJsonAdapter.kt$DeletedReadingResponseJsonAdapter$44</ID>
    <ID>MagicNumber:DependentCardsResponseJsonAdapter.kt$DependentCardsResponseJsonAdapter$44</ID>
    <ID>MagicNumber:DependentFormAdapter.kt$DependentFormAdapter.CheckboxViewHolder$16</ID>
    <ID>MagicNumber:DependentFormAdapter.kt$DependentFormAdapter.DatePickerViewHolder$16</ID>
    <ID>MagicNumber:DependentFormAdapter.kt$DependentFormAdapter.SpinnerViewHolder$16</ID>
    <ID>MagicNumber:DependentFormAdapter.kt$DependentFormAdapter.TextAreaViewHolder$16</ID>
    <ID>MagicNumber:DependentFormFragment.kt$DependentFormFragment$4</ID>
    <ID>MagicNumber:DependentInviteEmailFragment.kt$DependentInviteEmailFragment$15</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$10</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$11</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$12</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$13</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$14</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$15</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$16</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$17</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$18</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$19</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$20</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$21</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$22</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$23</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$24</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$25</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$26</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$27</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$28</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$29</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$3</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$30</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$31</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$32</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$4</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$5</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$6</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$7</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$8</ID>
    <ID>MagicNumber:DependentJsonAdapter.kt$DependentJsonAdapter$9</ID>
    <ID>MagicNumber:DependentKeyValuePairJsonAdapter.kt$DependentKeyValuePairJsonAdapter$43</ID>
    <ID>MagicNumber:DependentQualificationFragment.kt$DependentQualificationFragment$8</ID>
    <ID>MagicNumber:DependentsActivity.kt$DependentsActivity$16</ID>
    <ID>MagicNumber:DependentsActivity.kt$DependentsActivity$40</ID>
    <ID>MagicNumber:DependentsListJsonAdapter.kt$DependentsListJsonAdapter$36</ID>
    <ID>MagicNumber:DialogActivity.kt$DialogActivity$16</ID>
    <ID>MagicNumber:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$102325456L</ID>
    <ID>MagicNumber:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$2000</ID>
    <ID>MagicNumber:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$3000</ID>
    <ID>MagicNumber:DimensionsOfHealthFragment.kt$DimensionsOfHealthFragment$2.1f</ID>
    <ID>MagicNumber:DimensionsOfHealthJsonAdapter.kt$DimensionsOfHealthJsonAdapter$40</ID>
    <ID>MagicNumber:DisconnectResponseJsonAdapter.kt$DisconnectResponseJsonAdapter$40</ID>
    <ID>MagicNumber:DropDownAnswerJsonAdapter.kt$DropDownAnswerJsonAdapter$36</ID>
    <ID>MagicNumber:EditDate.kt$EditDate$300</ID>
    <ID>MagicNumber:EditDate.kt$EditDate$48f</ID>
    <ID>MagicNumber:EditPhoneNumber.kt$EditPhoneNumber$48</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$10</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$3</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$32</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$4</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$5</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$6</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$7</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$8</ID>
    <ID>MagicNumber:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter$9</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$10</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$3</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$33</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$4</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$5</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$6</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$7</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$8</ID>
    <ID>MagicNumber:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter$9</ID>
    <ID>MagicNumber:EnvironmentsJsonAdapter.kt$EnvironmentsJsonAdapter$34</ID>
    <ID>MagicNumber:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter$3</ID>
    <ID>MagicNumber:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter$32</ID>
    <ID>MagicNumber:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter$4</ID>
    <ID>MagicNumber:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter$5</ID>
    <ID>MagicNumber:ExpandableTextView.kt$ExpandableTextView$3</ID>
    <ID>MagicNumber:FadingText.kt$500</ID>
    <ID>MagicNumber:FeatureFlagsResponseJsonAdapter.kt$FeatureFlagsResponseJsonAdapter$42</ID>
    <ID>MagicNumber:FeedbackActivity.kt$FeedbackActivity$3</ID>
    <ID>MagicNumber:FeedbackActivity.kt$FeedbackActivity$5</ID>
    <ID>MagicNumber:FeedbackJsonAdapter.kt$FeedbackJsonAdapter$30</ID>
    <ID>MagicNumber:FieldsJsonAdapter.kt$FieldsJsonAdapter$28</ID>
    <ID>MagicNumber:FileDetailJsonAdapter.kt$FileDetailJsonAdapter$32</ID>
    <ID>MagicNumber:FileImageJsonAdapter.kt$FileImageJsonAdapter$31</ID>
    <ID>MagicNumber:FileJsonAdapter.kt$FileJsonAdapter$26</ID>
    <ID>MagicNumber:FileJsonAdapter.kt$FileJsonAdapter$3</ID>
    <ID>MagicNumber:FileJsonAdapter.kt$FileJsonAdapter$4</ID>
    <ID>MagicNumber:FormJsonAdapter.kt$FormJsonAdapter$26</ID>
    <ID>MagicNumber:FormJsonAdapter.kt$FormJsonAdapter$3</ID>
    <ID>MagicNumber:FormJsonAdapter.kt$FormJsonAdapter$4</ID>
    <ID>MagicNumber:Form_PrefilledFormJsonAdapter.kt$Form_PrefilledFormJsonAdapter$40</ID>
    <ID>MagicNumber:FrictionScreenJsonAdapter.kt$FrictionScreenJsonAdapter$36</ID>
    <ID>MagicNumber:FullScreenAlertDialog.kt$FullScreenAlertDialog$48</ID>
    <ID>MagicNumber:FullScreenContentJsonAdapter.kt$FullScreenContentJsonAdapter$3</ID>
    <ID>MagicNumber:FullScreenContentJsonAdapter.kt$FullScreenContentJsonAdapter$39</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$10</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$11</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$12</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$13</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$14</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$15</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$16</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$17</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$18</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$19</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$20</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$3</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$33</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$4</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$5</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$6</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$7</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$8</ID>
    <ID>MagicNumber:GenericCardJsonAdapter.kt$GenericCardJsonAdapter$9</ID>
    <ID>MagicNumber:GenesisCalendarView.kt$180f</ID>
    <ID>MagicNumber:GenesisCheckbox.kt$0.2f</ID>
    <ID>MagicNumber:GenesisCheckbox.kt$0.3f</ID>
    <ID>MagicNumber:GenesisCheckbox.kt$0.4f</ID>
    <ID>MagicNumber:GenesisCheckbox.kt$0.5f</ID>
    <ID>MagicNumber:GenesisCheckbox.kt$0.7f</ID>
    <ID>MagicNumber:GenesisCheckbox.kt$0.8f</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFF00A876</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFF250D53</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFF2E5CDF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFF3E16A3</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFF949494</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFBA1B3B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFD7D7D7</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFDA2045</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFDCD2F6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFE0F6F6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFE5CF73</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFE5F6F1</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFEAEEFB</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFEDE8FA</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFF0F0F0</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFF8F8F8</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFF9DEE3</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFFD9833</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFFEF3E6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBackgroundColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBorderColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBorderColors$0xFF949494</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBorderColors$0xFFD7D7D7</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBorderColors$0xFFDA2045</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBorderColors$0xFFF0F0F0</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisBorderColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisCriticalColors$0xFFBA1B3B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisCriticalColors$0xFFF9DEE3</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisCriticalColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFF01C3A2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFF15846D</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFF250D53</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFF3E16A3</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFFB9A4ED</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFFDCD2F6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFFE8F8F5</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFFEDE8FA</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisDecorativeColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF00A886</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF01C3A2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF250D53</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF2E5CDF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF39C5C2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF66686B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFF767676</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFB9A4ED</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFD7D7D7</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFE5CF73</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFEDE8FA</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFF1A1B1</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFFD9833</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisFillColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisHighlightColors$0xFF2E5CDF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisHighlightColors$0xFFEAEEFB</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisHighlightColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFF251669</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFF37209A</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFF66686B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFF949494</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFFBA1B3B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFFD6D6D6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFFF0F0F0</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisInteractiveColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisOnSurfaceColors$0xFF00805A</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisOnSurfaceColors$0xFF250D53</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisOnSurfaceColors$0xFF66686B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisOnSurfaceColors$0xFFBA1B3B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisOnSurfaceColors$0xFFF0F0F0</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisOnSurfaceColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFF251669</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFF37209A</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFF711124</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFFA51834</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFFBA1B3B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisPrimaryColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSecondaryColors$0xFF251669</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSecondaryColors$0xFF37209A</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSecondaryColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSecondaryColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSuccessColors$0xFF00A876</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSuccessColors$0xFFE5F6F1</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSuccessColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSurfaceColors$0xFF333333</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSurfaceColors$0xFFD7D7D7</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSurfaceColors$0xFFEAEEFB</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSurfaceColors$0xFFF8F7F6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSurfaceColors$0xFFF8F8F8</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisSurfaceColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTertiaryColors$0xFF251669</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTertiaryColors$0xFF37209A</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTertiaryColors$0xFF66686B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTertiaryColors$0xFF949494</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTertiaryColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFF01C3A2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFF250D53</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFF501CD2</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFF66686B</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFF767676</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFFB9A4ED</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFFDA2045</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFFEDE8FA</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFFF8F7F6</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisTextColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisWarningColors$0xFFFD9833</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisWarningColors$0xFFFFE4BB</ID>
    <ID>MagicNumber:GenesisColors.kt$GenesisWarningColors$0xFFFFFFFF</ID>
    <ID>MagicNumber:GenesisHorizontalPager.kt$4</ID>
    <ID>MagicNumber:GenesisProgressBar.kt$GenesisProgressBar$100</ID>
    <ID>MagicNumber:GenesisProgressBar.kt$GenesisProgressBar$100f</ID>
    <ID>MagicNumber:GenesisProgressBar.kt$GenesisProgressBar$1500</ID>
    <ID>MagicNumber:GenesisSwitch.kt$0.5f</ID>
    <ID>MagicNumber:GenesisSwitch.kt$GenesisSwitch$16f</ID>
    <ID>MagicNumber:GenesisToolbar.kt$GenesisToolbar$16f</ID>
    <ID>MagicNumber:GeoCodeJsonAdapter.kt$GeoCodeJsonAdapter$29</ID>
    <ID>MagicNumber:GoalJsonAdapter.kt$GoalJsonAdapter$26</ID>
    <ID>MagicNumber:GoalProgressView.kt$GoalProgressView$2000</ID>
    <ID>MagicNumber:GraphData.kt$GraphData$10</ID>
    <ID>MagicNumber:GraphDataJsonAdapter.kt$GraphDataJsonAdapter$31</ID>
    <ID>MagicNumber:GroupJsonAdapter.kt$GroupJsonAdapter$27</ID>
    <ID>MagicNumber:GroupJsonAdapter.kt$GroupJsonAdapter$3</ID>
    <ID>MagicNumber:HeaderController.kt$HeaderController$3000</ID>
    <ID>MagicNumber:HealthActivitiesCategoryHeaderJsonAdapter.kt$HealthActivitiesCategoryHeaderJsonAdapter$52</ID>
    <ID>MagicNumber:HealthActivitiesCategoryJsonAdapter.kt$HealthActivitiesCategoryJsonAdapter$46</ID>
    <ID>MagicNumber:HealthActivitiesJsonAdapter.kt$HealthActivitiesJsonAdapter$38</ID>
    <ID>MagicNumber:HealthJourneyAPI_ChallengeUserHealthActivityRequestJsonAdapter.kt$HealthJourneyAPI_ChallengeUserHealthActivityRequestJsonAdapter$73</ID>
    <ID>MagicNumber:HealthJourneyAPI_CompleteUserHealthActivityRequestJsonAdapter.kt$HealthJourneyAPI_CompleteUserHealthActivityRequestJsonAdapter$72</ID>
    <ID>MagicNumber:HealthJourneyAPI_DismissUserHealthActivityRequestJsonAdapter.kt$HealthJourneyAPI_DismissUserHealthActivityRequestJsonAdapter$71</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetSuggestedActivityGroupJsonAdapter.kt$HealthJourneyAPI_GetSuggestedActivityGroupJsonAdapter$64</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetUserActiveCampaignsRequestJsonAdapter.kt$HealthJourneyAPI_GetUserActiveCampaignsRequestJsonAdapter$68</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetUserHealthActivitiesRequestJsonAdapter.kt$HealthJourneyAPI_GetUserHealthActivitiesRequestJsonAdapter$69</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetUserHealthActivitiesRequestV2JsonAdapter.kt$HealthJourneyAPI_GetUserHealthActivitiesRequestV2JsonAdapter$71</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetUserHealthActivityRequestJsonAdapter.kt$HealthJourneyAPI_GetUserHealthActivityRequestJsonAdapter$67</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetUserUpcomingCampaignsRequestJsonAdapter.kt$HealthJourneyAPI_GetUserUpcomingCampaignsRequestJsonAdapter$70</ID>
    <ID>MagicNumber:HealthJourneyAPI_GetVerifiableActivityProgressRequestJsonAdapter.kt$HealthJourneyAPI_GetVerifiableActivityProgressRequestJsonAdapter$75</ID>
    <ID>MagicNumber:HealthJourneyAPI_SetUserHealthActivityVerificationProgressJsonAdapter.kt$HealthJourneyAPI_SetUserHealthActivityVerificationProgressJsonAdapter$80</ID>
    <ID>MagicNumber:HealthJourneyChallengeItemDetailResponseJsonAdapter.kt$HealthJourneyChallengeItemDetailResponseJsonAdapter$62</ID>
    <ID>MagicNumber:HealthJourneyItemCompletionResponseJsonAdapter.kt$HealthJourneyItemCompletionResponseJsonAdapter$57</ID>
    <ID>MagicNumber:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$3</ID>
    <ID>MagicNumber:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$4</ID>
    <ID>MagicNumber:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$5</ID>
    <ID>MagicNumber:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$55</ID>
    <ID>MagicNumber:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter$6</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$10</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$11</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$12</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$13</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$14</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$15</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$16</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$17</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$18</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$19</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$20</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$21</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$22</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$23</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$24</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$25</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$26</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$27</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$28</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$29</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$3</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$4</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$45</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$5</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$6</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$7</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$8</ID>
    <ID>MagicNumber:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter$9</ID>
    <ID>MagicNumber:HealthJourneyItemDetailResponseJsonAdapter.kt$HealthJourneyItemDetailResponseJsonAdapter$3</ID>
    <ID>MagicNumber:HealthJourneyItemDetailResponseJsonAdapter.kt$HealthJourneyItemDetailResponseJsonAdapter$53</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$10</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$11</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$12</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$13</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$14</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$15</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$16</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$17</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$18</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$19</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$20</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$21</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$3</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$39</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$4</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$5</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$6</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$7</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$8</ID>
    <ID>MagicNumber:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter$9</ID>
    <ID>MagicNumber:HealthJourneyPageControls.kt$180f</ID>
    <ID>MagicNumber:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$3</ID>
    <ID>MagicNumber:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$32</ID>
    <ID>MagicNumber:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$4</ID>
    <ID>MagicNumber:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$5</ID>
    <ID>MagicNumber:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$6</ID>
    <ID>MagicNumber:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter$7</ID>
    <ID>MagicNumber:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$3</ID>
    <ID>MagicNumber:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$4</ID>
    <ID>MagicNumber:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$46</ID>
    <ID>MagicNumber:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$5</ID>
    <ID>MagicNumber:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$6</ID>
    <ID>MagicNumber:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter$7</ID>
    <ID>MagicNumber:HealthNeedSummaryJsonAdapter.kt$HealthNeedSummaryJsonAdapter$3</ID>
    <ID>MagicNumber:HealthNeedSummaryJsonAdapter.kt$HealthNeedSummaryJsonAdapter$39</ID>
    <ID>MagicNumber:HealthProfileController.kt$HealthProfileController$2.1f</ID>
    <ID>MagicNumber:HealthProfileController.kt$HealthProfileController$3</ID>
    <ID>MagicNumber:HealthProfileEmptyStateActivity.kt$HealthProfileEmptyStateActivity$123456</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$10</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$11</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$3</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$35</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$4</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$5</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$6</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$7</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$8</ID>
    <ID>MagicNumber:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$9</ID>
    <ID>MagicNumber:HealthProfileResponseJsonAdapter.kt$HealthProfileResponseJsonAdapter$43</ID>
    <ID>MagicNumber:HealthProgramCard.kt$16f</ID>
    <ID>MagicNumber:HealthProgramCard.kt$9f</ID>
    <ID>MagicNumber:HealthProgramDetailsFragment.kt$16f</ID>
    <ID>MagicNumber:HealthProgramDetailsFragment.kt$9f</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$10</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$11</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$12</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$13</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$14</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$15</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$16</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$17</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$18</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$3</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$4</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$42</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$5</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$6</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$7</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$8</ID>
    <ID>MagicNumber:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter$9</ID>
    <ID>MagicNumber:HealthProgramExt.kt$100f</ID>
    <ID>MagicNumber:HealthProgramExt.kt$30</ID>
    <ID>MagicNumber:HealthProgramExt.kt$7</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$10</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$11</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$12</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$13</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$3</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$35</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$4</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$5</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$6</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$7</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$8</ID>
    <ID>MagicNumber:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter$9</ID>
    <ID>MagicNumber:HealthProgramLibraryFragment.kt$3f</ID>
    <ID>MagicNumber:HealthProgramStartJsonAdapter.kt$HealthProgramStartJsonAdapter$40</ID>
    <ID>MagicNumber:HealthProgramsAPI_GetHealthGoalProgramRequestJsonAdapter.kt$HealthProgramsAPI_GetHealthGoalProgramRequestJsonAdapter$67</ID>
    <ID>MagicNumber:HealthProgramsAPI_GetHealthGoalProgramsRequestJsonAdapter.kt$HealthProgramsAPI_GetHealthGoalProgramsRequestJsonAdapter$68</ID>
    <ID>MagicNumber:HealthProgramsAPI_GetHealthProgramCuratedCarouselsRequestJsonAdapter.kt$HealthProgramsAPI_GetHealthProgramCuratedCarouselsRequestJsonAdapter$79</ID>
    <ID>MagicNumber:HealthProgramsAPI_GetUserHealthGoalProgramsRequestJsonAdapter.kt$HealthProgramsAPI_GetUserHealthGoalProgramsRequestJsonAdapter$72</ID>
    <ID>MagicNumber:HealthProgramsAPI_GetWearablesConsentForDataPointsJsonAdapter.kt$HealthProgramsAPI_GetWearablesConsentForDataPointsJsonAdapter$72</ID>
    <ID>MagicNumber:HealthProgramsAPI_QuitHealthGoalProgramRequestJsonAdapter.kt$HealthProgramsAPI_QuitHealthGoalProgramRequestJsonAdapter$68</ID>
    <ID>MagicNumber:HealthProgramsAPI_StartHealthGoalProgramRequestJsonAdapter.kt$HealthProgramsAPI_StartHealthGoalProgramRequestJsonAdapter$69</ID>
    <ID>MagicNumber:HealthProgramsCarousel.kt$HealthProgramsCarousel$12</ID>
    <ID>MagicNumber:HealthProgramsCarouselJsonAdapter.kt$HealthProgramsCarouselJsonAdapter$3</ID>
    <ID>MagicNumber:HealthProgramsCarouselJsonAdapter.kt$HealthProgramsCarouselJsonAdapter$44</ID>
    <ID>MagicNumber:HealthProgramsCarouselsJsonAdapter.kt$HealthProgramsCarouselsJsonAdapter$45</ID>
    <ID>MagicNumber:HealthProgramsCategoriesJsonAdapter.kt$HealthProgramsCategoriesJsonAdapter$46</ID>
    <ID>MagicNumber:HealthProgramsCategoryJsonAdapter.kt$HealthProgramsCategoryJsonAdapter$44</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$3</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$36</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$4</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$5</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$6</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$7</ID>
    <ID>MagicNumber:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter$8</ID>
    <ID>MagicNumber:HealthSolutionCategoryJsonAdapter.kt$HealthSolutionCategoryJsonAdapter$3</ID>
    <ID>MagicNumber:HealthSolutionCategoryJsonAdapter.kt$HealthSolutionCategoryJsonAdapter$4</ID>
    <ID>MagicNumber:HealthSolutionCategoryJsonAdapter.kt$HealthSolutionCategoryJsonAdapter$44</ID>
    <ID>MagicNumber:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$3</ID>
    <ID>MagicNumber:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$32</ID>
    <ID>MagicNumber:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$4</ID>
    <ID>MagicNumber:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$5</ID>
    <ID>MagicNumber:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$6</ID>
    <ID>MagicNumber:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter$7</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$10</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$11</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$3</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$32</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$4</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$5</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$6</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$7</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$8</ID>
    <ID>MagicNumber:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter$9</ID>
    <ID>MagicNumber:HomeController.kt$HomeController$1.05f</ID>
    <ID>MagicNumber:HomeController.kt$HomeController$12</ID>
    <ID>MagicNumber:HomeController.kt$HomeController$18</ID>
    <ID>MagicNumber:HomeFragment.kt$HomeFragment$5000</ID>
    <ID>MagicNumber:HomeLayoutItemJsonAdapter.kt$HomeLayoutItemJsonAdapter$36</ID>
    <ID>MagicNumber:HomeLayoutJsonAdapter.kt$HomeLayoutJsonAdapter$32</ID>
    <ID>MagicNumber:HorizontalProgressBar.kt$100</ID>
    <ID>MagicNumber:HorizontalProgressBar.kt$HorizontalProgressBar$0xFF01C3A2</ID>
    <ID>MagicNumber:HorizontalProgressBar.kt$HorizontalProgressBar$0xFFF1F0EF</ID>
    <ID>MagicNumber:HoursOfOperationJsonAdapter.kt$HoursOfOperationJsonAdapter$38</ID>
    <ID>MagicNumber:HoursPricingJsonAdapter.kt$HoursPricingJsonAdapter$34</ID>
    <ID>MagicNumber:HouseholdPointsJsonAdapter.kt$HouseholdPointsJsonAdapter$37</ID>
    <ID>MagicNumber:IconResponseJsonAdapter.kt$IconResponseJsonAdapter$34</ID>
    <ID>MagicNumber:IdentityJsonAdapter.kt$IdentityJsonAdapter$3</ID>
    <ID>MagicNumber:IdentityJsonAdapter.kt$IdentityJsonAdapter$30</ID>
    <ID>MagicNumber:IdentityJsonAdapter.kt$IdentityJsonAdapter$4</ID>
    <ID>MagicNumber:IdentityJsonAdapter.kt$IdentityJsonAdapter$5</ID>
    <ID>MagicNumber:IdentityJsonAdapter.kt$IdentityJsonAdapter$6</ID>
    <ID>MagicNumber:IdentityJsonAdapter.kt$IdentityJsonAdapter$7</ID>
    <ID>MagicNumber:IdentityListJsonAdapter.kt$IdentityListJsonAdapter$34</ID>
    <ID>MagicNumber:ImageAssetJsonAdapter.kt$ImageAssetJsonAdapter$32</ID>
    <ID>MagicNumber:ImageJsonAdapter.kt$ImageJsonAdapter$27</ID>
    <ID>MagicNumber:ImageJsonJsonAdapter.kt$ImageJsonJsonAdapter$31</ID>
    <ID>MagicNumber:ImagePagerActivity.kt$ImagePagerActivity$100</ID>
    <ID>MagicNumber:ImageUtils.kt$ImageUtils$70</ID>
    <ID>MagicNumber:ImportedUserReadingJsonAdapter.kt$ImportedUserReadingJsonAdapter$3</ID>
    <ID>MagicNumber:ImportedUserReadingJsonAdapter.kt$ImportedUserReadingJsonAdapter$4</ID>
    <ID>MagicNumber:ImportedUserReadingJsonAdapter.kt$ImportedUserReadingJsonAdapter$41</ID>
    <ID>MagicNumber:InfoJsonAdapter.kt$InfoJsonAdapter$26</ID>
    <ID>MagicNumber:InfoJsonAdapter.kt$InfoJsonAdapter$3</ID>
    <ID>MagicNumber:InputActivity.kt$InputActivity$16</ID>
    <ID>MagicNumber:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$3</ID>
    <ID>MagicNumber:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$33</ID>
    <ID>MagicNumber:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$4</ID>
    <ID>MagicNumber:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$5</ID>
    <ID>MagicNumber:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$6</ID>
    <ID>MagicNumber:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$7</ID>
    <ID>MagicNumber:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$3</ID>
    <ID>MagicNumber:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$33</ID>
    <ID>MagicNumber:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$4</ID>
    <ID>MagicNumber:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$5</ID>
    <ID>MagicNumber:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$6</ID>
    <ID>MagicNumber:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$7</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$3</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$31</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$4</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$5</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$6</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$7</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$8</ID>
    <ID>MagicNumber:InsuranceJsonAdapter.kt$InsuranceJsonAdapter$9</ID>
    <ID>MagicNumber:IntakeFormResponseJsonAdapter.kt$IntakeFormResponseJsonAdapter$3</ID>
    <ID>MagicNumber:IntakeFormResponseJsonAdapter.kt$IntakeFormResponseJsonAdapter$40</ID>
    <ID>MagicNumber:JsonApiDataJsonAdapter.kt$JsonApiDataJsonAdapter$33</ID>
    <ID>MagicNumber:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter$3</ID>
    <ID>MagicNumber:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter$34</ID>
    <ID>MagicNumber:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter$4</ID>
    <ID>MagicNumber:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter$5</ID>
    <ID>MagicNumber:JsonApiJsonAdapter.kt$JsonApiJsonAdapter$29</ID>
    <ID>MagicNumber:JsonApiLinksJsonAdapter.kt$JsonApiLinksJsonAdapter$3</ID>
    <ID>MagicNumber:JsonApiLinksJsonAdapter.kt$JsonApiLinksJsonAdapter$34</ID>
    <ID>MagicNumber:JsonApiLinksJsonAdapter.kt$JsonApiLinksJsonAdapter$4</ID>
    <ID>MagicNumber:JsonApiResponseJsonAdapter.kt$JsonApiResponseJsonAdapter$37</ID>
    <ID>MagicNumber:LeagueBalanceResponseJsonAdapter.kt$LeagueBalanceResponseJsonAdapter$43</ID>
    <ID>MagicNumber:LegacyLeagueAuthenticator_LegacyBiometricAuthInfoJsonAdapter.kt$LegacyLeagueAuthenticator_LegacyBiometricAuthInfoJsonAdapter$71</ID>
    <ID>MagicNumber:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$3</ID>
    <ID>MagicNumber:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$4</ID>
    <ID>MagicNumber:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$41</ID>
    <ID>MagicNumber:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$5</ID>
    <ID>MagicNumber:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter$6</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$0.1f</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$10</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$10f</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$14f</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$15f</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$3</ID>
    <ID>MagicNumber:LineChartView.kt$LineChartView$3f</ID>
    <ID>MagicNumber:LineConfigJsonAdapter.kt$LineConfigJsonAdapter$3</ID>
    <ID>MagicNumber:LineConfigJsonAdapter.kt$LineConfigJsonAdapter$32</ID>
    <ID>MagicNumber:LineValuesJsonAdapter.kt$LineValuesJsonAdapter$32</ID>
    <ID>MagicNumber:LinkJsonAdapter.kt$LinkJsonAdapter$26</ID>
    <ID>MagicNumber:LiveBalance.kt$LiveBalance$100</ID>
    <ID>MagicNumber:LiveBalanceController.kt$LiveBalanceController$100</ID>
    <ID>MagicNumber:LiveBalanceController.kt$LiveBalanceController$102</ID>
    <ID>MagicNumber:LiveBalanceController.kt$LiveBalanceController$30</ID>
    <ID>MagicNumber:LiveBalanceController.kt$LiveBalanceController$99</ID>
    <ID>MagicNumber:LiveBalanceNetworkJsonAdapter.kt$LiveBalanceNetworkJsonAdapter$40</ID>
    <ID>MagicNumber:LiveBalanceSpendTypeJsonAdapter.kt$LiveBalanceSpendTypeJsonAdapter$42</ID>
    <ID>MagicNumber:LiveBalancesEpoxyPopulator.kt$100</ID>
    <ID>MagicNumber:LocationSelectionViewModel.kt$LocationSelectionViewModel$3</ID>
    <ID>MagicNumber:LocationSelectionViewModel.kt$LocationSelectionViewModel$4</ID>
    <ID>MagicNumber:LocationSelectionViewModel.kt$LocationSelectionViewModel$5</ID>
    <ID>MagicNumber:LocationSelectionViewModel.kt$LocationSelectionViewModel$6</ID>
    <ID>MagicNumber:LoginVerificationFragment.kt$LoginVerificationFragment$5</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$24f</ID>
    <ID>MagicNumber:MainActivity.kt$MainActivity$64f</ID>
    <ID>MagicNumber:MapleAuthorizationJsonAdapter.kt$MapleAuthorizationJsonAdapter$40</ID>
    <ID>MagicNumber:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter$3</ID>
    <ID>MagicNumber:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter$39</ID>
    <ID>MagicNumber:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter$4</ID>
    <ID>MagicNumber:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter$5</ID>
    <ID>MagicNumber:MaplePostConsultsRowJsonAdapter.kt$MaplePostConsultsRowJsonAdapter$3</ID>
    <ID>MagicNumber:MaplePostConsultsRowJsonAdapter.kt$MaplePostConsultsRowJsonAdapter$42</ID>
    <ID>MagicNumber:MapleUserJsonAdapter.kt$MapleUserJsonAdapter$31</ID>
    <ID>MagicNumber:MapleUtils.kt$MapleUtils$16</ID>
    <ID>MagicNumber:MapleUtils.kt$MapleUtils$32</ID>
    <ID>MagicNumber:MapleUtils.kt$MapleUtils$4</ID>
    <ID>MagicNumber:MarketplaceConfigJsonAdapter.kt$MarketplaceConfigJsonAdapter$39</ID>
    <ID>MagicNumber:MemberHomeStoresJsonAdapter.kt$MemberHomeStoresJsonAdapter$38</ID>
    <ID>MagicNumber:MemberInfoController.kt$MemberInfoController$3</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$10</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$28</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$3</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$4</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$5</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$6</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$7</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$8</ID>
    <ID>MagicNumber:MemberJsonAdapter.kt$MemberJsonAdapter$9</ID>
    <ID>MagicNumber:MerchListItemJsonJsonAdapter.kt$MerchListItemJsonJsonAdapter$39</ID>
    <ID>MagicNumber:MerchListJsonJsonAdapter.kt$MerchListJsonJsonAdapter$3</ID>
    <ID>MagicNumber:MerchListJsonJsonAdapter.kt$MerchListJsonJsonAdapter$35</ID>
    <ID>MagicNumber:MilestoneJsonAdapter.kt$MilestoneJsonAdapter$3</ID>
    <ID>MagicNumber:MilestoneJsonAdapter.kt$MilestoneJsonAdapter$31</ID>
    <ID>MagicNumber:MilestoneTrackerResultJsonAdapter.kt$MilestoneTrackerResultJsonAdapter$44</ID>
    <ID>MagicNumber:ModalJsonAdapter.kt$ModalJsonAdapter$27</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$10</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$11</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$12</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$13</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$14</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$15</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$16</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$17</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$18</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$28</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$3</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$4</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$5</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$6</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$7</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$8</ID>
    <ID>MagicNumber:ModuleJsonAdapter.kt$ModuleJsonAdapter$9</ID>
    <ID>MagicNumber:Money.kt$Money$100.00</ID>
    <ID>MagicNumber:MoneyJsonAdapter.kt$MoneyJsonAdapter$27</ID>
    <ID>MagicNumber:MultiProgressBar.kt$MultiProgressBar$0.03</ID>
    <ID>MagicNumber:MultiProgressBar.kt$MultiProgressBar$100</ID>
    <ID>MagicNumber:MultiProgressBar.kt$MultiProgressBar$23f</ID>
    <ID>MagicNumber:MultiProgressBar.kt$MultiProgressBar$3f</ID>
    <ID>MagicNumber:MultipleChoiceAnswerJsonAdapter.kt$MultipleChoiceAnswerJsonAdapter$3</ID>
    <ID>MagicNumber:MultipleChoiceAnswerJsonAdapter.kt$MultipleChoiceAnswerJsonAdapter$42</ID>
    <ID>MagicNumber:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$3</ID>
    <ID>MagicNumber:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$4</ID>
    <ID>MagicNumber:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$45</ID>
    <ID>MagicNumber:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$5</ID>
    <ID>MagicNumber:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$6</ID>
    <ID>MagicNumber:NotificationController.kt$NotificationController$1.05f</ID>
    <ID>MagicNumber:NotificationController.kt$NotificationController$5</ID>
    <ID>MagicNumber:NotificationDataJsonAdapter.kt$NotificationDataJsonAdapter$38</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$3</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$34</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$4</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$5</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$6</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$7</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$8</ID>
    <ID>MagicNumber:NotificationJsonAdapter.kt$NotificationJsonAdapter$9</ID>
    <ID>MagicNumber:OnboardingPageJsonAdapter.kt$OnboardingPageJsonAdapter$3</ID>
    <ID>MagicNumber:OnboardingPageJsonAdapter.kt$OnboardingPageJsonAdapter$36</ID>
    <ID>MagicNumber:OnboardingPageJsonAdapter.kt$OnboardingPageJsonAdapter$4</ID>
    <ID>MagicNumber:OnboardingPage_AdditionalInfoJsonAdapter.kt$OnboardingPage_AdditionalInfoJsonAdapter$3</ID>
    <ID>MagicNumber:OnboardingPage_AdditionalInfoJsonAdapter.kt$OnboardingPage_AdditionalInfoJsonAdapter$51</ID>
    <ID>MagicNumber:OnboardingPage_AdditionalInfo_CTAJsonAdapter.kt$OnboardingPage_AdditionalInfo_CTAJsonAdapter$55</ID>
    <ID>MagicNumber:OnboardingPage_AdditionalInfo_ContentJsonAdapter.kt$OnboardingPage_AdditionalInfo_ContentJsonAdapter$59</ID>
    <ID>MagicNumber:OptimumTokensJsonAdapter.kt$OptimumTokensJsonAdapter$35</ID>
    <ID>MagicNumber:OutcomeCall.kt$OutcomeCall$30</ID>
    <ID>MagicNumber:OutcomeSuggestionsFragment.kt$5f</ID>
    <ID>MagicNumber:OutcomesApi_GetOutcomeJsonAdapter.kt$OutcomesApi_GetOutcomeJsonAdapter$44</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$3</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$4</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$41</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$5</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$6</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$7</ID>
    <ID>MagicNumber:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter$8</ID>
    <ID>MagicNumber:PCHAppEnvironmentJsonAdapter.kt$PCHAppEnvironmentJsonAdapter$39</ID>
    <ID>MagicNumber:PCHPolicyJsonAdapter.kt$PCHPolicyJsonAdapter$3</ID>
    <ID>MagicNumber:PCHPolicyJsonAdapter.kt$PCHPolicyJsonAdapter$31</ID>
    <ID>MagicNumber:PCHPolicyJsonAdapter.kt$PCHPolicyJsonAdapter$4</ID>
    <ID>MagicNumber:PCHPolicyRequestJsonAdapter.kt$PCHPolicyRequestJsonAdapter$38</ID>
    <ID>MagicNumber:PCHealthAuthenticator_PcHealthBiometricAuthInfoJsonAdapter.kt$PCHealthAuthenticator_PcHealthBiometricAuthInfoJsonAdapter$3</ID>
    <ID>MagicNumber:PCHealthAuthenticator_PcHealthBiometricAuthInfoJsonAdapter.kt$PCHealthAuthenticator_PcHealthBiometricAuthInfoJsonAdapter$69</ID>
    <ID>MagicNumber:PCHealthReadingsController.kt$PCHealthReadingsController$3</ID>
    <ID>MagicNumber:PageHeader.kt$PageHeader$64</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$10</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$11</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$12</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$13</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$14</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$15</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$16</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$17</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$4</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$5</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$6</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$7</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$8</ID>
    <ID>MagicNumber:PageWithTabController.kt$PageWithTabController$9</ID>
    <ID>MagicNumber:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$39</ID>
    <ID>MagicNumber:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter$6</ID>
    <ID>MagicNumber:PatientResponseJsonAdapter.kt$PatientResponseJsonAdapter$37</ID>
    <ID>MagicNumber:PcInsiderJsonAdapter.kt$PcInsiderJsonAdapter$31</ID>
    <ID>MagicNumber:PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter.kt$PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter$3</ID>
    <ID>MagicNumber:PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter.kt$PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter$63</ID>
    <ID>MagicNumber:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$3</ID>
    <ID>MagicNumber:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$4</ID>
    <ID>MagicNumber:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$48</ID>
    <ID>MagicNumber:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$5</ID>
    <ID>MagicNumber:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$6</ID>
    <ID>MagicNumber:PersonalStoreCreditRedeemedJsonAdapter.kt$PersonalStoreCreditRedeemedJsonAdapter$49</ID>
    <ID>MagicNumber:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter$44</ID>
    <ID>MagicNumber:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:PractitionerResponseJsonAdapter.kt$PractitionerResponseJsonAdapter$42</ID>
    <ID>MagicNumber:PreChatFormViewModel.kt$PreChatFormViewModel$25</ID>
    <ID>MagicNumber:PreviousResponseJsonAdapter.kt$PreviousResponseJsonAdapter$38</ID>
    <ID>MagicNumber:PricingAttributesJsonAdapter.kt$PricingAttributesJsonAdapter$39</ID>
    <ID>MagicNumber:PricingJsonAdapter.kt$PricingJsonAdapter$29</ID>
    <ID>MagicNumber:PricingResponseJsonAdapter.kt$PricingResponseJsonAdapter$37</ID>
    <ID>MagicNumber:ProgramEnrollmentLimitModalJsonAdapter.kt$ProgramEnrollmentLimitModalJsonAdapter$49</ID>
    <ID>MagicNumber:PulseCheckJsonAdapter.kt$PulseCheckJsonAdapter$3</ID>
    <ID>MagicNumber:PulseCheckJsonAdapter.kt$PulseCheckJsonAdapter$32</ID>
    <ID>MagicNumber:QRCodeAddedReadingJsonAdapter.kt$QRCodeAddedReadingJsonAdapter$40</ID>
    <ID>MagicNumber:QRCodeGenerationFragment.kt$180</ID>
    <ID>MagicNumber:QRCodeGenerationFragment.kt$3600</ID>
    <ID>MagicNumber:QRCodeGenerationFragment.kt$60</ID>
    <ID>MagicNumber:QRCodeViewModel.kt$QRCodeViewModel.&lt;no name provided>$1000</ID>
    <ID>MagicNumber:QRCodeViewModel.kt$QRCodeViewModel.&lt;no name provided>$1000L</ID>
    <ID>MagicNumber:QuestionActivity.kt$QuestionActivity$3</ID>
    <ID>MagicNumber:QuestionActivity.kt$QuestionActivity$4</ID>
    <ID>MagicNumber:QuestionActivity.kt$QuestionActivity$5</ID>
    <ID>MagicNumber:QuestionActivity.kt$QuestionActivity$6</ID>
    <ID>MagicNumber:QuestionController.kt$QuestionController$15</ID>
    <ID>MagicNumber:QuestionController.kt$QuestionController$1900</ID>
    <ID>MagicNumber:QuestionController.kt$QuestionController$193</ID>
    <ID>MagicNumber:QuestionController.kt$QuestionController$4</ID>
    <ID>MagicNumber:QuestionController.kt$QuestionController$67</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$10</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$11</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$12</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$13</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$14</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$3</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$30</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$4</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$5</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$6</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$7</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$8</ID>
    <ID>MagicNumber:QuestionJsonAdapter.kt$QuestionJsonAdapter$9</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$3</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$4</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$43</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$5</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$6</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$7</ID>
    <ID>MagicNumber:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter$8</ID>
    <ID>MagicNumber:QuickActionMainPageJsonAdapter.kt$QuickActionMainPageJsonAdapter$41</ID>
    <ID>MagicNumber:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$3</ID>
    <ID>MagicNumber:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$4</ID>
    <ID>MagicNumber:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$41</ID>
    <ID>MagicNumber:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$5</ID>
    <ID>MagicNumber:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$6</ID>
    <ID>MagicNumber:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter$7</ID>
    <ID>MagicNumber:QuickActionsJsonAdapter.kt$QuickActionsJsonAdapter$34</ID>
    <ID>MagicNumber:ReadingJsonAdapter.kt$ReadingJsonAdapter$29</ID>
    <ID>MagicNumber:ReadingJsonAdapter.kt$ReadingJsonAdapter$3</ID>
    <ID>MagicNumber:ReadingJsonAdapter.kt$ReadingJsonAdapter$4</ID>
    <ID>MagicNumber:ReadingsController.kt$ReadingsController$10</ID>
    <ID>MagicNumber:RecentAchievementsResponseJsonAdapter.kt$RecentAchievementsResponseJsonAdapter$48</ID>
    <ID>MagicNumber:RecommendationJsonAdapter.kt$RecommendationJsonAdapter$3</ID>
    <ID>MagicNumber:RecommendationJsonAdapter.kt$RecommendationJsonAdapter$36</ID>
    <ID>MagicNumber:RecommendationJsonAdapter.kt$RecommendationJsonAdapter$4</ID>
    <ID>MagicNumber:RegionSupportJsonAdapter.kt$RegionSupportJsonAdapter$35</ID>
    <ID>MagicNumber:RenderedTemplateJsonAdapter.kt$RenderedTemplateJsonAdapter$38</ID>
    <ID>MagicNumber:Repository_Pco.kt$404</ID>
    <ID>MagicNumber:RequestErrorJsonAdapter.kt$RequestErrorJsonAdapter$34</ID>
    <ID>MagicNumber:RewardJsonAdapter.kt$RewardJsonAdapter$28</ID>
    <ID>MagicNumber:RewardLevelsResponseJsonAdapter.kt$RewardLevelsResponseJsonAdapter$42</ID>
    <ID>MagicNumber:RewardsAPI_GetLeagueBalanceJsonAdapter.kt$RewardsAPI_GetLeagueBalanceJsonAdapter$49</ID>
    <ID>MagicNumber:RewardsAPI_GetRewardLevelsJsonAdapter.kt$RewardsAPI_GetRewardLevelsJsonAdapter$48</ID>
    <ID>MagicNumber:RewardsAPI_RedeemLeaguePointsJsonAdapter.kt$RewardsAPI_RedeemLeaguePointsJsonAdapter$51</ID>
    <ID>MagicNumber:RewardsTransactionJsonAdapter.kt$RewardsTransactionJsonAdapter$3</ID>
    <ID>MagicNumber:RewardsTransactionJsonAdapter.kt$RewardsTransactionJsonAdapter$4</ID>
    <ID>MagicNumber:RewardsTransactionJsonAdapter.kt$RewardsTransactionJsonAdapter$40</ID>
    <ID>MagicNumber:RewardsTransactionsJsonAdapter.kt$RewardsTransactionsJsonAdapter$41</ID>
    <ID>MagicNumber:RootActivity.kt$RootActivity$1000</ID>
    <ID>MagicNumber:RowController.kt$RowController$16</ID>
    <ID>MagicNumber:ScreenInfoJsonAdapter.kt$ScreenInfoJsonAdapter$32</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$39</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$6</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$7</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$8</ID>
    <ID>MagicNumber:ServiceAttributesJsonAdapter.kt$ServiceAttributesJsonAdapter$9</ID>
    <ID>MagicNumber:ServiceResponseJsonAdapter.kt$ServiceResponseJsonAdapter$37</ID>
    <ID>MagicNumber:SessionJsonAdapter.kt$SessionJsonAdapter$29</ID>
    <ID>MagicNumber:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$16</ID>
    <ID>MagicNumber:SfChatTranscriptJsonAdapter.kt$SfChatTranscriptJsonAdapter$3</ID>
    <ID>MagicNumber:SfChatTranscriptJsonAdapter.kt$SfChatTranscriptJsonAdapter$38</ID>
    <ID>MagicNumber:SfChatTranscriptJsonAdapter.kt$SfChatTranscriptJsonAdapter$4</ID>
    <ID>MagicNumber:ShadowScrollView.kt$ShadowScrollView$8f</ID>
    <ID>MagicNumber:ShopifyMoneyJsonAdapter.kt$ShopifyMoneyJsonAdapter$34</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$3</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$36</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$4</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$5</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$6</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$7</ID>
    <ID>MagicNumber:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter$8</ID>
    <ID>MagicNumber:SpaceJsonAdapter.kt$SpaceJsonAdapter$27</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$41</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$6</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$7</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$8</ID>
    <ID>MagicNumber:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter$9</ID>
    <ID>MagicNumber:SpecialtyFlowAttributesJsonAdapter.kt$SpecialtyFlowAttributesJsonAdapter$45</ID>
    <ID>MagicNumber:SpecialtyFlowResponseJsonAdapter.kt$SpecialtyFlowResponseJsonAdapter$43</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$10</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$11</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$3</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$4</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$5</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$50</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$6</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$7</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$8</ID>
    <ID>MagicNumber:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter$9</ID>
    <ID>MagicNumber:SpecialtyLocationsResponseJsonAdapter.kt$SpecialtyLocationsResponseJsonAdapter$48</ID>
    <ID>MagicNumber:SpecialtyResponseJsonAdapter.kt$SpecialtyResponseJsonAdapter$39</ID>
    <ID>MagicNumber:SpecialtySelectionView.kt$3</ID>
    <ID>MagicNumber:SpecialtySelectionView.kt$5</ID>
    <ID>MagicNumber:SpeechBubbleBannerJsonAdapter.kt$SpeechBubbleBannerJsonAdapter$3</ID>
    <ID>MagicNumber:SpeechBubbleBannerJsonAdapter.kt$SpeechBubbleBannerJsonAdapter$40</ID>
    <ID>MagicNumber:SpeechBubbleComponentJsonAdapter.kt$SpeechBubbleComponentJsonAdapter$43</ID>
    <ID>MagicNumber:StatusBannerJsonAdapter.kt$StatusBannerJsonAdapter$34</ID>
    <ID>MagicNumber:StatusCountsJsonAdapter.kt$StatusCountsJsonAdapter$3</ID>
    <ID>MagicNumber:StatusCountsJsonAdapter.kt$StatusCountsJsonAdapter$34</ID>
    <ID>MagicNumber:StatusCountsJsonAdapter.kt$StatusCountsJsonAdapter$4</ID>
    <ID>MagicNumber:StickerController.kt$StickerController$104</ID>
    <ID>MagicNumber:StickerController.kt$StickerController$15</ID>
    <ID>MagicNumber:StickerController.kt$StickerController$27</ID>
    <ID>MagicNumber:StickerController.kt$StickerController$65</ID>
    <ID>MagicNumber:StickerController.kt$StickerController$91</ID>
    <ID>MagicNumber:StickerController.kt$StickerController$92</ID>
    <ID>MagicNumber:StringExtension.kt$16</ID>
    <ID>MagicNumber:StringExtension.kt$7</ID>
    <ID>MagicNumber:StringExtension.kt$9</ID>
    <ID>MagicNumber:StringMapJsonAdapter.kt$StringMapJsonAdapter$31</ID>
    <ID>MagicNumber:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$16f</ID>
    <ID>MagicNumber:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter$3</ID>
    <ID>MagicNumber:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter$35</ID>
    <ID>MagicNumber:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter$4</ID>
    <ID>MagicNumber:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter$5</ID>
    <ID>MagicNumber:SuggestionJsonAdapter.kt$SuggestionJsonAdapter$3</ID>
    <ID>MagicNumber:SuggestionJsonAdapter.kt$SuggestionJsonAdapter$32</ID>
    <ID>MagicNumber:SymptomsResponseJsonAdapter.kt$SymptomsResponseJsonAdapter$38</ID>
    <ID>MagicNumber:SysJsonAdapter.kt$SysJsonAdapter$25</ID>
    <ID>MagicNumber:SysJsonAdapter.kt$SysJsonAdapter$3</ID>
    <ID>MagicNumber:SysJsonAdapter.kt$SysJsonAdapter$4</ID>
    <ID>MagicNumber:SysJsonAdapter.kt$SysJsonAdapter$5</ID>
    <ID>MagicNumber:SysJsonAdapter.kt$SysJsonAdapter$6</ID>
    <ID>MagicNumber:SysJsonAdapter.kt$SysJsonAdapter$7</ID>
    <ID>MagicNumber:TestChatClient.kt$TestChatClient$100</ID>
    <ID>MagicNumber:TestChatClient.kt$TestChatClient$1000</ID>
    <ID>MagicNumber:TestChatClient.kt$TestChatClient$10000</ID>
    <ID>MagicNumber:TestChatClient.kt$TestChatClient$2000</ID>
    <ID>MagicNumber:TestChatClient.kt$TestChatClient$3000</ID>
    <ID>MagicNumber:TextInputRxNumberFieldState.kt$TextInputRxNumberFieldState$7</ID>
    <ID>MagicNumber:TextInputStoreNumberFieldState.kt$TextInputStoreNumberFieldState$4</ID>
    <ID>MagicNumber:ThirdPartyDetailsJsonAdapter.kt$ThirdPartyDetailsJsonAdapter$3</ID>
    <ID>MagicNumber:ThirdPartyDetailsJsonAdapter.kt$ThirdPartyDetailsJsonAdapter$39</ID>
    <ID>MagicNumber:ThirdPartyDetailsJsonAdapter.kt$ThirdPartyDetailsJsonAdapter$4</ID>
    <ID>MagicNumber:TimeRangeJsonAdapter.kt$TimeRangeJsonAdapter$31</ID>
    <ID>MagicNumber:TimeslotResponseJsonAdapter.kt$TimeslotResponseJsonAdapter$3</ID>
    <ID>MagicNumber:TimeslotResponseJsonAdapter.kt$TimeslotResponseJsonAdapter$38</ID>
    <ID>MagicNumber:TimeslotsAttributesJsonAdapter.kt$TimeslotsAttributesJsonAdapter$41</ID>
    <ID>MagicNumber:ToolTipJsonAdapter.kt$ToolTipJsonAdapter$29</ID>
    <ID>MagicNumber:ToolbarActivity.kt$ToolbarActivity$255</ID>
    <ID>MagicNumber:ToolbarActivity.kt$ToolbarActivity$256</ID>
    <ID>MagicNumber:TopicBanner.kt$TopicBanner$40</ID>
    <ID>MagicNumber:TopicJsonAdapter.kt$TopicJsonAdapter$27</ID>
    <ID>MagicNumber:TopicJsonAdapter.kt$TopicJsonAdapter$3</ID>
    <ID>MagicNumber:TopicJsonAdapter.kt$TopicJsonAdapter$4</ID>
    <ID>MagicNumber:TopicJsonAdapter.kt$TopicJsonAdapter$5</ID>
    <ID>MagicNumber:TopicJsonAdapter.kt$TopicJsonAdapter$6</ID>
    <ID>MagicNumber:TopicJsonAdapter.kt$TopicJsonAdapter$7</ID>
    <ID>MagicNumber:TriageErrorBodyJsonAdapter.kt$TriageErrorBodyJsonAdapter$3</ID>
    <ID>MagicNumber:TriageErrorBodyJsonAdapter.kt$TriageErrorBodyJsonAdapter$37</ID>
    <ID>MagicNumber:UriExtension.kt$1024</ID>
    <ID>MagicNumber:UserChallengeRequestJsonAdapter.kt$UserChallengeRequestJsonAdapter$3</ID>
    <ID>MagicNumber:UserChallengeRequestJsonAdapter.kt$UserChallengeRequestJsonAdapter$42</ID>
    <ID>MagicNumber:UserChallengeResponseJsonAdapter.kt$UserChallengeResponseJsonAdapter$43</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$10</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$11</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$12</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$13</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$14</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$3</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$32</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$4</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$5</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$6</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$7</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$8</ID>
    <ID>MagicNumber:UserConfigJsonAdapter.kt$UserConfigJsonAdapter$9</ID>
    <ID>MagicNumber:UserCredentialJsonAdapter.kt$UserCredentialJsonAdapter$36</ID>
    <ID>MagicNumber:UserCredentialsJsonAdapter.kt$UserCredentialsJsonAdapter$37</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$10</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$11</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$12</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$13</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$14</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$15</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$16</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$17</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$18</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$19</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$20</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$21</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$22</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$23</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$24</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$25</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$3</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$35</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$4</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$5</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$6</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$7</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$8</ID>
    <ID>MagicNumber:UserDependentJsonAdapter.kt$UserDependentJsonAdapter$9</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$10</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$11</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$12</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$3</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$34</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$4</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$5</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$6</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$7</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$8</ID>
    <ID>MagicNumber:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter$9</ID>
    <ID>MagicNumber:UserDocumentsResponseJsonAdapter.kt$UserDocumentsResponseJsonAdapter$43</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$10</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$11</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$3</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$31</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$4</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$5</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$6</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$7</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$8</ID>
    <ID>MagicNumber:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter$9</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$10</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$11</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$12</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$13</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$14</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$15</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$16</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$17</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$18</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$19</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$20</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$21</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$22</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$23</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$24</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$25</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$26</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$27</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$28</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$29</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$3</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$30</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$31</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$32</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$33</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$4</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$5</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$6</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$7</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$8</ID>
    <ID>MagicNumber:UserJsonAdapter.kt$UserJsonAdapter$9</ID>
    <ID>MagicNumber:UserLiveBalancesDataJsonAdapter.kt$UserLiveBalancesDataJsonAdapter$42</ID>
    <ID>MagicNumber:UserLiveBalancesJsonAdapter.kt$UserLiveBalancesJsonAdapter$38</ID>
    <ID>MagicNumber:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$3</ID>
    <ID>MagicNumber:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$33</ID>
    <ID>MagicNumber:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$4</ID>
    <ID>MagicNumber:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$5</ID>
    <ID>MagicNumber:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$6</ID>
    <ID>MagicNumber:UserReadingJsonAdapter.kt$UserReadingJsonAdapter$7</ID>
    <ID>MagicNumber:UserTypeResponseJsonAdapter.kt$UserTypeResponseJsonAdapter$38</ID>
    <ID>MagicNumber:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter$3</ID>
    <ID>MagicNumber:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter$33</ID>
    <ID>MagicNumber:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter$4</ID>
    <ID>MagicNumber:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter$5</ID>
    <ID>MagicNumber:ValueQuestion.kt$ValueQuestion$12</ID>
    <ID>MagicNumber:ValueUnitJsonAdapter.kt$ValueUnitJsonAdapter$31</ID>
    <ID>MagicNumber:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter$3</ID>
    <ID>MagicNumber:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter$4</ID>
    <ID>MagicNumber:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter$5</ID>
    <ID>MagicNumber:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter$54</ID>
    <ID>MagicNumber:WaitingRoomLinkOutsJsonAdapter.kt$WaitingRoomLinkOutsJsonAdapter$41</ID>
    <ID>MagicNumber:WaitingRoomMenuItemsJsonAdapter.kt$WaitingRoomMenuItemsJsonAdapter$42</ID>
    <ID>MagicNumber:WalletCardActionIconInfoJsonAdapter.kt$WalletCardActionIconInfoJsonAdapter$46</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$3</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$38</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$4</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$5</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$6</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$7</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$8</ID>
    <ID>MagicNumber:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter$9</ID>
    <ID>MagicNumber:WalletCardView.kt$WalletCardView$4f</ID>
    <ID>MagicNumber:WalletJsonAdapter.kt$WalletJsonAdapter$28</ID>
    <ID>MagicNumber:WalletJsonAdapter.kt$WalletJsonAdapter$3</ID>
    <ID>MagicNumber:WalletJsonAdapter.kt$WalletJsonAdapter$4</ID>
    <ID>MagicNumber:WalletJsonAdapter.kt$WalletJsonAdapter$5</ID>
    <ID>MagicNumber:WalletJsonAdapter.kt$WalletJsonAdapter$6</ID>
    <ID>MagicNumber:WearableConfiguration.kt$&lt;no name provided>$999</ID>
    <ID>MagicNumber:WearableConsentJsonAdapter.kt$WearableConsentJsonAdapter$37</ID>
    <ID>MagicNumber:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$3</ID>
    <ID>MagicNumber:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$36</ID>
    <ID>MagicNumber:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$4</ID>
    <ID>MagicNumber:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$5</ID>
    <ID>MagicNumber:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter$6</ID>
    <ID>MagicNumber:WellnessStationAPI_GetAddedReadingsJsonAdapter.kt$WellnessStationAPI_GetAddedReadingsJsonAdapter$3</ID>
    <ID>MagicNumber:WellnessStationAPI_GetAddedReadingsJsonAdapter.kt$WellnessStationAPI_GetAddedReadingsJsonAdapter$57</ID>
    <ID>MagicNumber:WellnessStationAPI_GetClaimCodeJsonAdapter.kt$WellnessStationAPI_GetClaimCodeJsonAdapter$53</ID>
    <ID>MagicNumber:WellnessStationAPI_GetInsightCardsJsonAdapter.kt$WellnessStationAPI_GetInsightCardsJsonAdapter$56</ID>
    <ID>MagicNumber:WellnessStationAPI_GetReadingsJsonAdapter.kt$WellnessStationAPI_GetReadingsJsonAdapter$3</ID>
    <ID>MagicNumber:WellnessStationAPI_GetReadingsJsonAdapter.kt$WellnessStationAPI_GetReadingsJsonAdapter$52</ID>
    <ID>MagicNumber:WellnessStationAPI_RemoveReadingsJsonAdapter.kt$WellnessStationAPI_RemoveReadingsJsonAdapter$55</ID>
    <ID>MagicNumber:WellnessStationHighlightResponseJsonAdapter.kt$WellnessStationHighlightResponseJsonAdapter$54</ID>
    <ID>MagicNumber:YAxisConfig.kt$YAxisConfig$4</ID>
    <ID>MagicNumber:YAxisConfig.kt$YAxisConfig$40</ID>
    <ID>MagicNumber:YAxisConfig.kt$YAxisConfig$5</ID>
    <ID>MagicNumber:YAxisConfigJsonAdapter.kt$YAxisConfigJsonAdapter$33</ID>
    <ID>MatchingDeclarationName:AnalyticsTracker_Chat.kt$ChatAnalyticsProvider</ID>
    <ID>MatchingDeclarationName:AppointmentDetailsModels.kt$AppointmentDetailsModel</ID>
    <ID>MatchingDeclarationName:ContentAPI_OpenContent.kt$UriProvider</ID>
    <ID>MatchingDeclarationName:GenesisButton.kt$ButtonStyle</ID>
    <ID>MatchingDeclarationName:JobBindingProperty.kt$FragmentJobBindingProperty : ReadWriteProperty</ID>
    <ID>MatchingDeclarationName:RecSpans.kt$ResSpans : Iterable</ID>
    <ID>MatchingDeclarationName:VaccinationStatusDetail.kt$StatusDetail</ID>
    <ID>MatchingDeclarationName:ViewBindingProperty.kt$ClearOnDestroyProperty&lt;T> : ReadOnlyProperty</ID>
    <ID>MaxLineLength:API_DailyScreener.kt$fun</ID>
    <ID>MaxLineLength:API_Maple.kt$MapleUtils.generateDeviceSignatureEventParams(deviceSignature, deviceContext, result.errorResponse)</ID>
    <ID>MaxLineLength:API_Salesforce.kt$fun API.createSalesforceChatMap(agentType: String)</ID>
    <ID>MaxLineLength:API_Vaccine.kt$fun</ID>
    <ID>MaxLineLength:API_Vaccine.kt$private</ID>
    <ID>MaxLineLength:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"is_requesting_change\" of type boolean does not support null values")</ID>
    <ID>MaxLineLength:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AccountSetupGenderFragment.kt$AccountSetupGenderFragment$binding.header.setDescriptionText(StringProvider(resources).getStringFromHtml(R.string.roadrunner_whats_your_sex_and_gender_description))</ID>
    <ID>MaxLineLength:AccountSetupGenderFragment.kt$AccountSetupGenderFragment$findNavControllerSafely()?.navigate(AccountSetupGenderFragmentDirections.navigateToSelectGenderIdentity())</ID>
    <ID>MaxLineLength:AccountSetupLocationFragment.kt$AccountSetupLocationFragment$findNavControllerSafely()?.navigate(AccountSetupLocationFragmentDirections.navigateToSetupComplete())</ID>
    <ID>MaxLineLength:AccountSetupPersonalInfoFragment.kt$AccountSetupPersonalInfoFragment$binding.root.context.getString(R.string.roadrunner_toc_link_text) to listOf(URLSpan(getString(R.string.roadrunner_terms_of_service_url)))</ID>
    <ID>MaxLineLength:AccountSetupPersonalInfoFragment.kt$AccountSetupPersonalInfoFragment$context.getString(R.string.roadrunner_shoppers_drug_mart_and_affliates) to listOf(URLSpan(getString(R.string.roadrunner_faq_url)))</ID>
    <ID>MaxLineLength:AchievementCelebration.kt$contentDescription = "${achievementDetail.name} " + stringResource(R.string.rewards_badge_image)</ID>
    <ID>MaxLineLength:AchievementCompletionUseCaseTest.kt$AchievementCompletionUseCaseTest$val userAchievement = AchievementCompletionTestData.createUserAchievementDataForActivityCompletion(includeInProgress = false)</ID>
    <ID>MaxLineLength:AchievementSection.kt$color = if (badge.shouldGreyOut) GenesisTheme.colors.textSecondary else GenesisTheme.colors.textPrimary</ID>
    <ID>MaxLineLength:AchievementSection.kt$colorFilter = if (badge.shouldGreyOut) ColorFilter.colorMatrix(colorMatrix = getGreyScale()) else null</ID>
    <ID>MaxLineLength:AchievementUseCase.kt$AchievementUseCase$fun</ID>
    <ID>MaxLineLength:AchievementsApi_FetchAchievementInfoOnCompletionJsonAdapter.kt$AchievementsApi_FetchAchievementInfoOnCompletionJsonAdapter$AchievementsApi.FetchAchievementInfoOnCompletion::class.java</ID>
    <ID>MaxLineLength:AchievementsApi_FetchRecentlyEarnedAchievementsJsonAdapter.kt$AchievementsApi_FetchRecentlyEarnedAchievementsJsonAdapter$AchievementsApi.FetchRecentlyEarnedAchievements::class.java</ID>
    <ID>MaxLineLength:AchievementsRepository.kt$AchievementsRepository$*</ID>
    <ID>MaxLineLength:ActionRow.kt$ActionRow$binding.innerLayout.background = context.getDrawableFromAttr(android.R.attr.selectableItemBackground).takeIf { clickListener != null }</ID>
    <ID>MaxLineLength:ActivitiesFetch.kt$healthJourneyRepo.getHealthJourneyItemsForCurrentDate(Date().noon())</ID>
    <ID>MaxLineLength:ActivityCompletion.kt$modifier = Modifier.height(150.dp)</ID>
    <ID>MaxLineLength:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"relationship_type\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"relationship_type\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"relationship_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AddPatientFragmentArgs.kt$AddPatientFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AddPatientFragmentArgs.kt$AddPatientFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AddPatientFragmentArgs.kt$AddPatientFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AddPatientViewModelTests.kt$AddPatientViewModelTests$fun</ID>
    <ID>MaxLineLength:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"chat_availabilities\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"chat_availabilities\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"chat_availabilities\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AgentChatFragment.kt$AgentChatFragment.&lt;no name provided>$override</ID>
    <ID>MaxLineLength:AlertTest.kt$AlertTest$" \"content\":\"Don't forget to finish enrolling! Log in to League on your desktop computer to complete this process and access your new benefits.\","</ID>
    <ID>MaxLineLength:AlertTest.kt$AlertTest$assertEquals("Don't forget to finish enrolling! Log in to League on your desktop computer to complete this process and access your new benefits.", alert.content)</ID>
    <ID>MaxLineLength:AnalyticsTracker_Banking.kt$trackEvent(BankingAnalytics.Categories.DEFAULT_ACCOUNT, BankingAnalytics.Actions.CHANGE_DEFAULT_ACCOUNT, accountType, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_Chat.kt$fun</ID>
    <ID>MaxLineLength:AnalyticsTracker_Chat.kt$if (!agentType.isNullOrBlank()) viewScreen("$screen - $agentType", parameters = getChatParamsMap(provider.providerAnalyticsKey, price, agentType))</ID>
    <ID>MaxLineLength:AnalyticsTracker_Chat.kt$trackEvent("$category - $agentType", ChatAnalytics.Actions.ENTER_WAITING_ROOM, parameters = mapOf("place_in_queue" to queuePosition))</ID>
    <ID>MaxLineLength:AnalyticsTracker_Chat.kt$trackEvent("$category - $agentType", ChatAnalytics.Actions.VIEW_WAITING_ROOM_LINKOUTS, label = label, parameters = mapOf("url" to url))</ID>
    <ID>MaxLineLength:AnalyticsTracker_Chat.kt$trackEvent("${ChatAnalytics.Categories.CHAT_INTRO} - $agentType", provider.startChatAction, buttonText, parameters = getChatParamsMap(provider.providerAnalyticsKey, price, agentType))</ID>
    <ID>MaxLineLength:AnalyticsTracker_Chat.kt$trackEvent(ChatAnalytics.Categories.CHAT_INTRO, action = ChatAnalytics.Actions.VIEW_PRICING_AVAILABILITY, label = agentType)</ID>
    <ID>MaxLineLength:AnalyticsTracker_Conversation.kt$setUserCustomDimension(ConversationAnalytics.CustomDimensions.NUM_CONVERSATIONS, "NUM_CONVERSATIONS", numConversations.toString())</ID>
    <ID>MaxLineLength:AnalyticsTracker_Dependents.kt$trackEvent(DependentAnalytics.Categories.MANAGE_DEPENDENTS, DependentAnalytics.Actions.RECENTLY_EXPERIENCED_CHANGES, null, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_Dependents.kt$trackEvent(DependentAnalytics.Categories.REMOVE_DEPENDENT, DependentAnalytics.Actions.WHY_YOU_REMOVING_DEPENDENT, qualifyingLifeEvent, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_HealthGoal.kt$HealthGoalAnalytics.Parameters.REWARDS_ELIGIBILITY_STATUS to HealthJourneySettings.pointsSystem.eligibility.text</ID>
    <ID>MaxLineLength:AnalyticsTracker_HealthGoal.kt$internal</ID>
    <ID>MaxLineLength:AnalyticsTracker_HealthGoal.kt$private</ID>
    <ID>MaxLineLength:AnalyticsTracker_HealthGoal.kt$trackHealthGoalEvent(HealthGoalAnalytics.Actions.CHAT_WITH_CARE_TEAM_HEALTH_GOALS, "$programName - $goalName", params)</ID>
    <ID>MaxLineLength:AnalyticsTracker_HealthJourney.kt$internal</ID>
    <ID>MaxLineLength:AnalyticsTracker_HealthJourney.kt$private</ID>
    <ID>MaxLineLength:AnalyticsTracker_Homescreen.kt$fun</ID>
    <ID>MaxLineLength:AnalyticsTracker_Notification.kt$trackEvent(NotificationAnalytics.Categories.NOTIFICATIONS, NotificationAnalytics.Actions.VIEW_NOTIFICATION, type, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_QuickAction.kt$trackEvent(QuickActionAnalytics.Categories.QUICK_ACTION_DETAIL, QuickActionAnalytics.Actions.QUICK_ACTION_CUST_CARE_CHAT, null, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_QuickAction.kt$trackEvent(QuickActionAnalytics.Categories.QUICK_ACTION_DETAIL, QuickActionAnalytics.Actions.QUICK_ACTION_REGISTERED_NURSE_CHAT, null, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_QuickAction.kt$trackEvent(QuickActionAnalytics.Categories.QUICK_ACTION_MENU, QuickActionAnalytics.Actions.OPEN_ACTION_MENU, null, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_QuickAction.kt$trackEvent(QuickActionAnalytics.Categories.QUICK_ACTION_MENU, QuickActionAnalytics.Actions.OPEN_QUICK_ACTION_MENU, null, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_QuickAction.kt$trackEvent(QuickActionAnalytics.Categories.QUICK_ACTION_MENU, QuickActionAnalytics.Actions.SELECT_QUICK_ACTION, actionTitle, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_QuickAction.kt$trackEvent(QuickActionAnalytics.Categories.QUICK_ACTION_MENU, QuickActionAnalytics.Actions.SHOW_ALL_PROVIDERS, null, null)</ID>
    <ID>MaxLineLength:AnalyticsTracker_Rewards.kt$private</ID>
    <ID>MaxLineLength:AnalyticsTracker_Rewards.kt$trackEvent(RewardsAnalytics.Categories.POINTS_ACTIVITY_NO_HISTORY, RewardsAnalytics.Action.START_HEALTH_PROGRAM_NO_ACTIVITY)</ID>
    <ID>MaxLineLength:AnalyticsTracker_Rewards.kt$trackRewards(rewardPointsBalance, rewardRedemptionValue, rewardPointsRedeemed, currency, RewardsAnalytics.Actions.CONFIRM_REDEEM_POINTS)</ID>
    <ID>MaxLineLength:AnalyticsTracker_User.kt$setUserCustomDimension(UserAnalytics.CustomDimensions.CREDIT_CARD_EXISTS, "CREDIT_CARD_EXISTS", java.lang.Boolean.toString(hasCreditCard))</ID>
    <ID>MaxLineLength:AnalyticsTracker_User.kt$setUserCustomDimension(UserAnalytics.CustomDimensions.HAS_DEPENDENTS, "HAS_DEPENDENTS", java.lang.Boolean.toString(user.hasDependents))</ID>
    <ID>MaxLineLength:AnalyticsTracker_User.kt$setUserCustomDimension(UserAnalytics.CustomDimensions.HSA_EXISTS, "HSA_EXISTS", java.lang.Boolean.toString(user.hasHsa))</ID>
    <ID>MaxLineLength:AnalyticsTracker_User.kt$setUserCustomDimension(UserAnalytics.CustomDimensions.IS_CLINIC_ADMIN, "IS_CLINIC_ADMIN", java.lang.Boolean.toString(user.isClinicAdmin))</ID>
    <ID>MaxLineLength:AnalyticsTracker_User.kt$setUserCustomDimension(UserAnalytics.CustomDimensions.LSA_EXISTS, "LSA_EXISTS", java.lang.Boolean.toString(user.hasPsa))</ID>
    <ID>MaxLineLength:AnalyticsTracker_Vaccine.kt$fun</ID>
    <ID>MaxLineLength:Answers.kt$Answers$@Json(name = "multiple_selection_answers") val multipleSelectionAnswers: MutableList&lt;MultipleSelectionAnswer> = mutableListOf()</ID>
    <ID>MaxLineLength:AppFeatureFlags.kt$AppFeatureFlags$description = "Filters out remote logs based on severity. Possible values are DEFAULT,DEBUG,INFO,NOTICE,WARNING,ERROR,CRITICAL,ALERT,EMERGENCY "</ID>
    <ID>MaxLineLength:AppLoggingUtilsTest.kt$AppLoggingUtilsTest$private</ID>
    <ID>MaxLineLength:AppVersionFooter.kt$AppVersionFooter$binding.appVersionText.text = context.getString(R.string.genesis_version_number_format, applicationName, versionName, buildNumber, environmentName)</ID>
    <ID>MaxLineLength:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"appointment_id\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"appointment_id\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"appointment_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AppointmentListScreen.kt$color = if (state.status == AppointmentStatus.cancelled) GenesisTheme.colors.textDanger else GenesisTheme.colors.textSecondary</ID>
    <ID>MaxLineLength:AppointmentListScreen.kt$modifier = Modifier.padding(horizontal = GenesisTheme.spacing.threeQuarters)</ID>
    <ID>MaxLineLength:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AppointmentsViewModelTest.kt$AppointmentsViewModelTest$AppointmentOrgId.LIFEMARK, AppointmentOrgId.MAPLE -> AppointmentsEvents.AppointmentClicked(it.id)</ID>
    <ID>MaxLineLength:AppsAndDeviceConnectionDialogView.kt$Text(stringResource(id = R.string.wearable_update_device_permissions_title), style = GenesisTheme.typography.h3, textAlign = TextAlign.Center)</ID>
    <ID>MaxLineLength:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"device\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AppsAndDevicesFragment.kt$AppsAndDevicesFragment$AppsAndDevicesFragmentDirections</ID>
    <ID>MaxLineLength:AppsAndDevicesView.kt$Row</ID>
    <ID>MaxLineLength:ArticlesViewModelTest.kt$ArticlesViewModelTest$// extension methods set the extension object to the first argument, that's why callback is the second</ID>
    <ID>MaxLineLength:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$throw IllegalArgumentException("Argument \"successScreen\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"successScreen\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"answers\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"questionId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$throw IllegalArgumentException("Argument \"additionalInfo\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$throw IllegalArgumentException("Argument \"additionalInfo\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"additionalInfo\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragment.kt$AssessmentOnboardingFragment$AssessmentOnboardingFragmentDirections</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"onboardingPages\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"onboardingPages\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"isCovidCheckin\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"onboardingPages\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AssessmentOnboardingFragmentDirections.kt$AssessmentOnboardingFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$// The DailyHealthAssessment assumes that some answers need to be resubmitted, we can't be smart about not re-submitting</ID>
    <ID>MaxLineLength:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$throw Exception("Error, current answers object is null while trying to navigate to next question. Question id: " + question.id)</ID>
    <ID>MaxLineLength:AssessmentViewModel.kt$AssessmentViewModel$* The size of the module is sometimes more than the 1MB Parcel limit which can cause an exception . inorder to avoid that i have this code to used the shared module instead</ID>
    <ID>MaxLineLength:AssessmentViewModel.kt$AssessmentViewModel$data.isCovidDailyAssessment() &amp;&amp; data.currentQuestionIndex == 0 -> COVID_ASSESSMENT_WITHOUT_ONBOARDING</ID>
    <ID>MaxLineLength:AssessmentViewModel.kt$AssessmentViewModel$data.onboardingPages.isNotEmpty() &amp;&amp; !data.isCovidDailyAssessment() &amp;&amp; data.currentQuestionIndex == 0 -> GENERIC_ASSESSMENT</ID>
    <ID>MaxLineLength:AssessmentViewModel.kt$AssessmentViewModel$data.onboardingPages.isNotEmpty() &amp;&amp; data.isCovidDailyAssessment() &amp;&amp; data.currentQuestionIndex == 0 -> COVID_ASSESSMENT_WITH_ONBOARDING</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$ |</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$ |:[{</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$ |and articles with you.</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$ |isUserPreference</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$ |tags</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$"""</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$"""{"additionalInfo":"","answerTitle":"","description":"This helps us understand your baseline stress level.","dropDownAnswers":[],"id":"3YF4e5w0eeXE4da9kaC4op","isSkippable":false,"learnMoreContent":"","learnMoreTitle":"","multipleChoiceAnswers":[{"description":"","id":"2K6qxZhmyksfp5EmZ4M5xj","text":"Low","value":1},{"description":"","id":"5aAA5ImXuvlurldVnu4XrF","text":"Low-medium","value":2},{"description":"","id":"3Q6Dk2w95EABR8vb4qipMP","text":"Medium","value":3},{"description":"","id":"xRfXAMF3Oj7Z6IeiA4Sex","text":"Medium-high","value":4},{"description":"","id":"4jPqVASu5w5ss0CUuvqNOO","text":"High","value":5}],"multipleSelectionAnswers":[],"text":"Thinking about your day-to-day life, how would you rate your stress levels?","topicId":"3WEBgbKhnx3EsAEYJAastx","url":"","userAnswers":{"currentAnswer":false,"dropDownAnswers":[],"multipleChoiceAnswers":[{"description":"","id":"3Q6Dk2w95EABR8vb4qipMP","text":"Medium","value":3}],"multipleSelectionAnswers":[],"pendingSubmission":false}}"""</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$"""{"currentAnswer":false,"dropDownAnswers":[],"multipleChoiceAnswers":[{"description":"","id":"2JiNq9ag53Ylqpz3A4uq55","text":"Medium","value":3}],"multipleSelectionAnswers":[],"pendingSubmission":false}"""</ID>
    <ID>MaxLineLength:AssessmentViewModelTest.kt$AssessmentViewModelTest$"""{"currentAnswer":false,"dropDownAnswers":[],"multipleChoiceAnswers":[{"description":"","id":"3Q6Dk2w95EABR8vb4qipMP","text":"Medium","value":3}],"multipleSelectionAnswers":[],"pendingSubmission":false}"""</ID>
    <ID>MaxLineLength:Auth0AuthenticatorTest.kt$Auth0AuthenticatorTest$"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikg0aFNpMFhkNVM1UjBEMUprbGJYeCJ9.eyJodHRwczovL2VsL3VzZXJfaWQiOiI5MTJiMjYyN2M4OGFmNGJlZGVkZDIyZjliY2VjNjY3YiIsImh0dHBzOi8vZWwvdGVuYW50X2lkIjoibGVhZ3VlIiwibmlja25hbWUiOiJhaGludG9uK2F1dGgiLCJuYW1lIjoiYWhpbnRvbithdXRoQGxlYWd1ZS5jb20iLCJwaWN0dXJlIjoiaHR0cHM6Ly9zLmdyYXZhdGFyLmNvbS9hdmF0YXIvMzI0ZDgyMzY3ZDJlMzY4YTBlYTYwODViYTJhZDlhZTM_cz00ODAmcj1wZyZkPWh0dHBzJTNBJTJGJTJGY2RuLmF1dGgwLmNvbSUyRmF2YXRhcnMlMkZhaC5wbmciLCJ1cGRhdGVkX2F0IjoiMjAyMS0wNS0wNFQyMToyNTo0OC4zMDVaIiwiZW1haWwiOiJhaGludG9uK2F1dGhAbGVhZ3VlLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5zdGFnaW5nLmxlYWd1ZS5kZXYvIiwic3ViIjoiYXV0aDB8NjA5MTkwYjhkYjkzMzg0NmJmMWFkZWQ4IiwiYXVkIjoicDEwVVo3azV0czZoWFVITDJya0xxS1VLQXRLbndmNFoiLCJpYXQiOjE2MjAxNjM1NDksImV4cCI6MTYyMDE2NTM0OSwibm9uY2UiOiJMblUwekthMjFMWmtFWVNoMmJuYnVHb3dDUFBlMGhXOGtXcDdQTV9BeDF3In0.shqTL-zmzuYpCUSgSF2atY4SXUlGvZifzPzT7QRJAesK_Vfzz9b16mQjlhId2GD_FAS_-xpP7K6LoOoC0GGPMbaxs10geo2AX4NU4JsjApxMqZJduS_0fkOL1pldun5s-4km3Wjt8XWCLlL68-7bfWPk5Fsfh7CRqHfzWXjT26VtqII73ik8Ylyur_yV75VU5iHo5hreYMFpvF-kOE0YQEf8TVd46605JKfS9MZXvmSRP-F2CIRCBjCCCK3p0XPN--XxSudZz3ry_emeykkSxhmEY_eiljkAGY8RlHzBA_jZByjS41bKw9LNEIZ9d8InYwPNf_PbQzxo4h5G-k23RQ"</ID>
    <ID>MaxLineLength:Auth0AuthenticatorTest.kt$Auth0AuthenticatorTest$private</ID>
    <ID>MaxLineLength:AuthNavGraphArgs.kt$AuthNavGraphArgs.Companion$throw IllegalArgumentException("Argument \"is_requesting_change\" of type boolean does not support null values")</ID>
    <ID>MaxLineLength:AuthNavGraphArgs.kt$AuthNavGraphArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:AuthenticationViewModel.kt$AuthenticationViewModel$(isDeviceAuthSent as SingleLiveEvent).setValue(Failed(R.string.authentication_enter_valid_cc_and_phone_number))</ID>
    <ID>MaxLineLength:AuthenticationViewModel.kt$AuthenticationViewModel$(isDeviceAuthorized as SingleLiveEvent).postValue(Failed(R.string.authentication_error_authenticating_verification_code))</ID>
    <ID>MaxLineLength:AvatarHeader.kt$description = "Lorem ipsum dolor sit amet, mea vidit quando voluptatum at, duo nihil graeco insolens in, pri ex legere tritani definitiones."</ID>
    <ID>MaxLineLength:AvatarHeader.kt$subtitle = "Lorem ipsum dolor sit amet, mea vidit quando voluptatum at, duo nihil graeco insolens in, pri ex legere tritani definitiones."</ID>
    <ID>MaxLineLength:BadgeDetail.kt$colorFilter = if (achievementDetail.shouldGreyOut) ColorFilter.colorMatrix(colorMatrix = getGreyScale()) else null</ID>
    <ID>MaxLineLength:BadgeDetail.kt$placeHolder = RewardsModule.configuration.drawables.placeHolderImageForBadges?.let { painterResource(id = it) }</ID>
    <ID>MaxLineLength:BadgeDetail.kt$val date = DateUtils.formatDatePolicy(locale = Locale.getDefault(), date = achievementDetail.lastCompletedAt)</ID>
    <ID>MaxLineLength:BannerActivity.kt$BannerActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, R.attr.spacing_one_and_half, R.attr.spacing_one_and_half))</ID>
    <ID>MaxLineLength:BannerController.kt$BannerController$.</ID>
    <ID>MaxLineLength:BannerController.kt$BannerController$this.bodyText("We’re not receiving Steps data from any of your connected devices. Tap one of the devices below to resolve this issue.")</ID>
    <ID>MaxLineLength:BannerController.kt$BannerController$this.descriptionText("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque")</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing bottom left horizontal line, y remain the same, x increased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing bottom left vertical line, x remain the same, y increased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing bottom right horizontal line, y remain the same, x decreased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing bottom right vertical line, x remain the same, y increased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing top left horizontal line, y remain the same, x increased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing top left vertical line, x remain the same, y decreased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing top right horizontal line, y remain the same, x decreased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$// Drawing top right vertical line, x remain the same, y decreased by LINE_LENGTH_DP relative to the previous position</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$moveTo(rect.left + context.dpToPx(MARGIN_INSET_DP), rect.bottom - context.dpToPx(LINE_LENGTH_DP + MARGIN_INSET_DP))</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$moveTo(rect.left + context.dpToPx(MARGIN_INSET_DP), rect.top + context.dpToPx(LINE_LENGTH_DP + MARGIN_INSET_DP))</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$moveTo(rect.right - context.dpToPx(MARGIN_INSET_DP), rect.bottom - context.dpToPx(LINE_LENGTH_DP + MARGIN_INSET_DP))</ID>
    <ID>MaxLineLength:BarcodeOverlayView.kt$BarcodeOverlayView$moveTo(rect.right - context.dpToPx(MARGIN_INSET_DP), rect.top + context.dpToPx(LINE_LENGTH_DP + MARGIN_INSET_DP))</ID>
    <ID>MaxLineLength:BaseJsonUtils.kt$BaseJsonUtils$open</ID>
    <ID>MaxLineLength:BasicBanner.kt$BasicBanner$setBackground(getResourceId(R.styleable.BasicBanner_background_image_src, R.drawable.background_card_primary_highlight))</ID>
    <ID>MaxLineLength:BasicIconBanner.kt$BasicIconBanner$getResourceId(R.styleable.BasicIconBanner_icon_image_src, -1).takeIf { it != -1 }?.also { setIconImageResource(it) }</ID>
    <ID>MaxLineLength:BasicIconBanner.kt$BasicIconBanner$setBackground(getResourceId(R.styleable.BasicIconBanner_background_image_src, R.drawable.background_card_primary_highlight))</ID>
    <ID>MaxLineLength:BasicIconBanner.kt$bodyText = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque"</ID>
    <ID>MaxLineLength:BrowserActivity.kt$BrowserActivity$// Not currently using genesis toolbar because the genesis toolbar doesn't currently support more than one button on the top right</ID>
    <ID>MaxLineLength:BrowserFragment.kt$BrowserFragment$" window.location.href = \"https://"</ID>
    <ID>MaxLineLength:BuilderDailyScreenerFragment.kt$BuilderDailyScreenerFragment$if</ID>
    <ID>MaxLineLength:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:CalendarExtension.kt$// we render spaces where other month dates should be, our start point is the beginning of the week regardless of month</ID>
    <ID>MaxLineLength:Card.kt$Card$binding.overline.background = ContextCompat.getDrawable(context, R.drawable.background_overline_primary_highlight)</ID>
    <ID>MaxLineLength:CardActivity.kt$CardActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, R.attr.spacing_one_and_half, R.attr.spacing_one_and_half))</ID>
    <ID>MaxLineLength:CardController.kt$CardController$.</ID>
    <ID>MaxLineLength:CardController.kt$CardController$description("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.")</ID>
    <ID>MaxLineLength:CareProviderHistory.kt$CareProviderHistory$data</ID>
    <ID>MaxLineLength:ChallengeLandingFragmentArgs.kt$ChallengeLandingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"challengeId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Argument \"userChallengeId\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Argument \"userChallengeId\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"showLeaveButton\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"userChallengeId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$throw IllegalArgumentException("Argument \"userChallengeId\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$throw IllegalArgumentException("Argument \"userChallengeId\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"challengeId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"userChallengeId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ChatActivity.kt$ChatActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, R.attr.spacing_one_and_half, R.attr.spacing_one_and_half))</ID>
    <ID>MaxLineLength:ChatConfiguration.kt$ChatNotInitializedExpection$Exception("Error, the Chat module has not been initialized. Please call Chat.initialize(...) in your application's Application.onCreate() method.")</ID>
    <ID>MaxLineLength:ChatController.kt$ChatController$message("Body lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")</ID>
    <ID>MaxLineLength:ChatController.kt$ChatController$message(ChatMessage.MessageInfo("Agent1", "Body lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."))</ID>
    <ID>MaxLineLength:ChatController.kt$ChatController$message(ChatMessage.MessageInfo("Agent2", "Click on the link to open in an external browser http://www.league.com"))</ID>
    <ID>MaxLineLength:ChatController.kt$ChatController$message(ChatMessage.MessageInfo("User", "Body lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."))</ID>
    <ID>MaxLineLength:ChatController.kt$ChatController$message(ChatMessage.MessageInfo("User1", "Click on the link to open in an external browser http://www.league.com"))</ID>
    <ID>MaxLineLength:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths.MapleSignOn$throw Exception("Maple sign on is an external deeplink from Maple and shouldn't be generated from within the PC Health app.")</ID>
    <ID>MaxLineLength:ChatInput.kt$ChatInput$attachmentIconContentDescription</ID>
    <ID>MaxLineLength:ChatLandingActivity.kt$ChatLandingActivity$// This is being used for LiveAgentChatActivity, and should be removed once we enable NavigateAway state in both apps</ID>
    <ID>MaxLineLength:ChatLandingFragment.kt$ChatLandingFragment$(activity as? ChatLandingActivity)?.actionBar?.setBackgroundColorAttrRes(R.attr.color_background_primary)</ID>
    <ID>MaxLineLength:ChatLandingFragment.kt$ChatLandingFragment$setDescription(StringProvider(resources).getStringFromHtml(R.string.shoppers_pharmacist_description))</ID>
    <ID>MaxLineLength:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:CircleButton.kt$CircleButton$binding.buttonLayout.background = ContextCompat.getDrawable(this.context, R.drawable.background_circle_button_disabled)</ID>
    <ID>MaxLineLength:CircleButton.kt$CircleButton$binding.buttonLayout.background = ContextCompat.getDrawable(this.context, R.drawable.background_circle_button_minimal)</ID>
    <ID>MaxLineLength:CircleButton.kt$CircleButton$binding.buttonLayout.background = ContextCompat.getDrawable(this.context, R.drawable.background_circle_button_primary)</ID>
    <ID>MaxLineLength:CircleButton.kt$CircleButton$binding.buttonLayout.background = ContextCompat.getDrawable(this.context, R.drawable.background_circle_button_secondary)</ID>
    <ID>MaxLineLength:CircleButton.kt$CircleButton$binding.buttonLayout.background = ContextCompat.getDrawable(this.context, R.drawable.selector_circle_button_tertiary_quiet)</ID>
    <ID>MaxLineLength:CircleButton.kt$CircleButton.Companion.CircleButtonStyle$@IntDef(BUTTON_STYLE_PRIMARY, BUTTON_STYLE_SECONDARY, BUTTON_STYLE_MINIMAL, BUTTON_STYLE_MINIMAL_SECONDARY, BUTTON_STYLE_DISABLED)</ID>
    <ID>MaxLineLength:CircularProgressBar.kt$if (progressPercentage == 1f) GenesisTheme.colors.successBorderDefault else GenesisTheme.colors.interactiveActionPrimary</ID>
    <ID>MaxLineLength:ClaimCodeExtractor.kt$ClaimCodeExtractor$val link = "https://pchealth.league.com/app/member/health-station/claim-code/7bc2334e-efa4-456b-8e33-45b3192b2065"</ID>
    <ID>MaxLineLength:ClaimCodeExtractor.kt$ClaimCodeExtractor$val link = "https://pchealth.page.link/?link=https://pchealth.league.com/app/member/health-station/claim-code/7bc2334e-efa4-456b-8e33-45b3192b2065"</ID>
    <ID>MaxLineLength:ClaimCodeExtractor.kt$ClaimCodeExtractor$val link = "https://roadrunner.league.dev/app/member/health-station/claim-code/7bc2334e-efa4-456b-8e33-45b3192b2065"</ID>
    <ID>MaxLineLength:ClaimCodeExtractor.kt$ClaimCodeExtractor$val link = "https://roadrunner.page.link/?link=https://roadrunner.league.dev/app/member/health-station/claim-code/7bc2334e-efa4-456b-8e33-45b3192b2065"</ID>
    <ID>MaxLineLength:ClaimDetail.kt$ClaimDetail.Companion$STATUS_APPROVED, STATUS_CANCELLED, STATUS_MORE_INFO_NEEDED, STATUS_PAID, STATUS_PENDING, STATUS_REJECTED, STATUS_SUBMITTED -> return true</ID>
    <ID>MaxLineLength:ClaimDocumentFragment.kt$ClaimDocumentFragment$(activity as? RootActivity)?.displayErrorDialog(getStringIfAdded(R.string.app_error_loading_claim))</ID>
    <ID>MaxLineLength:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"clinic_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ClinicDetailsViewModelTest.kt$ClinicDetailsViewModelTest$"Sunday" to UserText.Translatable(R.string.triage_clinic_details_hours_of_operation_closed)</ID>
    <ID>MaxLineLength:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"device\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonCircularSelected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_circular_selected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonCircularSelectedPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_circular_selected_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonCircularUnselectedPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_circular_unselected_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonDanger = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_danger)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonDangerPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_danger_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonDisabled = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_disabled)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonPill = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_pill)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonPillPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_pill_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonPrimaryPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_primary_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonSecondaryPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_secondary_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonSubtle = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_subtle)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundButtonSubtlePressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_button_subtle_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundCheckedInputDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_checked_input_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundCheckedInputDisabled = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_checked_input_disabled)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundDangerHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_danger_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundGoalActive = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_goal_active)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundInfoHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_info_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundInputDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_input_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundInputDisabled = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_input_disabled)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundOptionSelected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_option_selected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundOptionUnselected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_option_unselected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundPageControls = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_page_controls)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundPageSwoopPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_page_swoop_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundPageSwoopSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_page_swoop_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundPageSwoopTertiary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_page_swoop_tertiary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundPointsDark = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_points_dark)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundPrimaryHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_primary_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundProgressBar = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_progress_bar)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundSecondaryHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_secondary_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundSubduedHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_subdued_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundSuccessHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_success_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundSuggested = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_suggested_light)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundSuggestedDark = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_suggested_dark)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundTabSelected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_tab_selected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundTabUnselected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_tab_unselected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundTopicOverline = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_topic_overline)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundWarningHighlight = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_warning_highlight)</ID>
    <ID>MaxLineLength:ColorLoading.kt$backgroundWarningSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_background_warning_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$borderButtonCircular = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_border_button_circular)</ID>
    <ID>MaxLineLength:ColorLoading.kt$borderButtonSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_border_button_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$borderNeutralLighter = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_border_neutral_lighter)</ID>
    <ID>MaxLineLength:ColorLoading.kt$borderOptionSelected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_border_option_selected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$borderOptionUnselected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_border_option_unselected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$criticalBackgroundSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_critical_background_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$criticalBackgroundSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_critical_background_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$criticalBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_critical_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandPrimaryBright = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_primary_bright)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandPrimaryBrightest = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_primary_brightest)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandPrimaryDark = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_primary_dark)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandPrimaryDarkest = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_primary_darkest)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandPrimaryDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_primary_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandPrimaryPastel = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_primary_pastel)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandSecondaryBright = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_secondary_bright)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandSecondaryBrightest = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_secondary_brightest)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandSecondaryDark = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_secondary_dark)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandSecondaryDarkest = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_secondary_darkest)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandSecondaryDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_secondary_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$decorativeBrandSecondaryPastel = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_secondary_pastel)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillGoalActiveContrast = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_goal_active_contrast)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillMultiProgressBarPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_multi_progress_bar_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillMultiProgressBarQuaternary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_multi_progress_bar_quaternary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillMultiProgressBarQuinary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_multi_progress_bar_quinary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillMultiProgressBarSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_multi_progress_bar_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillMultiProgressBarSenary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_multi_progress_bar_senary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillMultiProgressBarTertiary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_multi_progress_bar_tertiary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillProgressBarPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_progress_bar_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$fillProgressBarSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_fill_progress_bar_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$highlightBackgroundSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_highlight_background_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$highlightBackgroundSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_highlight_background_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$highlightBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_highlight_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveActionDisable = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_action_disable)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveActionHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_action_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveActionPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_action_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveActionPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_action_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveActionSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_action_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveBackgroundDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_background_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveBackgroundDisable = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_background_disable)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveBorderCriticalDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_border_critical_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveBorderDisable = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_border_disable)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveBorderHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_border_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveIconDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_icon_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$interactiveIconDisable = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_interactive_icon_disable)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceBorderSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_border_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceIconPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_icon_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceTextCritical = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_text_critical)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceTextPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_text_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceTextReversed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_text_reversed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceTextSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_text_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$onSurfaceTextSuccess = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_on_surface_text_success)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryBackgroundCriticalDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_background_critical_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryBackgroundCriticalHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_background_critical_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryBackgroundCriticalPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_background_critical_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryBackgroundDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_background_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryBackgroundHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_background_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryBackgroundPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_background_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$primaryTextCriticalDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_primary_text_critical_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryBackgroundCriticalDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_background_critical_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryBackgroundDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_background_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryBackgroundHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_background_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryBackgroundPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_background_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryTextDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_text_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$secondaryTextHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_text_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$successBackgroundSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_success_background_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$successBackgroundSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_success_background_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$successBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_success_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$surfaceBackgroundPrimary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_surface_background_primary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$surfaceBackgroundSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_surface_background_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$surfaceBackgroundTertiary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_surface_background_tertiary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$surfaceCardSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_surface_card_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$tertiaryBackgroundDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_tertiary_background_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$tertiaryBackgroundHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_tertiary_background_hovered)</ID>
    <ID>MaxLineLength:ColorLoading.kt$tertiaryBackgroundPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_tertiary_background_pressed)</ID>
    <ID>MaxLineLength:ColorLoading.kt$tertiaryBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_tertiary_border_default)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textActionBarButton = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_action_bar_button)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textButtonCircularSelected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_button_circular_selected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textButtonCircularUnselected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_button_circular_unselected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textButtonSubtleSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_button_subtle_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textGoalActiveContrast = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_goal_active_contrast)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textGoalActiveContrastSubtle = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_goal_active_contrast_subtle)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textInputPlaceholder = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_input_placeholder)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textOptionDescriptionSelected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_option_description_selected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textOptionDescriptionUnselected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_option_description_unselected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$textOptionUnselected = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_text_option_unselected)</ID>
    <ID>MaxLineLength:ColorLoading.kt$warningBackgroundSecondary = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_warning_background_secondary)</ID>
    <ID>MaxLineLength:ColorLoading.kt$warningBackgroundSubdued = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_warning_background_subdued)</ID>
    <ID>MaxLineLength:ColorLoading.kt$warningBorderDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_warning_border_default)</ID>
    <ID>MaxLineLength:ConnectivityUtils.kt$ConnectivityUtils$// if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {</ID>
    <ID>MaxLineLength:ConnectivityUtils.kt$ConnectivityUtils$TelephonyManager.NETWORK_TYPE_GPRS, TelephonyManager.NETWORK_TYPE_EDGE, TelephonyManager.NETWORK_TYPE_CDMA, TelephonyManager.NETWORK_TYPE_1xRTT, TelephonyManager.NETWORK_TYPE_IDEN -> "2G"</ID>
    <ID>MaxLineLength:ConnectivityUtils.kt$ConnectivityUtils$TelephonyManager.NETWORK_TYPE_UMTS, TelephonyManager.NETWORK_TYPE_EVDO_0, TelephonyManager.NETWORK_TYPE_EVDO_A, TelephonyManager.NETWORK_TYPE_HSDPA, TelephonyManager.NETWORK_TYPE_HSUPA, TelephonyManager.NETWORK_TYPE_HSPA, TelephonyManager.NETWORK_TYPE_EVDO_B, TelephonyManager.NETWORK_TYPE_EHRPD, TelephonyManager.NETWORK_TYPE_HSPAP, TelephonyManager.NETWORK_TYPE_TD_SCDMA -> "3G"</ID>
    <ID>MaxLineLength:ConsentController.kt$ConsentController$.</ID>
    <ID>MaxLineLength:ConsentFragment.kt$ConsentFragment$args.navigateTo == ConsentFragmentDirections.actionConsentFragmentToQRCodeGenerationFragment().actionId</ID>
    <ID>MaxLineLength:ConsentFragment.kt$ConsentFragment$if</ID>
    <ID>MaxLineLength:ConsentFragmentArgs.kt$ConsentFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"claimCode\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ContentAPI_Upload.kt$Handler(Looper.getMainLooper()).post { callback.onFailure("Error uploading content; Response code $response") }</ID>
    <ID>MaxLineLength:CoreConfiguration.kt$Core$// Koin doesn't it when a koinApplications has their view models declared in separate koin modules</ID>
    <ID>MaxLineLength:CoreConfiguration.kt$Core$// the initialize method. Normally this would be added to Koin, but Koin doesn't allow for nullable types and we want</ID>
    <ID>MaxLineLength:CoreConfiguration.kt$CoreNotInitializedExpection$Exception("Error, the Core module has not been initialized. Please call Core.initialize(...) in your application's Application.onCreate() method.")</ID>
    <ID>MaxLineLength:CoreImageLoader.kt$CoreImageLoader$.</ID>
    <ID>MaxLineLength:CorePresenterApplication.kt$CorePresenterApplication$enabledSeverityLevelsProvider = { getString(R.string.core_presenter_remote_enabled_severity_levels) }</ID>
    <ID>MaxLineLength:CovidDataSharingFragment.kt$CovidDataSharingFragment$.</ID>
    <ID>MaxLineLength:CovidDataSharingFragment.kt$CovidDataSharingFragment$CovidDataSharingFragmentDirections.actionCovidDataSharingFragmentToBuilderDailyScreenerNavGraph().actionId</ID>
    <ID>MaxLineLength:CovidDataSharingFragment.kt$CovidDataSharingFragment$fun</ID>
    <ID>MaxLineLength:CovidDataSharingFragment.kt$CovidDataSharingFragment$statusRow.setDescriptionText(state.data.result.assessmentResponseSummaries.formattedResponseSummary)</ID>
    <ID>MaxLineLength:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"module_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:CurrentLocationButton.kt$if</ID>
    <ID>MaxLineLength:CurrentLocationButton.kt$text = stringResource(R.string.triage_location_selection_current_location_permission_dialog_description)</ID>
    <ID>MaxLineLength:CurrentLocationButton.kt$text = stringResource(R.string.triage_location_selection_current_location_permission_dialog_heading)</ID>
    <ID>MaxLineLength:CurrentLocationButton.kt$text = stringResource(R.string.triage_location_selection_current_location_permission_dialog_primary_cta)</ID>
    <ID>MaxLineLength:CurrentLocationButton.kt$text = stringResource(R.string.triage_location_selection_current_location_permission_dialog_secondary_cta)</ID>
    <ID>MaxLineLength:DateExtension.kt$fun Date.differenceInMonths(date: Date): Int</ID>
    <ID>MaxLineLength:DateExtensionKtTest.kt$DateExtensionKtTest$assertEquals("Dates split across a year but less than a year between them, 1 month difference", minDate.time.differenceInMonths(maxDate.time), 1)</ID>
    <ID>MaxLineLength:DateExtensionKtTest.kt$DateExtensionKtTest$assertEquals("Dates split across a year, 2 month difference, 1 returned", minDate.time.differenceInYears(maxDate.time), 1)</ID>
    <ID>MaxLineLength:DateExtensionKtTest.kt$DateExtensionKtTest$assertEquals("Dates split across multiple years, 13 returned", minDate.time.differenceInMonths(maxDate.time), 13)</ID>
    <ID>MaxLineLength:DateExtensionKtTest.kt$DateExtensionKtTest$assertEquals("Max week range for - same minDate and maxDate", minDate.getActualMaximum(Calendar.WEEK_OF_MONTH), maxWeeksInRange(minDate.time, maxDate.time))</ID>
    <ID>MaxLineLength:DateQuestion.kt$DateQuestion$val content = context.getString(R.string.genesis_two_sentence_pause).format(binding.questionContainer.getHeaderText(), context.getString(R.string.genesis_select_date_hint))</ID>
    <ID>MaxLineLength:DefaultHealthJourneyAPI.kt$DefaultHealthJourneyAPI$override</ID>
    <ID>MaxLineLength:DefaultHealthJourneyRepository.kt$DefaultHealthJourneyRepository$internal</ID>
    <ID>MaxLineLength:DefaultHealthJourneyRepository.kt$DefaultHealthJourneyRepository$override</ID>
    <ID>MaxLineLength:DefaultHealthProgramsRepository.kt$DefaultHealthProgramsRepository$override suspend</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_name\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_name\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"relationship_type\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"relationship_type\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"can_edit_dependent\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"dependent_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"dependent_name\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"relationship_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"description\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentInviteActivity.kt$DependentInviteLauncher$if (dependent.dexInvitationEmail.isNotNullOrEmpty()) dependent.dexInvitationEmail else dependent.email</ID>
    <ID>MaxLineLength:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_email\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_email\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_first_name\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_first_name\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"dependent_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"is_re_send\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentInviteStatusWidget.kt$DependentInviteStatusWidget$binding.stickerText.setTextAndVisibility(context.getString(R.string.genesis_dependent_invite_invitation_expired))</ID>
    <ID>MaxLineLength:DependentInviteStatusWidget.kt$DependentInviteStatusWidget$binding.stickerText.setTextAndVisibility(context.getString(R.string.genesis_dependent_invite_invitation_sent))</ID>
    <ID>MaxLineLength:DependentInviteSuccessFragment.kt$DependentInviteSuccessFragment$binding.descriptionSent.text = getString(R.string.wallet_dex_invite_confirmation_description_first_line_email_error)</ID>
    <ID>MaxLineLength:DependentInviteSuccessFragment.kt$DependentInviteSuccessFragment$binding.descriptionValidUntil.text = getString(R.string.wallet_dex_invite_confirmation_description_second_line)</ID>
    <ID>MaxLineLength:DependentInviteSuccessFragmentArgs.kt$DependentInviteSuccessFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"email\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DependentsActivity.kt$DependentsActivity$.</ID>
    <ID>MaxLineLength:DependentsViewModel.kt$DependentsViewModel$fun</ID>
    <ID>MaxLineLength:DependentsViewModel.kt$DependentsViewModel$if</ID>
    <ID>MaxLineLength:DetailedProgressCard.kt$DetailedProgressCard$fun</ID>
    <ID>MaxLineLength:DeviceInfoFragment.kt$DeviceInfoFragment$findNavControllerSafely()?.previousBackStackEntry?.savedStateHandle?.set(AppsAndDevicesFragment.REFRESH_KEY, true)</ID>
    <ID>MaxLineLength:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"deviceType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DeviceInfoViewModel.kt$DeviceInfoViewModel$val expandedDeviceInfo = addDefaultsToMap(response.response.receivingDataV2[deviceType] ?: emptyMap())</ID>
    <ID>MaxLineLength:Dialog.kt$Dialog.Builder$private val alertBinding: WidgetAlertDialogBinding = WidgetAlertDialogBinding.inflate(LayoutInflater.from(context))</ID>
    <ID>MaxLineLength:DialogActivity.kt$DialogActivity$"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."</ID>
    <ID>MaxLineLength:DialogActivity.kt$DialogActivity$"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n"</ID>
    <ID>MaxLineLength:DialogActivity.kt$DialogActivity$.</ID>
    <ID>MaxLineLength:DialogActivity.kt$DialogActivity$setDescription("League is on a mission to empower people to live healthier, happier lives every day. Their award-winning health operating system (OS) brings together health programs, professional services and a curated online marketplace. League helps people hit their health goals and feel their best by serving up the resources and support they need, when they need it, on their personal health journey. ")</ID>
    <ID>MaxLineLength:DialogActivity.kt$DialogActivity$setDescription("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ultricies aliquam arcu, a enim turpis sapien aliquet quisque. Nec urna.")</ID>
    <ID>MaxLineLength:DialogActivity.kt$DialogActivity$setDescription("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ultricies aliquam arcu.")</ID>
    <ID>MaxLineLength:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$imageUrl = "https://cdn3.iconfinder.com/data/icons/user-interface-web-1/550/web-circle-circular-round_38-512.png"</ID>
    <ID>MaxLineLength:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$imageUrl = "https://www.grxstatic.com/d4fuqqd5l3dbz/products/DrugItem_15881.JPG?format=JPG&amp;auto=webp"</ID>
    <ID>MaxLineLength:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$question = "Which of the following matches your Health or Drug benefit cards registered at the store??"</ID>
    <ID>MaxLineLength:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$statusHint = "This prescription has no refills remaining. Please contact your pharmacy for more options. Your Pharmacist may be able to renew your prescription after speaking with you. Professional fee may apply. Alternatively, your Pharmacy Team can contact the prescriber on your behalf. If you are aware that your prescriber does not accept refill requests from pharmacies over the phone or by fax, please contact them directly to arrange renewal."</ID>
    <ID>MaxLineLength:DigitalPharmacyUserInfoUseCase.kt$DigitalPharmacyUserInfoUseCase$class</ID>
    <ID>MaxLineLength:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"topicId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"topics_array\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:DropDownQuestion.kt$DropDownQuestion$val content = context.getString(R.string.genesis_two_sentence_pause).format(binding.questionContainer.getHeaderText(), context.getString(R.string.genesis_select_one_option_dropdown))</ID>
    <ID>MaxLineLength:DualColumnRow.kt$DualColumnRow$rightSubtitleColor = getColor(R.styleable.DualColumnRow_right_subtitle_color, DEFAULT_SUBTITLE_COLOR)</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_name\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"dependent_name\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"relationship_type\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"relationship_type\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"dependent_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"dependent_name\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"relationship_type\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$throw IllegalArgumentException("Argument \"chosen_environment\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$throw IllegalArgumentException("Argument \"chosen_environment\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$throw IllegalArgumentException("Required argument \"chosen_environment\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$throw IllegalArgumentException("Required argument \"environments\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EnvironmentSpinnerAdapter.kt$EnvironmentSpinnerAdapter$layoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)</ID>
    <ID>MaxLineLength:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$throw IllegalArgumentException("Argument \"chosen_environment\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$throw IllegalArgumentException("Argument \"chosen_environment\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"chosen_environment\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"environments\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:EpoxyControllerExt.kt$navController?.navigateSafely(HealthJourneyDeepLinker.HealthJourneyPaths.HealthJourneyItemLink.construct(id).toUri())</ID>
    <ID>MaxLineLength:EpoxyHealthProgramsCarousels.kt$EpoxyHealthProgramsCarousels$private var onProgramClickFlow: MutableStateFlow&lt;(Int, HealthProgram, String) -> Unit> = MutableStateFlow { _, _, _ -> }</ID>
    <ID>MaxLineLength:ErrorFragment.kt$ErrorFragment$binding.description.text = StringProvider(resources).getStringFromHtml(R.string.core_offline_error_description)</ID>
    <ID>MaxLineLength:Exhaustive.kt$/* * You can use this function to enforce `when` statements to be exhaustive. * When the returned value of a when statement is being explicitly used it will throw a compile time error if all cases are not met * This val can be used to enforce that same compile time safety when the returned value isnt explicitly being used * * ex: * * sealed class Boolean { * object True: Boolean() * object False * } * * //compile time error * val str = when (boolean) { * True -> "" * } * * //no error * when (boolean) { * True -> "" * } * * when using exhaustive we can do this which would result in an error * when (boolean) { * True -> Update UI * }.exhaustive * * in either of these situations updating the UI does not necessarily having a return value. by adding exhaustive we guarantee all values must be present */</ID>
    <ID>MaxLineLength:ExpandableText.kt$" vehicula luctus libero. Mauris nec risus bibendum, tempor turpis at, placerat neque. Nullam pharetra consectetur pharetra. "</ID>
    <ID>MaxLineLength:ExpandableText.kt$"Fusce aliquet viverra dui et finibus. Donec tincidunt tempus dolor at molestie. Suspendisse tellus nisi, fringilla vel libero id,"</ID>
    <ID>MaxLineLength:ExpandableText.kt$text</ID>
    <ID>MaxLineLength:ExpandableTextViewActivity.kt$ExpandableTextViewActivity$marginRes(SpacingAttrRes(topSpacingResId = R.attr.spacing_one, leftSpacingResId = R.attr.spacing_one, rightSpacingResId = R.attr.spacing_one))</ID>
    <ID>MaxLineLength:ExpandableTextViewActivity.kt$ExpandableTextViewActivity$text("This is an expandable TextView, I have to make this text fill up more than 3 lines so that you will see it in it's expanded state. You can reveal the text by clicking on read more below. Isn't that dope yo?")</ID>
    <ID>MaxLineLength:FeatureFlagDetailFragment.kt$// TODO: replace with with a component that wraps an input field and includes labels and error messages (Like TextInputRow)</ID>
    <ID>MaxLineLength:FeatureFlagDetailFragment.kt$is FeatureFlag.BooleanFeatureFlag -> throw InvalidParameterException("Boolean feature flags don't have a keyboard type")</ID>
    <ID>MaxLineLength:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs.Companion$throw IllegalArgumentException("Argument \"featureFlagId\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"featureFlagId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:FetchProvidersUseCaseTest.kt$FetchProvidersUseCaseTest$fun</ID>
    <ID>MaxLineLength:FlowExtension.kt$* Launches a coroutine using the given scope. All work will happen on scope's default dispatcher or the provided optional [context] dispatcher</ID>
    <ID>MaxLineLength:FlowExtension.kt$inline</ID>
    <ID>MaxLineLength:FormTest.kt$FormTest$"In order to provide security for your loved ones, League recommends that you always have beneficiaries designated for your Insurance policies. Otherwise, your payout money might end up going somewhere you didn't intend. A Beneficiary is a legal term used to describe who gets your money when you pass away. You can designate one or more beneficiaries (E.g. close family members or friends, a trustee, or a charity of your choice). For Spousal &amp; Child Insurance, you are automatically the beneficiary, so there is no need to submit a separate form for these policies."</ID>
    <ID>MaxLineLength:FragmentExtension.kt$// TODO: this logic should only exist in chat somehow. The chat fragments should use their own custom function for this</ID>
    <ID>MaxLineLength:FullScreenAlertDialog.kt$FullScreenAlertDialog$actionButton.setButtonStyle(if (action.isPrimary) Button.BUTTON_STYLE_PRIMARY else Button.BUTTON_STYLE_MINIMAL)</ID>
    <ID>MaxLineLength:FullScreenAlertDialog.kt$FullScreenAlertDialog$class</ID>
    <ID>MaxLineLength:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"content\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:GenericCard.kt$GenericCard$fun getViewType()</ID>
    <ID>MaxLineLength:GenericEmptyState.kt$GenericEmptyState$descriptionTextColor = attrs.getColor(R.styleable.ChatHistoryEmptyState_description_text_color, DEFAULT_DESCRIPTION_COLOR)</ID>
    <ID>MaxLineLength:GenesisBorderedRadioField.kt$text = "Short service description. Curabitur blandit tempus porttitor. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor."</ID>
    <ID>MaxLineLength:GenesisCalendarView.kt$ExperimentalGenesisCalendarApi$@RequiresOptIn(message = "GenesisCalendar is currently experimental, the full feature set is not fully defined and due to this the API is still open to change")</ID>
    <ID>MaxLineLength:GenesisColors.kt$GenesisColors$* The JVM rejected invoking the constructor of the previous class, runtime crashes complaining about too many arguments.</ID>
    <ID>MaxLineLength:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet.Builder$fun</ID>
    <ID>MaxLineLength:GenesisConfiguration.kt$GenesisNotInitializedExpection$Exception("Error, the Genesis module has not been initialized. Please call Genesis.initialize(...) in your application's Application.onCreate() method.")</ID>
    <ID>MaxLineLength:GenesisDateField.kt$setPositiveButton</ID>
    <ID>MaxLineLength:GenesisInformationalSlide.kt$descriptionText = AnnotatedString("Things like your height, weight, and age help us assess your risk for serious conditions so we can recommend steps for preventive care.")</ID>
    <ID>MaxLineLength:GenesisProgressBar.kt$GenesisProgressBar$String.format(currentLocale, context.getString(R.string.genesis_progress_unit_format_with_unit, unit, progress, max))</ID>
    <ID>MaxLineLength:GenesisProgressBar.kt$GenesisProgressBar$progressTextType = attrs.getInteger(R.styleable.GenesisProgressBar_progress_text_type, PROGRESS_TEXT_TYPE_PERCENTAGE)</ID>
    <ID>MaxLineLength:GenesisProgressBar.kt$GenesisProgressBar$style = Style.values()[attrs.getInteger(R.styleable.GenesisProgressBar_progress_style, Style.THIN_PRIMARY.ordinal)]</ID>
    <ID>MaxLineLength:GenesisShapes.kt$fun RoundedCornerShape.squareStart(): RoundedCornerShape</ID>
    <ID>MaxLineLength:GetAllAchievementsTestData.kt$GetAllAchievementsTestData$completed = if (includePrograms &amp;&amp; includeCompleted &amp;&amp; !returnEmpty) getCompletedPrograms() else emptyList()</ID>
    <ID>MaxLineLength:GetAllAchievementsTestData.kt$GetAllAchievementsTestData$inProgress = if (includePrograms &amp;&amp; includeInProgress &amp;&amp; !returnEmpty) getInProgressPrograms() else emptyList()</ID>
    <ID>MaxLineLength:GetAllAchievementsTestData.kt$GetAllAchievementsTestData$private const val MOCK_IMAGE_URL = "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/285/party-popper_1f389.png"</ID>
    <ID>MaxLineLength:GoogleFitPermissionDialogView.kt$GoogleFitPermissionContent(Wearable.configuration.theme.drawables.appLogoIcon, Wearable.configuration.theme.strings.googlePermissionModalConnectionDescription)</ID>
    <ID>MaxLineLength:GraphViewFragment.kt$GraphViewFragment$findNavControllerSafely()?.navigate(R.id.action_graphDetailsFragment_to_bloodPressureInfoFragment)</ID>
    <ID>MaxLineLength:Header.kt$Header.HeaderStyle$@IntDef(HEADER_STYLE_H1, HEADER_STYLE_H2, HEADER_STYLE_H3, HEADER_STYLE_H4, HEADER_STYLE_SUBTITLE1, HEADER_STYLE_OVERLINE)</ID>
    <ID>MaxLineLength:HeaderController.kt$HeaderController$this.descriptionText("Your self-isolation can end if symptoms have improved significantly and/or you’ve recieved clearance from health officals.")</ID>
    <ID>MaxLineLength:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths.HealthProfileBuilder${ moduleId: String, retakeAssessment: Boolean, campaign: String, activity: String -> "/app/member/health-profile/questions/$moduleId?$retakeAssessmentQueryName=$retakeAssessment&amp;$campaignId=$campaign&amp;$activityId=$activity" }</ID>
    <ID>MaxLineLength:HealthJourneyAPI.kt$HealthJourneyAPI$fun getHealthJourneyActivityById(id: String?, campaignId: String?, activityId: String?): Flow&lt;Outcome&lt;HealthJourneyItemDetailResponse>></ID>
    <ID>MaxLineLength:HealthJourneyAPI.kt$HealthJourneyAPI$suspend fun completeHealthJourneyActivity(userHealthActivityId: String, pointsSystem: PointsSystem): Outcome&lt;HealthJourneyItemCompletionResponse></ID>
    <ID>MaxLineLength:HealthJourneyAPI.kt$HealthJourneyAPI.GetVerifiableActivityProgressRequest$data</ID>
    <ID>MaxLineLength:HealthJourneyAPI.kt$HealthJourneyAPI.SetUserHealthActivityVerificationProgress$@Json(name = "activity_verification_progress") val activityVerificationProgress: HealthJourneyItemDetail.ActivityVerificationProgress</ID>
    <ID>MaxLineLength:HealthJourneyAPI_GetUserHealthActivitiesRequestV2JsonAdapter.kt$HealthJourneyAPI_GetUserHealthActivitiesRequestV2JsonAdapter$HealthJourneyAPI.GetUserHealthActivitiesRequestV2::class.java</ID>
    <ID>MaxLineLength:HealthJourneyChallengeItemDetailResponseJsonAdapter.kt$HealthJourneyChallengeItemDetailResponseJsonAdapter$HealthJourneyChallengeItemDetailResponse::class.java</ID>
    <ID>MaxLineLength:HealthJourneyDayPagerFragmentDirections.kt$HealthJourneyDayPagerFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths.HealthJourney${ tab: HealthJourneyTab -> "${HealthJourneySettings.internalBaseUrl}/member/health-journey?tab=${tab.ordinal}" }</ID>
    <ID>MaxLineLength:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths.HealthJourneyItemLink${ hjItemId: String -> "${HealthJourneySettings.internalBaseUrl}/member/health-journey/activity/$hjItemId" }</ID>
    <ID>MaxLineLength:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths.HealthProgramDetails${ programSlug: String -> "${HealthJourneySettings.internalBaseUrl}/app/member/health-programs/$programSlug" }</ID>
    <ID>MaxLineLength:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths.HealthProgramsCategory${ categoryId: String -> "${HealthJourneySettings.internalBaseUrl}/app/member/health-programs-category/$categoryId" }</ID>
    <ID>MaxLineLength:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$description = "Show verifiable activity progress. To be deleted once this feature is ready to be released to all users."</ID>
    <ID>MaxLineLength:HealthJourneyFragment.kt$HealthJourneyFragment$findNavControllerSafely()?.navigate(HealthJourneyFragmentDirections.actionHealthJourneyFragmentToHealthProgramLibraryFragment())</ID>
    <ID>MaxLineLength:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs.Companion$throw IllegalArgumentException("Argument \"healthJourneyEntryPoint\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs.Companion$throw IllegalArgumentException("Argument \"healthJourneyEntryPoint\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Argument \"healthJourneyItemComplete\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Argument \"healthJourneyItemComplete\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Required argument \"healthJourneyItemComplete\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Required argument \"healthJourneyItem\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionResponseJsonAdapter.kt$HealthJourneyItemCompletionResponseJsonAdapter$HealthJourneyItemCompletionResponse::class.java</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionResponse$@Json(name = "completion_screen") val completionScreen: HealthJourneyItemCompletionScreen = HealthJourneyItemCompletionScreen()</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$Icon(painter = painterResource(id = R.drawable.ic_navigation_close), contentDescription = getString(R.string.healthjourney_close))</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$IconButton</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$internal</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$shape = RoundedCornerShape(topStart = GenesisTheme.shapes.extraLargeSize, topEnd = GenesisTheme.shapes.extraLargeSize)</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=${context.applicationContext.packageName}")))</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$text = context.getString(R.string.healthjourney_incompatible_app_version)</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog$text = context.getString(R.string.healthjourney_update_app_to_continue)</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Required argument \"activityId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Required argument \"activityName\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Required argument \"activityType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "activity_verification_progress") val activityVerificationProgress: ActivityVerificationProgress? = null</ID>
    <ID>MaxLineLength:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$fun helpfulTipComplete(helpfulTip: HelpfulTip): Boolean</ID>
    <ID>MaxLineLength:HealthJourneyItemExt.kt$stringResource(id = R.string.healthjourney_upcoming_activity_footer_description, DateUtils.formatDateFullMonthDay(LocaleUtils.getCurrentLocale(context), startDate))</ID>
    <ID>MaxLineLength:HealthJourneyItemFragment.kt$HealthJourneyItemFragment$.</ID>
    <ID>MaxLineLength:HealthJourneyItemFragment.kt$HealthJourneyItemFragment$HealthJourneyItemFragmentDirections</ID>
    <ID>MaxLineLength:HealthJourneyItemFragment.kt$HealthJourneyItemFragment$doneText = if (healthJourneyItem.isComplete) getString(R.string.healthjourney_close) else healthJourneyItem.cta.text</ID>
    <ID>MaxLineLength:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthJourneyItemScreen.kt$HealthJourneyItemDetail.Status.EXPIRED.text -> ExpiredItemFooter(modifier = modifier, healthJourneyItem = this)</ID>
    <ID>MaxLineLength:HealthJourneyItemScreen.kt$HealthJourneyItemDetail.Status.REMOVED.text -> RemovedItemFooter(modifier = modifier, healthJourneyItem = this)</ID>
    <ID>MaxLineLength:HealthJourneyItemScreen.kt$HealthJourneyItemDetail.Status.UPCOMING.text -> UpcomingItemFooter(modifier = modifier, healthJourneyItem = this)</ID>
    <ID>MaxLineLength:HealthJourneyItemScreen.kt$HealthJourneyItemDetail.Status.UPCOMING.text, HealthJourneyItemDetail.Status.COMPLETED.text -> GenesisTheme.colors.textPrimary</ID>
    <ID>MaxLineLength:HealthJourneyItemScreen.kt$onViewActivityClicked: (healthJourneyItemDetail: HealthJourneyItemDetail, completionMethod: CompletionMethod.MultiStep) -> Unit</ID>
    <ID>MaxLineLength:HealthJourneyItemViewModel.kt$HealthJourneyItemViewModel$if</ID>
    <ID>MaxLineLength:HealthJourneyItemViewModel.kt$HealthJourneyItemViewModel$item.response.healthJourneyItemDetail.cta.completionMethod is CompletionMethod.Unsupported</ID>
    <ID>MaxLineLength:HealthJourneyPageControls.kt$Text(text = overline.uppercase(), style = GenesisTheme.typography.overline, color = GenesisTheme.colors.textSecondary)</ID>
    <ID>MaxLineLength:HealthJourneyProgressEntryFragmentDirections.kt$HealthJourneyProgressEntryFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthJourneyRemovalConfirmationBottomSheetDialog.kt$HealthJourneyRemovalConfirmationBottomSheetDialog$.</ID>
    <ID>MaxLineLength:HealthJourneyRemovalConfirmationBottomSheetDialog.kt$HealthJourneyRemovalConfirmationBottomSheetDialog$internal</ID>
    <ID>MaxLineLength:HealthJourneyRemovalConfirmationBottomSheetDialogDirections.kt$HealthJourneyRemovalConfirmationBottomSheetDialogDirections.Companion$ActionHealthJourneyRemovalConfirmationBottomSheetDialogToHealthJourneyRemovalSuccessBottomSheetDialog</ID>
    <ID>MaxLineLength:HealthJourneyRemovalConfirmationBottomSheetDialogDirections.kt$HealthJourneyRemovalConfirmationBottomSheetDialogDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthJourneyRemovalSuccessBottomSheetDialog.kt$HealthJourneyRemovalSuccessBottomSheetDialog$title.text = getString(if (args.healthProgram != null) R.string.healthjourney_program_removed else R.string.healthjourney_activity_removed)</ID>
    <ID>MaxLineLength:HealthJourneyRemovalSuccessBottomSheetDialog.kt$HealthJourneyRemovalSuccessBottomSheetDialog$val pulseCheck = args.healthProgram?.campaignContentConfig?.pulseChecks?.filter { it.scenario == PulseCheckScenario.CAMPAIGN_REMOVED.value }?.getOrNull(0)</ID>
    <ID>MaxLineLength:HealthJourneyRemovalSuccessBottomSheetDialogDirections.kt$HealthJourneyRemovalSuccessBottomSheetDialogDirections.Companion$ActionOnlyNavDirections(R.id.action_healthJourneyItemRemovedBottomSheetDialog_popToHealthJourneyActivityFragment)</ID>
    <ID>MaxLineLength:HealthJourneyRemovalSuccessBottomSheetDialogDirections.kt$HealthJourneyRemovalSuccessBottomSheetDialogDirections.Companion$ActionOnlyNavDirections(R.id.action_healthJourneyItemRemovedBottomSheetDialog_popToHealthProgramDetailsFragmentV2)</ID>
    <ID>MaxLineLength:HealthJourneyRepository.kt$HealthJourneyRepository$fun getHealthJourneyItem(itemId: String?, campaignId: String?, activityId: String?): Flow&lt;Outcome&lt;HealthJourneyItemDetailResponse>></ID>
    <ID>MaxLineLength:HealthJourneySuggestedActivityGroupFragment.kt$HealthJourneySuggestedActivityGroupFragment$.</ID>
    <ID>MaxLineLength:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"group\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthJourneySuggestedActivityGroupViewModelTest.kt$HealthJourneySuggestedActivityGroupViewModelTest$HealthJourneyItem(id = it.toString(), status = HealthJourneyItem.Status.ACTIVE.text, campaignInfo = CampaignInfo(name = testCampaignName))</ID>
    <ID>MaxLineLength:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$throw IllegalArgumentException("Argument \"health_category_url_slug\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$throw IllegalArgumentException("Argument \"health_category_url_slug\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$throw IllegalArgumentException("Argument \"health_need_url_slug\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$throw IllegalArgumentException("Argument \"health_need_url_slug\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$.</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$// TODO: remove hardcoding of `health_assessment_lite` when the backend adds it to the HealthProfile model</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$// val suggestedPrograms = if (profile.healthGoalPrograms.recommendedPrograms.isNotEmpty()) {</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$leftSpacingResId = life.league.health.profile.HealthProfileController.Companion.SIDE_MARGIN</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$rightSpacingResId = life.league.health.profile.HealthProfileController.Companion.SIDE_MARGIN</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$this@HealthProfileController.analyticsTracker</ID>
    <ID>MaxLineLength:HealthProfileController.kt$HealthProfileController$this@HealthProfileController.stringProvider.getString(R.string.update_your_health_profile)</ID>
    <ID>MaxLineLength:HealthProgramCard.kt$description = "Longer description for the program that is being displayed. This may go for multiple lines"</ID>
    <ID>MaxLineLength:HealthProgramCategoryFragment.kt$HealthProgramCategoryFragment$findNavControllerSafely()?.navigate(HealthProgramCategoryFragmentDirections.actionHealthProgramCategoryFragmentToHealthProgramDetailsFragmentV2(program.id))</ID>
    <ID>MaxLineLength:HealthProgramCategoryFragment.kt$Text(modifier = Modifier.padding(bottom = GenesisTheme.spacing.half), text = title, style = GenesisTheme.typography.h3)</ID>
    <ID>MaxLineLength:HealthProgramCategoryViewModel.kt$HealthProgramCategoryViewModel$is Failure -> if (currentState !is Loaded) Failed(R.string.healthjourney_loading_error) else currentState</ID>
    <ID>MaxLineLength:HealthProgramDetailsFragment.kt$HealthProgramDetailsFragment$HealthProgramDetailsFragmentDirections</ID>
    <ID>MaxLineLength:HealthProgramDetailsFragment.kt$subtitleText = stringResource(id = R.string.healthjourney_program_limit_message_description)</ID>
    <ID>MaxLineLength:HealthProgramDetailsFragmentArgs.kt$HealthProgramDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"programId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthProgramDetailsFragmentDirections.kt$HealthProgramDetailsFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthProgramLibraryFragment.kt$// Remove horizontal padding from the item width so that we don't set item width to (screen width + horizontal padding)</ID>
    <ID>MaxLineLength:HealthProgramLibraryFragment.kt$HealthProgramLibraryFragment$HealthProgramLibraryFragmentDirections</ID>
    <ID>MaxLineLength:HealthProgramLibraryFragment.kt$title = { Text(text = stringResource(R.string.healthjourney_program_library), style = GenesisTheme.typography.subtitle1) }</ID>
    <ID>MaxLineLength:HealthProgramLibraryFragmentDirections.kt$HealthProgramLibraryFragmentDirections.Companion$fun</ID>
    <ID>MaxLineLength:HealthProgramsAPI_GetUserHealthGoalProgramsRequestJsonAdapter.kt$HealthProgramsAPI_GetUserHealthGoalProgramsRequestJsonAdapter$HealthProgramsAPI.GetUserHealthGoalProgramsRequest::class.java</ID>
    <ID>MaxLineLength:HealthProgramsCarousel.kt$HealthProgramsCarousel$val</ID>
    <ID>MaxLineLength:HealthProgramsCarouselViewModel.kt$HealthProgramsCarouselViewModel$is Failure -> if (value !is Loaded) Failed(R.string.healthjourney_loading_error) else value</ID>
    <ID>MaxLineLength:HealthProgramsLimitMessageDialog.kt$message = "Studies show that there's a limit to the amount of multitasking we can do before it starts affecting our ability to focus, learn, and retain information. We capped our limit at four so you can get the most out of every program you start."</ID>
    <ID>MaxLineLength:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs.Companion$throw IllegalArgumentException("Argument \"programEnrollmentLimitModal\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs.Companion$throw IllegalArgumentException("Argument \"programEnrollmentLimitModal\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs.Companion$throw IllegalArgumentException("Required argument \"programEnrollmentLimitModal\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:HealthProgramsProgressViewModelTest.kt$HealthProgramsProgressViewModelTest$val programs = HealthPrograms(programs = listOf(HealthProgram(id = "1"), HealthProgram(id = "3"), HealthProgram(id = "2")))</ID>
    <ID>MaxLineLength:HealthSolutionCategoryController.kt$HealthSolutionCategoryController$this@HealthSolutionCategoryController.analyticsTracker</ID>
    <ID>MaxLineLength:HealthSolutionCategoryViewModel.kt$HealthSolutionCategoryViewModel$is Failure -> errorMessage.postValue("We\'re sorry, there was an error loading your health solution")</ID>
    <ID>MaxLineLength:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs.Companion$throw IllegalArgumentException("Argument \"health_solution_category_url_slug\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs.Companion$throw IllegalArgumentException("Argument \"health_solution_category_url_slug\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:HomeContract.kt$HomeContract.View$fun setupDailyScreenerTab(moduleId: String, moduleType: String, subtitleText: String, description: String?, @DrawableRes imageRes: Int, deepLink: String)</ID>
    <ID>MaxLineLength:HomeController.kt$HomeController$if (suggested &amp;&amp; status != HealthJourneyItem.Status.COMPLETED.text) footer(R.string.healthjourney_suggested)</ID>
    <ID>MaxLineLength:HomeController.kt$HomeController$style(if (status == HealthJourneyItem.Status.COMPLETED.text) TagBanner.Style.COMPLETE else TagBanner.Style.ACTIVE)</ID>
    <ID>MaxLineLength:HomeController.kt$HomeController$this@HomeController.view.navigateToMarketplace("collections/${merchList.shopifyCollectionId}")</ID>
    <ID>MaxLineLength:HomeHealthJourneyGroupedWidget.kt$HomeHealthJourneyGroupedWidget$private</ID>
    <ID>MaxLineLength:HomeHealthJourneyGroupedWidget.kt$HomeJourneyProps</ID>
    <ID>MaxLineLength:HomeViewModel.kt$HomeViewModel$val healthActivitiesRevampSections: LiveData&lt;State&lt;List&lt;HealthJourneyItemsSection>>> get() = _healthActivitiesRevampSections</ID>
    <ID>MaxLineLength:ImagePromptWidget.kt$description = "PC Health Station readings are considered personal health information. Please confirm that this reading belongs to you before you continue. You can remove readings at any time."</ID>
    <ID>MaxLineLength:ImagePromptWidget.kt$title = "Are you the owner of this account and would you like to track your readings in your PC Health app?"</ID>
    <ID>MaxLineLength:ImportedReadingsController.kt$ImportedReadingsController$}</ID>
    <ID>MaxLineLength:InfoDialog.kt$InfoDialog.Builder$private val alertBinding: WidgetInfoDialogBinding = WidgetInfoDialogBinding.inflate(LayoutInflater.from(context))</ID>
    <ID>MaxLineLength:InputFilterMinMax.kt$InputFilterMinMax$override</ID>
    <ID>MaxLineLength:InsightDetailsFragment.kt$InsightDetailsFragment$findNavControllerSafely()?.navigate(InsightDetailsFragmentDirections.actionGraphDetailsFragmentToRemoveReadingsFragment())</ID>
    <ID>MaxLineLength:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"insight\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:InsightDetailsViewModel.kt$InsightDetailsViewModel$ReadingsToBeDeleted(userReading.associateCode, userReading.associateName, userReading.associateValueUnit, secondaryReadings)</ID>
    <ID>MaxLineLength:InsightDetailsViewModel.kt$InsightDetailsViewModel$is ReadingsViewEvent.DiscardEditingChanges -> if (event.tab == GRAPH) mutableViewEffectChildGraph.setValue(ChildReadingViewEffect.DiscardReadings(READING.index)) else mutableViewEffectChildReading.setValue(ChildReadingViewEffect.DiscardReadings(GRAPH.index))</ID>
    <ID>MaxLineLength:InsightsDetailsViewModelTest.kt$InsightsDetailsViewModelTest$private val deleteReading = DeletedReadingResponse(listOf(DeletedReading("", "reading0", true), DeletedReading("", "reading1", true)))</ID>
    <ID>MaxLineLength:InsightsDetailsViewModelTest.kt$InsightsDetailsViewModelTest$private val deleteReadingFailed = DeletedReadingResponse(listOf(DeletedReading("", "reading0", false), DeletedReading("", "reading1", true)))</ID>
    <ID>MaxLineLength:InsightsDetailsViewModelTest.kt$InsightsDetailsViewModelTest$viewModel = InsightDetailsViewModel(readingsUseCase = readingUseCase, removeReadingUseCase = removeReadingUseCase, dispatcher = coroutineRule.testDispatcher)</ID>
    <ID>MaxLineLength:IterableExtension.kt$inline</ID>
    <ID>MaxLineLength:JSONObjectExtensionTest.kt$JSONObjectExtensionTest$"{\"code\":\"invalid_session\",\"info\":null,\"message\":{\"info\":{\"device_token\":\"${deviceToken}\",\"session_id\":\"${sessionId}\"},\"message_id\":\"7d91cdbb-5306-4605-a9bc-99d291af61a1\",\"message_type\":\"refresh_jwt\",\"source\":\"api\"},\"reason\":\"Invalid Session\"}"</ID>
    <ID>MaxLineLength:JourneyItemTagBanner.kt$style</ID>
    <ID>MaxLineLength:JsonApiAdapter.kt$JsonApiAdapter$"All relationship ids must have a type set in a @JsonApiRelationship(type=\"relationship_type\") annotation"</ID>
    <ID>MaxLineLength:JsonApiAdapter.kt$JsonApiAdapter$"Class ${cls.qualifiedName} is either missing a @JsonApiObject(type=\"typename\") annotation or the value for type is null or empty."</ID>
    <ID>MaxLineLength:JsonApiAdapter.kt$JsonApiAdapter$"Error JSON is not in a valid League JSON:API format, missing a top-level member named either 'data' or 'errors'"</ID>
    <ID>MaxLineLength:JsonApiAdapter.kt$JsonApiAdapter$message = "Class ${cls.qualifiedName} is either missing a @JsonApiObject(type=\"typename\") annotation or the value for type is null or empty."</ID>
    <ID>MaxLineLength:JsonApiAdapterFactory.kt$JsonApiMoshiAdapterFactory$return JsonApiMoshiRequestBodyConverter(moshiConverter as Converter&lt;Any, RequestBody?>) as Converter&lt;Any, RequestBody?></ID>
    <ID>MaxLineLength:JsonApiDataJsonAdapter.kt$JsonApiDataJsonAdapter$buildString { append("TypeVariable mismatch: Expecting ").append(1).append(" type for generic type variables [").append("T").append("], but received ").append(types.size) }</ID>
    <ID>MaxLineLength:JsonApiResponseJsonAdapter.kt$JsonApiResponseJsonAdapter$buildString { append("TypeVariable mismatch: Expecting ").append(1).append(" type for generic type variables [").append("T").append("], but received ").append(types.size) }</ID>
    <ID>MaxLineLength:LaunchViewModel.kt$LaunchViewModel$// force on biometric logon so we can test it, eventually we'll toggle this from within the presenter app</ID>
    <ID>MaxLineLength:LeagueChatClient.kt$LeagueChatClientListener : LeagueQueueListenerLeagueSessionStateListenerLeagueAgentListenerLeagueFileTransferRequestListener</ID>
    <ID>MaxLineLength:LeagueColors.kt$/*val Context.LeagueColors: GenesisColors get() = GenesisColors( fillPrimary = getComposeColorOrDefault(this, R.color.league_gray_dark), fillSecondary = getComposeColorOrDefault(this, R.color.league_teal_dark), fillTertiary = getComposeColorOrDefault(this, R.color.league_blurple_darker), fillQuaternary = getComposeColorOrDefault(this, R.color.league_blurple_lightest), fillLight = getComposeColorOrDefault(this, R.color.league_white), fillDisabled = getComposeColorOrDefault(this, R.color.league_gray), fillGoalActiveContrast = getComposeColorOrDefault(this, R.color.league_white), fillNeutralDark = getComposeColorOrDefault(this, R.color.league_gray_dark), fillNeutralLight = getComposeColorOrDefault(this, R.color.league_gray_light), fillIndicator = getComposeColorOrDefault(this, R.color.league_blurple), backgroundProgressBar = getComposeColorOrDefault(this, R.color.league_blurple_lightest), fillProgressBarPrimary = getComposeColorOrDefault(this, R.color.league_blurple), fillProgressBarSecondary = getComposeColorOrDefault(this, R.color.league_blurple_light), fillMultiProgressBarPrimary = getComposeColorOrDefault(this, R.color.league_rose_status), fillMultiProgressBarSecondary = getComposeColorOrDefault(this, R.color.league_teal), fillMultiProgressBarTertiary = getComposeColorOrDefault(this, R.color.league_orange_status), fillMultiProgressBarQuaternary = getComposeColorOrDefault(this, R.color.league_turquoise_status), fillMultiProgressBarQuinary = getComposeColorOrDefault(this, R.color.league_blue_functional), fillMultiProgressBarSenary = getComposeColorOrDefault(this, R.color.league_mustard_status), backgroundPrimary = getComposeColorOrDefault(this, R.color.league_white), backgroundPrimaryHighlight = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundSecondary = getComposeColorOrDefault(this, R.color.league_gray_lightest), backgroundSecondaryHighlight = getComposeColorOrDefault(this, R.color.league_blue_light_functional), backgroundEmergency = getComposeColorOrDefault(this, R.color.league_red_light_functional), backgroundDanger = getComposeColorOrDefault(this, R.color.league_red_light_functional), backgroundDangerHighlight = getComposeColorOrDefault(this, R.color.league_red_functional), backgroundInfo = getComposeColorOrDefault(this, R.color.league_blue_light_functional), backgroundInfoHighlight = getComposeColorOrDefault(this, R.color.league_blue_functional), backgroundInfoLight = getComposeColorOrDefault(this, R.color.league_blue_functional), backgroundSuccess = getComposeColorOrDefault(this, R.color.league_green_light_functional), backgroundSuccessHighlight = getComposeColorOrDefault(this, R.color.league_green_functional), backgroundDisabled = getComposeColorOrDefault(this, R.color.league_gray_lighter), backgroundDark = getComposeColorOrDefault(this, R.color.league_blurple_darker), backgroundPointsDark = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundGoalActive = getComposeColorOrDefault(this, R.color.league_blurple_darker), backgroundButtonPrimary = getComposeColorOrDefault(this, R.color.league_blurple), backgroundButtonPrimaryPressed = getComposeColorOrDefault(this, R.color.league_blurple_dark), backgroundButtonSecondary = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundButtonSecondaryPressed = getComposeColorOrDefault(this, R.color.league_blurple_lighter), backgroundButtonSubtle = getComposeColorOrDefault(this, R.color.transparent), backgroundButtonSubtlePressed = getComposeColorOrDefault(this, R.color.league_gray_lightest), backgroundButtonDanger = getComposeColorOrDefault(this, R.color.league_red_functional), backgroundButtonDangerPressed = getComposeColorOrDefault(this, R.color.league_red_dark_functional), backgroundButtonDisabled = getComposeColorOrDefault(this, R.color.league_gray_light), backgroundButtonCircularSelected = getComposeColorOrDefault(this, R.color.league_blurple), backgroundButtonCircularSelectedPressed = getComposeColorOrDefault(this, R.color.league_blurple_dark), backgroundButtonCircularUnselectedPressed = getComposeColorOrDefault(this, R.color.league_blurple_dark), backgroundButtonPill = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundButtonPillPressed = getComposeColorOrDefault(this, R.color.league_blurple_lighter), backgroundInputDefault = getComposeColorOrDefault(this, R.color.league_white), backgroundInputDisabled = getComposeColorOrDefault(this, R.color.league_gray_lighter), backgroundCheckedInputDefault = getComposeColorOrDefault(this, R.color.league_blurple), backgroundCheckedInputDisabled = getComposeColorOrDefault(this, R.color.league_gray_functional), backgroundPageSwoopPrimary = getComposeColorOrDefault(this, R.color.league_blue_light_functional), backgroundPageControls = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundPageSwoopSecondary = getComposeColorOrDefault(this, R.color.league_green_light_status), backgroundPageSwoopTertiary = getComposeColorOrDefault(this, R.color.league_turquoise_light_status), backgroundBottomNav = getComposeColorOrDefault(this, R.color.league_white), backgroundTabSelected = getComposeColorOrDefault(this, R.color.league_blurple), backgroundTabUnselected = getComposeColorOrDefault(this, R.color.league_gray_functional), backgroundTopicOverline = getComposeColorOrDefault(this, R.color.league_blurple_darker), backgroundFeedback = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundWarning = getComposeColorOrDefault(this, R.color.league_orange_light_status), backgroundWarningHighlight = getComposeColorOrDefault(this, R.color.league_orange_status), backgroundOptionUnselected = getComposeColorOrDefault(this, R.color.league_white), backgroundOptionSelected = getComposeColorOrDefault(this, R.color.league_blurple_lightest), backgroundToolbar = getComposeColorOrDefault(this, R.color.league_white), backgroundSuggestedDark = getComposeColorOrDefault(this, R.color.league_mustard_status), backgroundSuggested = getComposeColorOrDefault(this, R.color.league_mustard_light_status), backgroundSubduedHighlight = getComposeColorOrDefault(this, R.color.league_blue_light_functional), textPrimary = getComposeColorOrDefault(this, R.color.league_blurple_darker), textSecondary = getComposeColorOrDefault(this, R.color.league_gray_dark), textDark = getComposeColorOrDefault(this, R.color.league_blurple_darker), textLight = getComposeColorOrDefault(this, R.color.league_white), textLightSecondary = getComposeColorOrDefault(this, R.color.league_blurple_lightest), textLightTertiary = getComposeColorOrDefault(this, R.color.league_blurple_light), textDanger = getComposeColorOrDefault(this, R.color.league_red_functional), textLabel = getComposeColorOrDefault(this, R.color.league_gray_dark), textHint = getComposeColorOrDefault(this, R.color.league_gray), textLinkDefault = getComposeColorOrDefault(this, R.color.league_blurple), textLinkPressed = getComposeColorOrDefault(this, R.color.league_blurple_darker), textLinkDisabled = getComposeColorOrDefault(this, R.color.league_gray_light), textChoiceDefault = getComposeColorOrDefault(this, R.color.league_blurple_darker), textChoiceDisabled = getComposeColorOrDefault(this, R.color.league_gray), textButtonPrimary = getComposeColorOrDefault(this, R.color.league_white), textButtonSecondary = getComposeColorOrDefault(this, R.color.league_blurple), textButtonDanger = getComposeColorOrDefault(this, R.color.league_white), textButtonSubtle = getComposeColorOrDefault(this, R.color.league_blurple), textButtonSubtleSecondary = getComposeColorOrDefault(this, R.color.league_gray), textButtonDisabled = getComposeColorOrDefault(this, R.color.league_gray), textInputDefault = getComposeColorOrDefault(this, R.color.league_blurple_darker), textInputDisabled = getComposeColorOrDefault(this, R.color.league_gray_dark), textInputPlaceholder = getComposeColorOrDefault(this, R.color.league_gray), textCardDescription = getComposeColorOrDefault(this, R.color.league_gray), textCardCaption = getComposeColorOrDefault(this, R.color.league_blurple_darker), textGoalActiveContrast = getComposeColorOrDefault(this, R.color.league_white), textGoalActiveContrastSubtle = getComposeColorOrDefault(this, R.color.league_blurple_light), textGoalDisabled = getComposeColorOrDefault(this, R.color.league_gray), textGoalOverline = getComposeColorOrDefault(this, R.color.league_blurple), textButtonCircularUnselected = getComposeColorOrDefault(this, R.color.league_blurple), textButtonCircularSelected = getComposeColorOrDefault(this, R.color.league_white), textButtonPill = getComposeColorOrDefault(this, R.color.league_blurple), textActionBarButton = getComposeColorOrDefault(this, R.color.league_blurple), textOptionUnselected = getComposeColorOrDefault(this, R.color.league_gray), textOptionSelected = getComposeColorOrDefault(this, R.color.league_blurple_darker), textOptionDescriptionSelected = getComposeColorOrDefault(this, R.color.league_blurple_darker), textOptionDescriptionUnselected = getComposeColorOrDefault(this, R.color.league_gray), textPointsEarned = getComposeColorOrDefault(this, R.color.league_teal), borderDefault = getComposeColorOrDefault(this, R.color.league_gray_functional), borderButtonSubtle = getComposeColorOrDefault(this, R.color.league_gray_functional), borderInputDefault = getComposeColorOrDefault(this, R.color.league_gray_light), borderInputFocused = getComposeColorOrDefault(this, R.color.league_blurple), borderInputDisabled = getComposeColorOrDefault(this, R.color.league_gray_light), borderInputDanger = getComposeColorOrDefault(this, R.color.league_red_functional), borderButtonSecondary = getComposeColorOrDefault(this, R.color.transparent), borderPrimary = getComposeColorOrDefault(this, R.color.league_gray_light), borderButtonCircular = getComposeColorOrDefault(this, R.color.league_blurple), borderNeutralLighter = getComposeColorOrDefault(this, R.color.league_gray_lighter), borderOptionUnselected = getComposeColorOrDefault(this, R.color.league_gray_light), borderOptionSelected = getComposeColorOrDefault(this, R.color.league_blurple), dividerPrimary = getComposeColorOrDefault(this, R.color.league_gray_light), // NEW COLOR TOKENS // surfaceBackgroundPrimary = getComposeColorOrDefault(this, R.color.league_surface_background_primary), surfaceBackgroundSecondary = getComposeColorOrDefault(this, R.color.league_surface_background_secondary), surfaceBackgroundTertiary = getComposeColorOrDefault(this, R.color.league_surface_background_tertiary), surfaceCardPrimary = getComposeColorOrDefault(this, R.color.league_surface_card_primary), surfaceCardSecondary = getComposeColorOrDefault(this, R.color.league_surface_card_secondary), // surfaceCardDisable = getComposeColorOrDefault(this, R.color.league_surface_card_disabled), // surfaceCardTertiary = getComposeColorOrDefault(this, R.color.color_surface_card_tertiary), /*onSurfaceTextPrimary = getComposeColorOrDefault(this, R.color.league_on_surface_text_primary), onSurfaceTextSubdued = getComposeColorOrDefault(this, R.color.league_on_surface_text_subdued), onSurfaceTextCritical = getComposeColorOrDefault(this, R.color.league_on_surface_text_critical), onSurfaceTextReversed = getComposeColorOrDefault(this, R.color.league_on_surface_text_reversed), onSurfaceBorderSubdued = getComposeColorOrDefault(this, R.color.league_on_surface_border_subdued), onSurfaceBorderDefault = getComposeColorOrDefault(this, R.color.league_on_surface_border_default), onSurfaceIconPrimary = getComposeColorOrDefault(this, R.color.league_on_surface_icon_primary), onSurfaceTextSuccess = getComposeColorOrDefault(this, R.color.league_on_surface_text_success), primaryBackgroundDefault = getComposeColorOrDefault(this, R.color.league_primary_background_default), primaryBackgroundHovered = getComposeColorOrDefault(this, R.color.league_primary_background_hovered), primaryBackgroundPressed = getComposeColorOrDefault(this, R.color.league_primary_background_pressed), primaryBackgroundCriticalDefault = getComposeColorOrDefault(this, R.color.league_primary_background_critical_default), primaryBackgroundCriticalHovered = getComposeColorOrDefault(this, R.color.league_primary_background_critical_hovered), primaryBackgroundCriticalPressed = getComposeColorOrDefault(this, R.color.league_primary_background_critical_pressed), primaryTextCriticalDefault = getComposeColorOrDefault(this, R.color.league_primary_text_critical_default),*/ /*secondaryBackgroundDefault = getComposeColorOrDefault(this, R.color.league_secondary_background_default), secondaryBackgroundHovered = getComposeColorOrDefault(this, R.color.league_secondary_background_hovered), secondaryBackgroundPressed = getComposeColorOrDefault(this, R.color.league_secondary_background_pressed), secondaryTextDefault = getComposeColorOrDefault(this, R.color.league_secondary_text_default), secondaryTextHovered = getComposeColorOrDefault(this, R.color.league_secondary_text_hovered), secondaryBorderDefault = getComposeColorOrDefault(this, R.color.league_secondary_border_default), secondaryBackgroundCriticalDefault = getComposeColorOrDefault(this, R.color.league_secondary_background_critical_default), secondaryBackgroundCriticalHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_background_critical_hovered), secondaryBackgroundCriticalPressed = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_background_critical_pressed), secondaryTextCriticalDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_text_critical_default), secondaryTextCriticalHovered = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_text_critical_hovered), secondaryBorderCriticalDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_secondary_border_critical_default),*/ /*tertiaryBackgroundDefault = getComposeColorOrDefault(this, R.color.league_tertiary_background_default), tertiaryBackgroundHovered = getComposeColorOrDefault(this, R.color.league_tertiary_background_hovered), tertiaryBackgroundPressed = getComposeColorOrDefault(this, R.color.league_tertiary_background_pressed), tertiaryTextDefault = getComposeColorOrDefault(this, R.color.league_tertiary_text_default), tertiaryTextHovered = getComposeColorOrDefault(this, R.color.league_tertiary_text_hovered), tertiaryBorderDefault = getComposeColorOrDefault(this, R.color.league_tertiary_border_default), interactiveBackgroundDefault = getComposeColorOrDefault(this, R.color.league_interactive_background_default), interactiveBackgroundDisable = getComposeColorOrDefault(this, R.color.league_interactive_background_disabled), interactiveActionPrimary = getComposeColorOrDefault(this, R.color.league_interactive_action_primary), interactiveActionHovered = getComposeColorOrDefault(this, R.color.league_interactive_action_hovered), interactiveActionPressed = getComposeColorOrDefault(this, R.color.league_interactive_action_pressed), interactiveActionSubdued = getComposeColorOrDefault(this, R.color.league_interactive_action_subdued), interactiveActionDisable = getComposeColorOrDefault(this, R.color.league_interactive_action_disabled), interactiveBorderDefault = getComposeColorOrDefault(this, R.color.league_interactive_border_default), interactiveBorderHovered = getComposeColorOrDefault(this, R.color.league_interactive_border_hovered), interactiveBorderDisable = getComposeColorOrDefault(this, R.color.league_interactive_border_disabled), interactiveBorderCriticalDefault = getComposeColorOrDefault(this, R.color.league_interactive_border_critical_default), interactiveFocus = getComposeColorOrDefault(this, R.color.league_interactive_focus), interactiveIconDefault = getComposeColorOrDefault(this, R.color.league_interactive_icon_default), interactiveIconDisable = getComposeColorOrDefault(this, R.color.league_interactive_icon_disabled),*/ /*criticalBackgroundSubdued = getComposeColorOrDefault(this, R.color.league_critical_background_subdued), criticalBackgroundSecondary = getComposeColorOrDefault(this, R.color.league_critical_background_secondary), criticalBorderDefault = getComposeColorOrDefault(this, R.color.league_critical_border_default), criticalIcon = getComposeColorOrDefault(this, R.color.league_critical_icon), warningBackgroundSubdued = getComposeColorOrDefault(this, R.color.league_warning_background_subdued), warningBackgroundSecondary = getComposeColorOrDefault(this, R.color.league_warning_background_secondary), warningBorderDefault = getComposeColorOrDefault(this, R.color.league_warning_border_default), warningIcon = getComposeColorOrDefault(this, R.color.league_warning_icon), successBackgroundSubdued = getComposeColorOrDefault(this, R.color.league_success_background_subdued), successBackgroundSecondary = getComposeColorOrDefault(this, R.color.league_success_background_secondary), successBorderDefault = getComposeColorOrDefault(this, R.color.league_success_border_default), successIcon = getComposeColorOrDefault(this, R.color.league_success_icon), highlightBackgroundSubdued = getComposeColorOrDefault(this, R.color.league_highlight_background_subdued), highlightBackgroundSecondary = getComposeColorOrDefault(this, R.color.league_highlight_background_secondary), highlightBorderDefault = getComposeColorOrDefault(this, R.color.league_highlight_border_default), highlightIcon = getComposeColorOrDefault(this, R.color.league_highlight_icon),*/ /*decorativeBrandPrimaryDarkest = getComposeColorOrDefault(this, R.color.league_decorative_brand_primary_darkest), decorativeBrandPrimaryDark = getComposeColorOrDefault(this, R.color.league_decorative_brand_primary_dark), decorativeBrandPrimaryDefault = getComposeColorOrDefault(this, R.color.league_decorative_brand_primary_default), decorativeBrandPrimaryBright = getComposeColorOrDefault(this, R.color.league_decorative_brand_primary_bright), decorativeBrandPrimaryBrightest = getComposeColorOrDefault(this, R.color.league_decorative_brand_primary_brightest), decorativeBrandPrimaryPastel = getComposeColorOrDefault(this, R.color.league_decorative_brand_primary_pastel), decorativeBrandSecondaryDarkest = getComposeColorOrDefault(this, R.color.league_decorative_brand_secondary_darkest), decorativeBrandSecondaryDark = getComposeColorOrDefault(this, R.color.league_decorative_brand_secondary_dark), decorativeBrandSecondaryDefault = getComposeColorOrDefault(this, R.color.league_decorative_brand_secondary_default), decorativeBrandSecondaryBright = getComposeColorOrDefault(this, R.color.league_decorative_brand_secondary_bright), decorativeBrandSecondaryBrightest = getComposeColorOrDefault(this, R.color.league_decorative_brand_secondary_brightest), decorativeBrandSecondaryPastel = getComposeColorOrDefault(this, R.color.league_decorative_brand_secondary_pastel),*/ /*decorativeBrandTertiaryDarkest = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_tertiary_darkest), decorativeBrandTertiaryDark = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_tertiary_dark), decorativeBrandTertiaryDefault = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_tertiary_default), decorativeBrandTertiaryBright = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_tertiary_bright), decorativeBrandTertiaryBrightest = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_tertiary_brightest), decorativeBrandTertiaryPastel = ta.getComposeColor(R.styleable.GenesisColorsAdapterTheme_color_decorative_brand_tertiary_pastel)*/ )*/</ID>
    <ID>MaxLineLength:LeagueDeepLinker.kt$LeagueDeepLinker$HealthJourneyDeepLinker.HealthJourneyPaths.HealthJourney.HealthJourneyTab.Progress</ID>
    <ID>MaxLineLength:LeagueDeepLinker.kt$LeagueDeepLinker$path matches HealthJourneyDeepLinker.HealthJourneyPaths.HealthProgramsProgress.path</ID>
    <ID>MaxLineLength:LeagueJsonUtilsTest.kt$LeagueJsonUtilsTest$assertEquals("""{"id":"1","color":"#000000","numeric_value":123.0,"string_value":"string","date":"1970-01-01T00:00:00+0000"}""", json)</ID>
    <ID>MaxLineLength:LeagueNavigation.kt$LeagueNavigation$NavigationTarget.WALLET</ID>
    <ID>MaxLineLength:LeagueNavigation.kt$LeagueNavigation$if</ID>
    <ID>MaxLineLength:LeagueRestAPI.kt$TokenAuthenticator$string = "Error in League TokenAuthenticator.authenticate(), refreshAuthTokens() not successfully completed"</ID>
    <ID>MaxLineLength:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Argument \"userChallengeId\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Argument \"userChallengeId\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs.Companion$throw IllegalArgumentException("Required argument \"userChallengeId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LeaveHealthJourneyActivityConfirmationFragment.kt$LeaveHealthJourneyActivityConfirmationFragment$findNavControllerSafely()?.navigate(LeaveHealthJourneyActivityConfirmationFragmentDirections.actionLeaveHealthJourneyActivityConfirmationFragmentPop())</ID>
    <ID>MaxLineLength:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityName\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"currentStep\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"totalSteps\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LegacyLeagueAuthenticatorTest.kt$LegacyLeagueAuthenticatorTest$kotlin.test.assertTrue { authenticator.truncateUrl("https://www.google.com?param=true") == "https://www.google.com" }</ID>
    <ID>MaxLineLength:LegacyLeagueAuthenticatorTest.kt$LegacyLeagueAuthenticatorTest$private</ID>
    <ID>MaxLineLength:ListExtensions.kt$* A Mapping function that attempts to map all values in a list into the new type. If any of the mappings fail those values are ignored</ID>
    <ID>MaxLineLength:ListSpacingDecoration.kt$ListSpacingDecoration$private</ID>
    <ID>MaxLineLength:LiveAgentChatClient.kt$LiveAgentChatClient$!chatMap.response.isAgentAvailable -> StartChatResponse.AgentOffline(chatMap.response.chatAvailabilities)</ID>
    <ID>MaxLineLength:LiveAgentChatClient.kt$LiveAgentChatClient$addNewMessage(LeagueChatMessage(message = stringProvider.getString(R.string.document_successfully_uploaded)))</ID>
    <ID>MaxLineLength:LiveAgentChatClient.kt$LiveAgentChatClient$addNewMessage(LeagueChatMessage(message = stringProvider.getString(R.string.error_sending_message)))</ID>
    <ID>MaxLineLength:LiveAgentChatClient.kt$LiveAgentChatClient$chatMap is Failure -> StartChatResponse.AgentUnavailable("createSalesforceChatMap failed: ${chatMap.errorResponse}")</ID>
    <ID>MaxLineLength:LiveAgentChatClient.kt$LiveAgentChatClient$config is Failure -> StartChatResponse.AgentUnavailable("getSalesforceConfig failed: ${config.errorResponse}")</ID>
    <ID>MaxLineLength:LiveAgentChatClient.kt$LiveAgentChatClient$private val repo: Repository</ID>
    <ID>MaxLineLength:LiveAgentChatClientIntegrationTests.kt$LiveAgentChatClientIntegrationTests$fun</ID>
    <ID>MaxLineLength:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$messages + if (showTyping) listOf(agentTypingMessage) else emptyList&lt;LeagueChatMessage>() + if (showUploading) listOf(uploadingMessage) else emptyList&lt;LeagueChatMessage>()</ID>
    <ID>MaxLineLength:LiveAgentChatViewModelTest.kt$LiveAgentChatViewModelTest$private val stringProvider: StringProvider = StringProvider(InstrumentationRegistry.getInstrumentation().context.resources)</ID>
    <ID>MaxLineLength:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:LiveBalance.kt$LiveBalance$* @param progress percentage (rounded). When it's 0, we still want to display some progress so that why we deliberately treat any int in range 0..[MIN_DISPLAYABLE_PROGRESS] as [MIN_DISPLAYABLE_PROGRESS]</ID>
    <ID>MaxLineLength:LiveBalanceActivity.kt$LiveBalanceActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, R.attr.spacing_one_and_half, R.attr.spacing_one_and_half))</ID>
    <ID>MaxLineLength:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$binding.liveBalanceIndividualSpendButton.setText(context.getString(R.string.genesis_live_balances_individual_spend_button))</ID>
    <ID>MaxLineLength:LiveBalancePage.kt$LiveBalancePage$textView2.text = "${data.type} family out-of-pocket maximum spent: ${data.beneficiaries.family?.outOfPocketMax?.amountSpent}"</ID>
    <ID>MaxLineLength:LiveBalancesViewData.kt$(this.inNetworkBalance.individualSpend.isNotEmpty() &amp;&amp; this.outOfNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>MaxLineLength:LiveBalancesViewData.kt$(this.inNetworkBalance.individualSpend.isNotEmpty() || this.outOfNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>MaxLineLength:LiveBalancesViewData.kt$(this.outOfNetworkBalance.individualSpend.isNotEmpty() || this.inNetworkBalance.individualSpend.isNotEmpty())</ID>
    <ID>MaxLineLength:LiveBalancesViewData.kt$else</ID>
    <ID>MaxLineLength:LiveBalancesViewData.kt$return</ID>
    <ID>MaxLineLength:LiveBalancesViewData.kt$this.outOfNetworkBalance.familySpend.isNotEmpty()</ID>
    <ID>MaxLineLength:LiveChatBannerViewModelTest.kt$LiveChatBannerViewModelTest$fun</ID>
    <ID>MaxLineLength:LoadingStateProgressBar.kt$LoadingStateProgressBar$(this as ProgressBar).indeterminateDrawable.colorFilter = BlendModeColorFilter(context.getColorFromAttr(attrRes), BlendMode.SRC_IN)</ID>
    <ID>MaxLineLength:LoadingStateProgressBar.kt$LoadingStateProgressBar$(this as ProgressBar).indeterminateDrawable.setColorFilter(context.getColorFromAttr(attrRes), PorterDuff.Mode.SRC_IN)</ID>
    <ID>MaxLineLength:LocaleUtils.kt$LocaleUtils$throw Resources.NotFoundException("You need to specify supported_languages StringArray resource on your application")</ID>
    <ID>MaxLineLength:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:LoginFragment.kt$LoginFragment$findNavControllerSafely()?.navigate(AppNavGraphDirections.navigateToAccountSetup())</ID>
    <ID>MaxLineLength:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs.Companion$throw IllegalArgumentException("Argument \"is_requesting_change\" of type boolean does not support null values")</ID>
    <ID>MaxLineLength:LoginViewModelTest.kt$LoginViewModelTest$fun</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity.&lt;no name provided>$displayErrorDialog("We're sorry, there was an error processing your acceptance. Please try again.")</ID>
    <ID>MaxLineLength:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"qle_request_id\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"qle_request_id\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:ManageDependentsNavHostActivity.kt$ManageDependentsNavHostActivity$private val navController by lazy { (supportFragmentManager.findFragmentById(R.id.manage_dependents_nav_host_fragment) as NavHostFragment).navController }</ID>
    <ID>MaxLineLength:MapleAvailabilityFragment.kt$MapleAvailabilityFragment$itemBinding.price.text = it.pricing.formatPrice(isCurrencyShown = false, stringProvider = StringProvider(resources))</ID>
    <ID>MaxLineLength:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"chat_availabilities\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Argument \"chat_availabilities\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"agent_type_description\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"chat_availabilities\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"consult\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MapleChatViewModelTest.kt$MapleChatViewModelTest$private fun mockChatProviderResponse()</ID>
    <ID>MaxLineLength:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$throw IllegalArgumentException("Argument \"formatted_event_price\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$throw IllegalArgumentException("Argument \"formatted_event_price\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MapleHistoryViewModel.kt$MapleHistoryViewModel$context = context</ID>
    <ID>MaxLineLength:MapleIntroFragment.kt$MapleIntroFragment$setDescription(StringProvider(resources).getStringFromHtml(R.string.what_is_maple_description))</ID>
    <ID>MaxLineLength:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs.Companion$throw IllegalArgumentException("Argument \"appointmentId\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"appointmentId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MilestoneTracker.kt$placeHolder = RewardsModule.configuration.drawables.placeHolderImageForBadges?.let { painterResource(id = it) }</ID>
    <ID>MaxLineLength:MilestoneTrackerData.kt$MilestoneTrackerData$private const val MOCK_IMAGE_URL = "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/apple/285/party-popper_1f389.png"</ID>
    <ID>MaxLineLength:MilestoneTrackerData.kt$MilestoneTrackerData$val milestone1 = Milestone(count = 1, unit = "week", subtitle = "streak", image = AchievementImage(small = MOCK_IMAGE_URL, medium = MOCK_IMAGE_URL, large = MOCK_IMAGE_URL))</ID>
    <ID>MaxLineLength:MilestoneTrackerData.kt$MilestoneTrackerData$val milestone2 = Milestone(count = 1, unit = "activity", subtitle = "complete", image = AchievementImage(small = MOCK_IMAGE_URL, medium = MOCK_IMAGE_URL, large = MOCK_IMAGE_URL))</ID>
    <ID>MaxLineLength:MultiProgressBar.kt$MultiProgressBar$(layerDrawable.findDrawableByLayerId(android.R.id.progress) as? ScaleDrawable)</ID>
    <ID>MaxLineLength:MultiProgressBar.kt$MultiProgressBar$if</ID>
    <ID>MaxLineLength:MultiProgressBar.kt$MultiProgressBar$val</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragment.kt$MultiStepHealthJourneyItemCompletionFragment$MultiStepHealthJourneyItemCompletionFragmentDirections</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityName\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityType\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"complete\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"doneText\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"steps\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$CustomOption</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.accompanist_null_RemoteImage_RemoteImageContent(bycontentid)_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.animations_null_Animations_VerticalFadingTextAnimation_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.banner_null_DefaultGroup_WarningBannerwithlink_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.input.radio_null_RadioInput_GenesisBorderedRadioField_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.input.radio_null_RadioInput_GenesisRadioButton_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.input.radio_null_RadioInput_GenesisRadioField_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.progress_null_ProgressBars_IndeterminateCircularProgressBar_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.progress_null_Progress_HorizontalProgressBar_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.progress_null_Progress_HorizontalProgressBarwithDelay_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.progress_null_Progress_MultiHorizontalProgressBar_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.widget_null_DefaultGroup_GenesisNoScrollGridView_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleCodegen.kt$MyRootModuleCodegen$"""life.league.genesis.compose.component.widget_null_DefaultGroup_PreviewInformationalSlide_$index"""</ID>
    <ID>MaxLineLength:MyRootModuleShowkaseExtensionFunctionsCodegen.kt$error("The class wasn't generated correctly. Make sure that you have setup Showkase correctly by following the steps here - https://github.com/airbnb/Showkase#Installation.")</ID>
    <ID>MaxLineLength:NoSearchResultsScreen.kt$secondaryButtonText = stringResource(id = R.string.digitalpharmacy_no_results_manually_enter_location_label)</ID>
    <ID>MaxLineLength:NotificationActivity.kt$NotificationActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, R.attr.spacing_one, R.attr.spacing_one_and_half))</ID>
    <ID>MaxLineLength:NotificationData.kt$NotificationData$val notification = Notification(id, avatarId, title, description, date, unread, interacCode, type, url)</ID>
    <ID>MaxLineLength:NotificationSettingsFragment.kt$NotificationSettingsFragment$context.getString(R.string.roadrunner_shoppers_drug_mart_and_affliates) to listOf(URLSpan(getString(R.string.roadrunner_faq_url)))</ID>
    <ID>MaxLineLength:NumericCircleButton.kt$NumericCircleButton$binding.ratingNumber.background = ContextCompat.getDrawable(context, R.drawable.background_selected_numeric_circle_button)</ID>
    <ID>MaxLineLength:NumericCircleButton.kt$NumericCircleButton$binding.ratingNumber.background = ContextCompat.getDrawable(context, R.drawable.background_unselected_numeric_circle_button)</ID>
    <ID>MaxLineLength:OfflineDialog.kt$OfflineDialog$@StringRes private val descriptionRes: Int? = R.string.genesis_there_was_a_problem_loading_data_check_your_internet_and_try_again</ID>
    <ID>MaxLineLength:OptionFillParent.kt$OptionFillParent$binding.description.fadeTextColorAttr(R.attr.color_text_option_description_selected, context.getIntegerFromAttr(R.attr.duration_slow).toLong())</ID>
    <ID>MaxLineLength:OptionFillParent.kt$OptionFillParent$binding.description.fadeTextColorAttr(R.attr.color_text_option_description_unselected, context.getIntegerFromAttr(R.attr.duration_slow).toLong())</ID>
    <ID>MaxLineLength:OptionFillParent.kt$OptionFillParent$binding.optionText.fadeTextColorAttr(R.attr.color_text_option_selected, context.getIntegerFromAttr(R.attr.duration_slow).toLong())</ID>
    <ID>MaxLineLength:OptionFillParent.kt$OptionFillParent$binding.optionText.fadeTextColorAttr(R.attr.color_text_option_unselected, context.getIntegerFromAttr(R.attr.duration_slow).toLong())</ID>
    <ID>MaxLineLength:OptionFillParent.kt$OptionFillParent$descriptionAlwaysVisible = attrs.getBoolean(R.styleable.OptionFillParent_description_always_visible, true)</ID>
    <ID>MaxLineLength:OptionWrapContent.kt$OptionWrapContent$binding.optionText.fadeTextColorAttr(R.attr.color_text_option_selected, context.getIntegerFromAttr(R.attr.duration_slow).toLong())</ID>
    <ID>MaxLineLength:OptionWrapContent.kt$OptionWrapContent$binding.optionText.fadeTextColorAttr(R.attr.color_text_option_unselected, context.getIntegerFromAttr(R.attr.duration_slow).toLong())</ID>
    <ID>MaxLineLength:OutcomeAdapterFactory.kt$OutcomeAdapterFactory$check(responseType is ParameterizedType) { "Response must be parameterized as RestOutcome&lt;Foo> or RestOutcome&lt;out Foo>" }</ID>
    <ID>MaxLineLength:OutcomeSuggestionsFragment.kt$"Personalizing suggestions..."</ID>
    <ID>MaxLineLength:OutcomeSuggestionsFragment.kt$"test"</ID>
    <ID>MaxLineLength:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"activityId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"campaignId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"moduleId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:OutcomeSuggestionsUseCaseTest.kt$OutcomeSuggestionsUseCaseTest$"test"</ID>
    <ID>MaxLineLength:OutcomesSuggestionsViewModelTest.kt$OutcomesSuggestionsViewModelTest$"test"</ID>
    <ID>MaxLineLength:PCHMapleChatViewModelTest.kt$MapleChatViewModelTest$private fun mockChatProviderResponse()</ID>
    <ID>MaxLineLength:PCHealthAuthenticator.kt$PCHealthAuthenticator$"device_authentication_enabled" to privacyLockUtils.isDeviceSecurityEnabled.toString()</ID>
    <ID>MaxLineLength:PCHealthAuthenticatorTest.kt$PCHealthAuthenticatorTest$private</ID>
    <ID>MaxLineLength:PCHealthLoggingConfigFlags.kt$PCHealthLoggingConfigFlags$description = "Filters out remote logs based on severity. Possible values are DEFAULT,DEBUG,INFO,NOTICE,WARNING,ERROR,CRITICAL,ALERT,EMERGENCY "</ID>
    <ID>MaxLineLength:PCHealthReadingsController.kt$PCHealthReadingsController$descriptionText(this@PCHealthReadingsController.stringProvider.getString(R.string.ws_registered_nurse_description).italicize(this@PCHealthReadingsController.stringProvider.getString(R.string.ws_pc_health)))</ID>
    <ID>MaxLineLength:PCHealthReadingsController.kt$PCHealthReadingsController$state(if (insightCard.hasInsight) InsightsBanner.InsightBannerState.INSIGHT else InsightsBanner.InsightBannerState.EMPTY)</ID>
    <ID>MaxLineLength:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$text = stringResource(R.string.ws_info_card_title).italicizeAnnotatedString(stringResource(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$text = stringResource(R.string.ws_more_Info_connect_title).italicizeAnnotatedString(stringResource(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$text = stringResource(R.string.ws_more_info_connect_desc).italicizeAnnotatedString(stringResource(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$text = stringResource(R.string.ws_more_info_desc_two).italicizeAnnotatedString(stringResource(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$text = stringResource(R.string.ws_more_info_pch_Desc).italicizeAnnotatedString(stringResource(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$text = stringResource(R.string.ws_readings_screen_title).italicizeAnnotatedString(stringResource(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment$analyticsTracker.trackConnectionClick(ADD_A_GUEST_SESSION_READING, WellnessStationsAnalytics.User.USER)</ID>
    <ID>MaxLineLength:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment$analyticsTracker.trackConnectionClick(CONNECT_AT_A_PC_HEALTH_STATION, WellnessStationsAnalytics.User.PCH_USER)</ID>
    <ID>MaxLineLength:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment$findNavControllerSafely()?.navigate(PCHealthStationReadingsFragmentDirections.actionPCHealthStationReadingsFragmentToPCHealthStationMoreInfoFragment())</ID>
    <ID>MaxLineLength:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment$if</ID>
    <ID>MaxLineLength:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment$setPrimaryButtonText(context.getString(R.string.ws_connect_to_ws).italicize(context.getString(R.string.ws_pc_health)))</ID>
    <ID>MaxLineLength:PageWithTabActivity.kt$PageWithTabActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, typedValue.resourceId, typedValue.resourceId))</ID>
    <ID>MaxLineLength:PageWithTabController.kt$PageWithTabController$val tier1 = LiveBalanceTier(title = "Family deductible", amountSpent = "$307.34", amount = "of $3000 limit", amountRemaining = "$2692 left")</ID>
    <ID>MaxLineLength:PageWithTabController.kt$PageWithTabController$val tier2 = LiveBalanceTier(title = "Family deductible", amountSpent = "$100", amount = "of $1000 limit", amountRemaining = "$900 left")</ID>
    <ID>MaxLineLength:PcoAPIInterceptor.kt$TokenAuthenticator$"TokenAuthenticator.authenticate(), a previous request to authenticate with the same authToken was already successful. Skipping authentication."</ID>
    <ID>MaxLineLength:PcoInfoFragment.kt$PcoInfoFragment$val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.roadrunner_get_help_url)))</ID>
    <ID>MaxLineLength:PcoSignUpActivity.kt$PcoSignUpActivity.Companion$const val LOAD_URL = "https://www.pcoptimum.ca/?utm_source=league&amp;utm_medium=partnerships&amp;utm_campaign=evergreen"</ID>
    <ID>MaxLineLength:PcoSignUpPromptFragment.kt$PcoSignUpPromptFragment$analyticsTracker.trackStartPcoSignUp(getString(R.string.roadrunner_signup_pc_optimum), PcoSignUpActivity.LOAD_URL)</ID>
    <ID>MaxLineLength:PointsIndicator.kt$PointsIndicator$status = Status.values()[attrs.getInteger(R.styleable.PointsIndicator_status, Status.LIGHT.ordinal)]</ID>
    <ID>MaxLineLength:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"practitioner_id\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"practitioner_id\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"practitioner_id\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"agent_type_description\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:PreChatFormViewModelTest.kt$PreChatFormViewModelTest$viewModel.validateFormDetails("Hey, This is teat message. I need to talk to again regarding covid 19 vaccine.", null)</ID>
    <ID>MaxLineLength:PrescriptionDetailsScreen.kt$primaryButtonText</ID>
    <ID>MaxLineLength:PrivacyLockPermissionActivity.kt$PrivacyLockPermissionActivity$(privacyLockUtils.getTimesActivationPromptShown(it) >= PrivacyLockUtils.MAX_TIMES_TO_ASK_FOR_PRIVACY_LOCK - 1)</ID>
    <ID>MaxLineLength:PrivacyLockUtils.kt$PrivacyLockUtils$.</ID>
    <ID>MaxLineLength:PrivacyLockUtilsTest.kt$PrivacyLockUtilsTest$biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_WEAK or BiometricManager.Authenticators.DEVICE_CREDENTIAL)</ID>
    <ID>MaxLineLength:ProgramLibraryChallenges.kt$internal fun String?.orThrow(): String</ID>
    <ID>MaxLineLength:QRCodeScanner.kt$QrCodeImageAnalyzer$if</ID>
    <ID>MaxLineLength:QRCodeScannerUseCaseTest.kt$QRCodeScannerUseCaseTest$every { repository.getWellnessStationAddedReadings(any(), any()) } returns flowOf(Failure("Unable to Fetch claim code"))</ID>
    <ID>MaxLineLength:Question.kt$Question$return</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(0, 6, R.attr.color_fill_multi_progress_bar_senary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(2, 2, R.attr.color_fill_multi_progress_bar_secondary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(3, 3, R.attr.color_fill_multi_progress_bar_quaternary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(3, 3, R.attr.color_fill_multi_progress_bar_tertiary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(4, 6, R.attr.color_fill_multi_progress_bar_senary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(5, 5, R.attr.color_fill_multi_progress_bar_primary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$MultiProgressBar.Progress(6, 6, R.attr.color_fill_multi_progress_bar_quinary, MultiProgressBar.COLOR_VAL_TYPE_ATTR)</ID>
    <ID>MaxLineLength:QuestionActivity.kt$QuestionActivity$binding.recyclerView.setControllerAndBuildModels(QuestionController(ContextCompat.getDrawable(this, R.drawable.bg_sample_1), listOf()))</ID>
    <ID>MaxLineLength:QuestionController.kt$QuestionController$.</ID>
    <ID>MaxLineLength:RatingUtils.kt$RatingUtils$private const val KEY_NUM_HEALTH_JOURNEY_ACTIVITIES_COMPLETED = "life.league.preferences.keys.rating.number.health.goals.completed"</ID>
    <ID>MaxLineLength:ReadingsController.kt$ReadingsController$if</ID>
    <ID>MaxLineLength:ReadingsController.kt$ReadingsController$if (updatedSession == null) userReading?.sessions?.filter { it.id != sessionId } else userReading?.sessions?.map { if (it.id != sessionId) it else updatedSession }</ID>
    <ID>MaxLineLength:ReadingsController.kt$ReadingsController$return "$formattedHour · $source".italicize(this@ReadingsController.stringProvider.getString(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:ReadingsController.kt$ReadingsController$this@ReadingsController.userReading?.sessions?.find { it.id == sessionReading.id }?.readings?.filter { it.readingId != reading.readingId }</ID>
    <ID>MaxLineLength:ReadingsFragment.kt$ReadingsFragment$private val binding: FragmentReadingDetailsBinding by viewBinding { FragmentReadingDetailsBinding.inflate(layoutInflater) }</ID>
    <ID>MaxLineLength:ReadingsImportFragmentArgs.kt$ReadingsImportFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"claimCode\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:RecentAchievementUseCaseTest.kt$RecentAchievementUseCaseTest$val response = flowOf(Success(RecentAchievementsResponse(recentAchievements = AchievementCompletionTestData.getCompletedStreaks())))</ID>
    <ID>MaxLineLength:RedeemRewardActivity.kt$RedeemRewardActivity$*</ID>
    <ID>MaxLineLength:RedeemRewardActivity.kt$RedeemRewardActivity$binding.pointsHeader.redeemableValue.text = String.format(getString(R.string.app_amount_dollar), redeemableAmount.toString()).formatCurrency(currency)</ID>
    <ID>MaxLineLength:RelationshipSelectionUseCaseTests.kt$RelationshipSelectionUseCaseTests$PatientRelationship.SELF -> throw IllegalArgumentException("Self should not be returned when selection a patient relationship")</ID>
    <ID>MaxLineLength:RemoteImage.kt$RemoteImage(url = "https://www.google.ca/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png", contentDescription = "Description", placeHolder = painterResource(id = R.drawable.avatar_placeholder))</ID>
    <ID>MaxLineLength:RemoteImage.kt$RemoteImageContent(imageContentId = "", contentDescription = "Description", placeHolder = painterResource(id = R.drawable.avatar_placeholder))</ID>
    <ID>MaxLineLength:RemoveReadingUseCaseTest.kt$RemoveReadingUseCaseTest$every { repository.removeWellnessStationReadings(any(), any()) } returns flowOf(Failure("Unable to Fetch claim code"))</ID>
    <ID>MaxLineLength:RemoveReadingUseCaseTest.kt$RemoveReadingUseCaseTest$private val response = DeletedReadingResponse(listOf(DeletedReading("", "reading0", true), DeletedReading("", "reading1", true)))</ID>
    <ID>MaxLineLength:RemoveReadingUseCaseTest.kt$RemoveReadingUseCaseTest$private val responseFailed = DeletedReadingResponse(listOf(DeletedReading("", "reading0", false), DeletedReading("", "reading1", true)))</ID>
    <ID>MaxLineLength:RemoveReadingsController.kt$RemoveReadingsController$class</ID>
    <ID>MaxLineLength:RemoveReadingsController.kt$RemoveReadingsController$return "$formattedHour · $source".italicize(this@RemoveReadingsController.stringProvider.getString(R.string.ws_pc_health))</ID>
    <ID>MaxLineLength:Repository_Lifemarket.kt$fun</ID>
    <ID>MaxLineLength:Repository_Lifemarket.kt$return id.let { cache.getDao&lt;LifemarketMerchListDao>(LifemarketMerchListTable::class.java)?.getLifemarketMerchListWithId(id)?.lifemarketMerchList }</ID>
    <ID>MaxLineLength:RequestCallbackFlow.kt$*</ID>
    <ID>MaxLineLength:RequestCallbackFlowKtTest.kt$RequestCallbackFlowKtTest$fun</ID>
    <ID>MaxLineLength:RewardUseCase.kt$RewardUseCase$*</ID>
    <ID>MaxLineLength:RewardUseCase.kt$RewardUseCase$else -> Loaded(data = extractRewardDetails(leagueBalanceResponse = leagueBalanceResponse, rewardLevelsResponse = rewardLevelsResponse))</ID>
    <ID>MaxLineLength:RewardUseCase.kt$RewardUseCase$fun</ID>
    <ID>MaxLineLength:RewardUseCase.kt$RewardUseCase$leagueBalanceResponse == null || rewardLevelsResponse == null -> Failed(errorMessage = "Unable to Fetch Rewards")</ID>
    <ID>MaxLineLength:RewardUseCase.kt$RewardUseCase$private</ID>
    <ID>MaxLineLength:RewardUseCaseTest.kt$RewardUseCaseTest$Reward(points = 25000, leagueCredit = Money(amountWithCoins = 1000, dollarAmount = 10, currency = "CAD"))</ID>
    <ID>MaxLineLength:RewardUseCaseTest.kt$RewardUseCaseTest$val leagueBalanceResponse = LeagueBalanceResponse(leaguePoints = 12500, leagueCredit = Money(amountWithCoins = 0, dollarAmount = 0, currency = "CAD"), canRedeem = true)</ID>
    <ID>MaxLineLength:RewardUseCaseTest.kt$RewardUseCaseTest$val leagueBalanceResponse = LeagueBalanceResponse(leaguePoints = 50000, leagueCredit = Money(amountWithCoins = 1000, dollarAmount = 10, currency = "CAD"), canRedeem = true)</ID>
    <ID>MaxLineLength:RewardUseCaseTest.kt$RewardUseCaseTest$val leagueBalanceResponse = LeagueBalanceResponse(leaguePoints = 8000, leagueCredit = Money(amountWithCoins = 0, dollarAmount = 0, currency = "CAD"), canRedeem = false)</ID>
    <ID>MaxLineLength:RewardViewModel.kt$RewardViewModel$*</ID>
    <ID>MaxLineLength:RewardsBalanceController.kt$RewardsBalanceController$onClick { _ -> this@RewardsBalanceController.navigation.onViewHealthPrograms(this@RewardsBalanceController.healthProgramsBody) }</ID>
    <ID>MaxLineLength:RichTextController.kt$RichTextController$"Base:&lt;br/>&lt;img src=\"https://mma.prnewswire.com/media/721935/League_Inc__Logo.jpg\"/>&lt;br/>&lt;br/>Width ($width) Specified:&lt;br/>&lt;img width=\"${width}\" src=\"https://mma.prnewswire.com/media/721935/League_Inc__Logo.jpg\" alt=\"URL Image\"/>&lt;br/>&lt;br/>Height ($height) Specified:&lt;br/>&lt;img height=\"${height}\" src=\"https://mma.prnewswire.com/media/721935/League_Inc__Logo.jpg\" alt=\"URL Image\"/>&lt;br/>&lt;br/>Width ($width) and Height ($height) Specified:&lt;br/>&lt;img width=\"${width}\" height=\"${height}\" src=\"https://mma.prnewswire.com/media/721935/League_Inc__Logo.jpg\" alt=\"URL Image\"/>"</ID>
    <ID>MaxLineLength:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker$HealthJourneyDeepLinker.HealthJourneyPaths.HealthJourney.HealthJourneyTab.Progress</ID>
    <ID>MaxLineLength:RowController.kt$RowController$.</ID>
    <ID>MaxLineLength:RowController.kt$RowController$this.bodyText("Body lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.")</ID>
    <ID>MaxLineLength:RowController.kt$RowController$this.bodyText("Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;b> Donec ac turpis orci. &lt;/b> &lt;br> https://covid-19.ontario.ca/self-assessment/ ")</ID>
    <ID>MaxLineLength:RowController.kt$RowController$this.headerText("Based on your employer’s policy, it looks like you can be cleared to enter the workplace today.")</ID>
    <ID>MaxLineLength:RowController.kt$RowController$this.headerText("Based on your employer’s policy, it looks like you will not be cleared to enter the workplace today.")</ID>
    <ID>MaxLineLength:RowController.kt$RowController$this.rightSubtitleText("Body lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")</ID>
    <ID>MaxLineLength:SelectCommonAppointmentDetailsUseCase.kt$SelectCommonAppointmentDetailsUseCase$AppointmentTimeslotDetails(UserText.Translatable(R.string.triage_appointment_summary_timeslot_virtual))</ID>
    <ID>MaxLineLength:SelectDateUseCase.kt$SelectDateUseCase$selectedDateChange = { selected -> state.tryEmit(response.first { it.date.dayOfYear == selected.dayOfYear &amp;&amp; it.date.year == selected.year }) }</ID>
    <ID>MaxLineLength:SelectPatientFragment.kt$text = stringResource(id = R.string.triage_add_patient_dependent_addition_disclaimer)</ID>
    <ID>MaxLineLength:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:SelectPatientUseCaseTests.kt$SelectPatientUseCaseTests$PatientRelationship.SELF -> assertEquals(UserText.Translatable(R.string.triage_select_patient_subtitle), it.name)</ID>
    <ID>MaxLineLength:SelectPharmacyRefillScreen.kt$iconPainterRes = painterResource(id = if (item.banner == Banner.LCL) R.drawable.ic_alarm_bell else R.drawable.ic_alert_diamond)</ID>
    <ID>MaxLineLength:SelectPrescriptionsScreen.kt$GenesisCheckbox(checked = prescriptionList.contains(item.id), onCheckedChange = { onSelectClick(item.id) })</ID>
    <ID>MaxLineLength:SelectPrescriptionsScreen.kt$GenesisRadioButton(selected = prescriptionList.contains(item.id), onClick = { onSelectClick(item.id) })</ID>
    <ID>MaxLineLength:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:SelectTimeslotFragment.kt$SelectTimeslotFragment$if (appointmentType == null) throw NullPointerException("ServiceBookingSelections.appointmentType cannot be null")</ID>
    <ID>MaxLineLength:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:ServiceIntakeFormViewModel.kt$ServiceIntakeFormViewModel$needsPrescription = options.options.containsKey(R.string.triage_intake_form_prescription_required)</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$findNavControllerSafely(binding.settingsNavHostFragment.id)</ID>
    <ID>MaxLineLength:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$// .setConfirmButton(getString(R.string.roadrunner_discard_changes), onConfirmClickListener = {</ID>
    <ID>MaxLineLength:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$SettingsPersonalInfoFragmentDirections.navigateToChangeNumber(title = getString(R.string.roadrunner_change_phone_number))</ID>
    <ID>MaxLineLength:ShadowScrollView.kt$ShadowScrollView$val imageLayoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, context.dpToPx(8f).toInt())</ID>
    <ID>MaxLineLength:ShadowScrollView.kt$ShadowScrollView$val thisLayoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)</ID>
    <ID>MaxLineLength:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog$class</ID>
    <ID>MaxLineLength:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$private</ID>
    <ID>MaxLineLength:SpannableStringCreator.kt$SpannableStringCreator$fun appendLnNotBlank(newText: CharSequence, spans: Iterable&lt;Any>)</ID>
    <ID>MaxLineLength:SpannableStringCreator.kt$SpannableStringCreator$inline fun applyIf(predicate: () -> Boolean, action: SpannableStringCreator.() -> SpannableStringCreator)</ID>
    <ID>MaxLineLength:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"selected_province\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$throw IllegalArgumentException("Argument \"selected_province\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"selected_province\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"specialtyId\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion$// as we are added custom content description we need ot make sure that the content descriptions are back to normal after deselection</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion$else</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion$option.contentDescription = context.getString(R.string.genesis_selected).format(context.getString(R.string.genesis_two_sentence_pause).format(option.item?.text, option.item?.description))</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion$option.contentDescription = context.getString(R.string.genesis_two_sentence_pause).format(option.item?.text, option.item?.description)</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion$selectionMode = attrs.getInteger(R.styleable.StackSelectQuestion_selection_mode, SELECTION_MODE_SINGLE_SELECT)</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion$val</ID>
    <ID>MaxLineLength:StackSelectQuestion.kt$StackSelectQuestion.Option$data</ID>
    <ID>MaxLineLength:State.kt$State$@Deprecated(message = "This method encourages ignoring the observer pattern by making it easy for the view to query the data in the view model directly. In a view, state should be observed and cast into the correct state using a switch statement. This should only ever be used from within a view model.")</ID>
    <ID>MaxLineLength:StatusBanner.kt$StatusBanner$setDescriptionTextStyle(getInt(R.styleable.StatusBanner_description_style, Header.DESCRIPTION_STYLE_BODY1))</ID>
    <ID>MaxLineLength:StatusButtonActionRow.kt$StatusButtonActionRow$binding.actionRow.setMarginRes(SpacingAttrRes(R.attr.spacing_none, R.attr.spacing_none, R.attr.spacing_none, R.attr.spacing_none))</ID>
    <ID>MaxLineLength:StatusPageHeader.kt$StatusPageHeader$ButtonAction</ID>
    <ID>MaxLineLength:StickerActivity.kt$StickerActivity$binding.recyclerView.addItemDecoration(ListSpacingDecoration(this, R.attr.spacing_one_and_half, R.attr.spacing_one_and_half))</ID>
    <ID>MaxLineLength:StickerController.kt$StickerController$subtitleText("This policy period has expired, but today is your last day to submit past claims for this benefit")</ID>
    <ID>MaxLineLength:StickerController.kt$StickerController$subtitleText("This policy period has expired, but you have 120 days left to submit past claims for this benefit")</ID>
    <ID>MaxLineLength:StickerController.kt$StickerController$val str1 = SpannableStringBuilder("You can only submit claims with a purchase/ service date between Jan 1, 2019 - Dec 31, 2019 for this benefit. View your coverage details for more info")</ID>
    <ID>MaxLineLength:StickerController.kt$StickerController$val str2 = SpannableStringBuilder("You have until Mar 1, 2020 to submit past claims with a purchase/ service date on or before Dec 31, 2019.")</ID>
    <ID>MaxLineLength:StubbedData.kt$StubbedData.Companion$imageUrl = "https://cdn3.iconfinder.com/data/icons/user-interface-web-1/550/web-circle-circular-round_38-512.png"</ID>
    <ID>MaxLineLength:StubbedData.kt$StubbedData.Companion$statusHint = "This prescription has no refills remaining. Please contact your pharmacy for more options. Your Pharmacist may be able to renew your prescription after speaking with you. Professional fee may apply. Alternatively, your Pharmacy Team can contact the prescriber on your behalf. If you are aware that your prescriber does not accept refill requests from pharmacies over the phone or by fax, please contact them directly to arrange renewal."</ID>
    <ID>MaxLineLength:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$data.getSerializableExtra(SubmitClaimAddDocumentActivity.EXTRA_DOCUMENT_IMAGE_PATHS) as ArrayList&lt;String></ID>
    <ID>MaxLineLength:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$this@SubmitClaimReviewActivity</ID>
    <ID>MaxLineLength:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$}</ID>
    <ID>MaxLineLength:SuggestedActivitiesCard.kt$internal</ID>
    <ID>MaxLineLength:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>MaxLineLength:TagBanner.kt$TagBanner$binding.root.foreground = context.getDrawableFromAttr(android.R.attr.selectableItemBackground).takeIf { clickListener != null }</ID>
    <ID>MaxLineLength:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs.Companion$throw IllegalArgumentException("Argument \"service_booking_selections\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"service_booking_selections\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:TestModelJSONKt.kt$TestModelJSONKt$fun</ID>
    <ID>MaxLineLength:TextInputUseCaseTest.kt$TextInputUseCaseTest$fun</ID>
    <ID>MaxLineLength:TextQuestion.kt$TextQuestion$val content = context.getString(R.string.genesis_two_sentence_pause).format(binding.questionContainer.getHeaderText(), context.getString(R.string.genesis_enter_value))</ID>
    <ID>MaxLineLength:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"ctaText\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"description\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:TransactionHistoryController.kt$TransactionHistoryController$amountColour(if (transaction.type == TYPE_CREDIT || transaction.type == TYPE_MARKETPLACE_REFUND || transaction.type == TYPE_MARKETPLACE_CANCELLATION) R.attr.color_background_success_highlight else R.attr.color_text_primary)</ID>
    <ID>MaxLineLength:TransactionRow.kt$TransactionRow$TransactionType</ID>
    <ID>MaxLineLength:TriageApiService.kt$getTimeslots</ID>
    <ID>MaxLineLength:TriageConfiguration.kt$Triage$// Koin doesn't it when a koinApplications has their view models declared in separate koin modules</ID>
    <ID>MaxLineLength:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs.Companion$throw IllegalArgumentException("Argument \"current_province\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs.Companion$throw IllegalArgumentException("Argument \"current_province\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"current_province\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:TriageMenuController.kt$TriageMenuController$if (menuItem.id == "book_appointment") this@TriageMenuController.analyticsTracker.clickBookAppointment()</ID>
    <ID>MaxLineLength:TriageMenuFragment.kt$TriageMenuFragment$contentDescription = stringResource(R.string.triage_menu_appointments_content_description)</ID>
    <ID>MaxLineLength:TriageService.kt$TriageService$val getPractitioners: (SpecialtyId, ServiceId, AppointmentType, OrgId, Province, LocationId?, PatientId?) -> Flow&lt;Outcome&lt;List&lt;Practitioner>>></ID>
    <ID>MaxLineLength:TriageService.kt$TriageService$val getServices: (SpecialtyId, OrgId, AppointmentType, Province, LocationId?, PatientId?) -> Flow&lt;Outcome&lt;List&lt;Service>>></ID>
    <ID>MaxLineLength:TriageService.kt$TriageService$val getSpecialtyLocations: (SpecialtyId, Latitude, Longitude, Province, OrgId) -> Flow&lt;Outcome&lt;List&lt;SpecialtyLocation>>></ID>
    <ID>MaxLineLength:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"sub_menu\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:UserConfig.kt$UserConfig$@Json(name = "claims_assistant_skip_insurance_details_view") val claimsAssistantSkipInsuranceDetailsView: Boolean = false</ID>
    <ID>MaxLineLength:UserDependent.kt$UserDependent$set(addQualifyingLifeEventDate) = setValueForKey("add_qualifying_life_event_date", addQualifyingLifeEventDate.getShortDateString())</ID>
    <ID>MaxLineLength:UserDependent.kt$UserDependent$set(addQualifyingLifeEventReason) = setValueForKey("add_qualifying_life_event_reason", addQualifyingLifeEventReason)</ID>
    <ID>MaxLineLength:UserDependent.kt$UserDependent$set(nationalIdentificationNumber) = setValueForKey("national_identification_number", nationalIdentificationNumber)</ID>
    <ID>MaxLineLength:UserDependent.kt$UserDependent$set(omitNationalIdentificationNumber) = setValueForKey("omit_national_identification_number", omitNationalIdentificationNumber.toString())</ID>
    <ID>MaxLineLength:UserDependent.kt$UserDependent$set(partnershipEffectiveDate) = setValueForKey("partnership_effective_date", partnershipEffectiveDate.getShortDateString())</ID>
    <ID>MaxLineLength:UserDocument.kt$UserDocument.Companion$add(AbstractMap.SimpleEntry(TYPE_EVIDENCE_OF_INSURABILITY, context.getString(R.string.app_evidence_of_insurability)))</ID>
    <ID>MaxLineLength:UserDocument.kt$UserDocument.Companion$add(AbstractMap.SimpleEntry(TYPE_FOREIGN_CONTRACT_WORKER_QUESTIONNAIRE, context.getString(R.string.app_foreign_contract_worker_questionnaire)))</ID>
    <ID>MaxLineLength:UserInfo.kt$UserType.LCL -> if (this.isNewfoundlandLabrador) R.drawable.ic_lcl_dominion_pharmacies else R.drawable.ic_lcl_pharmacies</ID>
    <ID>MaxLineLength:UserInfo.kt$UserType.SDM_LCL -> if (this.isNewfoundlandLabrador) R.drawable.ic_all_dominion_pharmacies else R.drawable.ic_all_pharmacies</ID>
    <ID>MaxLineLength:UserProfile.kt$UserProfile$val `val` = if (address.isNull(addressKey)) null else address.optString(addressKey)</ID>
    <ID>MaxLineLength:VaccinationDetails.kt$this.firstOrNull { it.state == VaccineState.NOT_REGISTERED || it.state == VaccineState.REGISTRATION_SUBMITTED || it.state == VaccineState.REGISTERED }</ID>
    <ID>MaxLineLength:VaccinationDetailsTest.kt$VaccinationDetailsTest$fun</ID>
    <ID>MaxLineLength:VaccinationStatusDetailTest.kt$VaccinationStatusDetailTest.Companion$private val appointmentCanceledStatusDetail = StatusDetailResponse(VaccineState.APPOINTMENT_IN_PROGRESS, canceled = true)</ID>
    <ID>MaxLineLength:VaccinationStatusDetailTest.kt$VaccinationStatusDetailTest.Companion$private val appointmentCompletedStatusDetail = StatusDetailResponse(VaccineState.APPOINTMENT_IN_PROGRESS, completed = true)</ID>
    <ID>MaxLineLength:VaccineLandingActivity.kt$VaccineLandingActivity$private val navController by lazy { (supportFragmentManager.findFragmentById(R.id.vaccine_nav_host_fragment) as NavHostFragment).navController }</ID>
    <ID>MaxLineLength:VaccineLandingController.kt$VaccineLandingController$VaccineState.BOOKING_NOT_AVAILABLE -> stringProvider.getString(R.string.we_will_notify_you_when_you_can_book)</ID>
    <ID>MaxLineLength:VaccineLandingController.kt$VaccineLandingController$onClick { _ -> this@VaccineLandingController.listener.onInfoHubClick(R.string.covid_19_vaccine_info_hub_url) }</ID>
    <ID>MaxLineLength:VaccineLandingController.kt$VaccineLandingController$status</ID>
    <ID>MaxLineLength:VaccineLandingController.kt$VaccineLandingController$statusDetail.canceled == true -> stringProvider.getString(R.string.canceled_please_contact_the_pharmacy_to_re_book)</ID>
    <ID>MaxLineLength:VaccineLandingController.kt$VaccineLandingController$this@VaccineLandingController.stringProvider.getString(R.string.vaccine_registration_form_resubmission_cta)</ID>
    <ID>MaxLineLength:VaccineLandingFragment.kt$VaccineLandingFragment$setTitle(StringProvider(resources).getStringFromHtml(R.string.do_you_want_the_pc_health_app_to_autocomplete_your_form))</ID>
    <ID>MaxLineLength:VaccineLandingViewModelTest.kt$VaccineLandingViewModelTest$fun</ID>
    <ID>MaxLineLength:ValidicMockingUtils.kt$fun mockWearableDevices(device: DeviceType, isConnected: Boolean = false)</ID>
    <ID>MaxLineLength:ValueQuestion.kt$ValueQuestion$binding.inchesValue.contentDescription = context?.resources?.getString(R.string.genesis_enter_edit_box)?.format(unitText)</ID>
    <ID>MaxLineLength:ValueQuestion.kt$ValueQuestion$binding.value.contentDescription = context?.resources?.getString(R.string.genesis_enter_edit_box)?.format(feetText)</ID>
    <ID>MaxLineLength:ValueQuestion.kt$ValueQuestion$private fun getValueOptionWithTalkBack(unit: ValueUnit)</ID>
    <ID>MaxLineLength:ValueQuestion.kt$ValueQuestion$val content = context.getString(R.string.genesis_two_sentence_pause).format(binding.questionContainer.getHeaderText(), context.getString(R.string.genesis_enter_value))</ID>
    <ID>MaxLineLength:ValueQuestion.kt$ValueQuestion$val unitText = MeasureUnit.getTalkBackText(unit.value)?.let { reference -> context?.resources?.getString(reference) }</ID>
    <ID>MaxLineLength:ValueQuestion.kt$ValueQuestion$}</ID>
    <ID>MaxLineLength:ViewBindingProperty.kt$fun &lt;T : ViewBinding> viewBinding(createBinding: () -> T): ReadOnlyProperty&lt;Fragment, T></ID>
    <ID>MaxLineLength:ViewExtension.kt$fun</ID>
    <ID>MaxLineLength:WalletCardDetailController.kt$WalletCardDetailController$analyticsTracker.trackDebugEvent("Expected not null but null endDate: $endDate - grace period end date: $graceEndDate")</ID>
    <ID>MaxLineLength:WalletCardDetailController.kt$WalletCardDetailController$if (this@WalletCardDetailController.cardName.isNotBlank()) this@WalletCardDetailController.cardName else it.card.productType</ID>
    <ID>MaxLineLength:WalletCardDetailController.kt$WalletCardDetailController$openDeductibleTooltip = { this@WalletCardDetailController.uiListener.openDeductibleTooltip() }</ID>
    <ID>MaxLineLength:WalletCardDetailController.kt$WalletCardDetailController$openOutOfPocketTooltip = { this@WalletCardDetailController.uiListener.openOutOfPocketTooltip() }</ID>
    <ID>MaxLineLength:WalletCategoriesController.kt$WalletCategoriesController$.</ID>
    <ID>MaxLineLength:WalletCategoriesController.kt$WalletCategoriesController$this@WalletCategoriesController.data.activeBenefits.isNotEmpty() -> this@WalletCategoriesController.data.activeBenefits</ID>
    <ID>MaxLineLength:WalletCategoriesController.kt$WalletCategoriesController$this@WalletCategoriesController.data.pendingBenefits.isNotEmpty() -> this@WalletCategoriesController.data.pendingBenefits</ID>
    <ID>MaxLineLength:WalletConfiguration.kt$WalletNotInitializedExpection$Exception("Error, the Wallet module has not been initialized. Please call Wallet.initialize(...) in your application's Application.onCreate() method.")</ID>
    <ID>MaxLineLength:WalletIndividualLiveBalanceController.kt$WalletIndividualLiveBalanceController$openDeductibleTooltip = { this@WalletIndividualLiveBalanceController.uiListener.deductibleTooltipClicked() }</ID>
    <ID>MaxLineLength:WalletIndividualLiveBalanceController.kt$WalletIndividualLiveBalanceController$openOutOfPocketTooltip = { this@WalletIndividualLiveBalanceController.uiListener.outOfPocketTooltipClicked() }</ID>
    <ID>MaxLineLength:WarningBanner.kt$body = "We’re not receiving Steps data from any of your connected devices. Tap one of the devices below to resolve this issue."</ID>
    <ID>MaxLineLength:WarningBanner.kt$colors = ButtonDefaults.outlinedButtonColors(backgroundColor = GenesisTheme.colors.backgroundWarning, contentColor = GenesisTheme.colors.textLabel)</ID>
    <ID>MaxLineLength:WearableConfiguration.kt$Wearable$// Koin doesn't it when a koinApplications has their view models declared in separate koin modules</ID>
    <ID>MaxLineLength:WearableConfiguration.kt$WearablesNotInitializedExpection$Exception("Error, the Wearables module has not been initialized. Please call Wearables.initialize(...) in your application's Application.onCreate() method.")</ID>
    <ID>MaxLineLength:WearableConfigurationTest.kt$WearableConfigurationTest$assert(Wearable.configuration.theme.strings.connectAppsAndDevicesDescription == R.string.wearable_apps_and_devices)</ID>
    <ID>MaxLineLength:WearableConsentPrimerFragment.kt$WearableConsentPrimerFragment$title = String.format(getString(R.string.wearable_primer_title), getString(getDeviceDisplayNameStringRes(wearableDevice.type)))</ID>
    <ID>MaxLineLength:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs.Companion$throw IllegalArgumentException("Argument \"wearableDevice\" is marked as non-null but was passed a null value")</ID>
    <ID>MaxLineLength:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs.Companion$throw IllegalArgumentException("Argument \"wearableDevice\" is marked as non-null but was passed a null value.")</ID>
    <ID>MaxLineLength:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"wearableDevice\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:WearableFeatureFlag.kt$WearableFeatureFlag$description = "Shows new views related to Wearable Flow. To be deleted once this feature is ready to be released to all users."</ID>
    <ID>MaxLineLength:WearableGenericConsentFragment.kt$WearableGenericConsentFragment$scaffoldState.snackbarHostState.showSnackbar(getString(R.string.wearable_consent_not_given_error))</ID>
    <ID>MaxLineLength:WearableServiceTest.kt$WearableServiceTest$fun</ID>
    <ID>MaxLineLength:WebBrowserActivity.kt$WebBrowserActivity$// Not currently using genesis toolbar because the genesis toolbar doesn't currently support more than one button on the top right</ID>
    <ID>MaxLineLength:WebBrowserFragment.kt$WebBrowserFragment$" window.location.href = \"https://"</ID>
    <ID>MaxLineLength:WebBrowserFragment.kt$WebBrowserFragment$// This function is used to display Chat CSAT Surveys and will be used on DependentsActivity when we migrate the browser from League app</ID>
    <ID>MaxLineLength:WebBrowserFragmentArgs.kt$WebBrowserFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"extra_url\" is missing and does not have an android:defaultValue")</ID>
    <ID>MaxLineLength:WebSettingsExtension_removeWebViewValuesFromUserAgentTests.kt$WebSettingsExtension_removeWebViewValuesFromUserAgentTests.Companion$private const val CHROME_USER_AGENT = "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.65 Mobile Safari/537.36"</ID>
    <ID>MaxLineLength:WebSettingsExtension_removeWebViewValuesFromUserAgentTests.kt$WebSettingsExtension_removeWebViewValuesFromUserAgentTests.Companion$private const val KITKAT_LOLLIPOP_WEBVIEW_USER_AGENT = "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36"</ID>
    <ID>MaxLineLength:WebSettingsExtension_removeWebViewValuesFromUserAgentTests.kt$WebSettingsExtension_removeWebViewValuesFromUserAgentTests.Companion$private const val LATEST_WEBVIEW_USER_AGENT = "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36"</ID>
    <ID>MaxLineLength:WelcomeNewUserScreen.kt$text</ID>
    <ID>MaxLineLength:WellnessStationAPI.kt$WellnessStationAPI.GetAddedReadings$data</ID>
    <ID>MaxLineLength:WellnessStationAPI.kt$WellnessStationAPI.GetClaimCode$data</ID>
    <ID>MaxLineLength:WellnessStationAPI.kt$WellnessStationAPI.RemoveReadings$data</ID>
    <ID>MaxLineLength:WellnessStationConfig.kt$WellnessStationNotInitializedException$Exception("Error, the WellnessStation module has not been initialized. Please call WellnessStation.initialize(...) in your application's Application.onCreate() method.")</ID>
    <ID>MaxLineLength:WellnessStationPolicy.kt$WellnessStationPolicy$val policyName = if (Locale.getDefault().language.contentEquals("fr") == true) CLAIM_CODE_POLICY_NAME_FR else CLAIM_CODE_POLICY_NAME_EN</ID>
    <ID>MaxLineLength:WellnessStationPolicy.kt$WellnessStationPolicy$val policyName = if (Locale.getDefault().language.contentEquals("fr") == true) QR_CODE_POLICY_NAME_FR else QR_CODE_POLICY_NAME_EN</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING = "Health Station Reading Details- %s-Confirm Remove Reading"</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING = "Health Station Reading Details- %s-Confirm Remove Reading"</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$fun</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(HEALTH_STATION_CONNECTION_SCAN_QR_CODE, CONFIRM_QR_CODE_SCAN, WellnessStationsAnalytics.Labels.IVE_SCANNED_THE_CODE, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS.format(highlightCode), READ_INFO_GUIDELINES, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS.format(highlightCode), SELECT_NAVIGATION_TAB, label = label, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING.format(highlightCode), CANCEL_REMOVAL, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING.format(highlightCode), CONFIRM_REMOVAL, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS_HIGHLIGHTS_TAB.format(highlightCode, tabName), COMPLETED_READINGS_REMOVAL, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS_HIGHLIGHTS_TAB.format(highlightCode, tabName), EDIT_READINGS, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS_HIGHLIGHTS_TAB.format(highlightCode, tabName), REMOVE_READINGS, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$trackEvent(WellnessStationsAnalytics.Categories.HEALTH_STATION_READING_DETAILS_INFO_GUIDELINES.format(highlightCode), CLOSE_GUIDELINES, parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$viewScreen(WellnessStationsAnalytics.Pages.HEALTH_STATION_READING_DETAILS.format(highlightCode), parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$viewScreen(WellnessStationsAnalytics.Pages.HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING.format(highlightCode), parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsAnalytics.kt$viewScreen(WellnessStationsAnalytics.Pages.HEALTH_STATION_READING_DETAILS_INFO_GUIDELINES.format(highlightCode), parameters = parameters)</ID>
    <ID>MaxLineLength:WellnessStationsRepository.kt$WellnessStationsRepository$fun</ID>
    <ID>MaxLineLength:WellnessStationsRepository.kt$WellnessStationsRepository$messageRequest = WellnessStationAPI.RemoveReadings(readingIds = readingsToDelete, accessToken = accessToken)</ID>
    <ID>MaxLineLength:WipFragmentArgs.kt$WipFragmentArgs.Companion$throw IllegalArgumentException("Required argument \"title\" is missing and does not have an android:defaultValue")</ID>
    <ID>MayBeConst:HealthProgramLibraryFragment.kt$private val cardWidthRatio = 2f / 3f</ID>
    <ID>MayBeConst:LeagueCreditCard.kt$LeagueCreditCard.Companion$private val DEFAULT_AMOUNT = "$0.00"</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiArray = """{ "data": [{ "type": "article", "id": "1", "attributes": { "title": "JSON:API paints my bikeshed!" }, "links": { "self": "http://example.com/articles/1" }, "relationships": { "author": { "links": { "self": "http://example.com/articles/1/relationships/author", "related": "http://example.com/articles/1/author" }, "data": { "type": "people", "id": "9" } }, "comments": { "links": { "self": "http://example.com/articles/1/relationships/comments", "related": "http://example.com/articles/1/comments" }, "data": [ { "type": "comment", "id": "5" }, { "type": "comment", "id": "12" } ] }, "publisher": { "links": { "self": "http://example.com/articles/1/relationships/author", "related": "http://example.com/articles/1/author" }, "data": { "type": "publisher", "id": "9" } } } }], "included": [{ "type": "people", "id": "9", "attributes": { "first-name": "Dan", "last-name": "Gebhardt", "twitter": "dgeb" }, "links": { "self": "http://example.com/people/9" } }, { "type": "comment", "id": "5", "attributes": { "body": "First!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } }, "links": { "self": "http://example.com/comments/5" } }, { "type": "comment", "id": "12", "attributes": { "body": "I like XML better" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } }, "links": { "self": "http://example.com/comments/12" } }] }"""</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiArrayNoLinks = """{ "data": [{ "type": "article", "id": "1", "attributes": { "title": "JSON:API paints my bikeshed!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } }, "comments": { "data": [ { "type": "comment", "id": "5" }, { "type": "comment", "id": "12" } ] }, "publisher": { "data": { "type": "publisher", "id": "9" } } } }], "included": [{ "type": "people", "id": "9", "attributes": { "first-name": "Dan", "last-name": "Gebhardt", "twitter": "dgeb" } }, { "type": "comment", "id": "5", "attributes": { "body": "First!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } } }, { "type": "comment", "id": "12", "attributes": { "body": "I like XML better" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } } }] }"""</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiErrors = """{ "errors": [{ "id": "8c0f0cef-7141-4da4-ad4a-8bbfff2a81a6", "status": 500, "title": "Error Title", "detail": "Error details go here.", "meta": { "timestamp": "2015-07-23T07:04:32.987Z", "path": "/foo/b", "trace": [ "pf_common_api (2.0.4) lib/pf_common_api/errors/helpers.rb:22:in `render_error'", "lib/compressed_requests_middleware.rb:23:in `call'" ] } }] }"""</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiMeta = """{ "meta" : { "meta_field" : "value" }, "links" : { "self" : "self", "prev" : "prev", "next" : "next", "first" : "first", "last" : "last" }, "jsonapi" : { "version" : "2.0" }, "data": { "type": "article", "id": "1", "attributes": { "title": "JSON:API paints my bikeshed!" }, "links": { "self": "http://example.com/articles/1" }, "relationships": { "author": { "links": { "self": "http://example.com/articles/1/relationships/author", "related": "http://example.com/articles/1/author" }, "data": { "type": "people", "id": "9" } }, "comments": { "links": { "self": "http://example.com/articles/1/relationships/comments", "related": "http://example.com/articles/1/comments" }, "data": [ { "type": "comment", "id": "5" }, { "type": "comment", "id": "12" } ] }, "publisher": { "links": { "self": "http://example.com/articles/1/relationships/author", "related": "http://example.com/articles/1/author" }, "data": { "type": "publisher", "id": "9" } } } }, "included": [{ "type": "people", "id": "9", "attributes": { "first-name": "Dan", "last-name": "Gebhardt", "twitter": "dgeb" }, "links": { "self": "http://example.com/people/9" } }, { "type": "comment", "id": "5", "attributes": { "body": "First!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } }, "links": { "self": "http://example.com/comments/5" } }, { "type": "comment", "id": "12", "attributes": { "body": "I like XML better" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } }, "links": { "self": "http://example.com/comments/12" } }] }"""</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiSingleObject = """{ "data": { "type": "article", "id": "1", "attributes": { "title": "JSON:API paints my bikeshed!" }, "links": { "self": "http://example.com/articles/1" }, "relationships": { "author": { "links": { "self": "http://example.com/articles/1/relationships/author", "related": "http://example.com/articles/1/author" }, "data": { "type": "people", "id": "9" } }, "comments": { "links": { "self": "http://example.com/articles/1/relationships/comments", "related": "http://example.com/articles/1/comments" }, "data": [ { "type": "comment", "id": "5" }, { "type": "comment", "id": "12" } ] }, "publisher": { "links": { "self": "http://example.com/articles/1/relationships/author", "related": "http://example.com/articles/1/author" }, "data": { "type": "publisher", "id": "9" } } } }, "included": [{ "type": "people", "id": "9", "attributes": { "first-name": "Dan", "last-name": "Gebhardt", "twitter": "dgeb" }, "links": { "self": "http://example.com/people/9" } }, { "type": "comment", "id": "5", "attributes": { "body": "First!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } }, "links": { "self": "http://example.com/comments/5" } }, { "type": "comment", "id": "12", "attributes": { "body": "I like XML better" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } }, "links": { "self": "http://example.com/comments/12" } }] }"""</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiSingleObjectNoLinks = """{ "data": { "type": "article", "id": "1", "attributes": { "title": "JSON:API paints my bikeshed!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } }, "comments": { "data": [ { "type": "comment", "id": "5" }, { "type": "comment", "id": "12" } ] }, "publisher": { "data": { "type": "publisher", "id": "9" } } } }, "included": [{ "type": "people", "id": "9", "attributes": { "first-name": "Dan", "last-name": "Gebhardt", "twitter": "dgeb" } }, { "type": "comment", "id": "5", "attributes": { "body": "First!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } } }, { "type": "comment", "id": "12", "attributes": { "body": "I like XML better" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } } }] }"""</ID>
    <ID>MayBeConst:MoshiJsonApiAdapterTest.kt$val testJsonApiSingleObjectNoLinksWithMeta = """{ "meta" : { "meta_field" : "value" }, "data": { "type": "article", "id": "1", "attributes": { "title": "JSON:API paints my bikeshed!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } }, "comments": { "data": [ { "type": "comment", "id": "5" }, { "type": "comment", "id": "12" } ] }, "publisher": { "data": { "type": "publisher", "id": "9" } } } }, "included": [{ "type": "people", "id": "9", "attributes": { "first-name": "Dan", "last-name": "Gebhardt", "twitter": "dgeb" } }, { "type": "comment", "id": "5", "attributes": { "body": "First!" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } } }, { "type": "comment", "id": "12", "attributes": { "body": "I like XML better" }, "relationships": { "author": { "data": { "type": "people", "id": "9" } } } }] }"""</ID>
    <ID>MemberNameEqualsClassName:MapleUtils.kt$MapleUtils.DeviceSignature$val deviceSignature = ( "$carrier$ipAddress$totalDiskCapacity$userAgent" .removeWhitespaces() .lowercase(Locale.ROOT) ).sha256()</ID>
    <ID>MemberNameEqualsClassName:WebSocket.kt$WebSocket$/** * The actual web socket object that connects to the backend */ private var webSocket: com.neovisionaries.ws.client.WebSocket? = null</ID>
    <ID>NestedBlockDepth:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$private fun nextQuestion()</ID>
    <ID>NestedBlockDepth:DateExtension.kt$/* * Returns the maximum number of weeks in any of the months within a given range */ fun maxWeeksInRange(minDate: Date?, maxDate: Date?): Int</ID>
    <ID>NestedBlockDepth:DependentFormAdapter.kt$DependentFormAdapter$fun validateFields(): Boolean</ID>
    <ID>NestedBlockDepth:DependentFormAdapter.kt$DependentFormAdapter$private fun updateShownDynamicFields()</ID>
    <ID>NestedBlockDepth:DependentFormFragment.kt$DependentFormFragment$private fun setupEditDependentView()</ID>
    <ID>NestedBlockDepth:FindRegistrationFormDataTests.kt$FindRegistrationFormDataTests$@Test fun `buildStatusDetailList - loop over each status detail, assert non null when valid with proper fields`()</ID>
    <ID>NestedBlockDepth:HomeController.kt$HomeController$private fun buildArticleModels(id: String?)</ID>
    <ID>NestedBlockDepth:HomeController.kt$HomeController$private fun buildBannerModel(id: String?)</ID>
    <ID>NestedBlockDepth:JsonApiAdapter.kt$JsonApiAdapter$@Suppress("UNCHECKED_CAST") private fun constructRelationshipTraits( cls: KClass&lt;out Any>, obj: Any, includedObjectsTraits: MutableMap&lt;ResourceId, ObjectTraits> ): MutableList&lt;RelationshipElementTraits></ID>
    <ID>NestedBlockDepth:JsonApiAdapter.kt$JsonApiAdapter$private fun addRelationshipsToObject( jsonApiObject: JSONObject, flattenedObject: JSONObject, includedFlattenedResources: Map&lt;ResourceId, JSONObject> )</ID>
    <ID>NestedBlockDepth:LeagueDeepLinker.kt$LeagueDeepLinker$override fun navigateToDeepLink( context: Context, url: Uri, navController: NavController?, navOptions: NavOptions? ): Boolean</ID>
    <ID>NestedBlockDepth:LeagueNavigation.kt$LeagueNavigation$override fun navigateToDeeplink( activity: Activity, uri: Uri, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController?, navOptions: NavOptions? ): Boolean</ID>
    <ID>NestedBlockDepth:LiveAgentChatFragment.kt$LiveAgentChatFragment$private fun setupInputMessageView()</ID>
    <ID>NestedBlockDepth:LoginFragment.kt$LoginFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>NestedBlockDepth:RemoveDependentDialog.kt$RemoveDependentDialog$private fun getFieldsForRelationship( relationship: String?, removeDependentSchema: DependentRelationshipSchemaField? ): RealmList&lt;DependentRelationshipSchemaField>?</ID>
    <ID>NestedBlockDepth:Repository_Auth.kt$suspend fun UserRepository.authenticateLegacyConnection( api: API, sessionId: String?, deviceToken: String?, pushToken: String? = null ): Outcome&lt;UserFlags></ID>
    <ID>NestedBlockDepth:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker$override fun navigateToDeepLink( context: Context, url: Uri, navController: NavController?, navOptions: NavOptions? ): Boolean</ID>
    <ID>NestedBlockDepth:RootActivity.kt$RootActivity$@JvmOverloads fun onImageActivityResult( requestCode: Int, resultCode: Int, data: Intent?, handler: ImageHandler = this ): Boolean</ID>
    <ID>NestedBlockDepth:StackSelectQuestion.kt$StackSelectQuestion$private fun optionSelected(item: Option, option: OptionFillParent)</ID>
    <ID>NestedBlockDepth:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>NestedBlockDepth:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$private fun updateNote()</ID>
    <ID>NestedBlockDepth:TriageMenuController.kt$TriageMenuController$override fun buildModels()</ID>
    <ID>NewLineAtEndOfFile:Secrets.kt$YOUR_PACKAGE_GOES_HERE.Secrets.kt</ID>
    <ID>NewLineAtEndOfFile:Secrets.kt$com.loblaw.pchealth.Secrets.kt</ID>
    <ID>NewLineAtEndOfFile:Secrets.kt$life.league.Secrets.kt</ID>
    <ID>OutdatedDocumentation:API.kt$API : Listener</ID>
    <ID>OutdatedDocumentation:API_Claim.kt$ fun API.uploadClaim(claim: Claim, callback: RequestCallback&lt;ClaimSubmitted>)</ID>
    <ID>OutdatedDocumentation:API_Connection.kt$ fun API.reconnect()</ID>
    <ID>OutdatedDocumentation:API_Connection.kt$ internal fun API.updateWebSocketEndpoint(webSocketEndpoint: String)</ID>
    <ID>OutdatedDocumentation:API_Messages.kt$ private fun API.handleCommonMessageTypes( messageId: String, messageType: API.MessageType, info: JSONObject ): Boolean</ID>
    <ID>OutdatedDocumentation:API_Messages.kt$ private fun invokeCallback( messageType: String, json: JSONObject, trace: RemoteTrace?, log: Logger, jsonAdapter: JsonAdapter, callback: RequestCallback&lt;*> )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ fun API.sendAndReceiveData( json: JSONObject, requiresAuthentication: Boolean, callback: RequestCallback&lt;*> )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ fun API.sendAndReceiveData( json: JSONObject, responseMessageType: String? = null, requiresAuthentication: Boolean = true, callback: RequestCallback&lt;*> )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ fun API.sendData( jsonString: String, isSensitive: Boolean = false, queueOnDisconnect: Boolean = true, requiresAuthentication: Boolean = true )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ fun API.sendData( jsonString: String, requiresAuthentication: Boolean = true )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ inline fun &lt;reified T> API.sendAndReceiveCachedAndSocketData( json: JSONObject, responseMessageType: String? = null, requiresAuthentication: Boolean = true )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ inline fun &lt;reified T> API.sendAndReceiveFlowData( json: JSONObject, responseMessageType: String? = null, requiresAuthentication: Boolean = true )</ID>
    <ID>OutdatedDocumentation:API_SendData.kt$ suspend inline fun &lt;reified T> API.sendAndReceiveData( json: JSONObject, responseMessageType: String? = null, requiresAuthentication: Boolean = true ): Outcome&lt;T></ID>
    <ID>OutdatedDocumentation:AnalyticsTracker_HealthJourney.kt$ @Suppress("LongParameterList") private fun AnalyticsTracker.trackSelectedHealthJourneyActivity( activityType: String, activityName: String, activityId: String, isFotl: Boolean, activityStatus: String, /*Consider making this an enum*/ currentDate: Date, selectedDate: Date, healthCampaignActivityGoal: Int, healthCampaignActivityCurrentProgress: Int, healthCampaignType: String/*Consider making this an enum*/ )</ID>
    <ID>OutdatedDocumentation:Auth0Authenticator.kt$Auth0Authenticator$ suspend fun login(context: Context)</ID>
    <ID>OutdatedDocumentation:AuthInfo.kt$AuthInfo</ID>
    <ID>OutdatedDocumentation:Challenges.kt$Challenges$ @Suppress("LongParameterList") fun initialize( featureFlagsRepository: FeatureFlagsRepository, okHttpClient: OkHttpClient, drawables: ChallengesDrawables, userRepository: UserRepository, contentAPI: ContentAPI, wearablesService: ChallengesWearablesService )</ID>
    <ID>OutdatedDocumentation:CompletionMethod.kt$CompletionMethod$Base : CompletionMethod</ID>
    <ID>OutdatedDocumentation:CompletionMethod.kt$CompletionMethod$CounterMultiStep : CompletionMethod</ID>
    <ID>OutdatedDocumentation:CompletionMethod.kt$CompletionMethod$MultiStep : CompletionMethod</ID>
    <ID>OutdatedDocumentation:ContentAPI.kt$ContentAPI$ internal fun getContentSaveUrl(): String</ID>
    <ID>OutdatedDocumentation:ContentAPI_Upload.kt$ fun ContentAPI.uploadContent( imageFilePath: String, contentType: ContentAPI.ContentType? = null, callback: RequestCallback&lt;JSONObject> )</ID>
    <ID>OutdatedDocumentation:CoreConfigurationExtension.kt$ @OptIn(DelicateCoroutinesApi::class) private fun handleServerError( context: Context, authenticator: TokenSdkAuthenticator, serverError: ServerError )</ID>
    <ID>OutdatedDocumentation:CoreNavigation.kt$CoreNavigation$ fun handleNavigation( activity: Activity, navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null ): Boolean</ID>
    <ID>OutdatedDocumentation:CoreNavigation.kt$CoreNavigation$ fun navigateToDeeplink( activity: Activity, url: String, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null, navOptions: NavOptions? = null ): Boolean</ID>
    <ID>OutdatedDocumentation:CreateAppointmentEventsUseCase.kt$CreateAppointmentEventsUseCase</ID>
    <ID>OutdatedDocumentation:CurrencyUtil.kt$CurrencyUtil$ @JvmStatic fun formatCurrency( locale: Locale, amount: Double, currency: String ): String</ID>
    <ID>OutdatedDocumentation:FlowExtension.kt$ @ExperimentalCoroutinesApi inline fun &lt;T, R> Flow&lt;T>.flatMapState( crossinline transform: suspend (T) -> Flow&lt;Outcome&lt;R>> ): Flow&lt;State&lt;R>></ID>
    <ID>OutdatedDocumentation:FlowExtension.kt$ fun &lt;T> Flow&lt;Outcome&lt;T>>.failOnException(message: String)</ID>
    <ID>OutdatedDocumentation:FlowExtension.kt$ fun &lt;T> Flow&lt;Outcome&lt;T>>.onSuccess( action: suspend (T) -> Unit, )</ID>
    <ID>OutdatedDocumentation:FlowExtension.kt$ fun &lt;T> Flow&lt;T>.bindLifecycle(stateFlow: MutableStateFlow&lt;Boolean>)</ID>
    <ID>OutdatedDocumentation:GenderIdentity.kt$GenderIdentity</ID>
    <ID>OutdatedDocumentation:GenesisCalendarView.kt$ @Composable @ExperimentalGenesisCalendarApi @OptIn(ExperimentalPagerApi::class) fun GenesisCalendarView( modifier: Modifier = Modifier, calendarMonthModifier: Modifier = Modifier, minDate: Date, maxDate: Date, isSelected: (Date) -> Boolean, isEnabled: (Date) -> Boolean, dateSelected: (Date, Boolean) -> Unit, pagerState: PagerState = rememberPagerState(), )</ID>
    <ID>OutdatedDocumentation:GoalProgress.kt$MultiStepProgressPlusMinusListener$ fun onDecrementedValue(item: HealthJourneyItemDetail, newValue: Float)</ID>
    <ID>OutdatedDocumentation:GoalProgress.kt$MultiStepProgressPlusMinusListener$ fun onIncrementedValue(item: HealthJourneyItemDetail, newValue: Float)</ID>
    <ID>OutdatedDocumentation:HealthJourneyItemDetail.kt$Counter : Serializable</ID>
    <ID>OutdatedDocumentation:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$ActivityVerificationProgress</ID>
    <ID>OutdatedDocumentation:HealthJourneyItemScreen.kt$ @Composable fun ErrorText(errorText: String, modifier: Modifier = Modifier)</ID>
    <ID>OutdatedDocumentation:HealthProgramsProgressAchievementsFragment.kt$HealthProgramsProgressAchievementsFragment : FragmentHealthJourneyKoinComponent</ID>
    <ID>OutdatedDocumentation:JsonAdapter.kt$JsonAdapter$ fun &lt;T> fromLeagueApiJson(type: Class&lt;T>, jsonString: String): T?</ID>
    <ID>OutdatedDocumentation:JsonAdapter.kt$JsonAdapter$ fun &lt;T> fromStandardJson(type: Class&lt;T>, jsonString: String): T?</ID>
    <ID>OutdatedDocumentation:JsonAdapter.kt$JsonAdapter$ fun &lt;T> toJSONObject(type: Class&lt;T>, obj: T): JSONObject</ID>
    <ID>OutdatedDocumentation:JsonAdapter.kt$JsonAdapter$ fun &lt;T> toJson(type: Class&lt;T>, obj: T): String</ID>
    <ID>OutdatedDocumentation:LocaleTestRule.kt$LocaleTestRule : TestWatcher</ID>
    <ID>OutdatedDocumentation:PendingRequest.kt$PendingRequest</ID>
    <ID>OutdatedDocumentation:PricingExtensions.kt$ internal fun Pricing.formatServiceCost( ifZero: String? = null, ): String</ID>
    <ID>OutdatedDocumentation:Pronoun.kt$Pronoun</ID>
    <ID>OutdatedDocumentation:Province.kt$Province : Parcelable</ID>
    <ID>OutdatedDocumentation:ProvinceIE.kt$ProvinceIE</ID>
    <ID>OutdatedDocumentation:Repository_Notification.kt$ fun Repository.setNotificationRead(beforeDate: Date)</ID>
    <ID>OutdatedDocumentation:RequestCallback.kt$ inline fun &lt;reified T> requestCallback( executeOnBackgroundThread: Boolean = false, crossinline callback: Callback&lt;T> ): RequestCallback&lt;T></ID>
    <ID>OutdatedDocumentation:RequestCallback.kt$Failure : Outcome</ID>
    <ID>OutdatedDocumentation:RequestCallback.kt$RequestCallback$ fun handleParsingUsingJSONAdapter( jsonAdapter: JsonAdapter, jsonObject: JSONObject, logger: Logger )</ID>
    <ID>OutdatedDocumentation:RequestCallback.kt$RequestCallback$ open fun onJsonSuccess(jsonAdapter: JsonAdapter, jsonObject: JSONObject, logger: Logger)</ID>
    <ID>OutdatedDocumentation:RequestCallback.kt$RequestCallback&lt;T></ID>
    <ID>OutdatedDocumentation:RequestCallback.kt$Success&lt;out T> : Outcome</ID>
    <ID>OutdatedDocumentation:RewardViewModel.kt$RewardViewModel$ fun redeemRewards( redeemablePoints: Long, redeemableAmount: Int, currency: String )</ID>
    <ID>OutdatedDocumentation:RootActivity.kt$RootActivity$ open fun handleNavigation( navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController? ): Boolean</ID>
    <ID>OutdatedDocumentation:SessionUtils.kt$SessionUtils$ fun signOut(localContext: Context?, reason: SignOutReason, deeplink: Uri? = null)</ID>
    <ID>OutdatedDocumentation:States.kt$States</ID>
    <ID>OutdatedDocumentation:TextLeadingMarginSpan.kt$TextLeadingMarginSpan : LeadingMarginSpan</ID>
    <ID>OutdatedDocumentation:WebSocket.kt$WebSocket</ID>
    <ID>OutdatedDocumentation:WebSocket.kt$WebSocket$ fun sendData(jsonString: String?)</ID>
    <ID>PackageNaming:AutoRefillWarningBottomSheet.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:ContactCustomerSupportViewModel.kt$package life.league.digitalpharmacy.ui.contact_us</ID>
    <ID>PackageNaming:ContactUsDemo.kt$package life.league.digitalpharmacy.ui.contact_us</ID>
    <ID>PackageNaming:ContactUsFragment.kt$package life.league.digitalpharmacy.ui.contact_us</ID>
    <ID>PackageNaming:ContactUsFragmentArgs.kt$package life.league.digitalpharmacy.ui.contact_us</ID>
    <ID>PackageNaming:ContactUsFragmentDirections.kt$package life.league.digitalpharmacy.ui.contact_us</ID>
    <ID>PackageNaming:ContactUsScreen.kt$package life.league.digitalpharmacy.ui.contact_us</ID>
    <ID>PackageNaming:CreateProfileFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.create_profile</ID>
    <ID>PackageNaming:CreateProfileFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.create_profile</ID>
    <ID>PackageNaming:CreateProfileScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.create_profile</ID>
    <ID>PackageNaming:CreateProfileSuccessFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:CreateProfileSuccessFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:CreateProfileSuccessScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:CreateProfileViewModel.kt$package life.league.digitalpharmacy.ui._03_create_account.create_profile</ID>
    <ID>PackageNaming:CustomNavigationScreen.kt$package life.league.digitalpharmacy.ui._01_landing.landing</ID>
    <ID>PackageNaming:DashboardFragment.kt$package life.league.digitalpharmacy.ui._02_dashboard.dashboard</ID>
    <ID>PackageNaming:DashboardFragmentArgs.kt$package life.league.digitalpharmacy.ui._02_dashboard.dashboard</ID>
    <ID>PackageNaming:DashboardFragmentDirections.kt$package life.league.digitalpharmacy.ui._02_dashboard.dashboard</ID>
    <ID>PackageNaming:DashboardScreen.kt$package life.league.digitalpharmacy.ui._02_dashboard.dashboard</ID>
    <ID>PackageNaming:DashboardViewModel.kt$package life.league.digitalpharmacy.ui._02_dashboard.dashboard</ID>
    <ID>PackageNaming:EnableAutoRefillFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableAutoRefillFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableAutoRefillScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableNotificationFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableNotificationFragmentArgs.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableNotificationFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableNotificationScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:EnableNotificationViewModel.kt$package life.league.digitalpharmacy.ui._03_create_account.success</ID>
    <ID>PackageNaming:ErrorScreen.kt$package life.league.digitalpharmacy.ui._01_landing.landing</ID>
    <ID>PackageNaming:FindLocationWithRxAndStoreNumberFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindLocationWithRxAndStoreNumberFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindLocationWithRxAndStoreNumberScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindLocationWithRxAndStoreNumberViewModel.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindPharmacyFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindPharmacyFragmentArgs.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindPharmacyFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:FindPharmacyScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.find_pharmacy</ID>
    <ID>PackageNaming:LandingFragment.kt$package life.league.digitalpharmacy.ui._01_landing.landing</ID>
    <ID>PackageNaming:LandingFragmentDirections.kt$package life.league.digitalpharmacy.ui._01_landing.landing</ID>
    <ID>PackageNaming:LandingScreen.kt$package life.league.digitalpharmacy.ui._01_landing.landing</ID>
    <ID>PackageNaming:LandingViewModel.kt$package life.league.digitalpharmacy.ui._01_landing.landing</ID>
    <ID>PackageNaming:LearnMoreBottomSheetScreen.kt$package life.league.digitalpharmacy.ui._01_landing.welcome_new_user</ID>
    <ID>PackageNaming:LockedOutFragment.kt$package life.league.digitalpharmacy.ui.lockedout_state</ID>
    <ID>PackageNaming:LockedOutFragmentArgs.kt$package life.league.digitalpharmacy.ui.lockedout_state</ID>
    <ID>PackageNaming:LockedOutFragmentDirections.kt$package life.league.digitalpharmacy.ui.lockedout_state</ID>
    <ID>PackageNaming:LockedOutScreen.kt$package life.league.digitalpharmacy.ui.lockedout_state</ID>
    <ID>PackageNaming:MultiBannerSettingsFragment.kt$package life.league.digitalpharmacy.ui._04_settings.multibanner_settings</ID>
    <ID>PackageNaming:MultiBannerSettingsFragmentArgs.kt$package life.league.digitalpharmacy.ui._04_settings.multibanner_settings</ID>
    <ID>PackageNaming:MultiBannerSettingsFragmentDirections.kt$package life.league.digitalpharmacy.ui._04_settings.multibanner_settings</ID>
    <ID>PackageNaming:MultiBannerSettingsScreen.kt$package life.league.digitalpharmacy.ui._04_settings.multibanner_settings</ID>
    <ID>PackageNaming:PrescriptionDetailsFragment.kt$package life.league.digitalpharmacy.ui.prescription_details</ID>
    <ID>PackageNaming:PrescriptionDetailsFragmentDirections.kt$package life.league.digitalpharmacy.ui.prescription_details</ID>
    <ID>PackageNaming:PrescriptionDetailsScreen.kt$package life.league.digitalpharmacy.ui.prescription_details</ID>
    <ID>PackageNaming:PrescriptionDetailsViewModel.kt$package life.league.digitalpharmacy.ui.prescription_details</ID>
    <ID>PackageNaming:ProfileVerificationFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.verification</ID>
    <ID>PackageNaming:ProfileVerificationFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.verification</ID>
    <ID>PackageNaming:ProfileVerificationScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.verification</ID>
    <ID>PackageNaming:ProfileVerificationViewModel.kt$package life.league.digitalpharmacy.ui._03_create_account.verification</ID>
    <ID>PackageNaming:Secrets.kt$package YOUR_PACKAGE_GOES_HERE</ID>
    <ID>PackageNaming:SecurityQuestionBottomSheet.kt$package life.league.digitalpharmacy.ui._03_create_account.create_profile</ID>
    <ID>PackageNaming:SelectPharmacyFragment.kt$package life.league.digitalpharmacy.ui._03_create_account.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyFragmentArgs.kt$package life.league.digitalpharmacy.ui._03_create_account.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyFragmentDirections.kt$package life.league.digitalpharmacy.ui._03_create_account.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyRefillFragment.kt$package life.league.digitalpharmacy.ui._05_refill.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyRefillFragmentArgs.kt$package life.league.digitalpharmacy.ui._05_refill.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyRefillFragmentDirections.kt$package life.league.digitalpharmacy.ui._05_refill.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyRefillScreen.kt$package life.league.digitalpharmacy.ui._05_refill.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyRefillViewModel.kt$package life.league.digitalpharmacy.ui._05_refill.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyScreen.kt$package life.league.digitalpharmacy.ui._03_create_account.select_pharmacy</ID>
    <ID>PackageNaming:SelectPharmacyViewModel.kt$package life.league.digitalpharmacy.ui._03_create_account.select_pharmacy</ID>
    <ID>PackageNaming:SelectPrescriptionsFragment.kt$package life.league.digitalpharmacy.ui._05_refill.select_prescriptions</ID>
    <ID>PackageNaming:SelectPrescriptionsFragmentDirections.kt$package life.league.digitalpharmacy.ui._05_refill.select_prescriptions</ID>
    <ID>PackageNaming:SelectPrescriptionsScreen.kt$package life.league.digitalpharmacy.ui._05_refill.select_prescriptions</ID>
    <ID>PackageNaming:SelectPrescriptionsViewModel.kt$package life.league.digitalpharmacy.ui._05_refill.select_prescriptions</ID>
    <ID>PackageNaming:SettingsFragment.kt$package life.league.digitalpharmacy.ui._04_settings.selected_settings</ID>
    <ID>PackageNaming:SettingsFragmentArgs.kt$package life.league.digitalpharmacy.ui._04_settings.selected_settings</ID>
    <ID>PackageNaming:SettingsFragmentDirections.kt$package life.league.digitalpharmacy.ui._04_settings.selected_settings</ID>
    <ID>PackageNaming:SettingsScreen.kt$package life.league.digitalpharmacy.ui._04_settings.selected_settings</ID>
    <ID>PackageNaming:SettingsScreenViewModel.kt$package life.league.digitalpharmacy.ui._04_settings.selected_settings</ID>
    <ID>PackageNaming:WelcomeFragment.kt$package life.league.digitalpharmacy.ui._01_landing.welcome</ID>
    <ID>PackageNaming:WelcomeFragmentArgs.kt$package life.league.digitalpharmacy.ui._01_landing.welcome</ID>
    <ID>PackageNaming:WelcomeFragmentDirections.kt$package life.league.digitalpharmacy.ui._01_landing.welcome</ID>
    <ID>PackageNaming:WelcomeNewUserFragment.kt$package life.league.digitalpharmacy.ui._01_landing.welcome_new_user</ID>
    <ID>PackageNaming:WelcomeNewUserFragmentDirections.kt$package life.league.digitalpharmacy.ui._01_landing.welcome_new_user</ID>
    <ID>PackageNaming:WelcomeNewUserScreen.kt$package life.league.digitalpharmacy.ui._01_landing.welcome_new_user</ID>
    <ID>PackageNaming:WelcomeNewUserViewModel.kt$package life.league.digitalpharmacy.ui._01_landing.welcome_new_user</ID>
    <ID>PackageNaming:WelcomeScreen.kt$package life.league.digitalpharmacy.ui._01_landing.welcome</ID>
    <ID>PackageNaming:WelcomeViewModel.kt$package life.league.digitalpharmacy.ui._01_landing.welcome</ID>
    <ID>PrintStackTrace:ArticleDataTest.kt$ArticleDataTest$e</ID>
    <ID>PrintStackTrace:BuildInfoUtils.kt$BuildInfoUtils$e</ID>
    <ID>PrintStackTrace:ColorLoading.kt$t</ID>
    <ID>PrintStackTrace:ContentAPI_Upload.kt$e</ID>
    <ID>PrintStackTrace:LeagueAnalyticsTracker.kt$LeagueAnalyticsTracker$e</ID>
    <ID>PrintStackTrace:LeagueRootActivity.kt$LeagueRootActivity$e</ID>
    <ID>PrintStackTrace:WalletCardView.kt$WalletCardView$e</ID>
    <ID>ReturnCount:API.kt$API$suspend inline fun &lt;reified T> getCachedResponse(request: String): Success&lt;T>?</ID>
    <ID>ReturnCount:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$private fun getCurrentIndexFromModule(module: Module?): Int</ID>
    <ID>ReturnCount:BrowserFragment.kt$BrowserFragment.&lt;no name provided>$override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean</ID>
    <ID>ReturnCount:ConnectivityUtils.kt$ConnectivityUtils$@Suppress("DEPRECATION") fun getNetworkClass(context: Context): String</ID>
    <ID>ReturnCount:ContentAPI.kt$ContentAPI$ @WorkerThread @Synchronized override fun authenticate(route: Route?, response: Response): Request?</ID>
    <ID>ReturnCount:DateUtils.kt$DateUtils$fun differenceBetweenDate(start: Date?, end: Date?): String?</ID>
    <ID>ReturnCount:DependentFormFragment.kt$DependentFormFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View?</ID>
    <ID>ReturnCount:LeagueNavigation.kt$LeagueNavigation$override fun navigateToDeeplink( activity: Activity, uri: Uri, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController?, navOptions: NavOptions? ): Boolean</ID>
    <ID>ReturnCount:LeagueRestAPI.kt$TokenAuthenticator$ @Synchronized override fun authenticate(route: Route?, response: Response): Request?</ID>
    <ID>ReturnCount:ListSpacingDecoration.kt$ListSpacingDecoration$private fun getItemSpanIndex(parent: RecyclerView, childIndex: Int): Int</ID>
    <ID>ReturnCount:ListSpacingDecoration.kt$ListSpacingDecoration$private fun getItemSpanSize(parent: RecyclerView, childIndex: Int): Int</ID>
    <ID>ReturnCount:ListSpacingDecoration.kt$ListSpacingDecoration$private fun getOrientation(parent: RecyclerView): Int</ID>
    <ID>ReturnCount:ListSpacingDecoration.kt$ListSpacingDecoration$private fun getTotalSpan(parent: RecyclerView): Int</ID>
    <ID>ReturnCount:LiveAgentChatActivity.kt$LiveAgentChatActivity$private fun isValidChatMapResponse(response: SalesforceChatMapResponse): Boolean</ID>
    <ID>ReturnCount:LoginFragment.kt$LoginFragment$override fun onOptionsItemSelected(mi: MenuItem): Boolean</ID>
    <ID>ReturnCount:LoginFragment.kt$LoginFragment.LeagueWebViewClient$override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean</ID>
    <ID>ReturnCount:LoginIntroFragment.kt$LoginIntroFragment$private fun queryAndProcessSignOutReason()</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$ private fun handleIntentNavigation(intent: Intent): Boolean</ID>
    <ID>ReturnCount:MarketplaceWebFragment.kt$MarketplaceWebFragment$private fun handleUrlNavigation(uri: Uri): Boolean</ID>
    <ID>ReturnCount:Module.kt$Module$fun getQuestionIndexInTopic(currentQuestion: Question?): TopicProgressData?</ID>
    <ID>ReturnCount:OutcomeAdapterFactory.kt$OutcomeAdapterFactory$override fun get( returnType: Type, annotations: Array&lt;Annotation>, retrofit: Retrofit ): CallAdapter&lt;*, *>?</ID>
    <ID>ReturnCount:PcoAPIInterceptor.kt$TokenAuthenticator$ @Synchronized override fun authenticate(route: Route?, response: Response): Request?</ID>
    <ID>ReturnCount:PcoSignUpActivity.kt$PcoSignUpActivity.&lt;no name provided>$override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean</ID>
    <ID>ReturnCount:Question.kt$Question$fun isQuestionAnswerValid(): Boolean</ID>
    <ID>ReturnCount:RemoveDependentDialog.kt$RemoveDependentDialog$private fun getFieldsForRelationship( relationship: String?, removeDependentSchema: DependentRelationshipSchemaField? ): RealmList&lt;DependentRelationshipSchemaField>?</ID>
    <ID>ReturnCount:RoomCache.kt$RoomCache$override fun &lt;T> delete(objCollection: Collection&lt;T>)</ID>
    <ID>ReturnCount:RootActivity.kt$RootActivity$fun promptUserForStoreRating(): Boolean</ID>
    <ID>ReturnCount:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>ReturnCount:WebBrowserFragment.kt$WebBrowserFragment.&lt;no name provided>$override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean</ID>
    <ID>ReturnCount:WellnessStationDeepLinker.kt$WellnessStationDeepLinker.Paths.ImportReading$fun getClaimCode(link: String): String?</ID>
    <ID>SerialVersionUIDInSerializableClass:AdditionalInfo.kt$AdditionalInfo : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:AdditionalInfo.kt$AdditionalInfo$Content : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Button.kt$Button : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:CampaignContentConfig.kt$CampaignContentConfig : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Environment.kt$Environment : SerializableParcelable</ID>
    <ID>SerialVersionUIDInSerializableClass:ExitScreen.kt$ExitScreen : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:FrictionScreen.kt$FrictionScreen : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:FullScreenContent.kt$FullScreenContent : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Goal.kt$Goal : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthActivities.kt$HealthActivities : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthActivitiesCategory.kt$HealthActivitiesCategory : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthActivitiesCategory.kt$HealthActivitiesCategoryHeader : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItem.kt$HealthJourneyItem : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionResponse : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$ActivityBanner : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$CTA : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$ContentType : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$CustomFields : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$Fields : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$File : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$FileDetail : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$FileImage : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$HealthJourneyItemDetail : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$ImageAsset : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$Space : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthJourneyItemDetail.kt$Sys : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$Button : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$DimensionsOfHealth : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$EmptyState : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$Feedback : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$HealthNeed : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$HealthNeedRecommendation : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$HealthNeedSummary : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$HealthProfile : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$HealthSolutionCategory : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$Info : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProfile.kt$Modal : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgram.kt$HealthProgram : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgramDetails.kt$HealthProgramDetails : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgramStart.kt$HealthProgramStart : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthPrograms.kt$HealthPrograms : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgramsCarousel.kt$HealthProgramsCarousel : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgramsCarousels.kt$HealthProgramsCarousels : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgramsCategories.kt$HealthProgramsCategories : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HealthProgramsCategory.kt$HealthProgramsCategory : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:HelpfulTip.kt$HelpfulTip : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Info.kt$Info : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:IntroScreen.kt$IntroScreen : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Modal.kt$Modal : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:NavigationTarget.kt$NavigationTarget : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:OnboardingPage.kt$OnboardingPage : SerializableParcelable</ID>
    <ID>SerialVersionUIDInSerializableClass:OnboardingPage.kt$OnboardingPage$AdditionalInfo : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:OnboardingPage.kt$OnboardingPage.AdditionalInfo$CTA : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:OnboardingPage.kt$OnboardingPage.AdditionalInfo$Content : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:PCHAppEnvironment.kt$PCHAppEnvironment : SerializableParcelable</ID>
    <ID>SerialVersionUIDInSerializableClass:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitModal : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:PulseCheck.kt$PulseCheck : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Question.kt$Question : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:SpeechBubbleBanner.kt$Link : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:SpeechBubbleBanner.kt$SpeechBubbleBanner : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:SpeechBubbleBanner.kt$SpeechBubbleComponent : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:StatusCounts.kt$StatusCounts : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:SuccessScreen.kt$SuccessScreen : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Topic.kt$Topic : SerializableParcelable</ID>
    <ID>SerialVersionUIDInSerializableClass:ValidicUser.kt$ValidicUser : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:ValidicUser.kt$WearableDevice : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WearableConsent.kt$WearableConsent : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WearableConsentResponse.kt$ConsentData : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:WearableConsentResponse.kt$WearableConsentResponse : Serializable</ID>
    <ID>SpreadOperator:AppointmentDetailsFragment.kt$AppointmentDetailsFragment$(resourceId, *resourceArgs.toTypedArray())</ID>
    <ID>SpreadOperator:BundleUtils.kt$BundleUtils$(*map.entries.map { e -> e.toPair() }.toTypedArray())</ID>
    <ID>SpreadOperator:DigitalPharmacyConfiguration.kt$DigitalPharmacy$( *DigitalPharmacyModule.modules, module { single { userRepository } } )</ID>
    <ID>SpreadOperator:EnvironmentUtils.kt$EnvironmentUtils$(*hardCodedEnvironments)</ID>
    <ID>SpreadOperator:LeagueJsonUtils.kt$LeagueJsonUtils$(*applyModuleAdapters)</ID>
    <ID>SpreadOperator:LoginFragment.kt$LoginInterface$(*cookieString.split(" ").toTypedArray())</ID>
    <ID>SpreadOperator:PCHealthJsonUtils.kt$PCHealthJsonUtils$(*applyModuleAdapters)</ID>
    <ID>SpreadOperator:PractitionerDetailsComposable.kt$(it.resourceId, *it.resourceArgs.toTypedArray())</ID>
    <ID>SpreadOperator:PractitionerSelectionComposable.kt$(id = resourceId, *resourceArgs.toTypedArray())</ID>
    <ID>SpreadOperator:ResourcesExtension.kt$(getString(id), *spanParts.map { it.first }.toTypedArray())</ID>
    <ID>SpreadOperator:ResourcesExtension.kt$(id, *formatArgs.filterNotNull().map { it to emptyList&lt;Any>() }.toTypedArray())</ID>
    <ID>SpreadOperator:RewardsModule.kt$RewardsModule$( module { single { api } }, *(RewardsDataInjectionModule.modules) )</ID>
    <ID>SpreadOperator:SpannableStringCreator.kt$SpannableStringCreator$(*parts.toTypedArray())</ID>
    <ID>SpreadOperator:StringExtension.kt$(*annotations.map { it.name }.toTypedArray())</ID>
    <ID>SpreadOperator:StringExtensions.kt$(*annotations.map { it.name }.toTypedArray())</ID>
    <ID>SpreadOperator:UserText.kt$(resourceId, *resourceArgs.toTypedArray())</ID>
    <ID>SwallowedException:API_Document.kt$e: Exception</ID>
    <ID>SwallowedException:API_Home.kt$e: JSONException</ID>
    <ID>SwallowedException:API_Lifemarket.kt$e: JSONException</ID>
    <ID>SwallowedException:API_PushNotification.kt$e: JSONException</ID>
    <ID>SwallowedException:ActivityExtension.kt$ex: ActivityNotFoundException</ID>
    <ID>SwallowedException:AgentChatFragment.kt$AgentChatFragment.&lt;no name provided>$e: Exception</ID>
    <ID>SwallowedException:Appointment.kt$AppointmentOrgId.Companion$ex: Exception</ID>
    <ID>SwallowedException:BarcodeGenerator.kt$BarcodeGenerator$iae: IllegalArgumentException</ID>
    <ID>SwallowedException:BarcodeView.kt$BarcodeView$ex: Exception</ID>
    <ID>SwallowedException:BarcodeView.kt$BarcodeView$iae: IllegalArgumentException</ID>
    <ID>SwallowedException:BrowserFragment.kt$BrowserFragment.&lt;no name provided>$ex: Exception</ID>
    <ID>SwallowedException:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator.AuthenticationMethod.Companion$ex: Exception</ID>
    <ID>SwallowedException:ContentAPI_OpenContent.kt$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:CoreConfigurationTest.kt$CoreConfigurationTest$ex: CoreNotInitializedExpection</ID>
    <ID>SwallowedException:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel$th: Throwable</ID>
    <ID>SwallowedException:ImportReadingViewModel.kt$ImportReadingViewModel$e: Exception</ID>
    <ID>SwallowedException:InsightDetailsViewModel.kt$InsightDetailsViewModel$e: Exception</ID>
    <ID>SwallowedException:LeagueDeepLinker.kt$LeagueDeepLinker$e: IllegalArgumentException</ID>
    <ID>SwallowedException:LeagueNavigation.kt$LeagueNavigation$ex: Exception</ID>
    <ID>SwallowedException:ListExtensions.kt$exception: Exception</ID>
    <ID>SwallowedException:LiveAgentChatFragment.kt$LiveAgentChatFragment.&lt;no name provided>$e: Exception</ID>
    <ID>SwallowedException:LocaleUtils.kt$LocaleUtils$e: Resources.NotFoundException</ID>
    <ID>SwallowedException:MainNavHostFragment.kt$MainNavHostFragment$e: Exception</ID>
    <ID>SwallowedException:MapleUtils.kt$MapleUtils$e: RuntimeException</ID>
    <ID>SwallowedException:MapleUtils.kt$MapleUtils$e: java.lang.Exception</ID>
    <ID>SwallowedException:MyRootModuleShowkaseExtensionFunctionsCodegen.kt$exception: ClassNotFoundException</ID>
    <ID>SwallowedException:OutcomeCall.kt$OutcomeCall.&lt;no name provided>$ex: Exception</ID>
    <ID>SwallowedException:PCHealthStationReadingViewModel.kt$PCHealthStationReadingViewModel$e: Exception</ID>
    <ID>SwallowedException:PrivacyLockUtils.kt$PrivacyLockUtils$e: Exception</ID>
    <ID>SwallowedException:QRCodeScanner.kt$QRCodeScanner$ex: IllegalStateException</ID>
    <ID>SwallowedException:RewardViewModel.kt$RewardViewModel$e: Exception</ID>
    <ID>SwallowedException:RoadrunnerNavigation.kt$RoadrunnerNavigation$ex: Exception</ID>
    <ID>SwallowedException:StripNullJsonFactory.kt$StripNullJsonFactory.&lt;no name provided>$e: EOFException</ID>
    <ID>SwallowedException:StripNullJsonFactory.kt$StripNullJsonFactory.&lt;no name provided>$e: Exception</ID>
    <ID>SwallowedException:TriageApiMapping.kt$e: Exception</ID>
    <ID>SwallowedException:TriageConfigurationTest.kt$TriageConfigurationTest$ex: TriageNotInitializedExpection</ID>
    <ID>SwallowedException:TriageTopAppBar.kt$e: RuntimeException</ID>
    <ID>SwallowedException:WalletConfigurationTest.kt$WalletConfigurationTest$ex: WalletNotInitializedExpection</ID>
    <ID>SwallowedException:WearableConfigurationTest.kt$WearableConfigurationTest$ex: WearablesNotInitializedExpection</ID>
    <ID>SwallowedException:WebBrowserFragment.kt$WebBrowserFragment.&lt;no name provided>$ex: Exception</ID>
    <ID>ThrowsCount:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AccountDetailsFragmentArgs</ID>
    <ID>ThrowsCount:AddPatientFragmentArgs.kt$AddPatientFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AddPatientFragmentArgs</ID>
    <ID>ThrowsCount:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): AgentAvailabilityFragmentArgs</ID>
    <ID>ThrowsCount:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AgentAvailabilityFragmentArgs</ID>
    <ID>ThrowsCount:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppointmentSuccessFragmentArgs</ID>
    <ID>ThrowsCount:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppointmentSummaryFragmentArgs</ID>
    <ID>ThrowsCount:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppsAndDevicesConnectionDialogFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentCompleteFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentCompleteFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentFrictionFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentFrictionFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentLoadingFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentOnboardingAdditionalInfoFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentOnboardingAdditionalInfoFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): AssessmentOnboardingFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentOnboardingFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentsExitFragmentArgs</ID>
    <ID>ThrowsCount:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentsExitFragmentArgs</ID>
    <ID>ThrowsCount:AuthNavGraphArgs.kt$AuthNavGraphArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AuthNavGraphArgs</ID>
    <ID>ThrowsCount:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): BuilderDailyScreenerFragmentArgs</ID>
    <ID>ThrowsCount:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): BuilderDailyScreenerFragmentArgs</ID>
    <ID>ThrowsCount:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): BuilderDailyScreenerResponsesFragmentArgs</ID>
    <ID>ThrowsCount:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): BuilderDailyScreenerResponsesFragmentArgs</ID>
    <ID>ThrowsCount:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): BuilderDailyScreenerReturnToWorkDateFragmentArgs</ID>
    <ID>ThrowsCount:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): BuilderDailyScreenerReturnToWorkDateFragmentArgs</ID>
    <ID>ThrowsCount:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChallengeSettingsBottomSheetDialogFragmentArgs</ID>
    <ID>ThrowsCount:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChallengeSettingsBottomSheetDialogFragmentArgs</ID>
    <ID>ThrowsCount:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChallengeSignUpPrivacyPolicyFragmentArgs</ID>
    <ID>ThrowsCount:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChallengeSignUpPrivacyPolicyFragmentArgs</ID>
    <ID>ThrowsCount:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ClinicDetailsFragmentArgs</ID>
    <ID>ThrowsCount:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ClinicDetailsFragmentArgs</ID>
    <ID>ThrowsCount:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): CovidDataSharingFragmentArgs</ID>
    <ID>ThrowsCount:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): CovidDataSharingFragmentArgs</ID>
    <ID>ThrowsCount:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DependentDetailsFragmentArgs</ID>
    <ID>ThrowsCount:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentDetailsFragmentArgs</ID>
    <ID>ThrowsCount:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentFormSuccessFragmentArgs</ID>
    <ID>ThrowsCount:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DependentInviteEmailFragmentArgs</ID>
    <ID>ThrowsCount:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentInviteEmailFragmentArgs</ID>
    <ID>ThrowsCount:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DeviceInfoFragmentArgs</ID>
    <ID>ThrowsCount:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): DimensionsOfHealthFragmentArgs</ID>
    <ID>ThrowsCount:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DimensionsOfHealthFragmentArgs</ID>
    <ID>ThrowsCount:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): EditDependentFormFragmentArgs</ID>
    <ID>ThrowsCount:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EditDependentFormFragmentArgs</ID>
    <ID>ThrowsCount:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): EnvironmentNavGraphArgs</ID>
    <ID>ThrowsCount:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EnvironmentNavGraphArgs</ID>
    <ID>ThrowsCount:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): EnvironmentSwitcherFragmentArgs</ID>
    <ID>ThrowsCount:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EnvironmentSwitcherFragmentArgs</ID>
    <ID>ThrowsCount:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): FullScreenContentFragmentArgs</ID>
    <ID>ThrowsCount:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyItemCompleteBottomSheetDialogArgs</ID>
    <ID>ThrowsCount:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyItemCompleteBottomSheetDialogArgs</ID>
    <ID>ThrowsCount:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs</ID>
    <ID>ThrowsCount:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs</ID>
    <ID>ThrowsCount:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneySuggestedActivityGroupFragmentArgs</ID>
    <ID>ThrowsCount:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthNeedFragmentArgs</ID>
    <ID>ThrowsCount:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthProgramsLimitMessageDialogArgs</ID>
    <ID>ThrowsCount:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): InsightDetailsFragmentArgs</ID>
    <ID>ThrowsCount:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LeaveHealthJourneyActivityConfirmationFragmentArgs</ID>
    <ID>ThrowsCount:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LeaveHealthJourneyActivityConfirmationFragmentArgs</ID>
    <ID>ThrowsCount:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LiveAgentLoadingFragmentArgs</ID>
    <ID>ThrowsCount:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LiveAgentLoadingFragmentArgs</ID>
    <ID>ThrowsCount:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LocationSelectionFragmentArgs</ID>
    <ID>ThrowsCount:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): MapleAvailabilityFragmentArgs</ID>
    <ID>ThrowsCount:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleAvailabilityFragmentArgs</ID>
    <ID>ThrowsCount:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleChatDetailsFragmentArgs</ID>
    <ID>ThrowsCount:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleConsentFragmentArgs</ID>
    <ID>ThrowsCount:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleConsentFragmentArgs</ID>
    <ID>ThrowsCount:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleIntroFragmentArgs</ID>
    <ID>ThrowsCount:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleIntroFragmentArgs</ID>
    <ID>ThrowsCount:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MultiStepHealthJourneyItemCompletionFragmentArgs</ID>
    <ID>ThrowsCount:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MultiStepHealthJourneyItemCompletionFragmentArgs</ID>
    <ID>ThrowsCount:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): OutcomeSuggestionsFragmentArgs</ID>
    <ID>ThrowsCount:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): OutcomeSuggestionsFragmentArgs</ID>
    <ID>ThrowsCount:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): PractitionerDetailsFragmentArgs</ID>
    <ID>ThrowsCount:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): PractitionerDetailsFragmentArgs</ID>
    <ID>ThrowsCount:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): PractitionerSelectionFragmentArgs</ID>
    <ID>ThrowsCount:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): PreChatFormFragmentArgs</ID>
    <ID>ThrowsCount:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectPatientFragmentArgs</ID>
    <ID>ThrowsCount:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectServiceFragmentArgs</ID>
    <ID>ThrowsCount:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectTimeslotFragmentArgs</ID>
    <ID>ThrowsCount:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ServiceIntakeFormFragmentArgs</ID>
    <ID>ThrowsCount:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SpecialtyLandingFragmentArgs</ID>
    <ID>ThrowsCount:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SpecialtyLandingFragmentArgs</ID>
    <ID>ThrowsCount:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SpecialtyUrgencyFragmentArgs</ID>
    <ID>ThrowsCount:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TermsConditionsFragmentArgs</ID>
    <ID>ThrowsCount:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TooltipBottomSheetDialogFragmentArgs</ID>
    <ID>ThrowsCount:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): TooltipBottomSheetDialogFragmentArgs</ID>
    <ID>ThrowsCount:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TriageLocationSelectorFragmentArgs</ID>
    <ID>ThrowsCount:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TriageSubMenuFragmentArgs</ID>
    <ID>ThrowsCount:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): TriageSubMenuFragmentArgs</ID>
    <ID>ThrowsCount:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): WearableConsentPrimerFragmentArgs</ID>
    <ID>TooGenericExceptionCaught:API.kt$API$th: Throwable</ID>
    <ID>TooGenericExceptionCaught:API_Banking.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Claim.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_DailyScreener.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Document.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Group.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_HealthProfile.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_History.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Lifemarket.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Maple.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Messages.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Messages.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Onboarding.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Qle.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Salesforce.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_SendData.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Triage.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_UserAlert.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Vaccine.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_WaitingRoomLinkOuts.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_Wallet.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:API_WearableConsent.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AccountSetupGenderFragment.kt$AccountSetupGenderFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AgentChatFragment.kt$AgentChatFragment.&lt;no name provided>$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppLoggingRepositoryImpl.kt$AppLoggingRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppLoggingUtil.kt$AppLoggingUtil$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ApplicationModule.kt$ApplicationModule.&lt;no name provided>$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Appointment.kt$AppointmentOrgId.Companion$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:BarcodeView.kt$BarcodeView$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:BrowserFragment.kt$BrowserFragment.&lt;no name provided>$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ChatDeepLinker.kt$ChatDeepLinker$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ColorLoading.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator.AuthenticationMethod.Companion$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ContentAPI_Download.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ContentAPI_Upload.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ContextExtension.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:CoreConfiguration.kt$Core$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ErrorUtils.kt$ErrorUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel$th: Throwable</ID>
    <ID>TooGenericExceptionCaught:ImageUtils.kt$ImageUtils$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:ImportReadingViewModel.kt$ImportReadingViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsightDetailsViewModel.kt$InsightDetailsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LeagueNavigation.kt$LeagueNavigation$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:LeagueRootActivity.kt$LeagueRootActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ListExtensions.kt$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:LiveAgentChatActivity.kt$LiveAgentChatActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LiveAgentChatFragment.kt$LiveAgentChatFragment.&lt;no name provided>$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainNavHostFragment.kt$MainNavHostFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ManageDependentsRepository.kt$ManageDependentsRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MapleUtils.kt$MapleUtils$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:NavControllerExt.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NavigationExtension.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OutcomeCall.kt$OutcomeCall.&lt;no name provided>$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:PCHealthStationReadingViewModel.kt$PCHealthStationReadingViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PrivacyLockUtils.kt$PrivacyLockUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QRCodeViewModel.kt$QRCodeViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QuestionController.kt$QuestionController$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RealmCache.kt$RealmCache$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RemoteImage.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RequestCallback.kt$RequestCallback$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RewardNavigation.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RewardViewModel.kt$RewardViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RichText.kt$RichText.HtmlImageGetter.BitmapDrawablePlaceHolder$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:RoadRunnerFirebaseMessagingService.kt$RoadRunnerFirebaseMessagingService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RoadrunnerNavigation.kt$RoadrunnerNavigation$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RootActivity.kt$RootActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RootActivity.kt$RootActivity$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RootFragment.kt$RootFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:StripNullJsonFactory.kt$StripNullJsonFactory.&lt;no name provided>$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TriageApiMapping.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TriageTopAppBar.kt$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:UriExtension.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WalletCardView.kt$WalletCardView$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebBrowserFragment.kt$WebBrowserFragment.&lt;no name provided>$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WebSocket.kt$WebSocket$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WellnessStationDeepLinker.kt$WellnessStationDeepLinker.Paths.ImportReading$ex: Exception</ID>
    <ID>TooGenericExceptionThrown:API_SendData.kt$throw Exception("Error in API, websocket not set")</ID>
    <ID>TooGenericExceptionThrown:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$throw Exception("Error, current answers object is null while trying to navigate to next question. Question id: " + question.id)</ID>
    <ID>TooGenericExceptionThrown:AssessmentViewModel.kt$AssessmentViewModel$throw RuntimeException("Trying to access Module which is not loaded or null")</ID>
    <ID>TooGenericExceptionThrown:AssessmentViewModelTest.kt$AssessmentViewModelTest$throw Exception("Error Deserializing Json")</ID>
    <ID>TooGenericExceptionThrown:AssessmentViewModelTest.kt$AssessmentViewModelTest$throw RuntimeException("Error Deserializing Answer ")</ID>
    <ID>TooGenericExceptionThrown:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths.MapleSignOn$throw Exception("Maple sign on is an external deeplink from Maple and shouldn't be generated from within the PC Health app.")</ID>
    <ID>TooGenericExceptionThrown:ContentAPI.kt$ContentAPI$throw Exception("Error in getContentSaveUrl: ContentAPI.environmentProvider.contentWriteEndpoint not set")</ID>
    <ID>TooGenericExceptionThrown:ContentAPI.kt$ContentAPI$throw Exception("Error in getContentUrl: ContentAPI.environmentProvider.contentReadEndpoint not set")</ID>
    <ID>TooGenericExceptionThrown:GenesisPresenterImageLoader.kt$GenesisPresenterImageLoader$throw Exception("This method cannot be used in genesis presenter. It uses League's content server")</ID>
    <ID>TooGenericExceptionThrown:RewardsModule.kt$RewardsModule$throw RuntimeException("Rewards Module Not Initialized")</ID>
    <ID>TooGenericExceptionThrown:UserInfo.kt$throw Exception("Banner Not found")</ID>
    <ID>TooManyFunctions:API.kt$API : Listener</ID>
    <ID>TooManyFunctions:API_Salesforce.kt$life.league.chat.api.API_Salesforce.kt</ID>
    <ID>TooManyFunctions:API_SendData.kt$life.league.networking.socket.actions.API_SendData.kt</ID>
    <ID>TooManyFunctions:ActionRow.kt$ActionRow : FrameLayout</ID>
    <ID>TooManyFunctions:AddPatientFragmentDirections.kt$AddPatientFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:AgentChatContract.kt$AgentChatContract$View</ID>
    <ID>TooManyFunctions:AgentChatFragment.kt$AgentChatFragment : RootFragmentChatKoinComponent</ID>
    <ID>TooManyFunctions:AgentChatPresenter.kt$AgentChatPresenter : PresenterLeagueChatClientListenerKoinComponent</ID>
    <ID>TooManyFunctions:AnalyticsTracker_AccountSetup.kt$com.loblaw.pchealth.analytics.AnalyticsTracker_AccountSetup.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Appointment.kt$life.league.triage.analytics.AnalyticsTracker_Appointment.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_AppsAndDevices.kt$life.league.wearable.analytics.AnalyticsTracker_AppsAndDevices.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Banking.kt$life.league.analytics.events.AnalyticsTracker_Banking.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Chat.kt$life.league.chat.analytics.AnalyticsTracker_Chat.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Claim.kt$life.league.analytics.events.AnalyticsTracker_Claim.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Dependents.kt$life.league.wallet.analytics.AnalyticsTracker_Dependents.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Document.kt$life.league.analytics.events.AnalyticsTracker_Document.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Ftux.kt$life.league.analytics.events.AnalyticsTracker_Ftux.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_HealthGoal.kt$life.league.healthjourney.analytics.AnalyticsTracker_HealthGoal.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_HealthJourney.kt$life.league.healthjourney.analytics.AnalyticsTracker_HealthJourney.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_HealthProfile.kt$life.league.health.analytics.AnalyticsTracker_HealthProfile.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Home.kt$com.loblaw.pchealth.analytics.AnalyticsTracker_Home.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Homescreen.kt$life.league.analytics.events.AnalyticsTracker_Homescreen.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_QuickAction.kt$life.league.triage.analytics.AnalyticsTracker_QuickAction.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Rewards.kt$com.loblaw.pchealth.analytics.AnalyticsTracker_Rewards.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Rewards.kt$life.league.analytics.events.AnalyticsTracker_Rewards.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Settings.kt$com.loblaw.pchealth.analytics.AnalyticsTracker_Settings.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_SubmitClaim.kt$life.league.analytics.events.AnalyticsTracker_SubmitClaim.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Vaccine.kt$life.league.vaccine.analytics.AnalyticsTracker_Vaccine.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_Wallet.kt$life.league.wallet.analytics.AnalyticsTracker_Wallet.kt</ID>
    <ID>TooManyFunctions:AnalyticsTracker_WalletCardDetail.kt$life.league.wallet.analytics.AnalyticsTracker_WalletCardDetail.kt</ID>
    <ID>TooManyFunctions:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:AppsAndDevicesView.kt$life.league.wearable.wearablesettings.AppsAndDevicesView.kt</ID>
    <ID>TooManyFunctions:AssessmentQuestionFragment.kt$AssessmentQuestionFragment : RootFragmentViewControllerInterface</ID>
    <ID>TooManyFunctions:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:AssetBanner.kt$AssetBanner : FrameLayout</ID>
    <ID>TooManyFunctions:BasicIconBanner.kt$BasicIconBanner : FrameLayout</ID>
    <ID>TooManyFunctions:BrandedPointsBanner.kt$BrandedPointsBanner : FrameLayout</ID>
    <ID>TooManyFunctions:Button.kt$Button : FrameLayout</ID>
    <ID>TooManyFunctions:Card.kt$Card : FrameLayout</ID>
    <ID>TooManyFunctions:ChallengeLandingScreen.kt$life.league.healthjourney.challenges.challenge.landing.ChallengeLandingScreen.kt</ID>
    <ID>TooManyFunctions:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:ConsentScreen.kt$ConsentScreen : FrameLayout</ID>
    <ID>TooManyFunctions:ContentConfirmDialog.kt$ContentConfirmDialog : ConstraintLayout</ID>
    <ID>TooManyFunctions:ContentProviderInfo.kt$ContentProviderInfo : ConstraintLayout</ID>
    <ID>TooManyFunctions:ContextExtension.kt$life.league.core.extension.ContextExtension.kt</ID>
    <ID>TooManyFunctions:ContextExtension.kt$life.league.genesis.extension.ContextExtension.kt</ID>
    <ID>TooManyFunctions:ConversationCard.kt$ConversationCard : LinearLayout</ID>
    <ID>TooManyFunctions:CoreImageLoader.kt$CoreImageLoader : ImageLoader</ID>
    <ID>TooManyFunctions:CovidOnboardingSlide.kt$CovidOnboardingSlide : FrameLayoutKoinComponent</ID>
    <ID>TooManyFunctions:CurrentGoalCard.kt$CurrentGoalCard : FrameLayout</ID>
    <ID>TooManyFunctions:CyclicAdapter.kt$CyclicAdapter : Adapter</ID>
    <ID>TooManyFunctions:DateInputRow.kt$DateInputRow : LinearLayout</ID>
    <ID>TooManyFunctions:DateQuestion.kt$DateQuestion : FrameLayout</ID>
    <ID>TooManyFunctions:DateUtils.kt$DateUtils$DateUtils</ID>
    <ID>TooManyFunctions:DefaultHealthProgramsRepository.kt$DefaultHealthProgramsRepository : HealthProgramsRepository</ID>
    <ID>TooManyFunctions:DependentDynamicForm.kt$life.league.wallet.dependents.dependentforms.DependentDynamicForm.kt</ID>
    <ID>TooManyFunctions:DependentFormAdapter.kt$DependentFormAdapter : Adapter</ID>
    <ID>TooManyFunctions:DependentFormFragment.kt$DependentFormFragment : LeagueRootFragment</ID>
    <ID>TooManyFunctions:DependentInviteEmailFragment.kt$DependentInviteEmailFragment : RootFragment</ID>
    <ID>TooManyFunctions:DependentsActivity.kt$DependentsActivity : LeagueRootActivityOnDependentClickListener</ID>
    <ID>TooManyFunctions:DependentsViewModel.kt$DependentsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:DetailedProgressCard.kt$DetailedProgressCard : LinearLayout</ID>
    <ID>TooManyFunctions:DropDownInputRow.kt$DropDownInputRow : LinearLayout</ID>
    <ID>TooManyFunctions:DropDownQuestion.kt$DropDownQuestion : FrameLayout</ID>
    <ID>TooManyFunctions:DualColumnRow.kt$DualColumnRow : ConstraintLayout</ID>
    <ID>TooManyFunctions:DualTableRow.kt$DualTableRow : ConstraintLayout</ID>
    <ID>TooManyFunctions:EditDate.kt$EditDate : AppCompatTextView</ID>
    <ID>TooManyFunctions:EpoxyModelViewProcessorKotlinExtensions.kt$life.league.genesis.widget.EpoxyModelViewProcessorKotlinExtensions.kt</ID>
    <ID>TooManyFunctions:EpoxyModelViewProcessorKotlinExtensions.kt$life.league.genesis.widget.banner.EpoxyModelViewProcessorKotlinExtensions.kt</ID>
    <ID>TooManyFunctions:EpoxyModelViewProcessorKotlinExtensions.kt$life.league.genesis.widget.card.EpoxyModelViewProcessorKotlinExtensions.kt</ID>
    <ID>TooManyFunctions:EpoxyModelViewProcessorKotlinExtensions.kt$life.league.genesis.widget.row.EpoxyModelViewProcessorKotlinExtensions.kt</ID>
    <ID>TooManyFunctions:FeatureFlagDetailFragment.kt$life.league.core.featureflags.FeatureFlagDetailFragment.kt</ID>
    <ID>TooManyFunctions:FlowExtension.kt$life.league.core.extension.FlowExtension.kt</ID>
    <ID>TooManyFunctions:GenericCard.kt$GenericCard</ID>
    <ID>TooManyFunctions:GenesisButton.kt$life.league.genesis.compose.component.button.GenesisButton.kt</ID>
    <ID>TooManyFunctions:GenesisImageViewLoader.kt$GenesisImageViewLoader</ID>
    <ID>TooManyFunctions:GenesisPresenterImageLoader.kt$GenesisPresenterImageLoader : GenesisImageViewLoader</ID>
    <ID>TooManyFunctions:GenesisSpacing.kt$life.league.genesis.compose.theme.GenesisSpacing.kt</ID>
    <ID>TooManyFunctions:GenesisToolbar.kt$GenesisToolbar : Toolbar</ID>
    <ID>TooManyFunctions:GoalDetails.kt$GoalDetails : LinearLayout</ID>
    <ID>TooManyFunctions:Header.kt$Header : LinearLayout</ID>
    <ID>TooManyFunctions:HealthJourneyDayScreen.kt$life.league.healthjourney.journey.timeline.day.HealthJourneyDayScreen.kt</ID>
    <ID>TooManyFunctions:HealthJourneyItemScreen.kt$life.league.healthjourney.journey.HealthJourneyItemScreen.kt</ID>
    <ID>TooManyFunctions:HealthProfileController.kt$HealthProfileController : EpoxyController</ID>
    <ID>TooManyFunctions:HealthProfileEmptyState.kt$HealthProfileEmptyState : ConstraintLayout</ID>
    <ID>TooManyFunctions:HealthProfileFragment.kt$HealthProfileFragment : RootFragmentListener</ID>
    <ID>TooManyFunctions:HealthProgramExt.kt$life.league.healthjourney.utils.HealthProgramExt.kt</ID>
    <ID>TooManyFunctions:HealthProgramsRepository.kt$HealthProgramsRepository</ID>
    <ID>TooManyFunctions:HomeContract.kt$HomeContract$View</ID>
    <ID>TooManyFunctions:HomeController.kt$HomeController : EpoxyController</ID>
    <ID>TooManyFunctions:HomeController.kt$HomeController : EpoxyControllerCollectionKoinComponent</ID>
    <ID>TooManyFunctions:HomeFragment.kt$HomeFragment : LeagueRootFragmentView</ID>
    <ID>TooManyFunctions:HomeFragment.kt$HomeFragment : RootFragmentNavigation</ID>
    <ID>TooManyFunctions:ImageViewExtension.kt$life.league.genesis.extension.ImageViewExtension.kt</ID>
    <ID>TooManyFunctions:InformationalSlide.kt$InformationalSlide : FrameLayout</ID>
    <ID>TooManyFunctions:InsightDetailsFragment.kt$InsightDetailsFragment : RootFragment</ID>
    <ID>TooManyFunctions:InsightsBanner.kt$InsightsBanner : ConstraintLayout</ID>
    <ID>TooManyFunctions:JsonApiAdapter.kt$JsonApiAdapter$JsonApiAdapter</ID>
    <ID>TooManyFunctions:LandingFragmentDirections.kt$LandingFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:LaunchFragment.kt$LaunchFragment : RootFragment</ID>
    <ID>TooManyFunctions:LeagueNavigation.kt$LeagueNavigation : CoreNavigation</ID>
    <ID>TooManyFunctions:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator : LeagueAuthenticatorKoinComponent</ID>
    <ID>TooManyFunctions:LineChartView.kt$LineChartView : ConstraintLayoutOnChartValueSelectedListener</ID>
    <ID>TooManyFunctions:LinkButton.kt$LinkButton : AppCompatTextView</ID>
    <ID>TooManyFunctions:ListSpacingDecoration.kt$ListSpacingDecoration : ItemDecoration</ID>
    <ID>TooManyFunctions:LiveAgentChatActivity.kt$LiveAgentChatActivity : RootActivityViewOnBackStackChangedListener</ID>
    <ID>TooManyFunctions:LiveAgentChatClient.kt$LiveAgentChatClient : LeagueChatClientListenerCareChatClient</ID>
    <ID>TooManyFunctions:LiveAgentChatFragment.kt$LiveAgentChatFragment : RootFragmentChatViewListenerChatUpdatesListenerChatKoinComponent</ID>
    <ID>TooManyFunctions:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget : LinearLayout</ID>
    <ID>TooManyFunctions:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:LoginFragment.kt$LoginFragment : RootFragmentOnConnectionFailedListener</ID>
    <ID>TooManyFunctions:LogoCtaHeader.kt$LogoCtaHeader : LinearLayout</ID>
    <ID>TooManyFunctions:MainActivity.kt$MainActivity : LeagueRootActivityView</ID>
    <ID>TooManyFunctions:MainActivity.kt$MainActivity : RootActivity</ID>
    <ID>TooManyFunctions:MainMenuAdapter.kt$MainMenuAdapter : AdapterCollectionKoinComponent</ID>
    <ID>TooManyFunctions:MainNavHostFragment.kt$MainNavHostFragment : RootFragment</ID>
    <ID>TooManyFunctions:ManageDependentsLandingFragment.kt$ManageDependentsLandingFragment : RootFragmentDependentClickListener</ID>
    <ID>TooManyFunctions:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:MarketplaceProductCard.kt$MarketplaceProductCard : FrameLayout</ID>
    <ID>TooManyFunctions:MultipleSelectionInputRow.kt$MultipleSelectionInputRow : LinearLayout</ID>
    <ID>TooManyFunctions:PCHealthAuthenticator.kt$PCHealthAuthenticator : LeagueSocketAPIAuthenticatorContentAPIAuthenticatorMarketplaceAuthenticatorOptimumTokenAuthenticatorLeagueRestAPIAuthenticatorKoinComponent</ID>
    <ID>TooManyFunctions:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment : RootFragmentListener</ID>
    <ID>TooManyFunctions:PageHeader.kt$PageHeader : FrameLayout</ID>
    <ID>TooManyFunctions:PersonalInfoFragment.kt$PersonalInfoFragment : RootFragment</ID>
    <ID>TooManyFunctions:PersonalInfoViewModel.kt$PersonalInfoViewModel : ViewModel</ID>
    <ID>TooManyFunctions:PillButton.kt$PillButton : LinearLayout</ID>
    <ID>TooManyFunctions:PillTag.kt$life.league.digitalpharmacy.ui.widget.PillTag.kt</ID>
    <ID>TooManyFunctions:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:PrescriptionDetailsScreen.kt$life.league.digitalpharmacy.ui.prescription_details.PrescriptionDetailsScreen.kt</ID>
    <ID>TooManyFunctions:ProgressRow.kt$ProgressRow : FrameLayout</ID>
    <ID>TooManyFunctions:QuestionContainer.kt$QuestionContainer : FrameLayout</ID>
    <ID>TooManyFunctions:QuestionController.kt$QuestionController : EpoxyControllerQuestionsCollection</ID>
    <ID>TooManyFunctions:ReadingsController.kt$ReadingsController : EpoxyController</ID>
    <ID>TooManyFunctions:RecSpans.kt$ResSpans : Iterable</ID>
    <ID>TooManyFunctions:RedeemRewardActivity.kt$RedeemRewardActivity : RootActivity</ID>
    <ID>TooManyFunctions:RootActivity.kt$RootActivity : AppCompatActivityImageHandlerOnRequestPermissionsResultCallbackObserver</ID>
    <ID>TooManyFunctions:SalesforceChatClient.kt$SalesforceChatClient : LeagueChatClientSessionStateListenerAgentListenerQueueListenerFileTransferRequestListener</ID>
    <ID>TooManyFunctions:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections$Companion</ID>
    <ID>TooManyFunctions:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections$Companion</ID>
    <ID>TooManyFunctions:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist</ID>
    <ID>TooManyFunctions:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague</ID>
    <ID>TooManyFunctions:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth</ID>
    <ID>TooManyFunctions:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog$Builder</ID>
    <ID>TooManyFunctions:StackSelectQuestion.kt$StackSelectQuestion : LinearLayout</ID>
    <ID>TooManyFunctions:StatusButtonActionRow.kt$StatusButtonActionRow : ConstraintLayout</ID>
    <ID>TooManyFunctions:StatusPageHeader.kt$StatusPageHeader : FrameLayout</ID>
    <ID>TooManyFunctions:StringExtension.kt$life.league.core.extension.StringExtension.kt</ID>
    <ID>TooManyFunctions:StringExtension.kt$life.league.genesis.extension.StringExtension.kt</ID>
    <ID>TooManyFunctions:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity : LeagueRootActivityView</ID>
    <ID>TooManyFunctions:TagBanner.kt$TagBanner : FrameLayout</ID>
    <ID>TooManyFunctions:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:TextInputRow.kt$TextInputRow : LinearLayout</ID>
    <ID>TooManyFunctions:TextQuestion.kt$TextQuestion : LinearLayout</ID>
    <ID>TooManyFunctions:TopicBanner.kt$TopicBanner : FrameLayout</ID>
    <ID>TooManyFunctions:TriageApiMapping.kt$life.league.triage.api.TriageApiMapping.kt</ID>
    <ID>TooManyFunctions:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections$Companion</ID>
    <ID>TooManyFunctions:TriageRetrofitService.kt$TriageRetrofitService</ID>
    <ID>TooManyFunctions:UserDependent.kt$UserDependent</ID>
    <ID>TooManyFunctions:UserInfo.kt$life.league.digitalpharmacy.model.UserInfo.kt</ID>
    <ID>TooManyFunctions:UserRepository.kt$UserRepository</ID>
    <ID>TooManyFunctions:UserRepositoryImpl.kt$UserRepositoryImpl : RepositoryUserRepository</ID>
    <ID>TooManyFunctions:VaccineLandingFragment.kt$VaccineLandingFragment : RootFragmentListener</ID>
    <ID>TooManyFunctions:ValueQuestion.kt$ValueQuestion : LinearLayout</ID>
    <ID>TooManyFunctions:ViewExtension.kt$life.league.genesis.extension.ViewExtension.kt</ID>
    <ID>TooManyFunctions:WalletCardDetailActivity.kt$WalletCardDetailActivity : RootActivityWalletDetailClickListener</ID>
    <ID>TooManyFunctions:WalletCardDetailController.kt$WalletCardDetailController : EpoxyController</ID>
    <ID>TooManyFunctions:WellnessStationsAnalytics.kt$life.league.wellnessstation.analytics.WellnessStationsAnalytics.kt</ID>
    <ID>TooManyFunctions:WipFragmentDirections.kt$WipFragmentDirections$Companion</ID>
    <ID>TopLevelPropertyNaming:GenesisCalendarView.kt$private const val minSize = 48</ID>
    <ID>TopLevelPropertyNaming:GenesisCheckbox.kt$// TODO: Create a 'GenesisDurations' file in GDS-485 private const val BoxOutDuration = 100</ID>
    <ID>TopLevelPropertyNaming:GenesisCheckbox.kt$private const val CheckAnimationDuration = 100</ID>
    <ID>TopLevelPropertyNaming:GenesisRadioButton.kt$// TODO: Create a 'GenesisDurations' file in GDS-485 private const val RadioAnimationDuration = 100</ID>
    <ID>UndocumentedPublicClass:API.kt$API$MessageListener</ID>
    <ID>UndocumentedPublicClass:API_Dependents.kt$ManageDependentsAPI</ID>
    <ID>UndocumentedPublicClass:API_Dependents.kt$ManageDependentsAPI$DependentSchemaRequest : MessageRequest</ID>
    <ID>UndocumentedPublicClass:API_Dependents.kt$ManageDependentsAPI$GetDependentsRequest : MessageRequest</ID>
    <ID>UndocumentedPublicClass:API_Dependents.kt$ManageDependentsAPI$ManageDependentsActionsRequest : MessageRequest</ID>
    <ID>UndocumentedPublicClass:API_Dependents.kt$ManageDependentsAPI$SendDependentInviteRequest : MessageRequest</ID>
    <ID>UndocumentedPublicClass:API_Maple.kt$MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:API_Maple.kt$MapleUserIntent$Consult : MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:API_Maple.kt$MapleUserIntent$CreateConsult : MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:API_Maple.kt$MapleUserIntent$SignIn : MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:AboutPCHealthFragment.kt$AboutPCHealthFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AboutPCHealthFragmentDirections.kt$AboutPCHealthFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountActivity.kt$AccountActivity : LeagueRootActivity</ID>
    <ID>UndocumentedPublicClass:AccountController.kt$AccountController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:AccountController.kt$AccountController$Listener</ID>
    <ID>UndocumentedPublicClass:AccountDeletionActivityNavHost.kt$AccountDeletionActivityNavHost : AppCompatActivity</ID>
    <ID>UndocumentedPublicClass:AccountDeletionConfiguration.kt$AccountDeletion</ID>
    <ID>UndocumentedPublicClass:AccountDeletionConfiguration.kt$AccountDeletionConfiguration</ID>
    <ID>UndocumentedPublicClass:AccountDeletionConfirmationFragmentDirections.kt$AccountDeletionConfirmationFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountDeletionDrawables.kt$AccountDeletionDrawables</ID>
    <ID>UndocumentedPublicClass:AccountDeletionException.kt$AccountDeletionException : Exception</ID>
    <ID>UndocumentedPublicClass:AccountDeletionRequest.kt$AccountDeletionRequest : MessageRequest</ID>
    <ID>UndocumentedPublicClass:AccountDeletionResponse.kt$AccountDeletionResponse</ID>
    <ID>UndocumentedPublicClass:AccountDeletionResponseJsonAdapter.kt$AccountDeletionResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AccountDeletionStrings.kt$AccountDeletionStrings</ID>
    <ID>UndocumentedPublicClass:AccountDetailsFragment.kt$AccountDetailsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AccountDetailsFragmentDirections.kt$AccountDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountDetailsViewModel.kt$AccountDetailsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AccountFragment.kt$AccountFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:AccountFragmentDirections.kt$AccountFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountSettingsNavGraphDirections.kt$AccountSettingsNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:AccountSetupCompleteFragment.kt$AccountSetupCompleteFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountSetupGenderFragment.kt$AccountSetupGenderFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountSetupGenderFragmentDirections.kt$AccountSetupGenderFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountSetupLandingFragment.kt$AccountSetupLandingFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountSetupLandingFragmentDirections.kt$AccountSetupLandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountSetupLocationFragment.kt$AccountSetupLocationFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountSetupLocationFragmentDirections.kt$AccountSetupLocationFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountSetupNavHostFragment.kt$AccountSetupNavHostFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountSetupNavHostFragmentDirections.kt$AccountSetupNavHostFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountSetupPersonalInfoFragment.kt$AccountSetupPersonalInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountSetupPersonalInfoFragmentDirections.kt$AccountSetupPersonalInfoFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountSetupViewModel.kt$AccountSetupViewModel : ViewModelKoinComponent</ID>
    <ID>UndocumentedPublicClass:AccountUnlinkedFragment.kt$AccountUnlinkedFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AccountUnlinkedFragmentDirections.kt$AccountUnlinkedFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AccountViewModel.kt$AccountViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$AchievementCompletionResponse</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$AchievementCriteria</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$AchievementDetail</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$AchievementImage</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$AchievementProgress</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$Category</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$Cta</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$EmptyState</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponse.kt$ToolTip</ID>
    <ID>UndocumentedPublicClass:AchievementCompletionResponseJsonAdapter.kt$AchievementCompletionResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AchievementCriteriaJsonAdapter.kt$AchievementCriteriaJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AchievementDetailJsonAdapter.kt$AchievementDetailJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AchievementImageJsonAdapter.kt$AchievementImageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AchievementProgressJsonAdapter.kt$AchievementProgressJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AchievementProgressUseCase.kt$AchievementProgressUseCase</ID>
    <ID>UndocumentedPublicClass:AchievementProgressViewModel.kt$AchievementProgressViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AchievementUseCase.kt$AchievementUseCase</ID>
    <ID>UndocumentedPublicClass:AchievementsConfig.kt$AchievementsConfig</ID>
    <ID>UndocumentedPublicClass:AchievementsConfig.kt$AchievementsCoordinators</ID>
    <ID>UndocumentedPublicClass:AchievementsConfig.kt$AchievementsFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:AchievementsConfig.kt$HealthProgramsProgressComposables</ID>
    <ID>UndocumentedPublicClass:ActionBanner.kt$ActionBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ActionBottomSheetDialog.kt$ActionBottomSheetDialog : BottomSheetDialogFragment</ID>
    <ID>UndocumentedPublicClass:ActionBottomSheetDialog.kt$ActionBottomSheetDialog$Action</ID>
    <ID>UndocumentedPublicClass:ActionBottomSheetDialog.kt$ActionBottomSheetDialog$Builder</ID>
    <ID>UndocumentedPublicClass:ActionButton.kt$ActionButton : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ActionDialog.kt$ActionDialog</ID>
    <ID>UndocumentedPublicClass:ActionDialog.kt$ActionDialog$Builder</ID>
    <ID>UndocumentedPublicClass:ActionRow.kt$ActionRow : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ActionRow.kt$ActionRow$IconSize</ID>
    <ID>UndocumentedPublicClass:ActionRowDefaults.kt$ActionRowDefaults</ID>
    <ID>UndocumentedPublicClass:ActivityBannerJsonAdapter.kt$ActivityBannerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ActivityCompletion.kt$ActivityCompletion</ID>
    <ID>UndocumentedPublicClass:ActivityCompletionBottomSheet.kt$ActivityCompletionBottomSheet : BottomSheetDialogFragment</ID>
    <ID>UndocumentedPublicClass:ActivityCompletionBottomSheet.kt$ActivityCompletionBottomSheet$Builder</ID>
    <ID>UndocumentedPublicClass:ActivityCompletionViewModel.kt$ActivityCompletionViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AddDependentFormFragmentDirections.kt$AddDependentFormFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AddDependentRelationshipFragment.kt$AddDependentRelationshipFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AddDependentRelationshipFragmentDirections.kt$AddDependentRelationshipFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AddPatientFragment.kt$AddPatientFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:AddPatientFragmentArgs.kt$AddPatientFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AddPatientFragmentDirections.kt$AddPatientFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientAnalyticsEvent$AddDependent : AddPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientAnalyticsEvent$Cancel : AddPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientAnalyticsEvent$ViewScreen : AddPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientError</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientError$MaxDependentsReached : AddPatientError</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientError$UnknownError : AddPatientError</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientEvent</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientEvent$PatientCreated : AddPatientEvent</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientFormData</ID>
    <ID>UndocumentedPublicClass:AddPatientModels.kt$AddPatientModel</ID>
    <ID>UndocumentedPublicClass:AddedReading.kt$AddedReading : Parcelable</ID>
    <ID>UndocumentedPublicClass:AddedReadingJsonAdapter.kt$AddedReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AdditionalInfo.kt$AdditionalInfo : Serializable</ID>
    <ID>UndocumentedPublicClass:AdditionalInfo.kt$AdditionalInfo$Content : Serializable</ID>
    <ID>UndocumentedPublicClass:AdditionalResourceJsonAdapter.kt$AdditionalResourceJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Address.kt$Address</ID>
    <ID>UndocumentedPublicClass:AddressJsonAdapter.kt$AddressJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AgentAvailabilityFragment.kt$AgentAvailabilityFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AgentChatClient.kt$AgentChatClient : AgentListener</ID>
    <ID>UndocumentedPublicClass:AgentChatContract.kt$AgentChatContract</ID>
    <ID>UndocumentedPublicClass:AgentChatContract.kt$AgentChatContract$Presenter</ID>
    <ID>UndocumentedPublicClass:AgentChatContract.kt$AgentChatContract$View</ID>
    <ID>UndocumentedPublicClass:AgentChatFragment.kt$AgentChatFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:AgentChatPresenter.kt$AgentChatPresenter : PresenterLeagueChatClientListenerKoinComponent</ID>
    <ID>UndocumentedPublicClass:AgentLoadingFragment.kt$AgentLoadingFragment : RootFragmentListenerChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:AgentLoadingViewModel.kt$AgentLoadingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AgentSendEmailActivity.kt$AgentSendEmailActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:AgentSendEmailFragment.kt$AgentSendEmailFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:AgentSendEmailFragmentArgs.kt$AgentSendEmailFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AgentSendEmailFragmentDirections.kt$AgentSendEmailFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AgentTyping.kt$AgentTyping : FrameLayout</ID>
    <ID>UndocumentedPublicClass:AgentUnavailableFragment.kt$AgentUnavailableFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:Alert.kt$Alert</ID>
    <ID>UndocumentedPublicClass:Alert.kt$Alert$Action</ID>
    <ID>UndocumentedPublicClass:AlertJsonAdapter.kt$AlertJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Alert_ActionJsonAdapter.kt$Alert_ActionJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AmountsJsonAdapter.kt$AmountsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AnalyticsConstants.kt$AnalyticsConstants$Actions</ID>
    <ID>UndocumentedPublicClass:AnalyticsConstants.kt$AnalyticsConstants$Categories</ID>
    <ID>UndocumentedPublicClass:AnalyticsConstants.kt$AnalyticsConstants$User</ID>
    <ID>UndocumentedPublicClass:AnalyticsTracker.kt$AnalyticsTracker</ID>
    <ID>UndocumentedPublicClass:AnalyticsTracker_Chat.kt$ChatAnalyticsProvider</ID>
    <ID>UndocumentedPublicClass:AnalyticsTracker_Home.kt$VaccineType</ID>
    <ID>UndocumentedPublicClass:AnalyticsTracker_MissingProfile.kt$MissingField</ID>
    <ID>UndocumentedPublicClass:AnalyticsTracker_Navigation.kt$BottomNavItem</ID>
    <ID>UndocumentedPublicClass:AnalyticsTracker_PrivacyLock.kt$TimeoutReason</ID>
    <ID>UndocumentedPublicClass:Answers.kt$Answers : Serializable</ID>
    <ID>UndocumentedPublicClass:AnswersJsonAdapter.kt$AnswersJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppAlertsResponse.kt$AppAlertsResponse</ID>
    <ID>UndocumentedPublicClass:AppAlertsResponseJsonAdapter.kt$AppAlertsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppDatabase.kt$AppDatabase : BaseRoomDatabase</ID>
    <ID>UndocumentedPublicClass:AppFeatureFlags.kt$AppFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:AppLog.kt$AppLog</ID>
    <ID>UndocumentedPublicClass:AppLog.kt$AppLogBundle</ID>
    <ID>UndocumentedPublicClass:AppLogBundleJsonAdapter.kt$AppLogBundleJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppLogConverter.kt$AppLogConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:AppLogJsonAdapter.kt$AppLogJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppLoggingConfigFlags.kt$AppLoggingConfigFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:AppLogsDao.kt$AppLogsDao : RootDao</ID>
    <ID>UndocumentedPublicClass:AppLogsTable.kt$AppLogsTable</ID>
    <ID>UndocumentedPublicClass:AppNavGraphDirections.kt$AppNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:AppSettingsActivity.kt$AppSettingsActivity : LeagueRootActivityOnPreferenceStartFragmentCallback</ID>
    <ID>UndocumentedPublicClass:AppSettingsFragment.kt$AppSettingsFragment : PreferenceFragmentCompat</ID>
    <ID>UndocumentedPublicClass:AppSettingsFragmentDirections.kt$AppSettingsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AppSettingsViewModel.kt$AppSettingsViewModel : ViewModelNavViewModel</ID>
    <ID>UndocumentedPublicClass:AppUseCaseModule.kt$AppUseCaseModule</ID>
    <ID>UndocumentedPublicClass:AppVersionFooter.kt$AppVersionFooter : FrameLayout</ID>
    <ID>UndocumentedPublicClass:AppVersionFooter.kt$AppVersionFooter$AppVersionData</ID>
    <ID>UndocumentedPublicClass:ApplicationModule.kt$ApplicationModule</ID>
    <ID>UndocumentedPublicClass:ApplyHealthJourneyAdapters.kt$ApplyHealthJourneyAdapters : ApplyModuleAdapters</ID>
    <ID>UndocumentedPublicClass:ApplyModuleAdapters.kt$ApplyModuleAdapters</ID>
    <ID>UndocumentedPublicClass:ApplyWearableAdapter.kt$ApplyWearableAdapter : ApplyModuleAdapters</ID>
    <ID>UndocumentedPublicClass:Appointment.kt$Appointment</ID>
    <ID>UndocumentedPublicClass:Appointment.kt$AppointmentOrgId</ID>
    <ID>UndocumentedPublicClass:Appointment.kt$AppointmentStatus</ID>
    <ID>UndocumentedPublicClass:Appointment.kt$PaymentMethod</ID>
    <ID>UndocumentedPublicClass:Appointment.kt$PaymentMode</ID>
    <ID>UndocumentedPublicClass:Appointment.kt$RequiredDocuments</ID>
    <ID>UndocumentedPublicClass:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents$ConsultWithIntent : AppointmentDetailsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents$ShowCancelBottomSheet : AppointmentDetailsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents$ShowSupportBottomSheet : AppointmentDetailsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentListAnalyticsEvents.kt$AppointmentListAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentListAnalyticsEvents.kt$AppointmentListAnalyticsEvents$BookAppointment : AppointmentListAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentListFragment.kt$AppointmentListFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:AppointmentListFragmentDirections.kt$AppointmentListFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AppointmentListViewModel.kt$AppointmentsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentListViewModel.kt$AppointmentsEvents$AppointmentClicked : AppointmentsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentListViewModel.kt$AppointmentsEvents$SalesforceChatClicked : AppointmentsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentListViewModel.kt$AppointmentsState</ID>
    <ID>UndocumentedPublicClass:AppointmentLocationResponseJsonAdapter.kt$AppointmentLocationResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppointmentPatientResponseJsonAdapter.kt$AppointmentPatientResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppointmentPaymentInfoResponseJsonAdapter.kt$AppointmentPaymentInfoResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppointmentPractitionerInfoResponseJsonAdapter.kt$AppointmentPractitionerInfoResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AppointmentResponse.kt$AppointmentLocationResponse</ID>
    <ID>UndocumentedPublicClass:AppointmentResponse.kt$AppointmentPatientResponse</ID>
    <ID>UndocumentedPublicClass:AppointmentResponse.kt$AppointmentPaymentInfoResponse</ID>
    <ID>UndocumentedPublicClass:AppointmentResponse.kt$AppointmentPractitionerInfoResponse</ID>
    <ID>UndocumentedPublicClass:AppointmentService.kt$GetAppointmentPricingRequest</ID>
    <ID>UndocumentedPublicClass:AppointmentService.kt$GetAppointmentRequest</ID>
    <ID>UndocumentedPublicClass:AppointmentService.kt$GetAppointmentsRequest</ID>
    <ID>UndocumentedPublicClass:AppointmentService.kt$GetAppointmentsRequest$Criteria</ID>
    <ID>UndocumentedPublicClass:AppointmentSuccessFragment.kt$AppointmentSuccessFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents$CheckCancellationPolicy : AppointmentSummaryAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents$CheckTermsAndConditions : AppointmentSummaryAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents$ViewConfirmation : AppointmentSummaryAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogFragment.kt$AppsAndDevicesConnectionDialogFragment : BottomSheetDialogFragmentWearablesKoinComponent</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogState</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogState$Error : AppsAndDevicesConnectionDialogState</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogState$Loading : AppsAndDevicesConnectionDialogState</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogState$Select : AppsAndDevicesConnectionDialogState</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogState$Success : AppsAndDevicesConnectionDialogState</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesFragment.kt$AppsAndDevicesFragment : RootFragmentWearablesKoinComponent</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:Article.kt$Article</ID>
    <ID>UndocumentedPublicClass:ArticleJsonAdapter.kt$ArticleJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ArticleList.kt$ArticleList : HomeSection</ID>
    <ID>UndocumentedPublicClass:ArticleListDao.kt$ArticleListDao : RootDao</ID>
    <ID>UndocumentedPublicClass:ArticleListData.kt$ArticleListData</ID>
    <ID>UndocumentedPublicClass:ArticleListJsonAdapter.kt$ArticleListJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ArticleListTable.kt$ArticleListTable</ID>
    <ID>UndocumentedPublicClass:ArticleListTypeConverter.kt$ArticleListTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:AssessmentCompleteFragment.kt$AssessmentCompleteFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentCompleteFragmentDirections.kt$AssessmentCompleteFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$ForwardButtonState</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionStatus</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionStatus$AnswerSelected : QuestionStatus</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionStatus$InitialState : QuestionStatus</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionStatus$Loaded : QuestionStatus</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionStatus$Loading : QuestionStatus</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect$CloseFragment : QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect$NavigateTo : QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect$ShowDataSharing : QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect$ShowError : QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect$ShowOutcomes : QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEffect$ShowSubmitScreen : QuestionViewEffect</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEvent</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEvent$BackButton : QuestionViewEvent</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEvent$Close : QuestionViewEvent</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEvent$NextButton : QuestionViewEvent</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEvent$UpdateAnswer : QuestionViewEvent</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionViewEvent$UpdateCurrentQuestion : QuestionViewEvent</ID>
    <ID>UndocumentedPublicClass:AssessmentContract.kt$QuestionsCollection</ID>
    <ID>UndocumentedPublicClass:AssessmentExitViewModel.kt$AssessmentExitViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AssessmentFrictionFragment.kt$AssessmentFrictionFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AssessmentIntro.kt$AssessmentIntro : LinearLayout</ID>
    <ID>UndocumentedPublicClass:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AssessmentNavGraphDirections.kt$AssessmentNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:AssessmentOnboardingAdditionalInfoFragment.kt$AssessmentOnboardingAdditionalInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentOnboardingFragment.kt$AssessmentOnboardingFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentOnboardingFragmentDirections.kt$AssessmentOnboardingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AssessmentQuestionFragment.kt$AssessmentQuestionFragment : RootFragmentViewControllerInterface</ID>
    <ID>UndocumentedPublicClass:AssessmentQuestionFragmentArgs.kt$AssessmentQuestionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AssessmentRepository.kt$AssessmentRepository</ID>
    <ID>UndocumentedPublicClass:AssessmentRepositoryImpl.kt$AssessmentRepositoryImpl : AssessmentRepositoryRepository</ID>
    <ID>UndocumentedPublicClass:AssessmentResponseSummaryJsonAdapter.kt$AssessmentResponseSummaryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AssessmentViewModel.kt$AssessmentViewModel$AssessmentFlowsResponse</ID>
    <ID>UndocumentedPublicClass:AssessmentsExitFragment.kt$AssessmentsExitFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AssetBanner.kt$AssetBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:AssetBanner.kt$AssetBanner$Style</ID>
    <ID>UndocumentedPublicClass:AssetErrorBanner.kt$AssetErrorBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:AssetErrorBannerActivity.kt$AssetErrorBannerActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:AssociateReading.kt$AssociateReading : ReadingView</ID>
    <ID>UndocumentedPublicClass:AssociateReadingJsonAdapter.kt$AssociateReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Auth0LeagueAuthenticator.kt$Auth0LeagueAuthenticator : Auth0AuthenticatorLeagueAuthenticator</ID>
    <ID>UndocumentedPublicClass:AuthInfoJsonAdapter.kt$AuthInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AuthMethod.kt$AuthMethod</ID>
    <ID>UndocumentedPublicClass:AuthNavGraphArgs.kt$AuthNavGraphArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:AuthPhoneNumberFragment.kt$AuthPhoneNumberFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:AuthPhoneNumberFragmentDirections.kt$AuthPhoneNumberFragmentDirections</ID>
    <ID>UndocumentedPublicClass:AuthenticationViewModel.kt$AuthenticationViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:Availability.kt$Availability</ID>
    <ID>UndocumentedPublicClass:AvailableTimeslotsResponse.kt$AvailableTimeslotsResponse</ID>
    <ID>UndocumentedPublicClass:AvailableTimeslotsResponse.kt$TimeslotResponse</ID>
    <ID>UndocumentedPublicClass:AvailableTimeslotsResponse.kt$TimeslotsAttributes</ID>
    <ID>UndocumentedPublicClass:AvailableTimeslotsResponseJsonAdapter.kt$AvailableTimeslotsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:AvatarImageView.kt$AvatarImageView : AppCompatImageView</ID>
    <ID>UndocumentedPublicClass:BMIInfoFragment.kt$BMIInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:BalancesJsonAdapter.kt$BalancesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Banner.kt$Banner</ID>
    <ID>UndocumentedPublicClass:BannerActivity.kt$BannerActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:BannerController.kt$BannerController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:BannerProvider.kt$BannerProvider</ID>
    <ID>UndocumentedPublicClass:BannersJsonAdapter.kt$BannersJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:BarcodeGenerator.kt$BarcodeGenerator</ID>
    <ID>UndocumentedPublicClass:BarcodeOverlayView.kt$BarcodeOverlayView : View</ID>
    <ID>UndocumentedPublicClass:BaseJsonUtils.kt$BaseJsonUtils : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:BaseRadioSelectionBottomSheetDialog.kt$BaseRadioSelectionBottomSheetDialog : BottomSheetDialogFragment</ID>
    <ID>UndocumentedPublicClass:BaseRoomDatabase.kt$BaseRoomDatabase : RoomDatabase</ID>
    <ID>UndocumentedPublicClass:BaseTypeConverter.kt$BaseTypeConverter&lt;T></ID>
    <ID>UndocumentedPublicClass:BasicBanner.kt$BasicBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:BasicIconBanner.kt$BasicIconBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:BenefitCoverage.kt$BenefitCoverage</ID>
    <ID>UndocumentedPublicClass:BenefitCoverageJsonAdapter.kt$BenefitCoverageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:BenefitSticker.kt$BenefitSticker : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:BloodPressureInfoFragment.kt$BloodPressureInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:BottomPageTab.kt$BottomPageTab : FrameLayout</ID>
    <ID>UndocumentedPublicClass:BottomSheetDialog.kt$BottomSheetDialog : BottomSheetDialogFragment</ID>
    <ID>UndocumentedPublicClass:BottomSheetDialog.kt$BottomSheetDialog$Builder</ID>
    <ID>UndocumentedPublicClass:BrandedPointsBanner.kt$BrandedPointsBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:BrowserActivity.kt$BrowserActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:BrowserFragment.kt$BrowserFragment : LeagueRootFragment</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerDataSharingViewModel.kt$BuilderDailyScreenerDataSharingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerFragment.kt$BuilderDailyScreenerFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerFragmentDirections.kt$BuilderDailyScreenerFragmentDirections</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerResponsesFragment.kt$BuilderDailyScreenerResponsesFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerReturnToWorkDateFragment.kt$BuilderDailyScreenerReturnToWorkDateFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:BuilderOnboardingViewPagerController.kt$BuilderOnboardingViewPagerController : Typed2EpoxyController</ID>
    <ID>UndocumentedPublicClass:BundleUtils.kt$BundleUtils</ID>
    <ID>UndocumentedPublicClass:Button.kt$Button : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Button.kt$Button : Serializable</ID>
    <ID>UndocumentedPublicClass:ButtonActivity.kt$ButtonActivity : PresenterActivityOnClickListener</ID>
    <ID>UndocumentedPublicClass:ButtonJsonAdapter.kt$ButtonJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ButtonRow.kt$ButtonRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:CTAJsonAdapter.kt$CTAJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Cache.kt$Cache</ID>
    <ID>UndocumentedPublicClass:CampaignContentConfig.kt$CampaignContentConfig : Serializable</ID>
    <ID>UndocumentedPublicClass:CampaignContentConfigJsonAdapter.kt$CampaignContentConfigJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CampaignMode.kt$CampaignMode</ID>
    <ID>UndocumentedPublicClass:CampaignsResponse.kt$CampaignsResponse</ID>
    <ID>UndocumentedPublicClass:CaptionedImageView.kt$CaptionedImageView : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Card.kt$Card : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Card.kt$Card$CardSize</ID>
    <ID>UndocumentedPublicClass:Card.kt$Card$ImageShape</ID>
    <ID>UndocumentedPublicClass:CardActivity.kt$CardActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:CardController.kt$CardController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$CareChatClient</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$ChatState</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$ChatState$Connected : ChatState</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$ChatState$Ended : ChatState</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$ChatState$Inactive : ChatState</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$ChatState$Queued : ChatState</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$StartChatResponse</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$StartChatResponse$AgentOffline : StartChatResponse</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$StartChatResponse$AgentUnavailable : StartChatResponse</ID>
    <ID>UndocumentedPublicClass:CareChatClient.kt$StartChatResponse$Success : StartChatResponse</ID>
    <ID>UndocumentedPublicClass:CareNavigation.kt$CareNavigation : CoreNavigation</ID>
    <ID>UndocumentedPublicClass:CarePresenterApplication.kt$CarePresenterApplication : Application</ID>
    <ID>UndocumentedPublicClass:CarePresenterViewModelModule.kt$CarePresenterViewModelModule</ID>
    <ID>UndocumentedPublicClass:CareProviderHistory.kt$CareProviderHistory</ID>
    <ID>UndocumentedPublicClass:CareProviderHistory.kt$CareProviderHistory$ChatHistoryRow</ID>
    <ID>UndocumentedPublicClass:CareProviderHistory.kt$MaplePostConsults : Parcelable</ID>
    <ID>UndocumentedPublicClass:CareProviderHistory.kt$MaplePostConsultsRow : Parcelable</ID>
    <ID>UndocumentedPublicClass:CareProviderHistory.kt$SfChatTranscript</ID>
    <ID>UndocumentedPublicClass:CareProviderHistoryJsonAdapter.kt$CareProviderHistoryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CareProviderHistory_ChatHistoryRowJsonAdapter.kt$CareProviderHistory_ChatHistoryRowJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CarouselActivity.kt$CarouselActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:CategorizedActionRowsList.kt$CategorizedActionRowsList$CategoryData&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:CategorizedActionRowsList.kt$CategorizedActionRowsList$PageData&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:CategorizedActionRowsList.kt$CategorizedActionRowsList$RowData&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:CategoryJsonAdapter.kt$CategoryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CenteredBanner.kt$CenteredBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Challenge.kt$Challenge</ID>
    <ID>UndocumentedPublicClass:Challenge.kt$Challenge$Status</ID>
    <ID>UndocumentedPublicClass:Challenge.kt$UserChallenge</ID>
    <ID>UndocumentedPublicClass:Challenge.kt$UserChallenge$EnrollmentStatus</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$ActivityVerificationProgress</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$CTA</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$CampaignInfo</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$Status</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$CompletionMethod</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivity.kt$Counter</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivityItemResponseJsonAdapter.kt$ChallengeHealthActivityItemResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChallengeHealthActivityResponse.kt$ChallengeHealthActivityResponse</ID>
    <ID>UndocumentedPublicClass:ChallengeInfoJsonAdapter.kt$ChallengeInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChallengeItemResponse.kt$ChallengeItemResponse</ID>
    <ID>UndocumentedPublicClass:ChallengeItemResponseJsonAdapter.kt$ChallengeItemResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChallengeLandingFragmentArgs.kt$ChallengeLandingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ChallengeLandingFragmentDirections.kt$ChallengeLandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeModule.kt$ChallengeModule</ID>
    <ID>UndocumentedPublicClass:ChallengeRepository.kt$ChallengeRepository</ID>
    <ID>UndocumentedPublicClass:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ChallengeSettingsBottomSheetDialogFragmentDirections.kt$ChallengeSettingsBottomSheetDialogFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpChooseAvatarFragmentDirections.kt$ChallengeSignUpChooseAvatarFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpCompletionFragmentDirections.kt$ChallengeSignUpCompletionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpDeviceConnectionFragmentDirections.kt$ChallengeSignUpDeviceConnectionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpFlowDirections.kt$ChallengeSignUpFlowDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpPrivacyPolicyFragmentDirections.kt$ChallengeSignUpPrivacyPolicyFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengeSignUpProfilePhotoFragmentDirections.kt$ChallengeSignUpProfilePhotoFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChallengesConfiguration.kt$ChallengesDrawables</ID>
    <ID>UndocumentedPublicClass:ChallengesFeatureFlags.kt$ChallengesFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:ChallengesResponse.kt$ChallengesResponse</ID>
    <ID>UndocumentedPublicClass:ChallengesWearablesService.kt$ChallengesWearablesService</ID>
    <ID>UndocumentedPublicClass:ChangePasswordFragment.kt$ChangePasswordFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ChangePasswordFragmentDirections.kt$ChangePasswordFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChartConfig.kt$ChartConfig</ID>
    <ID>UndocumentedPublicClass:ChartConfigJsonAdapter.kt$ChartConfigJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatActivity.kt$ChatActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ChatAgent.kt$ChatAgent : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatAgentConfig.kt$ChatAgentConfig : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatAvailability.kt$ChatAvailability : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatAvailabilityResponse.kt$ChatAvailabilityResponse</ID>
    <ID>UndocumentedPublicClass:ChatBubbleBanner.kt$ChatBubbleBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ChatClientUser.kt$ChatClientUser : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatConfig.kt$ChatConfig : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatConfiguration.kt$Chat</ID>
    <ID>UndocumentedPublicClass:ChatConfiguration.kt$ChatNotInitializedExpection : Exception</ID>
    <ID>UndocumentedPublicClass:ChatController.kt$ChatController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker$ChatPaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths$ChatHistory : ChatPaths</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths$MapleChatProvider : ChatPaths</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths$MapleSignOn : ChatPaths</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths$OfflineSupport : ChatPaths</ID>
    <ID>UndocumentedPublicClass:ChatDeepLinker.kt$ChatDeepLinker.ChatPaths$SalesForceChatProvider : ChatPaths</ID>
    <ID>UndocumentedPublicClass:ChatDetailsController.kt$ChatDetailsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ChatDetailsFragment.kt$ChatDetailsFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:ChatDetailsFragmentArgs.kt$ChatDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ChatDetailsFragmentDirections.kt$ChatDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChatFeatureFlags.kt$ChatFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:ChatHistoryActivity.kt$ChatHistoryActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:ChatHistoryController.kt$ChatHistoryController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ChatHistoryController.kt$ChatHistoryController$OnLoadMoreClickListener</ID>
    <ID>UndocumentedPublicClass:ChatHistoryController.kt$ChatHistoryController$OnTranscriptClickListener</ID>
    <ID>UndocumentedPublicClass:ChatHistoryFragment.kt$ChatHistoryFragment : RootFragmentOnTranscriptClickListenerOnLoadMoreClickListenerChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:ChatHistoryFragmentDirections.kt$ChatHistoryFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChatHistoryNavGraphDirections.kt$ChatHistoryNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:ChatInput.kt$ChatInput : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ChatLandingActivity.kt$ChatLandingActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:ChatLandingFragment.kt$ChatLandingFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ChatLandingFragmentDirections.kt$ChatLandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ChatLandingViewModel.kt$ChatLandingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ChatMessage.kt$ChatMessage : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ChatMessage.kt$ChatMessage$MessageInfo</ID>
    <ID>UndocumentedPublicClass:ChatNavGraphArgs.kt$ChatNavGraphArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ChatProviderDetailItemsJsonAdapter.kt$ChatProviderDetailItemsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatProviderResponse.kt$ChatProviderResponse</ID>
    <ID>UndocumentedPublicClass:ChatProviderResponse.kt$HoursPricing : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatProviderResponse.kt$ThirdPartyDetails</ID>
    <ID>UndocumentedPublicClass:ChatProviderResponse.kt$TimeRange : Parcelable</ID>
    <ID>UndocumentedPublicClass:ChatProviderResponseJsonAdapter.kt$ChatProviderResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatProviders.kt$ChatProviderDetailItems</ID>
    <ID>UndocumentedPublicClass:ChatProviders.kt$ChatProviders</ID>
    <ID>UndocumentedPublicClass:ChatProvidersJsonAdapter.kt$ChatProvidersJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse$Message</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptMessagesResponseJsonAdapter.kt$ChatTranscriptMessagesResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptMessagesResponse_MessageJsonAdapter.kt$ChatTranscriptMessagesResponse_MessageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptResponse.kt$ChatTranscriptResponse</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptResponse.kt$ChatTranscriptResponse$Transcript</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptResponseJsonAdapter.kt$ChatTranscriptResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatTranscriptResponse_TranscriptJsonAdapter.kt$ChatTranscriptResponse_TranscriptJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ChatWithUsFragment.kt$ChatWithUsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ChatWithUsFragmentDirections.kt$ChatWithUsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:CheckBoxInputState.kt$CheckBoxInputState</ID>
    <ID>UndocumentedPublicClass:CheckUserInfoCompleteUseCase.kt$CheckUserInfoCompleteUseCase</ID>
    <ID>UndocumentedPublicClass:CheckUserInfoCompleteUseCase.kt$CompleteUserProfileResult</ID>
    <ID>UndocumentedPublicClass:CheckboxInputRow.kt$CheckboxInputRow : FrameLayout</ID>
    <ID>UndocumentedPublicClass:CircleButton.kt$CircleButton : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ClaimCodeData.kt$ClaimCodeData</ID>
    <ID>UndocumentedPublicClass:ClaimCodeDataJsonAdapter.kt$ClaimCodeDataJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ClaimDetail.kt$ClaimDetail : RealmObjectClaimDocumentType</ID>
    <ID>UndocumentedPublicClass:ClaimDocumentFragment.kt$ClaimDocumentFragment : LeagueRootFragment</ID>
    <ID>UndocumentedPublicClass:ClickableConsentText.kt$UrlType</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsAnalyticEvents$TrackLocationDetailClickEmail : ClinicDetailsAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsAnalyticEvents$TrackLocationDetailClickPhone : ClinicDetailsAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsAnalyticEvents$TrackLocationDetailClickUrl : ClinicDetailsAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsAnalyticEvents$TrackLocationDetailSelectLocation : ClinicDetailsAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsAnalyticEvents$ViewLocationDetailScreen : ClinicDetailsAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsEvents$EmailClicked : ClinicDetailsEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsEvents$LocationSelected : ClinicDetailsEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsEvents$PhoneClicked : ClinicDetailsEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsEvents.kt$ClinicDetailsEvents$UrlClicked : ClinicDetailsEvents</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsFragment.kt$ClinicDetailsFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsModels.kt$ClinicDetails</ID>
    <ID>UndocumentedPublicClass:ClinicDetailsModels.kt$ClinicDetailsModel</ID>
    <ID>UndocumentedPublicClass:CloudConsentSuccessState.kt$CloudConsentSuccessState</ID>
    <ID>UndocumentedPublicClass:CloudConsentSuccessState.kt$CloudConsentSuccessState$DEVICE_FOUND : CloudConsentSuccessState</ID>
    <ID>UndocumentedPublicClass:CloudConsentSuccessState.kt$CloudConsentSuccessState$LOADING : CloudConsentSuccessState</ID>
    <ID>UndocumentedPublicClass:CloudConsentSuccessState.kt$CloudConsentSuccessState$NO_DEVICE : CloudConsentSuccessState</ID>
    <ID>UndocumentedPublicClass:CloudDeviceUtil.kt$CloudDeviceUtil</ID>
    <ID>UndocumentedPublicClass:CloudRedirectFragment.kt$CloudRedirectFragment : BottomSheetDialogFragmentWearablesKoinComponent</ID>
    <ID>UndocumentedPublicClass:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:CloudRedirectViewModel.kt$CloudRedirectViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:CobrandingBanner.kt$CobrandingBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:CodeAnalyzerContract.kt$CodeAnalyzer : Analyzer</ID>
    <ID>UndocumentedPublicClass:CodeAnalyzerContract.kt$CodeAnalyzerListener</ID>
    <ID>UndocumentedPublicClass:CodeAnalyzerContract.kt$PermissionManager</ID>
    <ID>UndocumentedPublicClass:Color.kt$Color</ID>
    <ID>UndocumentedPublicClass:ColorActivity.kt$ColorActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ColorController.kt$ColorController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ColorController.kt$ColorController$ColorAttrGroup</ID>
    <ID>UndocumentedPublicClass:ColorController.kt$ColorController$ColorGroup</ID>
    <ID>UndocumentedPublicClass:ColorController.kt$ColorController$FontColorAttrGroup</ID>
    <ID>UndocumentedPublicClass:ColorViewModel.kt$ColorViewModel : EpoxyModelWithHolder</ID>
    <ID>UndocumentedPublicClass:ColorViewModel.kt$ColorViewModel$SimpleDataBindingHolder : EpoxyHolder</ID>
    <ID>UndocumentedPublicClass:CompleteQuestionResponse.kt$CompleteQuestionResponse</ID>
    <ID>UndocumentedPublicClass:CompleteQuestionResponseJsonAdapter.kt$CompleteQuestionResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CompletionMethod.kt$CompletionMethod : Parcelable</ID>
    <ID>UndocumentedPublicClass:CompletionMethod.kt$CompletionMethod$Unsupported : CompletionMethod</ID>
    <ID>UndocumentedPublicClass:CompletionMethod.kt$CompletionMethodType</ID>
    <ID>UndocumentedPublicClass:ComponentBrowserFragment.kt$ComponentBrowserFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ComponentBrowserFragmentDirections.kt$ComponentBrowserFragmentDirections</ID>
    <ID>UndocumentedPublicClass:CompositeAnalyticsTracker.kt$CompositeAnalyticsTracker : AnalyticsTracker</ID>
    <ID>UndocumentedPublicClass:CompositeDeepLinker.kt$CompositeDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator : LeagueAuthenticator</ID>
    <ID>UndocumentedPublicClass:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator$AuthenticationMethod</ID>
    <ID>UndocumentedPublicClass:ConnectionSharedViewModel.kt$ConnectionSharedViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ConnectivityUtils.kt$ConnectivityUtils</ID>
    <ID>UndocumentedPublicClass:Consent.kt$Consent</ID>
    <ID>UndocumentedPublicClass:ConsentActivity.kt$ConsentActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ConsentAttributesJsonAdapter.kt$ConsentAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ConsentController.kt$ConsentController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ConsentFragment.kt$ConsentFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ConsentFragmentArgs.kt$ConsentFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ConsentFragmentDirections.kt$ConsentFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ConsentResponse.kt$ConsentAttributes</ID>
    <ID>UndocumentedPublicClass:ConsentResponse.kt$ConsentResponse</ID>
    <ID>UndocumentedPublicClass:ConsentResponseJsonAdapter.kt$ConsentResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ConsentScreen.kt$ConsentScreen : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Constants.kt$Constants</ID>
    <ID>UndocumentedPublicClass:ContactCustomerSupportViewModel.kt$ContactCustomerSupportViewModel : ViewModelContactCustomerSupportViewModelInterface</ID>
    <ID>UndocumentedPublicClass:ContactCustomerSupportViewModel.kt$ContactCustomerSupportViewModelInterface</ID>
    <ID>UndocumentedPublicClass:ContactUsDemo.kt$ContactUsDemo</ID>
    <ID>UndocumentedPublicClass:ContactUsFragment.kt$ContactUsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ContactUsFragmentArgs.kt$ContactUsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ContactUsFragmentDirections.kt$ContactUsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ContentAPI.kt$ContentAPI : Authenticator</ID>
    <ID>UndocumentedPublicClass:ContentAPIAuthenticator.kt$ContentAPIAuthenticator</ID>
    <ID>UndocumentedPublicClass:ContentAPIEnvironmentProvider.kt$ContentAPIEnvironmentProvider</ID>
    <ID>UndocumentedPublicClass:ContentAPI_OpenContent.kt$UriProvider</ID>
    <ID>UndocumentedPublicClass:ContentConfirmDialog.kt$ContentConfirmDialog : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:ContentJsonJsonAdapter.kt$ContentJsonJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ContentProviderInfo.kt$ContentProviderInfo : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:ContentTypeJsonAdapter.kt$ContentTypeJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ConversationCard.kt$ConversationCard : LinearLayout</ID>
    <ID>UndocumentedPublicClass:CoreConfiguration.kt$CoreNotInitializedExpection : Exception</ID>
    <ID>UndocumentedPublicClass:CoreConfiguration.kt$CoreSettings</ID>
    <ID>UndocumentedPublicClass:CoreDatabase.kt$CoreDatabase : BaseRoomDatabase</ID>
    <ID>UndocumentedPublicClass:CoreEnvironmentConfiguration.kt$CoreEnvironmentConfiguration</ID>
    <ID>UndocumentedPublicClass:CoreFeatureFlags.kt$CoreFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:CoreImageLoader.kt$CoreGlideModule : LibraryGlideModule</ID>
    <ID>UndocumentedPublicClass:CoreImageLoader.kt$CoreImageLoader : ImageLoader</ID>
    <ID>UndocumentedPublicClass:CoreNavigation.kt$CoreNavigation</ID>
    <ID>UndocumentedPublicClass:CorePresenterApplication.kt$CorePresenterApplication : RootApplication</ID>
    <ID>UndocumentedPublicClass:CorePresenterViewModelModule.kt$CorePresenterViewModelModule</ID>
    <ID>UndocumentedPublicClass:CounterJsonAdapter.kt$CounterJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Countries.kt$Countries</ID>
    <ID>UndocumentedPublicClass:Covid19VaccineRepository.kt$Covid19VaccineRepository : VaccineRepositoryRepository</ID>
    <ID>UndocumentedPublicClass:CovidDataSharingFragment.kt$CovidDataSharingFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:CovidHealthAssessmentInformationJsonAdapter.kt$CovidHealthAssessmentInformationJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CovidHealthAssessmentResultJsonAdapter.kt$CovidHealthAssessmentResultJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CovidOnboardingSlide.kt$CovidOnboardingSlide : FrameLayoutKoinComponent</ID>
    <ID>UndocumentedPublicClass:CrashReportingLogger.kt$CrashReportingLogger</ID>
    <ID>UndocumentedPublicClass:CreateAppointment.kt$CreateAppointment</ID>
    <ID>UndocumentedPublicClass:CreateAppointmentResponse.kt$CreateAppointmentResponse</ID>
    <ID>UndocumentedPublicClass:CreateAppointmentResponse.kt$CreateAppointmentResponseAttributes</ID>
    <ID>UndocumentedPublicClass:CreateAppointmentResponseAttributesJsonAdapter.kt$CreateAppointmentResponseAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CreateAppointmentResponseJsonAdapter.kt$CreateAppointmentResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CreateConsentUseCase.kt$CreateConsentModel</ID>
    <ID>UndocumentedPublicClass:CreatePatientRequest.kt$CreatePatientRequest</ID>
    <ID>UndocumentedPublicClass:CreatePatientRequestJsonAdapter.kt$CreatePatientRequestJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CreatePatientUseCase.kt$CreatePatientModel</ID>
    <ID>UndocumentedPublicClass:CreateProfileFragment.kt$CreateProfileFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:CreateProfileFragmentDirections.kt$CreateProfileFragmentDirections</ID>
    <ID>UndocumentedPublicClass:CreateProfileSuccessFragment.kt$CreateProfileSuccessFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:CreateProfileSuccessFragmentDirections.kt$CreateProfileSuccessFragmentDirections</ID>
    <ID>UndocumentedPublicClass:CreateProfileViewModel.kt$CreateProfileData</ID>
    <ID>UndocumentedPublicClass:CreateProfileViewModel.kt$CreateProfileViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:CreateWebUrl.kt$PageIntent</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlRequest.kt$CreateWebUrlRequest</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlRequest.kt$CreateWebUrlRequestAttributes</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlRequestAttributesJsonAdapter.kt$CreateWebUrlRequestAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlRequestJsonAdapter.kt$CreateWebUrlRequestJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlResponse.kt$CreateWebUrlResponse</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlResponse.kt$CreateWebUrlResponseAttributes</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlResponseAttributesJsonAdapter.kt$CreateWebUrlResponseAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CreateWebUrlResponseJsonAdapter.kt$CreateWebUrlResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CtaJsonAdapter.kt$CtaJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CurrencyUtil.kt$CurrencyUtil</ID>
    <ID>UndocumentedPublicClass:CurrentGoalCard.kt$CurrentGoalCard : FrameLayout</ID>
    <ID>UndocumentedPublicClass:CurrentGoalCard.kt$CurrentGoalCard$CurrentGoalStyle</ID>
    <ID>UndocumentedPublicClass:CustomFieldsJsonAdapter.kt$CustomFieldsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:CyclicAdapter.kt$CyclicAdapter : Adapter</ID>
    <ID>UndocumentedPublicClass:DailyScreener.kt$AdditionalResource</ID>
    <ID>UndocumentedPublicClass:DailyScreener.kt$AssessmentResponseSummary : Parcelable</ID>
    <ID>UndocumentedPublicClass:DailyScreener.kt$CovidHealthAssessmentInformation</ID>
    <ID>UndocumentedPublicClass:DailyScreener.kt$CovidHealthAssessmentResult</ID>
    <ID>UndocumentedPublicClass:DailyScreener.kt$Recommendation</ID>
    <ID>UndocumentedPublicClass:DailyScreenerResultsController.kt$DailyScreenerResultsController : EpoxyControllerKoinComponent</ID>
    <ID>UndocumentedPublicClass:DailyScreenerResultsController.kt$DailyScreenerResultsController$Listener</ID>
    <ID>UndocumentedPublicClass:DailyScreenerResultsFragment.kt$DailyScreenerResultsFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:DailyScreenerResultsFragmentDirections.kt$DailyScreenerResultsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:DailyScreenerResultsViewModel.kt$DailyScreenerResultsViewModel : ViewModelKoinComponent</ID>
    <ID>UndocumentedPublicClass:DashboardFragment.kt$DashboardFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DashboardFragmentArgs.kt$DashboardFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DashboardFragmentDirections.kt$DashboardFragmentDirections</ID>
    <ID>UndocumentedPublicClass:DashboardViewModel.kt$DashboardViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DataPointsUtil.kt$DataPointsUtil</ID>
    <ID>UndocumentedPublicClass:DatabasePreferencesUtils.kt$DatabasePreferencesUtils</ID>
    <ID>UndocumentedPublicClass:DateAdapter.kt$DateAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DateInputRow.kt$DateInputRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:DateOfBirthInputState.kt$DateOfBirthInputState</ID>
    <ID>UndocumentedPublicClass:DateQuestion.kt$DateQuestion : FrameLayout</ID>
    <ID>UndocumentedPublicClass:DateSelectionUseCase.kt$DateSelectionState</ID>
    <ID>UndocumentedPublicClass:DateSelectionUseCase.kt$DateSelectionUseCase</ID>
    <ID>UndocumentedPublicClass:DateToLongConverter.kt$DateToLongConverter</ID>
    <ID>UndocumentedPublicClass:DateUtils.kt$DateUtils</ID>
    <ID>UndocumentedPublicClass:DateUtils.kt$ShortDate</ID>
    <ID>UndocumentedPublicClass:DeepLinker.kt$DeepLinker</ID>
    <ID>UndocumentedPublicClass:DefaultNavViewModel.kt$DefaultNavViewModel : NavViewModel</ID>
    <ID>UndocumentedPublicClass:DeletedReading.kt$DeletedReading</ID>
    <ID>UndocumentedPublicClass:DeletedReadingJsonAdapter.kt$DeletedReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DeletedReadingResponse.kt$DeletedReadingResponse</ID>
    <ID>UndocumentedPublicClass:DeletedReadingResponseJsonAdapter.kt$DeletedReadingResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Dependent.kt$Address</ID>
    <ID>UndocumentedPublicClass:Dependent.kt$Dependent</ID>
    <ID>UndocumentedPublicClass:DependentAddedDialog.kt$DependentAddedDialog : BaseDialog</ID>
    <ID>UndocumentedPublicClass:DependentAddedDialog.kt$OnDependentAddedDialogListener</ID>
    <ID>UndocumentedPublicClass:DependentCardController.kt$DependentCardClickListener</ID>
    <ID>UndocumentedPublicClass:DependentCardController.kt$DependentCardController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:DependentCardViewModel.kt$DependentCardViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DependentCardsResponseJsonAdapter.kt$DependentCardsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DependentDetailsFragment.kt$DependentDetailsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DependentDetailsFragmentDirections.kt$DependentDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:DependentDetailsRowData.kt$DependentDetailsRowData</ID>
    <ID>UndocumentedPublicClass:DependentDetailsViewModel.kt$DependentDetailsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DependentFormAdapter.kt$DependentFormAdapter : Adapter</ID>
    <ID>UndocumentedPublicClass:DependentFormAdapter.kt$OnMessageListener</ID>
    <ID>UndocumentedPublicClass:DependentFormFragment.kt$DependentFormFragment : LeagueRootFragment</ID>
    <ID>UndocumentedPublicClass:DependentFormFragment.kt$DependentFormListener</ID>
    <ID>UndocumentedPublicClass:DependentFormSuccessFragment.kt$DependentFormSuccessFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DependentFormSuccessFragmentDirections.kt$DependentFormSuccessFragmentDirections</ID>
    <ID>UndocumentedPublicClass:DependentFormViewModel.kt$DependentFormViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DependentFormsUtils.kt$DependentFormRelationshipData</ID>
    <ID>UndocumentedPublicClass:DependentFormsUtils.kt$DependentTextInputFieldState</ID>
    <ID>UndocumentedPublicClass:DependentInviteActivity.kt$DependentInviteActivity : LeagueRootActivity</ID>
    <ID>UndocumentedPublicClass:DependentInviteActivity.kt$DependentInviteLauncher</ID>
    <ID>UndocumentedPublicClass:DependentInviteEmailFragment.kt$DependentInviteEmailFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DependentInviteEmailFragmentDirections.kt$DependentInviteEmailFragmentDirections</ID>
    <ID>UndocumentedPublicClass:DependentInviteStatusWidget.kt$DependentInviteStatus</ID>
    <ID>UndocumentedPublicClass:DependentInviteStatusWidget.kt$DependentInviteStatusWidget : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:DependentInviteSuccessFragment.kt$DependentInviteSuccessFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DependentInviteSuccessFragmentArgs.kt$DependentInviteSuccessFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DependentInviteSuccessFragmentDirections.kt$DependentInviteSuccessFragmentDirections</ID>
    <ID>UndocumentedPublicClass:DependentInviteViewModel.kt$DependentInviteError</ID>
    <ID>UndocumentedPublicClass:DependentInviteViewModel.kt$DependentInviteViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DependentJsonAdapter.kt$DependentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DependentKeyValuePair.kt$DependentKeyValuePair</ID>
    <ID>UndocumentedPublicClass:DependentKeyValuePairJsonAdapter.kt$DependentKeyValuePairJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DependentQualificationFragment.kt$DependentQualificationFragment : LeagueRootFragment</ID>
    <ID>UndocumentedPublicClass:DependentSpinnerFieldAdapter.kt$DependentSpinnerFieldAdapter : BaseAdapter</ID>
    <ID>UndocumentedPublicClass:DependentWalletCardActivity.kt$DependentWalletCardActivity : RootActivityDependentCardClickListener</ID>
    <ID>UndocumentedPublicClass:DependentWalletCardActivity.kt$DependentWalletCardLauncher</ID>
    <ID>UndocumentedPublicClass:DependentsActivity.kt$DependentsActivity : LeagueRootActivityOnDependentClickListener</ID>
    <ID>UndocumentedPublicClass:DependentsController.kt$DependentsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:DependentsController.kt$OnDependentClickListener</ID>
    <ID>UndocumentedPublicClass:DependentsDao.kt$DependentsDao : RootDao</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$ConditionalField</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$DependentFormContentOption</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$DependentFormField</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$DependentsForm</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$DependentsFormSchema</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$FormDataType</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$FormInputType</ID>
    <ID>UndocumentedPublicClass:DependentsForm.kt$Tooltip</ID>
    <ID>UndocumentedPublicClass:DependentsFormsUseCases.kt$DependentFormType</ID>
    <ID>UndocumentedPublicClass:DependentsFormsUseCases.kt$FetchAddDependentFormSchema</ID>
    <ID>UndocumentedPublicClass:DependentsFormsUseCases.kt$FetchEditDependentFormSchema</ID>
    <ID>UndocumentedPublicClass:DependentsFormsUseCases.kt$FetchSingleDependentData</ID>
    <ID>UndocumentedPublicClass:DependentsFormsUseCases.kt$UploadDependentFormUseCase</ID>
    <ID>UndocumentedPublicClass:DependentsListController.kt$DependentClickListener</ID>
    <ID>UndocumentedPublicClass:DependentsListController.kt$DependentsListController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:DependentsListJsonAdapter.kt$DependentsListJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentAlertEventType</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentStateVersion</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentUiEvent</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentUiEventType</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentsViewModelError</ID>
    <ID>UndocumentedPublicClass:DependentsViewModel.kt$DependentsViewModelErrorType</ID>
    <ID>UndocumentedPublicClass:DetailActivity.kt$DetailActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:DetailRow.kt$DetailRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:DetailView.kt$DetailView : LinearLayout</ID>
    <ID>UndocumentedPublicClass:DetailedProgressCard.kt$DetailedProgressCard : LinearLayout</ID>
    <ID>UndocumentedPublicClass:DeviceInfoFragment.kt$DeviceInfoFragment : RootFragmentWearablesKoinComponent</ID>
    <ID>UndocumentedPublicClass:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DeviceInfoViewModel.kt$DeviceInfoViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:Dialog.kt$Dialog</ID>
    <ID>UndocumentedPublicClass:Dialog.kt$Dialog$Builder</ID>
    <ID>UndocumentedPublicClass:DialogActivity.kt$DialogActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyConfiguration.kt$DigitalPharmacy</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyConfiguration.kt$DigitalPharmacyNotInitializedException : Exception</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyModule.kt$DigitalPharmacyModule</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyRepository.kt$DigitalPharmacyRepository</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyRepositoryModule.kt$DigitalPharmacyRepositoryModule</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyUseCaseModule.kt$DigitalPharmacyUseCaseModule</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyUserInfoUseCase.kt$DigitalPharmacyUserInfoUseCase</ID>
    <ID>UndocumentedPublicClass:DigitalPharmacyViewModelModule.kt$DigitalPharmacyViewModelModule</ID>
    <ID>UndocumentedPublicClass:DigitalpharmacyNavGraphDirections.kt$DigitalpharmacyNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:DimensionsOfHealthFragment.kt$DimensionsOfHealthFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:DimensionsOfHealthJsonAdapter.kt$DimensionsOfHealthJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DirectorPageFragment.kt$DirectorPageFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:DirectorPageViewModel.kt$DirectorPageViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:DisconnectResponseJsonAdapter.kt$DisconnectResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DotsIndexIndicator.kt$DotsIndexIndicator : LinearLayout</ID>
    <ID>UndocumentedPublicClass:DropDown.kt$DropDown : FrameLayout</ID>
    <ID>UndocumentedPublicClass:DropDown.kt$DropDown$Option</ID>
    <ID>UndocumentedPublicClass:DropDownAnswer.kt$DropDownAnswer : Serializable</ID>
    <ID>UndocumentedPublicClass:DropDownAnswerJsonAdapter.kt$DropDownAnswerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:DropDownInputRow.kt$DropDownInputRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:DropDownInputRow.kt$DropDownInputRow$Options</ID>
    <ID>UndocumentedPublicClass:DropDownQuestion.kt$DropDownQuestion : FrameLayout</ID>
    <ID>UndocumentedPublicClass:DualColumnRow.kt$DualColumnRow : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:DualTableRow.kt$DualTableRow : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:EditDate.kt$EditDate : AppCompatTextView</ID>
    <ID>UndocumentedPublicClass:EditDependentFormFragment.kt$EditDependentFormFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:EditDependentFormFragmentDirections.kt$EditDependentFormFragmentDirections</ID>
    <ID>UndocumentedPublicClass:EditDependentViewModel.kt$EditDependentViewModel : DependentFormViewModel</ID>
    <ID>UndocumentedPublicClass:EditPhoneNumber.kt$EditPhoneNumber : LinearLayout</ID>
    <ID>UndocumentedPublicClass:EditableAvatarHeader.kt$EditableAvatarHeader : LinearLayout</ID>
    <ID>UndocumentedPublicClass:EditorialRow.kt$EditorialRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:EmptyStateActivity.kt$EmptyStateActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:EmptyStateController.kt$EmptyStateController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:EmptyStateJsonAdapter.kt$EmptyStateJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:EnableAutoRefillFragment.kt$EnableAutoRefillFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:EnableAutoRefillFragmentDirections.kt$EnableAutoRefillFragmentDirections</ID>
    <ID>UndocumentedPublicClass:EnableNotificationFragment.kt$EnableNotificationFragment : RootFragmentDigitalPharmacyKoinComponent</ID>
    <ID>UndocumentedPublicClass:EnableNotificationFragmentArgs.kt$EnableNotificationFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:EnableNotificationFragmentDirections.kt$EnableNotificationFragmentDirections</ID>
    <ID>UndocumentedPublicClass:EnableNotificationViewModel.kt$EnableNotificationData</ID>
    <ID>UndocumentedPublicClass:EnableNotificationViewModel.kt$EnableNotificationViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:EnrollmentData.kt$EnrollmentData</ID>
    <ID>UndocumentedPublicClass:Environment.kt$Environment : SerializableParcelable</ID>
    <ID>UndocumentedPublicClass:Environment.kt$Environments</ID>
    <ID>UndocumentedPublicClass:EnvironmentConfiguration.kt$EnvironmentConfiguration : CoreEnvironmentConfiguration</ID>
    <ID>UndocumentedPublicClass:EnvironmentJsonAdapter.kt$EnvironmentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:EnvironmentSpinnerAdapter.kt$EnvironmentSpinnerAdapter : BaseAdapter</ID>
    <ID>UndocumentedPublicClass:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment : RootFragmentCoreKoinComponent</ID>
    <ID>UndocumentedPublicClass:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:EnvironmentUtils.kt$EnvironmentUtils : ContentAPIEnvironmentProviderLeagueSocketAPIEnvironmentProviderLeagueRestAPIEnvironmentProvider</ID>
    <ID>UndocumentedPublicClass:EnvironmentsJsonAdapter.kt$EnvironmentsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:EpoxyTextView.kt$EpoxyTextView : AppCompatTextView</ID>
    <ID>UndocumentedPublicClass:ErrorActivity.kt$ErrorActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ErrorBanner.kt$ErrorBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ErrorBannerActivity.kt$ErrorBannerActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ErrorController.kt$ErrorController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ErrorFragment.kt$ErrorFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ErrorUtils.kt$ErrorUtils</ID>
    <ID>UndocumentedPublicClass:ExitScreen.kt$ExitScreen : Serializable</ID>
    <ID>UndocumentedPublicClass:ExitScreenJsonAdapter.kt$ExitScreenJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ExpandableRow.kt$ExpandableRow : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:ExpandableStatusRow.kt$ExpandableStatusRow : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ExpandableStatusRow.kt$ExpandableStatusRow$Status</ID>
    <ID>UndocumentedPublicClass:ExpandableTextView.kt$ExpandableTextView : LinearLayout</ID>
    <ID>UndocumentedPublicClass:ExpandableTextViewActivity.kt$ExpandableTextViewActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:FakeUserInfoUseCase.kt$FakeUserInfoUseCase</ID>
    <ID>UndocumentedPublicClass:FeatureFlag.kt$FeatureFlag$BooleanFeatureFlag : FeatureFlag</ID>
    <ID>UndocumentedPublicClass:FeatureFlag.kt$FeatureFlag$DoubleFeatureFlag : FeatureFlag</ID>
    <ID>UndocumentedPublicClass:FeatureFlag.kt$FeatureFlag$LongFeatureFlag : FeatureFlag</ID>
    <ID>UndocumentedPublicClass:FeatureFlag.kt$FeatureFlag$StringFeatureFlag : FeatureFlag</ID>
    <ID>UndocumentedPublicClass:FeatureFlag.kt$FeatureFlag&lt;T></ID>
    <ID>UndocumentedPublicClass:FeatureFlag.kt$FeatureFlagValueState&lt;T></ID>
    <ID>UndocumentedPublicClass:FeatureFlagDetailFragment.kt$FeatureFlagDetailFragment : RootFragmentCoreKoinComponent</ID>
    <ID>UndocumentedPublicClass:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:FeatureFlagWithValueState.kt$FeatureFlagWithValueState&lt;T></ID>
    <ID>UndocumentedPublicClass:FeatureFlags.kt$FeatureFlags</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsActivity.kt$FeatureFlagsActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsFragment.kt$FeatureFlagsFragment : RootFragmentCoreKoinComponent</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsFragmentDirections.kt$FeatureFlagsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsRepository.kt$FeatureFlagsRepository</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsResponse.kt$FeatureFlagsResponse</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsResponseJsonAdapter.kt$FeatureFlagsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FeatureFlagsViewModel.kt$FeatureFlagsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:FeedEmptyNotification.kt$FeedEmptyNotification : FrameLayout</ID>
    <ID>UndocumentedPublicClass:FeedNotification.kt$FeedNotification : FrameLayout</ID>
    <ID>UndocumentedPublicClass:FeedbackActivity.kt$FeedbackActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:FeedbackController.kt$FeedbackController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:FeedbackJsonAdapter.kt$FeedbackJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FeedbackView.kt$FeedbackView : FrameLayout</ID>
    <ID>UndocumentedPublicClass:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment</ID>
    <ID>UndocumentedPublicClass:FetchHasLinkedMapleUserUseCase.kt$FetchHasLinkedMapleUserUseCase</ID>
    <ID>UndocumentedPublicClass:FetchPharmacyVerificationQuestionUseCase.kt$FetchPharmacyVerificationQuestionModel</ID>
    <ID>UndocumentedPublicClass:FetchPharmacyVerificationQuestionUseCase.kt$FetchPharmacyVerificationQuestionUseCase</ID>
    <ID>UndocumentedPublicClass:FetchPlaceAutocompletePredictionsUseCase.kt$FetchPlaceAutocompletePredictionsUseCase</ID>
    <ID>UndocumentedPublicClass:FetchPlaceAutocompletePredictionsUseCase.kt$PlaceAutocompletePrediction</ID>
    <ID>UndocumentedPublicClass:FetchPlaceCoordinatesUseCase.kt$FetchPlaceCoordinatesUseCase</ID>
    <ID>UndocumentedPublicClass:FetchPrescriptionDetailUseCase.kt$FetchPrescriptionDetailUseCase</ID>
    <ID>UndocumentedPublicClass:FetchProvidersUseCase.kt$ProviderListModel</ID>
    <ID>UndocumentedPublicClass:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment</ID>
    <ID>UndocumentedPublicClass:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel</ID>
    <ID>UndocumentedPublicClass:FetchSpecialtyLandingUseCase.kt$SpecialtyLandingAppointmentType</ID>
    <ID>UndocumentedPublicClass:FetchSpecialtyLandingUseCase.kt$SpecialtyLandingAvailabilityOption</ID>
    <ID>UndocumentedPublicClass:FetchUserAddressRowUseCase.kt$AddressRow</ID>
    <ID>UndocumentedPublicClass:FetchUserAddressRowUseCase.kt$FetchUserAddressRowUseCase</ID>
    <ID>UndocumentedPublicClass:FetchUserCoordinatesUseCase.kt$FetchUserCoordinatesUseCase</ID>
    <ID>UndocumentedPublicClass:FetchUserFullNameUseCase.kt$FetchUserFullNameUseCase</ID>
    <ID>UndocumentedPublicClass:FetchUserProvinceUseCase.kt$FetchUserProvinceUseCase</ID>
    <ID>UndocumentedPublicClass:FetchUserSettingsUseCase.kt$FetchUserSettingsUseCase</ID>
    <ID>UndocumentedPublicClass:FieldsJsonAdapter.kt$FieldsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FileChooserChromeClient.kt$FileChooserChromeClient : WebChromeClient</ID>
    <ID>UndocumentedPublicClass:FileChooserChromeClient.kt$FileChooserChromeClient$Callback</ID>
    <ID>UndocumentedPublicClass:FileDetailJsonAdapter.kt$FileDetailJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FileImageJsonAdapter.kt$FileImageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FileJsonAdapter.kt$FileJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FileTransferRequestClient.kt$FileTransferRequestClient : FileTransferRequestListener</ID>
    <ID>UndocumentedPublicClass:FileUtils.kt$BitmapFileConfig</ID>
    <ID>UndocumentedPublicClass:FileUtils.kt$FileUtils</ID>
    <ID>UndocumentedPublicClass:FilterOptionView.kt$FilterOptionView : FrameLayout</ID>
    <ID>UndocumentedPublicClass:FindLocationWithRxAndStoreNumberFragment.kt$FindLocationWithRxAndStoreNumberFragment : RootFragmentDigitalPharmacyKoinComponent</ID>
    <ID>UndocumentedPublicClass:FindLocationWithRxAndStoreNumberFragmentDirections.kt$FindLocationWithRxAndStoreNumberFragmentDirections</ID>
    <ID>UndocumentedPublicClass:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreData</ID>
    <ID>UndocumentedPublicClass:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreNumberViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:FindPharmacyFragment.kt$FindPharmacyFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:FindPharmacyFragmentArgs.kt$FindPharmacyFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:FindPharmacyFragmentDirections.kt$FindPharmacyFragmentDirections</ID>
    <ID>UndocumentedPublicClass:FirebaseAnalyticsTracker.kt$FirebaseAnalyticsTracker : AnalyticsTracker</ID>
    <ID>UndocumentedPublicClass:FirebaseRemoteFeatureFlagsApi.kt$FirebaseRemoteFeatureFlagsApi : RemoteFeatureFlagsApi</ID>
    <ID>UndocumentedPublicClass:FirebaseRemoteTraceFactory.kt$FirebaseRemoteTrace : RemoteTrace</ID>
    <ID>UndocumentedPublicClass:FirebaseRemoteTraceFactory.kt$FirebaseRemoteTraceFactory : RemoteTraceFactory</ID>
    <ID>UndocumentedPublicClass:FooterActivity.kt$FooterActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:FooterController.kt$FooterController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:Form.kt$Form</ID>
    <ID>UndocumentedPublicClass:Form.kt$Form$PrefilledForm</ID>
    <ID>UndocumentedPublicClass:FormConverter.kt$FormConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:FormDao.kt$FormDao : RootDao</ID>
    <ID>UndocumentedPublicClass:FormJsonAdapter.kt$FormJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FormTable.kt$FormTable</ID>
    <ID>UndocumentedPublicClass:Form_PrefilledFormJsonAdapter.kt$Form_PrefilledFormJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FrictionScreen.kt$FrictionScreen : Serializable</ID>
    <ID>UndocumentedPublicClass:FrictionScreenJsonAdapter.kt$FrictionScreenJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FullScreenAlertDialog.kt$FullScreenAlertDialog : DialogFragment</ID>
    <ID>UndocumentedPublicClass:FullScreenAlertDialog.kt$FullScreenAlertDialog$Action</ID>
    <ID>UndocumentedPublicClass:FullScreenContent.kt$FullScreenContent : Serializable</ID>
    <ID>UndocumentedPublicClass:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:FullScreenContentFragmentDirections.kt$FullScreenContentFragmentDirections</ID>
    <ID>UndocumentedPublicClass:FullScreenContentJsonAdapter.kt$FullScreenContentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:FusionColors.kt$GenesisColors</ID>
    <ID>UndocumentedPublicClass:GenericCard.kt$CardDetailsViewType</ID>
    <ID>UndocumentedPublicClass:GenericCard.kt$GenericCard</ID>
    <ID>UndocumentedPublicClass:GenericCard.kt$Insurance</ID>
    <ID>UndocumentedPublicClass:GenericCardJsonAdapter.kt$GenericCardJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:GenericEmptyState.kt$GenericEmptyState : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:GenericEmptyStateActivity.kt$GenericEmptyStateActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:GenericPagesWithTabs.kt$GenericPagesWithTabs : LinearLayout</ID>
    <ID>UndocumentedPublicClass:GenericPagesWithTabs.kt$GenericPagesWithTabs$PageWithTab</ID>
    <ID>UndocumentedPublicClass:GenesisCalendarView.kt$ExperimentalGenesisCalendarApi</ID>
    <ID>UndocumentedPublicClass:GenesisCarousel.kt$GenesisCarousel : Carousel</ID>
    <ID>UndocumentedPublicClass:GenesisCarousel.kt$GenesisCarousel$PaddingAttr</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisBackgroundColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisBorderColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisCriticalColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisDecorativeColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisFillColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisHighlightColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisInteractiveColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisOnSurfaceColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisPrimaryColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisSecondaryColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisSuccessColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisSurfaceColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisTertiaryColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisTextColors</ID>
    <ID>UndocumentedPublicClass:GenesisColors.kt$GenesisWarningColors</ID>
    <ID>UndocumentedPublicClass:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet : BottomSheetDialogFragment</ID>
    <ID>UndocumentedPublicClass:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet$Builder</ID>
    <ID>UndocumentedPublicClass:GenesisConfiguration.kt$GenesisNotInitializedExpection : Exception</ID>
    <ID>UndocumentedPublicClass:GenesisDivider.kt$GenesisDivider : FrameLayout</ID>
    <ID>UndocumentedPublicClass:GenesisImageViewLoader.kt$GenesisImageViewLoader</ID>
    <ID>UndocumentedPublicClass:GenesisPresenterApplication.kt$GenesisPresenterApplication : Application</ID>
    <ID>UndocumentedPublicClass:GenesisPresenterImageLoader.kt$GenesisPresenterImageLoader : GenesisImageViewLoader</ID>
    <ID>UndocumentedPublicClass:GenesisProgressBar.kt$GenesisProgressBar : LinearLayout</ID>
    <ID>UndocumentedPublicClass:GenesisProgressBar.kt$GenesisProgressBar$ProgressConfig</ID>
    <ID>UndocumentedPublicClass:GenesisProgressBar.kt$GenesisProgressBar$ProgressTextType</ID>
    <ID>UndocumentedPublicClass:GenesisProgressBar.kt$GenesisProgressBar$Style</ID>
    <ID>UndocumentedPublicClass:GenesisShowkaseRootModule.kt$GenesisShowkaseRootModule : ShowkaseRootModule</ID>
    <ID>UndocumentedPublicClass:GenesisStaticDropdown.kt$GenesisStaticDropdownContent</ID>
    <ID>UndocumentedPublicClass:GenesisStrokes.kt$GenesisStrokes</ID>
    <ID>UndocumentedPublicClass:GenesisSwitch.kt$GenesisSwitch : SwitchCompat</ID>
    <ID>UndocumentedPublicClass:GenesisTheme.kt$GenesisTheme</ID>
    <ID>UndocumentedPublicClass:GenesisTheme.kt$ThemeProvider : PreviewParameterProvider</ID>
    <ID>UndocumentedPublicClass:GenesisToolbar.kt$GenesisToolbar : Toolbar</ID>
    <ID>UndocumentedPublicClass:GenesisToolbar.kt$GenesisToolbar$BarButton</ID>
    <ID>UndocumentedPublicClass:GenesisTypography.kt$GenesisTypography</ID>
    <ID>UndocumentedPublicClass:GeoCode.kt$GeoCode</ID>
    <ID>UndocumentedPublicClass:GeoCodeJsonAdapter.kt$GeoCodeJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:GlobalPaymentsCoordinator.kt$GlobalPaymentsCoordinator : PaymentsCoordinator</ID>
    <ID>UndocumentedPublicClass:GlobalPaymentsViewModel.kt$GlobalPaymentsConstants</ID>
    <ID>UndocumentedPublicClass:Goal.kt$Goal : Serializable</ID>
    <ID>UndocumentedPublicClass:GoalDetails.kt$GoalDetails : LinearLayout</ID>
    <ID>UndocumentedPublicClass:GoalDetails.kt$GoalDetails$State</ID>
    <ID>UndocumentedPublicClass:GoalJsonAdapter.kt$GoalJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:GoogleFitPermissionDialogFragment.kt$GoogleFitPermissionDialogFragment : BottomSheetDialogFragmentWearablesKoinComponent</ID>
    <ID>UndocumentedPublicClass:GraphData.kt$GraphData</ID>
    <ID>UndocumentedPublicClass:GraphDataJsonAdapter.kt$GraphDataJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:GraphViewFragment.kt$GraphViewFragment : UserReadings</ID>
    <ID>UndocumentedPublicClass:Group.kt$Group</ID>
    <ID>UndocumentedPublicClass:Group.kt$Link</ID>
    <ID>UndocumentedPublicClass:GroupJsonAdapter.kt$GroupJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Header.kt$Header : LinearLayout</ID>
    <ID>UndocumentedPublicClass:Header.kt$Header$DescriptionStyle</ID>
    <ID>UndocumentedPublicClass:Header.kt$Header$HeaderStyle</ID>
    <ID>UndocumentedPublicClass:HeaderActivity.kt$HeaderActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:HeaderController.kt$HeaderController : EpoxyControllerOnClickListener</ID>
    <ID>UndocumentedPublicClass:HealthActivities.kt$HealthActivities : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthActivitiesCategory.kt$HealthActivitiesCategory : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthActivitiesCategory.kt$HealthActivitiesCategoryHeader : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthActivitiesCategoryHeaderJsonAdapter.kt$HealthActivitiesCategoryHeaderJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthActivitiesCategoryJsonAdapter.kt$HealthActivitiesCategoryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthActivitiesJsonAdapter.kt$HealthActivitiesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker$HealthPaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$DailyScreenerResults : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$DigitalPharmacy : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$Health : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$HealthNeed : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$HealthProfile : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$HealthProfileBuilder : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$HealthSolutionCategory : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$SettingsFragment : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthDeepLinker.kt$HealthDeepLinker.HealthPaths$WellnessStationInsights : HealthPaths</ID>
    <ID>UndocumentedPublicClass:HealthFeatureFlags.kt$HealthFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:HealthJourneyAchievementsRepository.kt$HealthJourneyAchievementsRepository</ID>
    <ID>UndocumentedPublicClass:HealthJourneyChallengeItemDetailResponseJsonAdapter.kt$HealthJourneyChallengeItemDetailResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthJourneyConfiguration.kt$HealthJourneyDrawables</ID>
    <ID>UndocumentedPublicClass:HealthJourneyConfiguration.kt$HealthJourneyNotInitializedException : Exception</ID>
    <ID>UndocumentedPublicClass:HealthJourneyConfiguration.kt$HealthJourneyStrings</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDay.kt$HealthJourneyDay</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDayPagerFragmentArgs.kt$HealthJourneyDayPagerFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDayPagerFragmentDirections.kt$HealthJourneyDayPagerFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker$HealthJourneyPaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$Articles : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$Health : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$HealthJourney : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$HealthJourneyItemLink : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$HealthProgramDetails : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$HealthPrograms : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$HealthProgramsCategory : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths$HealthProgramsProgress : HealthJourneyPaths</ID>
    <ID>UndocumentedPublicClass:HealthJourneyDeepLinker.kt$HealthJourneyDeepLinker.HealthJourneyPaths.HealthJourney$HealthJourneyTab</ID>
    <ID>UndocumentedPublicClass:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItem.kt$CampaignInfo</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItem.kt$CampaignInfo$CampaignStatus</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItem.kt$CampaignInfo$CampaignType</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItem.kt$HealthJourneyItem$Status</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompleteBottomSheetDialogDirections.kt$HealthJourneyItemCompleteBottomSheetDialogDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompletionResponseJsonAdapter.kt$HealthJourneyItemCompletionResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionResponse : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompletionScreenJsonAdapter.kt$HealthJourneyItemCompletionScreenJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$ActivityBanner : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$CTA : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$ContentType : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$CustomFields : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$Fields : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$File : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$FileDetail : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$FileImage : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$ActivityVerificationProgressResponse</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$Status</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$ImageAsset : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$Space : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetail.kt$Sys : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetailJsonAdapter.kt$HealthJourneyItemDetailJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetailResponse.kt$HealthJourneyChallengeItemDetailResponse</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetailResponse.kt$HealthJourneyChallengeItemDetailResponse$Info</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetailResponse.kt$HealthJourneyItemDetailResponse</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemDetailResponseJsonAdapter.kt$HealthJourneyItemDetailResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemJsonAdapter.kt$HealthJourneyItemJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemsSection.kt$HealthJourneyItemsSection</ID>
    <ID>UndocumentedPublicClass:HealthJourneyItemsSection.kt$UpcomingChallengeSection</ID>
    <ID>UndocumentedPublicClass:HealthJourneyModule.kt$HealthJourneyModule</ID>
    <ID>UndocumentedPublicClass:HealthJourneyProgressEntryFragmentDirections.kt$HealthJourneyProgressEntryFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyRemovalConfirmationBottomSheetDialogArgs.kt$HealthJourneyRemovalConfirmationBottomSheetDialogArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyRemovalConfirmationBottomSheetDialogDirections.kt$HealthJourneyRemovalConfirmationBottomSheetDialogDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyRemovalSuccessBottomSheetDialogArgs.kt$HealthJourneyRemovalSuccessBottomSheetDialogArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneyRemovalSuccessBottomSheetDialogDirections.kt$HealthJourneyRemovalSuccessBottomSheetDialogDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneyRepository.kt$HealthJourneyRepository</ID>
    <ID>UndocumentedPublicClass:HealthJourneySettings.kt$HealthJourneySettings</ID>
    <ID>UndocumentedPublicClass:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthJourneySuggestedActivityGroupFragmentDirections.kt$HealthJourneySuggestedActivityGroupFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthJourneySuggestedItemsGroupResponse.kt$HealthJourneySuggestedItemsGroupResponse</ID>
    <ID>UndocumentedPublicClass:HealthModule.kt$HealthModule</ID>
    <ID>UndocumentedPublicClass:HealthNeedController.kt$HealthNeedController : EpoxyControllerKoinComponent</ID>
    <ID>UndocumentedPublicClass:HealthNeedController.kt$HealthNeedController$Listener</ID>
    <ID>UndocumentedPublicClass:HealthNeedFragment.kt$HealthNeedFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthNeedJsonAdapter.kt$HealthNeedJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthNeedRecommendationJsonAdapter.kt$HealthNeedRecommendationJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthNeedSummaryJsonAdapter.kt$HealthNeedSummaryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthNeedViewModel.kt$HealthNeedViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$Button : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$DimensionsOfHealth : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$EmptyState : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$Feedback : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$HealthNeed : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$HealthNeedRecommendation : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$HealthNeedSummary : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$HealthProfile : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$HealthSolutionCategory : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$Info : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfile.kt$Modal : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProfileController.kt$HealthProfileController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:HealthProfileController.kt$HealthProfileController$Listener</ID>
    <ID>UndocumentedPublicClass:HealthProfileDao.kt$HealthProfileDao : RootDao</ID>
    <ID>UndocumentedPublicClass:HealthProfileEmptyState.kt$HealthProfileEmptyState : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:HealthProfileEmptyStateActivity.kt$HealthProfileEmptyStateActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:HealthProfileFragment.kt$HealthProfileFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:HealthProfileFragmentDirections.kt$HealthProfileFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProfileResponse.kt$HealthProfileResponse</ID>
    <ID>UndocumentedPublicClass:HealthProfileResponseJsonAdapter.kt$HealthProfileResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProfileTable.kt$HealthProfileTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:HealthProfileTypeConverter.kt$HealthProfileTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:HealthProgram.kt$ChallengeInfo : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProgram.kt$HealthProgram$CampaignType</ID>
    <ID>UndocumentedPublicClass:HealthProgramCategoryFragmentArgs.kt$HealthProgramCategoryFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthProgramCategoryFragmentDirections.kt$HealthProgramCategoryFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthProgramDetails.kt$HealthProgramDetails : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProgramDetailsFragmentArgs.kt$HealthProgramDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthProgramDetailsFragmentDirections.kt$HealthProgramDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthProgramDetailsJsonAdapter.kt$HealthProgramDetailsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramDetailsResponse.kt$HealthProgramDetailsResponse</ID>
    <ID>UndocumentedPublicClass:HealthProgramJsonAdapter.kt$HealthProgramJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramLibraryFragmentDirections.kt$HealthProgramLibraryFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HealthProgramStartJsonAdapter.kt$HealthProgramStartJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCarousel.kt$HealthProgramsCarousel : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCarouselJsonAdapter.kt$HealthProgramsCarouselJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCarousels.kt$HealthProgramsCarousels : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCarouselsJsonAdapter.kt$HealthProgramsCarouselsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCategories.kt$HealthProgramsCategories : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCategoriesJsonAdapter.kt$HealthProgramsCategoriesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCategory.kt$HealthProgramsCategory : Serializable</ID>
    <ID>UndocumentedPublicClass:HealthProgramsCategoryJsonAdapter.kt$HealthProgramsCategoryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsJsonAdapter.kt$HealthProgramsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthProgramsProgressInfo.kt$HealthProgramsProgressFooter</ID>
    <ID>UndocumentedPublicClass:HealthProgramsProgressInfo.kt$HealthProgramsProgressHeader</ID>
    <ID>UndocumentedPublicClass:HealthProgramsRepository.kt$HealthProgramsRepository</ID>
    <ID>UndocumentedPublicClass:HealthProgramsSections.kt$HealthProgramsSection</ID>
    <ID>UndocumentedPublicClass:HealthRepositoryModule.kt$HealthRepositoryModule</ID>
    <ID>UndocumentedPublicClass:HealthSettings.kt$HealthSettings</ID>
    <ID>UndocumentedPublicClass:HealthSolutionCategoryController.kt$HealthSolutionCategoryController : EpoxyControllerKoinComponent</ID>
    <ID>UndocumentedPublicClass:HealthSolutionCategoryController.kt$HealthSolutionCategoryController$Listener</ID>
    <ID>UndocumentedPublicClass:HealthSolutionCategoryJsonAdapter.kt$HealthSolutionCategoryJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HealthSolutionCategoryViewModel.kt$HealthSolutionCategoryViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:HealthSolutionFragment.kt$HealthSolutionFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:HealthUseCaseModule.kt$HealthUseCaseModule</ID>
    <ID>UndocumentedPublicClass:HealthViewModelModule.kt$HealthViewModelModule</ID>
    <ID>UndocumentedPublicClass:HelpfulTip.kt$HelpfulTip : Serializable</ID>
    <ID>UndocumentedPublicClass:HelpfulTipJsonAdapter.kt$HelpfulTipJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HomeBanner.kt$HomeBanner : HomeSection</ID>
    <ID>UndocumentedPublicClass:HomeBannerDao.kt$HomeBannerDao : RootDao</ID>
    <ID>UndocumentedPublicClass:HomeBannerJsonAdapter.kt$HomeBannerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HomeBannerTable.kt$HomeBannerTable</ID>
    <ID>UndocumentedPublicClass:HomeBannerTypeConverter.kt$HomeBannerTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:HomeContract.kt$HomeContract</ID>
    <ID>UndocumentedPublicClass:HomeContract.kt$HomeContract$Collection</ID>
    <ID>UndocumentedPublicClass:HomeContract.kt$HomeContract$View</ID>
    <ID>UndocumentedPublicClass:HomeController.kt$HomeController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:HomeController.kt$HomeController : EpoxyControllerCollectionKoinComponent</ID>
    <ID>UndocumentedPublicClass:HomeController.kt$HomeController$Navigation</ID>
    <ID>UndocumentedPublicClass:HomeFragment.kt$HomeFragment : LeagueRootFragmentView</ID>
    <ID>UndocumentedPublicClass:HomeFragment.kt$HomeFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:HomeFragment.kt$HomeFragment : RootFragmentNavigation</ID>
    <ID>UndocumentedPublicClass:HomeFragmentDirections.kt$HomeFragmentDirections</ID>
    <ID>UndocumentedPublicClass:HomeLayout.kt$HomeLayout</ID>
    <ID>UndocumentedPublicClass:HomeLayoutData.kt$HomeLayoutData</ID>
    <ID>UndocumentedPublicClass:HomeLayoutItem.kt$HomeLayoutItem</ID>
    <ID>UndocumentedPublicClass:HomeLayoutItem.kt$HomeLayoutItem$Type</ID>
    <ID>UndocumentedPublicClass:HomeLayoutItemJsonAdapter.kt$HomeLayoutItemJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HomeLayoutJsonAdapter.kt$HomeLayoutJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HomeLayoutTypeConverter.kt$HomeLayoutTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:HomeNotification.kt$HomeNotification : HomeSection</ID>
    <ID>UndocumentedPublicClass:HomeNotificationData.kt$HomeNotificationData</ID>
    <ID>UndocumentedPublicClass:HomeSection.kt$HomeSection</ID>
    <ID>UndocumentedPublicClass:HomeSectionType.kt$HomeSectionType</ID>
    <ID>UndocumentedPublicClass:HomeViewModel.kt$HomeViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:HomeViewModel.kt$HomeViewModel$DailyScreenerTabConfig</ID>
    <ID>UndocumentedPublicClass:HomeViewPagerAdapter.kt$HomeViewPagerAdapter : FragmentStateAdapter</ID>
    <ID>UndocumentedPublicClass:HoursOfOperationJsonAdapter.kt$HoursOfOperationJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HoursPricingJsonAdapter.kt$HoursPricingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HouseholdPoints.kt$HouseholdPoints</ID>
    <ID>UndocumentedPublicClass:HouseholdPointsDao.kt$HouseholdPointsDao : RootDao</ID>
    <ID>UndocumentedPublicClass:HouseholdPointsJsonAdapter.kt$HouseholdPointsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:HouseholdPointsTable.kt$HouseholdPointsTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:HouseholdPointsTypeConverter.kt$HouseholdPointsTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:IconFooter.kt$IconFooter : FrameLayout</ID>
    <ID>UndocumentedPublicClass:IconResponse.kt$IconResponse</ID>
    <ID>UndocumentedPublicClass:IconResponseJsonAdapter.kt$IconResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Identity.kt$Identity</ID>
    <ID>UndocumentedPublicClass:Identity.kt$IdentityList</ID>
    <ID>UndocumentedPublicClass:IdentityDao.kt$IdentityDao : RootDao</ID>
    <ID>UndocumentedPublicClass:IdentityJsonAdapter.kt$IdentityJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:IdentityListJsonAdapter.kt$IdentityListJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:IdentityTable.kt$IdentityTable</ID>
    <ID>UndocumentedPublicClass:IdentityTypeConverter.kt$IdentityTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:Image.kt$Image</ID>
    <ID>UndocumentedPublicClass:ImageAssetJsonAdapter.kt$ImageAssetJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ImageHandler.kt$ImageHandler</ID>
    <ID>UndocumentedPublicClass:ImageJsonAdapter.kt$ImageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ImageJsonJsonAdapter.kt$ImageJsonJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ImageLoader.kt$ImageLoader : GenesisImageViewLoader</ID>
    <ID>UndocumentedPublicClass:ImagePager.kt$ImagePager : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:ImagePagerActivity.kt$ImagePagerActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ImageSource.kt$ImageSource</ID>
    <ID>UndocumentedPublicClass:ImageSource.kt$ImageSource$BitmapSource : ImageSource</ID>
    <ID>UndocumentedPublicClass:ImageSource.kt$ImageSource$ByteArraySource : ImageSource</ID>
    <ID>UndocumentedPublicClass:ImageSource.kt$ImageSource$ContentServerSource : ImageSource</ID>
    <ID>UndocumentedPublicClass:ImageSource.kt$ImageSource$DrawableSource : ImageSource</ID>
    <ID>UndocumentedPublicClass:ImageSource.kt$ImageSource$UrlSource : ImageSource</ID>
    <ID>UndocumentedPublicClass:ImageUtils.kt$ImageUtils</ID>
    <ID>UndocumentedPublicClass:ImageViewExtension.kt$ImageScaleType</ID>
    <ID>UndocumentedPublicClass:ImageViewerActivity.kt$ImageViewerActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:ImportReadingViewModel.kt$ImportReadingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ImportantBanner.kt$ImportantBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:ImportedReadingsController.kt$ImportedReadingsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ImportedUserReading.kt$ImportedUserReading : Parcelable</ID>
    <ID>UndocumentedPublicClass:ImportedUserReadingJsonAdapter.kt$ImportedUserReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:InMemoryCache.kt$InMemoryCache&lt;T> : Cache</ID>
    <ID>UndocumentedPublicClass:Info.kt$Info : Serializable</ID>
    <ID>UndocumentedPublicClass:InfoDialog.kt$InfoDialog</ID>
    <ID>UndocumentedPublicClass:InfoDialog.kt$InfoDialog$Builder</ID>
    <ID>UndocumentedPublicClass:InfoJsonAdapter.kt$InfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:InformationalBanner.kt$InformationalBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:InformationalSlide.kt$InformationalSlide : FrameLayout</ID>
    <ID>UndocumentedPublicClass:InputActivity.kt$InputActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:InputAnswer.kt$InputAnswer : Serializable</ID>
    <ID>UndocumentedPublicClass:InputAnswer.kt$InputAnswer$Type</ID>
    <ID>UndocumentedPublicClass:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:InputFilterMinMax.kt$InputFilterMinMax : InputFilter</ID>
    <ID>UndocumentedPublicClass:InputUnit.kt$InputUnit : Serializable</ID>
    <ID>UndocumentedPublicClass:InsightCard.kt$InsightCard : Parcelable</ID>
    <ID>UndocumentedPublicClass:InsightCardJsonAdapter.kt$InsightCardJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ChildReadingViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ChildReadingViewEffect$DiscardReadings : ChildReadingViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$Insight</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ParentReadingsViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ParentReadingsViewEffect$NavigateBack : ParentReadingsViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ParentReadingsViewEffect$NavigateToDeleteReadings : ParentReadingsViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ParentReadingsViewEffect$NavigateToTab : ParentReadingsViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ParentReadingsViewEffect$ShowWarningDialog : ParentReadingsViewEffect</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsTab</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$BackButtonPressed : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$ChangeTab : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$DeleteReadings : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$DisableEditing : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$DiscardEditingChanges : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$EnableEditing : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightContract.kt$ReadingsViewEvent$NavigateBack : ReadingsViewEvent</ID>
    <ID>UndocumentedPublicClass:InsightDetailsFragment.kt$InsightDetailsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:InsightDetailsFragmentDirections.kt$InsightDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:InsightDetailsViewModel.kt$InsightDetailsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:InsightRowView.kt$InsightRowView : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:InsuranceJsonAdapter.kt$InsuranceJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:IntroScreen.kt$IntroScreen : Serializable</ID>
    <ID>UndocumentedPublicClass:ItemRow.kt$ItemRow : FrameLayout</ID>
    <ID>UndocumentedPublicClass:JobBindingProperty.kt$FragmentJobBindingProperty : ReadWriteProperty</ID>
    <ID>UndocumentedPublicClass:JobBindingProperty.kt$FragmentJobBindingProperty$JobLifecycleObserver : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:JsonAdapter.kt$JsonAdapter</ID>
    <ID>UndocumentedPublicClass:JsonApi.kt$JsonApiData&lt;T></ID>
    <ID>UndocumentedPublicClass:JsonApi.kt$JsonApiResponse&lt;T></ID>
    <ID>UndocumentedPublicClass:JsonApiAdapter.kt$JsonApiAdapter</ID>
    <ID>UndocumentedPublicClass:JsonApiAdapterExceptions.kt$InvalidDataModelException : Exception</ID>
    <ID>UndocumentedPublicClass:JsonApiAdapterExceptions.kt$InvalidJsonApiException : Exception</ID>
    <ID>UndocumentedPublicClass:JsonApiAdapterFactory.kt$JsonApiMoshiAdapterFactory : Factory</ID>
    <ID>UndocumentedPublicClass:JsonApiAttributes.kt$JsonApiObject</ID>
    <ID>UndocumentedPublicClass:JsonApiAttributes.kt$JsonApiRelationship</ID>
    <ID>UndocumentedPublicClass:JsonApiDataJsonAdapter.kt$JsonApiDataJsonAdapter&lt;T> : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:JsonApiErrorJsonAdapter.kt$JsonApiErrorJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:JsonApiJsonAdapter.kt$JsonApiJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:JsonApiLinks.kt$JsonApiLinks</ID>
    <ID>UndocumentedPublicClass:JsonApiLinksJsonAdapter.kt$JsonApiLinksJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:JsonApiResponseJsonAdapter.kt$JsonApiResponseJsonAdapter&lt;T> : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LandingFragment.kt$LandingFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LandingFragmentDirections.kt$LandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LandingViewModel.kt$LandingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:LanguagePref.kt$LanguagePref</ID>
    <ID>UndocumentedPublicClass:LaunchActivity.kt$LaunchActivity : RootActivityProviderInstallListener</ID>
    <ID>UndocumentedPublicClass:LaunchFragment.kt$LaunchFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:LaunchFragment.kt$LaunchFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LaunchViewModel.kt$LaunchViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:LeagueAPIMessageListener.kt$LeagueAPIMessageListener : MessageListener</ID>
    <ID>UndocumentedPublicClass:LeagueAnalyticsTracker.kt$LeagueAnalyticsTracker : AnalyticsTracker</ID>
    <ID>UndocumentedPublicClass:LeagueAuthenticator.kt$LeagueAuthenticator : LeagueSocketAPIAuthenticatorContentAPIAuthenticatorMarketplaceAuthenticatorWebviewAuthenticatorLeagueRestAPIAuthenticator</ID>
    <ID>UndocumentedPublicClass:LeagueBalanceResponse.kt$LeagueBalanceResponse</ID>
    <ID>UndocumentedPublicClass:LeagueBalanceResponseJsonAdapter.kt$LeagueBalanceResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$ChatUpdatesListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$ChatViewListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LeagueAgentListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LeagueChatClient</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LeagueChatClientListener : LeagueQueueListenerLeagueSessionStateListenerLeagueAgentListenerLeagueFileTransferRequestListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LeagueFileTransferRequestListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LeagueQueueListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LeagueSessionStateListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatClient.kt$LoadingViewListener : LeagueQueueListener</ID>
    <ID>UndocumentedPublicClass:LeagueChatMessage.kt$LeagueChatMessage</ID>
    <ID>UndocumentedPublicClass:LeagueChatMessageDao.kt$LeagueChatMessageDao : RootDao</ID>
    <ID>UndocumentedPublicClass:LeagueChatMessageTable.kt$LeagueChatMessageTable</ID>
    <ID>UndocumentedPublicClass:LeagueChatMessageTypeConverter.kt$LeagueChatMessageTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:LeagueColorActivity.kt$LeagueColorActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:LeagueCommonServices.kt$LeagueCommonServices</ID>
    <ID>UndocumentedPublicClass:LeagueCreditCard.kt$LeagueCreditCard : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker$LeaguePaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker.LeaguePaths$AccountDetails : LeaguePaths</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker.LeaguePaths$Home : LeaguePaths</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker.LeaguePaths$Marketplace : LeaguePaths</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker.LeaguePaths$PersonalInfo : LeaguePaths</ID>
    <ID>UndocumentedPublicClass:LeagueDeepLinker.kt$LeagueDeepLinker.LeaguePaths$Rewards : LeaguePaths</ID>
    <ID>UndocumentedPublicClass:LeagueGlideModule.kt$LeagueGlideModule : AppGlideModule</ID>
    <ID>UndocumentedPublicClass:LeagueJsonUtils.kt$LeagueJsonUtils : BaseJsonUtils</ID>
    <ID>UndocumentedPublicClass:LeagueNavigation.kt$LeagueNavigation : CoreNavigation</ID>
    <ID>UndocumentedPublicClass:LeaguePrivacyLockLoginDialog.kt$LeaguePrivacyLockLoginDialog : PrivacyLockLoginDialog</ID>
    <ID>UndocumentedPublicClass:LeagueRepository.kt$LeagueRepository : Repository</ID>
    <ID>UndocumentedPublicClass:LeagueRestAPI.kt$LeagueRestAPI</ID>
    <ID>UndocumentedPublicClass:LeagueRestAPIAuthenticator.kt$LeagueRestAPIAuthenticator</ID>
    <ID>UndocumentedPublicClass:LeagueRestAPIEnvironmentProvider.kt$LeagueRestAPIEnvironmentProvider</ID>
    <ID>UndocumentedPublicClass:LeagueRootActivity.kt$LeagueRootActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:LeagueRootFragment.kt$LeagueRootFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator</ID>
    <ID>UndocumentedPublicClass:LeagueSocketAPIEnvironmentProvider.kt$LeagueSocketAPIEnvironmentProvider</ID>
    <ID>UndocumentedPublicClass:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LeaveChallengeConfirmationBottomSheetDialogDirections.kt$LeaveChallengeConfirmationBottomSheetDialogDirections</ID>
    <ID>UndocumentedPublicClass:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LeaveHealthJourneyActivityConfirmationFragmentDirections.kt$LeaveHealthJourneyActivityConfirmationFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator : LeagueAuthenticatorKoinComponent</ID>
    <ID>UndocumentedPublicClass:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$LegacyBiometricAuthInfo</ID>
    <ID>UndocumentedPublicClass:LegacyLeagueAuthenticator_LegacyBiometricAuthInfoJsonAdapter.kt$LegacyLeagueAuthenticator_LegacyBiometricAuthInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LifemarketMerchList.kt$LifemarketMerchList</ID>
    <ID>UndocumentedPublicClass:LifemarketMerchListDao.kt$LifemarketMerchListDao : RootDao</ID>
    <ID>UndocumentedPublicClass:LifemarketMerchListJsonAdapter.kt$LifemarketMerchListJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LifemarketMerchListTable.kt$LifemarketMerchListTable</ID>
    <ID>UndocumentedPublicClass:LifemarketMerchListTypeConverter.kt$LifemarketMerchListTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:LineChartView.kt$LineChartView : ConstraintLayoutOnChartValueSelectedListener</ID>
    <ID>UndocumentedPublicClass:LineChartView.kt$LineChartView$EntryData</ID>
    <ID>UndocumentedPublicClass:LineConfig.kt$LineConfig</ID>
    <ID>UndocumentedPublicClass:LineConfigJsonAdapter.kt$LineConfigJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LineValues.kt$LineValues</ID>
    <ID>UndocumentedPublicClass:LineValuesJsonAdapter.kt$LineValuesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LinkAnnotation.kt$LinkAnnotation</ID>
    <ID>UndocumentedPublicClass:LinkButton.kt$LinkButton : AppCompatTextView</ID>
    <ID>UndocumentedPublicClass:LinkJsonAdapter.kt$LinkJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LinkedAccountsFragment.kt$LinkedAccountsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LinkedAccountsFragmentDirections.kt$LinkedAccountsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ListActivity.kt$ListActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:ListController.kt$ListController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ListSpacingDecoration.kt$ListSpacingDecoration : ItemDecoration</ID>
    <ID>UndocumentedPublicClass:LiveAgentChatActivity.kt$LiveAgentChatActivity : RootActivityViewOnBackStackChangedListener</ID>
    <ID>UndocumentedPublicClass:LiveAgentChatClient.kt$LiveAgentChatClient : LeagueChatClientListenerCareChatClient</ID>
    <ID>UndocumentedPublicClass:LiveAgentChatFragment.kt$LiveAgentChatFragment : RootFragmentChatViewListenerChatUpdatesListenerChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:LiveAgentChatFragmentArgs.kt$LiveAgentChatFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LiveAgentChatViewModel.kt$LiveAgentChatViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$Input</ID>
    <ID>UndocumentedPublicClass:LiveAgentLoadingFragment.kt$LiveAgentLoadingFragment : RootFragmentListenerChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LiveAgentLoadingFragmentDirections.kt$LiveAgentLoadingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LiveAgentViewModel.kt$LiveAgentLoadingState</ID>
    <ID>UndocumentedPublicClass:LiveAgentViewModel.kt$LiveAgentLoadingState$Connected : LiveAgentLoadingState</ID>
    <ID>UndocumentedPublicClass:LiveAgentViewModel.kt$LiveAgentLoadingState$Queued : LiveAgentLoadingState</ID>
    <ID>UndocumentedPublicClass:LiveAgentViewModel.kt$LiveAgentViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:LiveBalance.kt$LiveBalance : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:LiveBalanceActivity.kt$LiveBalanceActivity : AppCompatActivity</ID>
    <ID>UndocumentedPublicClass:LiveBalanceController.kt$LiveBalanceController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:LiveBalanceNetworkJsonAdapter.kt$LiveBalanceNetworkJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget : LinearLayout</ID>
    <ID>UndocumentedPublicClass:LiveBalancePage.kt$LiveBalancePage : LinearLayout</ID>
    <ID>UndocumentedPublicClass:LiveBalanceSpendTypeJsonAdapter.kt$LiveBalanceSpendTypeJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:LiveBalancesData.kt$LiveBalanceBeneficiaries</ID>
    <ID>UndocumentedPublicClass:LiveBalancesData.kt$LiveBalanceTier</ID>
    <ID>UndocumentedPublicClass:LiveBalancesData.kt$LiveBalancesData</ID>
    <ID>UndocumentedPublicClass:LiveBalancesData.kt$LivesBalancesTiers</ID>
    <ID>UndocumentedPublicClass:LiveBalancesEpoxyPopulator.kt$SpendType</ID>
    <ID>UndocumentedPublicClass:LiveBalancesViewData.kt$LiveBalanceDataNetworkTypes</ID>
    <ID>UndocumentedPublicClass:LiveBalancesViewData.kt$LiveBalanceNetworkData : Parcelable</ID>
    <ID>UndocumentedPublicClass:LiveBalancesViewData.kt$LiveBalancesViewData : Parcelable</ID>
    <ID>UndocumentedPublicClass:LiveChatBannerViewModel.kt$LiveChatBannerViewModel : ChatUpdatesListener</ID>
    <ID>UndocumentedPublicClass:LoadingSpinner.kt$LoadingSpinner : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:LoadingStateProgressBar.kt$LoadingStateProgressBar : ProgressBar</ID>
    <ID>UndocumentedPublicClass:LoblawUrlPatternUtils.kt$LoblawUrlPatternUtils</ID>
    <ID>UndocumentedPublicClass:LocaleProvider.kt$LocaleProvider</ID>
    <ID>UndocumentedPublicClass:LocaleUtils.kt$LocaleUtils : LocaleProvider</ID>
    <ID>UndocumentedPublicClass:Location.kt$Location</ID>
    <ID>UndocumentedPublicClass:LocationSelectionEvents.kt$LocationSelectionEvents</ID>
    <ID>UndocumentedPublicClass:LocationSelectionEvents.kt$LocationSelectionEvents$LocationSelected : LocationSelectionEvents</ID>
    <ID>UndocumentedPublicClass:LocationSelectionFragment.kt$LocationSelectionFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$Clinic</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$ClinicSelectionState</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$LocationSearchState</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$LocationSelectionState</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$SelectedLocation</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$SelectedLocation$Current : SelectedLocation</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$SelectedLocation$Custom : SelectedLocation</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$SelectedLocation$Province : SelectedLocation</ID>
    <ID>UndocumentedPublicClass:LocationSelectionModels.kt$SelectedLocation$User : SelectedLocation</ID>
    <ID>UndocumentedPublicClass:LockedOutFragment.kt$LockedOutFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LockedOutFragmentArgs.kt$LockedOutFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LockedOutFragmentDirections.kt$LockedOutFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LogSanitization.kt$LogSanitization</ID>
    <ID>UndocumentedPublicClass:LoginFragment.kt$LoginFragment : RootFragmentOnConnectionFailedListener</ID>
    <ID>UndocumentedPublicClass:LoginFragment.kt$LoginFragment : RootFragmentPcidLoginWebViewListener</ID>
    <ID>UndocumentedPublicClass:LoginFragment.kt$LoginInterface</ID>
    <ID>UndocumentedPublicClass:LoginFragmentArgs.kt$LoginFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LoginFragmentDirections.kt$LoginFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LoginIntroFragment.kt$LoginIntroFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LoginIntroFragmentDirections.kt$LoginIntroFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LoginVerificationFragment.kt$LoginVerificationFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:LoginViewModel.kt$LoginViewModel : ViewModelKoinComponent</ID>
    <ID>UndocumentedPublicClass:LoginViewModel.kt$LoginViewModel$LoginDestination</ID>
    <ID>UndocumentedPublicClass:LoginViewModel.kt$LoginViewModel.LoginDestination$AccountSetup : LoginDestination</ID>
    <ID>UndocumentedPublicClass:LoginViewModel.kt$LoginViewModel.LoginDestination$Authentication : LoginDestination</ID>
    <ID>UndocumentedPublicClass:LoginViewModel.kt$LoginViewModel.LoginDestination$Home : LoginDestination</ID>
    <ID>UndocumentedPublicClass:LoginViewModel.kt$LoginViewModel.LoginDestination$ShowErrorDialog : LoginDestination</ID>
    <ID>UndocumentedPublicClass:LoginWelcomeBackFragment.kt$LoginWelcomeBackFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections</ID>
    <ID>UndocumentedPublicClass:LogoCtaHeader.kt$LogoCtaHeader : LinearLayout</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity : AppCompatActivity</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity : ComponentActivity</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity : LeagueRootActivityView</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:MainMenuAdapter.kt$MainMenuAdapter : AdapterCollectionKoinComponent</ID>
    <ID>UndocumentedPublicClass:MainMenuAdapter.kt$MainMenuAdapter$MainMenuHeaderViewHolder : ViewHolderKoinComponent</ID>
    <ID>UndocumentedPublicClass:MainMenuAdapter.kt$MainMenuAdapter$MainMenuItemViewHolder : ViewHolderKoinComponent</ID>
    <ID>UndocumentedPublicClass:MainMenuHeader.kt$MainMenuHeader</ID>
    <ID>UndocumentedPublicClass:MainNavGraphDirections.kt$MainNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:MainNavHostFragment.kt$MainNavHostFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:MainNavHostFragmentDirections.kt$MainNavHostFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MainNavigationController.kt$MainNavigationController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:MainNavigationHeaderViewModel.kt$MainNavigationHeaderViewModel : EpoxyModelWithHolder</ID>
    <ID>UndocumentedPublicClass:MainNavigationHeaderViewModel.kt$MainNavigationHeaderViewModel$SimpleDataBindingHolder : EpoxyHolder</ID>
    <ID>UndocumentedPublicClass:MainNavigationViewModel.kt$MainNavigationViewModel : EpoxyModelWithHolder</ID>
    <ID>UndocumentedPublicClass:MainNavigationViewModel.kt$MainNavigationViewModel$SimpleDataBindingHolder : EpoxyHolder</ID>
    <ID>UndocumentedPublicClass:MainViewModel.kt$MainViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ManageDependentsActions.kt$ManageDependentsActions</ID>
    <ID>UndocumentedPublicClass:ManageDependentsActions.kt$ManageDependentsActionsResponse</ID>
    <ID>UndocumentedPublicClass:ManageDependentsLandingFragment.kt$ManageDependentsLandingFragment : RootFragmentDependentClickListener</ID>
    <ID>UndocumentedPublicClass:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ManageDependentsLandingFragmentDirections.kt$ManageDependentsLandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ManageDependentsLandingRecyclerViewDecorator.kt$ManageDependentsLandingRecyclerViewDecorator : DividerItemDecoration</ID>
    <ID>UndocumentedPublicClass:ManageDependentsLandingViewModel.kt$ManageDependentsLandingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ManageDependentsNavHostActivity.kt$ManageDependentsNavHostActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:ManageDependentsRepository.kt$ManageDependentsRepository</ID>
    <ID>UndocumentedPublicClass:ManageDependentsUseCases.kt$FetchDependentUseCase</ID>
    <ID>UndocumentedPublicClass:ManageDependentsUseCases.kt$FetchManageDependentsActionsUseCase</ID>
    <ID>UndocumentedPublicClass:Maple.kt$MapleAuthorization</ID>
    <ID>UndocumentedPublicClass:Maple.kt$MapleUser</ID>
    <ID>UndocumentedPublicClass:Maple.kt$MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:Maple.kt$MapleUserIntent$Consult : MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:Maple.kt$MapleUserIntent$CreateConsult : MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:Maple.kt$MapleUserIntent$SignIn : MapleUserIntent</ID>
    <ID>UndocumentedPublicClass:Maple.kt$UserType</ID>
    <ID>UndocumentedPublicClass:MapleAuthorizationJsonAdapter.kt$MapleAuthorizationJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MapleAvailabilityFragment.kt$MapleAvailabilityFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MapleChatDetailsFragment.kt$MapleChatDetailsFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MapleChatDetailsFragmentDirections.kt$MapleChatDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MapleChatViewModel.kt$MapleChatViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:MapleConsentFragment.kt$MapleConsentFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MapleHistoryViewModel.kt$MapleHistoryViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:MapleIntroActivity.kt$MapleIntroActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:MapleIntroFragment.kt$MapleIntroFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MapleIntroFragmentDirections.kt$MapleIntroFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MapleLinkedAccountFragment.kt$MapleLinkedAccountFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:MapleLinkedAccountFragmentDirections.kt$MapleLinkedAccountFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MaplePostConsultsJsonAdapter.kt$MaplePostConsultsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MaplePostConsultsRowJsonAdapter.kt$MaplePostConsultsRowJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MapleUserJsonAdapter.kt$MapleUserJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MapleUtils.kt$MapleUtils : KoinComponent</ID>
    <ID>UndocumentedPublicClass:MapleUtils.kt$MapleUtils$DeviceSignature</ID>
    <ID>UndocumentedPublicClass:MapleWebViewConfiguration.kt$MapleWebView</ID>
    <ID>UndocumentedPublicClass:MapleWebViewFragment.kt$MapleWebViewFragment : RootFragmentMapleWebViewKoinComponent</ID>
    <ID>UndocumentedPublicClass:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MarketplaceAuthenticator.kt$MarketplaceAuthenticator</ID>
    <ID>UndocumentedPublicClass:MarketplaceConfig.kt$MarketplaceConfig</ID>
    <ID>UndocumentedPublicClass:MarketplaceConfigJsonAdapter.kt$MarketplaceConfigJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MarketplaceFeatureFlags.kt$MarketplaceFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:MarketplaceProductCard.kt$MarketplaceProductCard : FrameLayout</ID>
    <ID>UndocumentedPublicClass:MarketplaceProductCard.kt$MarketplaceProductCard$BottomOverlayContent</ID>
    <ID>UndocumentedPublicClass:MarketplaceWebActivity.kt$MarketplaceWebActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:MarketplaceWebFragment.kt$MarketplaceWebFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:MarketplaceWebFragment.kt$WebAppInterface</ID>
    <ID>UndocumentedPublicClass:MarketplaceWebFragmentArgs.kt$MarketplaceWebFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MarketplaceWebFragmentDirections.kt$MarketplaceWebFragmentDirections</ID>
    <ID>UndocumentedPublicClass:Member.kt$Member</ID>
    <ID>UndocumentedPublicClass:Member.kt$MemberHomeStores</ID>
    <ID>UndocumentedPublicClass:Member.kt$PcInsider</ID>
    <ID>UndocumentedPublicClass:MemberDao.kt$MemberDao : RootDao</ID>
    <ID>UndocumentedPublicClass:MemberHomeStoresJsonAdapter.kt$MemberHomeStoresJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MemberInfoActivity.kt$MemberInfoActivity : RootActivityMemberInfoClickListener</ID>
    <ID>UndocumentedPublicClass:MemberInfoController.kt$MemberInfoClickListener</ID>
    <ID>UndocumentedPublicClass:MemberInfoController.kt$MemberInfoController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:MemberInfoViewModel.kt$MemberInfoViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:MemberJsonAdapter.kt$MemberJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MemberTable.kt$MemberTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:MemberTypeConverter.kt$MemberTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:MerchListAdapter.kt$ArticleListAdapter</ID>
    <ID>UndocumentedPublicClass:MerchListAdapter.kt$ContentJson</ID>
    <ID>UndocumentedPublicClass:MerchListAdapter.kt$HomeBannerAdapter</ID>
    <ID>UndocumentedPublicClass:MerchListAdapter.kt$ImageJson</ID>
    <ID>UndocumentedPublicClass:MerchListAdapter.kt$MerchListItemJson</ID>
    <ID>UndocumentedPublicClass:MerchListAdapter.kt$MerchListJson</ID>
    <ID>UndocumentedPublicClass:MerchListItemJsonJsonAdapter.kt$MerchListItemJsonJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MerchListJsonJsonAdapter.kt$MerchListJsonJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MessageRequest.kt$MessageRequest</ID>
    <ID>UndocumentedPublicClass:MessageUtil.kt$MessageUtil</ID>
    <ID>UndocumentedPublicClass:MilestoneJsonAdapter.kt$MilestoneJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MilestoneTrackerResult.kt$Milestone</ID>
    <ID>UndocumentedPublicClass:MilestoneTrackerResult.kt$MilestoneTrackerResult</ID>
    <ID>UndocumentedPublicClass:MilestoneTrackerResultJsonAdapter.kt$MilestoneTrackerResultJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Modal.kt$Modal : Serializable</ID>
    <ID>UndocumentedPublicClass:ModalJsonAdapter.kt$ModalJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Module.kt$Module : Parcelable</ID>
    <ID>UndocumentedPublicClass:Module.kt$PreviousResponse : Parcelable</ID>
    <ID>UndocumentedPublicClass:Module.kt$TopicProgressData</ID>
    <ID>UndocumentedPublicClass:ModuleJsonAdapter.kt$ModuleJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Money.kt$Money : Parcelable</ID>
    <ID>UndocumentedPublicClass:MoneyJsonAdapter.kt$MoneyJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MoshiEmptyAdapter.kt$MoshiEmptyAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MoshiUnitAdapter.kt$MoshiUnitAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MultiBannerSettingsFragment.kt$MultiBannerSettingsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:MultiBannerSettingsFragmentArgs.kt$MultiBannerSettingsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MultiBannerSettingsFragmentDirections.kt$MultiBannerSettingsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MultiHorizontalProgressBar.kt$ProgressBarConfiguration</ID>
    <ID>UndocumentedPublicClass:MultiProgressBar.kt$MultiProgressBar : LinearLayout</ID>
    <ID>UndocumentedPublicClass:MultiProgressBar.kt$MultiProgressBar$ColorValType</ID>
    <ID>UndocumentedPublicClass:MultiProgressBar.kt$MultiProgressBar$Progress</ID>
    <ID>UndocumentedPublicClass:MultiProgressBar.kt$MultiProgressBar$ProgressBars</ID>
    <ID>UndocumentedPublicClass:MultiSelectOptionUseCase.kt$MultiSelectOptionUseCase&lt;T></ID>
    <ID>UndocumentedPublicClass:MultiSelectOptionUseCase.kt$MultiSelectState&lt;T></ID>
    <ID>UndocumentedPublicClass:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:MultiStepHealthJourneyItemCompletionFragmentDirections.kt$MultiStepHealthJourneyItemCompletionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:MultipleChoiceAnswer.kt$MultipleChoiceAnswer : Serializable</ID>
    <ID>UndocumentedPublicClass:MultipleChoiceAnswerJsonAdapter.kt$MultipleChoiceAnswerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MultipleSelectionAnswer.kt$MultipleSelectionAnswer : Serializable</ID>
    <ID>UndocumentedPublicClass:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:MultipleSelectionInputRow.kt$MultipleSelectionInputRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:MultipleSelectionQuestion.kt$MultipleSelectionQuestion : ScrollView</ID>
    <ID>UndocumentedPublicClass:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$CustomOption</ID>
    <ID>UndocumentedPublicClass:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$Option</ID>
    <ID>UndocumentedPublicClass:MyRootModuleCodegen.kt$MyRootModuleCodegen : ShowkaseProvider</ID>
    <ID>UndocumentedPublicClass:NavViewModel.kt$NavViewModel</ID>
    <ID>UndocumentedPublicClass:NavigationActivity.kt$NavigationActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:NavigationActivity.kt$NavigationFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:NavigationCommand.kt$NavigationCommand</ID>
    <ID>UndocumentedPublicClass:NavigationCommand.kt$NavigationCommand$Back : NavigationCommand</ID>
    <ID>UndocumentedPublicClass:NavigationCommand.kt$NavigationCommand$BackTo : NavigationCommand</ID>
    <ID>UndocumentedPublicClass:NavigationCommand.kt$NavigationCommand$DeepLinkTo : NavigationCommand</ID>
    <ID>UndocumentedPublicClass:NavigationCommand.kt$NavigationCommand$To : NavigationCommand</ID>
    <ID>UndocumentedPublicClass:NavigationTarget.kt$NavigationTarget : Serializable</ID>
    <ID>UndocumentedPublicClass:NavigationTree.kt$NavigationItem</ID>
    <ID>UndocumentedPublicClass:NavigationTree.kt$NavigationSection</ID>
    <ID>UndocumentedPublicClass:NavigationTree.kt$NavigationTree</ID>
    <ID>UndocumentedPublicClass:NetworkConnectionManager.kt$NetworkConnectionManager$Observer : LifecycleOwner</ID>
    <ID>UndocumentedPublicClass:NoScrollEpoxyRecyclerView.kt$ForceHorizontalLinearSmoothScroller : LinearSmoothScroller</ID>
    <ID>UndocumentedPublicClass:NoScrollEpoxyRecyclerView.kt$NoScrollEpoxyRecyclerView : EpoxyRecyclerView</ID>
    <ID>UndocumentedPublicClass:NoScrollEpoxyRecyclerView.kt$NoScrollHorizontalLayoutManager : LinearLayoutManager</ID>
    <ID>UndocumentedPublicClass:NormalBanner.kt$NormalBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:NormalImageBanner.kt$NormalImageBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:NoticeBanner.kt$NoticeBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Notification.kt$Notification : Comparable</ID>
    <ID>UndocumentedPublicClass:Notification.kt$NotificationType</ID>
    <ID>UndocumentedPublicClass:NotificationActivity.kt$NotificationActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:NotificationController.kt$NotificationController : EpoxyControllerOnClickListener</ID>
    <ID>UndocumentedPublicClass:NotificationDao.kt$NotificationDao : RootDao</ID>
    <ID>UndocumentedPublicClass:NotificationData.kt$NotificationData</ID>
    <ID>UndocumentedPublicClass:NotificationDataJsonAdapter.kt$NotificationDataJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:NotificationJsonAdapter.kt$NotificationJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:NotificationSettingsFragment.kt$NotificationSettingsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:NotificationSettingsFragmentDirections.kt$NotificationSettingsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:NotificationSettingsViewModel.kt$NotificationSettingsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:NotificationTable.kt$NotificationTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:NotificationTypeConverter.kt$NotificationTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:NumericCircleButton.kt$NumericCircleButton : FrameLayout</ID>
    <ID>UndocumentedPublicClass:OfflineCaseResponse.kt$OfflineCaseResponse</ID>
    <ID>UndocumentedPublicClass:OfflineDialog.kt$OfflineDialog : DialogFragment</ID>
    <ID>UndocumentedPublicClass:OnBackPressedListener.kt$OnBackPressedListener</ID>
    <ID>UndocumentedPublicClass:OnBackPressedListener.kt$OnBackPressedListener$BackPressedDetails</ID>
    <ID>UndocumentedPublicClass:OnboardingPage.kt$OnboardingPage : SerializableParcelable</ID>
    <ID>UndocumentedPublicClass:OnboardingPage.kt$OnboardingPage$AdditionalInfo : Serializable</ID>
    <ID>UndocumentedPublicClass:OnboardingPage.kt$OnboardingPage.AdditionalInfo$CTA : Serializable</ID>
    <ID>UndocumentedPublicClass:OnboardingPage.kt$OnboardingPage.AdditionalInfo$Content : Serializable</ID>
    <ID>UndocumentedPublicClass:OnboardingPageJsonAdapter.kt$OnboardingPageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OnboardingPage_AdditionalInfoJsonAdapter.kt$OnboardingPage_AdditionalInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OnboardingPage_AdditionalInfo_CTAJsonAdapter.kt$OnboardingPage_AdditionalInfo_CTAJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OnboardingPage_AdditionalInfo_ContentJsonAdapter.kt$OnboardingPage_AdditionalInfo_ContentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OnboardingUtils.kt$OnboardingUtils</ID>
    <ID>UndocumentedPublicClass:OptimumTokenAuthenticator.kt$OptimumTokenAuthenticator</ID>
    <ID>UndocumentedPublicClass:OptimumTokensJsonAdapter.kt$OptimumTokensJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OptionFillParent.kt$OptionFillParent : FrameLayout</ID>
    <ID>UndocumentedPublicClass:OptionWrapContent.kt$OptionWrapContent : LinearLayout</ID>
    <ID>UndocumentedPublicClass:OrgId.kt$OrgId</ID>
    <ID>UndocumentedPublicClass:OutcomeAdapterFactory.kt$OutcomeAdapterFactory : Factory</ID>
    <ID>UndocumentedPublicClass:OutcomeSuggestionsFragment.kt$OutcomeSuggestionsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:OutcomeSuggestionsFragmentDirections.kt$OutcomeSuggestionsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:OutcomeSuggestionsUseCase.kt$OutcomeSuggestionsUseCase</ID>
    <ID>UndocumentedPublicClass:OutcomesAnalytics.kt$OutcomesAnalytics</ID>
    <ID>UndocumentedPublicClass:OutcomesAnalytics.kt$OutcomesAnalytics$Actions</ID>
    <ID>UndocumentedPublicClass:OutcomesAnalytics.kt$OutcomesAnalytics$Categories</ID>
    <ID>UndocumentedPublicClass:OutcomesAnalytics.kt$OutcomesAnalytics$Pages</ID>
    <ID>UndocumentedPublicClass:OutcomesAnalytics.kt$ResourceCLickDataModel</ID>
    <ID>UndocumentedPublicClass:OutcomesApi.kt$OutcomesApi</ID>
    <ID>UndocumentedPublicClass:OutcomesApi.kt$OutcomesApi$GetOutcome : MessageRequest</ID>
    <ID>UndocumentedPublicClass:OutcomesApi_GetOutcomeJsonAdapter.kt$OutcomesApi_GetOutcomeJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OutcomesRepository.kt$OutcomesRepository</ID>
    <ID>UndocumentedPublicClass:OutcomesRepositoryImpl.kt$OutcomesRepositoryImpl : OutcomesRepository</ID>
    <ID>UndocumentedPublicClass:OutcomesScreenDataModel.kt$OutcomesScreenDataModel : Parcelable</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestions.kt$OutcomesSuggestions</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsJsonAdapter.kt$OutcomesSuggestionsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$OutcomeEvent</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$OutcomeEvent$GetOutcome : OutcomeEvent</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$OutcomeInput</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$OutcomeInput$GetOutcomes : OutcomeInput</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$OutcomesSuggestionsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$ResourceIdentity</ID>
    <ID>UndocumentedPublicClass:OutcomesSuggestionsViewModel.kt$Source</ID>
    <ID>UndocumentedPublicClass:PCHAppEnvironment.kt$PCHAppEnvironment : SerializableParcelable</ID>
    <ID>UndocumentedPublicClass:PCHAppEnvironmentJsonAdapter.kt$PCHAppEnvironmentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PCHHealthFeatureFlags.kt$PCHHealthFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:PCHMapleChatViewModel.kt$PCHMapleChatViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:PCHPolicy.kt$PCHPolicy</ID>
    <ID>UndocumentedPublicClass:PCHPolicy.kt$PCHPolicyRequest</ID>
    <ID>UndocumentedPublicClass:PCHPolicyJsonAdapter.kt$PCHPolicyJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PCHPolicyRequestJsonAdapter.kt$PCHPolicyRequestJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PCHealthAppGlideModule.kt$PCHealthAppGlideModule : AppGlideModule</ID>
    <ID>UndocumentedPublicClass:PCHealthAuthenticator.kt$PCHealthAuthenticator : LeagueSocketAPIAuthenticatorContentAPIAuthenticatorMarketplaceAuthenticatorOptimumTokenAuthenticatorLeagueRestAPIAuthenticatorKoinComponent</ID>
    <ID>UndocumentedPublicClass:PCHealthAuthenticator.kt$PCHealthAuthenticator$PcHealthBiometricAuthInfo</ID>
    <ID>UndocumentedPublicClass:PCHealthAuthenticator_PcHealthBiometricAuthInfoJsonAdapter.kt$PCHealthAuthenticator_PcHealthBiometricAuthInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PCHealthJsonUtils.kt$PCHealthJsonUtils : BaseJsonUtils</ID>
    <ID>UndocumentedPublicClass:PCHealthLoggingConfigFlags.kt$PCHealthLoggingConfigFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:PCHealthReadingsController.kt$PCHealthReadingsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:PCHealthReadingsController.kt$PCHealthReadingsController$Listener</ID>
    <ID>UndocumentedPublicClass:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PCHealthStationReadingsFragment.kt$PCHealthStationReadingsFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:PCHealthStationReadingsFragmentDirections.kt$PCHealthStationReadingsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PageHeader.kt$PageHeader : FrameLayout</ID>
    <ID>UndocumentedPublicClass:PageWithTabActivity.kt$PageWithTabActivity : AppCompatActivity</ID>
    <ID>UndocumentedPublicClass:PageWithTabController.kt$PageWithTabController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:PagerUtils.kt$PagerUtils</ID>
    <ID>UndocumentedPublicClass:Patient.kt$Patient</ID>
    <ID>UndocumentedPublicClass:Patient.kt$PatientRelationship</ID>
    <ID>UndocumentedPublicClass:Patient.kt$PatientSex</ID>
    <ID>UndocumentedPublicClass:PatientAttributesJsonAdapter.kt$PatientAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PatientResponse.kt$PatientAttributes</ID>
    <ID>UndocumentedPublicClass:PatientResponse.kt$PatientResponse</ID>
    <ID>UndocumentedPublicClass:PatientResponseJsonAdapter.kt$PatientResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PaymentsCoordinator.kt$PaymentsResult$Error : PaymentsResult</ID>
    <ID>UndocumentedPublicClass:PaymentsCoordinator.kt$PaymentsResult.Error$BookingPriceChanged : Error</ID>
    <ID>UndocumentedPublicClass:PaymentsCoordinator.kt$PaymentsResult.Error$UserError : Error</ID>
    <ID>UndocumentedPublicClass:PcInsiderJsonAdapter.kt$PcInsiderJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PcoAPI.kt$PcoAPI</ID>
    <ID>UndocumentedPublicClass:PcoAPIInterceptor.kt$PcoAPIInterceptor : KoinComponent</ID>
    <ID>UndocumentedPublicClass:PcoAccountUtils.kt$PcoAccountUtils</ID>
    <ID>UndocumentedPublicClass:PcoAccountUtils.kt$PcoAccountUtils$PcHealthBiometricAuthInfo</ID>
    <ID>UndocumentedPublicClass:PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter.kt$PcoAccountUtils_PcHealthBiometricAuthInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PcoInfoFragment.kt$PcoInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PcoInfoFragmentDirections.kt$PcoInfoFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PcoSignUpActivity.kt$PcoSignUpActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:PcoSignUpPromptFragment.kt$PcoSignUpPromptFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PcoSignUpPromptFragmentDirections.kt$PcoSignUpPromptFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PermissionFragment.kt$PermissionFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PermissionFragmentDirections.kt$PermissionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PermissionViewModel.kt$PermissionViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:PersonalInfoFragment.kt$PersonalInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PersonalInfoFragmentDirections.kt$PersonalInfoFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PersonalInfoViewModel.kt$PersonalInfoViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance</ID>
    <ID>UndocumentedPublicClass:PersonalStoreCreditBalance.kt$RenderedTemplate</ID>
    <ID>UndocumentedPublicClass:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PersonalStoreCreditRedeemed.kt$Amounts</ID>
    <ID>UndocumentedPublicClass:PersonalStoreCreditRedeemed.kt$PersonalStoreCreditRedeemed</ID>
    <ID>UndocumentedPublicClass:PersonalStoreCreditRedeemedJsonAdapter.kt$PersonalStoreCreditRedeemedJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Pharmacy.kt$Pharmacy</ID>
    <ID>UndocumentedPublicClass:PhoneNumberInputRow.kt$PhoneNumberInputRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:PillButton.kt$PillButton : LinearLayout</ID>
    <ID>UndocumentedPublicClass:PointsIndicator.kt$PointsIndicator : FrameLayout</ID>
    <ID>UndocumentedPublicClass:PointsIndicator.kt$PointsIndicator$Status</ID>
    <ID>UndocumentedPublicClass:PointsRepository.kt$PointsRepository</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$OptimumTokens</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem$Fusion : PointsSystem</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem$League : PointsSystem</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem$PCH : PointsSystem</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem$PointsEligibility</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem.PCH$NonPcOptimum : PCH</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem.PCH$PcOptimum : PCH</ID>
    <ID>UndocumentedPublicClass:PointsSystem.kt$PointsSystem.PCH$Undetermined : PCH</ID>
    <ID>UndocumentedPublicClass:PointsWorthController.kt$PointsWorthController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:PoweredByLeagueFragment.kt$PoweredByLeagueFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PoweredByLeagueFragmentDirections.kt$PoweredByLeagueFragmentDirections</ID>
    <ID>UndocumentedPublicClass:Practitioner.kt$Practitioner</ID>
    <ID>UndocumentedPublicClass:PractitionerAttributesJsonAdapter.kt$PractitionerAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsEvents.kt$PractitionerDetailsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsEvents.kt$PractitionerDetailsEvents$CtaClicked : PractitionerDetailsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsViewModel.kt$PractitionerDetailsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsViewModel.kt$PractitionerDetailsAnalyticsEvents$ClinicianSelected : PractitionerDetailsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerDetailsViewModel.kt$PractitionerDetailsAnalyticsEvents$ViewLoaded : PractitionerDetailsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerResponse.kt$PractitionerAttributes</ID>
    <ID>UndocumentedPublicClass:PractitionerResponse.kt$PractitionerResponse</ID>
    <ID>UndocumentedPublicClass:PractitionerResponseJsonAdapter.kt$PractitionerResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionEvents.kt$PractitionerSelectionEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionEvents.kt$PractitionerSelectionEvents$PractitionerSelected : PractitionerSelectionEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionFragment.kt$PractitionerSelectionFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionModels.kt$NextAvailability</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionModels.kt$PractitionerSelectionArgs</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionModels.kt$PractitionerSelectionModel</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionModels.kt$SelectablePractitionerModel</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionViewModel.kt$PractitionerSelectionAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionViewModel.kt$PractitionerSelectionAnalyticsEvents$PractitionerSelected : PractitionerSelectionAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:PractitionerSelectionViewModel.kt$PractitionerSelectionAnalyticsEvents$ViewLoaded : PractitionerSelectionAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:PreChatFormFragment.kt$PreChatFormFragment : RootFragmentChatKoinComponent</ID>
    <ID>UndocumentedPublicClass:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:PreChatFormFragmentDirections.kt$PreChatFormFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PreChatFormViewModel.kt$PreChatFormViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:PreChatFormViewModel.kt$PreChatFormViewModel$preChatInfo</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetail.kt$PrescriptionDetail</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetail.kt$PrescriptionInfo</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetailsFragment.kt$PrescriptionDetailsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetailsFragmentDirections.kt$PrescriptionDetailsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetailsViewModel.kt$PrescriptionDetailsInterface</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetailsViewModel.kt$PrescriptionDetailsStateData</ID>
    <ID>UndocumentedPublicClass:PrescriptionDetailsViewModel.kt$PrescriptionDetailsViewModel : ViewModelPrescriptionDetailsInterface</ID>
    <ID>UndocumentedPublicClass:PrescriptionType.kt$PrescriptionType</ID>
    <ID>UndocumentedPublicClass:PresenterDatabase.kt$PresenterDatabase : BaseRoomDatabase</ID>
    <ID>UndocumentedPublicClass:PresenterRepository.kt$PresenterRepository : Repository</ID>
    <ID>UndocumentedPublicClass:PreviousResponseJsonAdapter.kt$PreviousResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PriceUtil.kt$PriceUtil</ID>
    <ID>UndocumentedPublicClass:Pricing.kt$Pricing : Parcelable</ID>
    <ID>UndocumentedPublicClass:PricingAttributesJsonAdapter.kt$PricingAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PricingJsonAdapter.kt$PricingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PricingResponse.kt$PricingAttributes</ID>
    <ID>UndocumentedPublicClass:PricingResponse.kt$PricingResponse</ID>
    <ID>UndocumentedPublicClass:PricingResponseJsonAdapter.kt$PricingResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PrivacyLockActivityLifecycleObserver.kt$PrivacyLockActivityLifecycleObserver : LifecycleObserverAuthenticationCallback</ID>
    <ID>UndocumentedPublicClass:PrivacyLockApplicationLifecycleObserver.kt$PrivacyLockApplicationLifecycleObserver : LifecycleObserverKoinComponent</ID>
    <ID>UndocumentedPublicClass:PrivacyLockLoginDialog.kt$PrivacyLockLoginDialog : DialogFragmentCoreKoinComponent</ID>
    <ID>UndocumentedPublicClass:PrivacyLockLoginPrompt.kt$PrivacyLockLoginPrompt : LifecycleObserverAuthenticationCallback</ID>
    <ID>UndocumentedPublicClass:PrivacyLockPermissionActivity.kt$PrivacyLockPermissionActivity : BasePermissionActivity</ID>
    <ID>UndocumentedPublicClass:PrivacyLockService.kt$PrivacyLockService : Service</ID>
    <ID>UndocumentedPublicClass:PrivacyLockUtils.kt$PrivacyLockUtils</ID>
    <ID>UndocumentedPublicClass:ProfileVerificationFragment.kt$ProfileVerificationFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ProfileVerificationFragmentDirections.kt$ProfileVerificationFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ProfileVerificationViewModel.kt$ProfileVerificationInterface</ID>
    <ID>UndocumentedPublicClass:ProfileVerificationViewModel.kt$ProfileVerificationState</ID>
    <ID>UndocumentedPublicClass:ProfileVerificationViewModel.kt$ProfileVerificationViewModel : ViewModelProfileVerificationInterface</ID>
    <ID>UndocumentedPublicClass:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitDetails</ID>
    <ID>UndocumentedPublicClass:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitModal : Serializable</ID>
    <ID>UndocumentedPublicClass:ProgramEnrollmentLimitModalJsonAdapter.kt$ProgramEnrollmentLimitModalJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Progress.kt$Progress</ID>
    <ID>UndocumentedPublicClass:ProgressCard.kt$ProgressCard : LinearLayout</ID>
    <ID>UndocumentedPublicClass:ProgressHeader.kt$ProgressHeader : LinearLayout</ID>
    <ID>UndocumentedPublicClass:ProgressRow.kt$ProgressRow : FrameLayout</ID>
    <ID>UndocumentedPublicClass:Provider.kt$Provider</ID>
    <ID>UndocumentedPublicClass:Province.kt$SortType</ID>
    <ID>UndocumentedPublicClass:PulseCheck.kt$PulseCheck : Serializable</ID>
    <ID>UndocumentedPublicClass:PulseCheck.kt$PulseCheckScenario</ID>
    <ID>UndocumentedPublicClass:PulseCheckJsonAdapter.kt$PulseCheckJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:PushNotificationSettingsFragment.kt$PushNotificationSettingsFragment : PreferenceFragmentCompat</ID>
    <ID>UndocumentedPublicClass:QRCodeAddedReading.kt$QRCodeAddedReading : Parcelable</ID>
    <ID>UndocumentedPublicClass:QRCodeAddedReadingJsonAdapter.kt$QRCodeAddedReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:QRCodeGenerationFragment.kt$QRCodeGenerationFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:QRCodeScanner.kt$QrCodeImageAnalyzer : CodeAnalyzer</ID>
    <ID>UndocumentedPublicClass:QRCodeScannerFragment.kt$QRCodeScannerFragment : RootFragmentCodeAnalyzerListener</ID>
    <ID>UndocumentedPublicClass:QRCodeScannerFragmentDirections.kt$QRCodeScannerFragmentDirections</ID>
    <ID>UndocumentedPublicClass:QRCodeUseCase.kt$QRCodeUseCase</ID>
    <ID>UndocumentedPublicClass:QRCodeViewModel.kt$QRCodeViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:QrCodeScannerUseCase.kt$QrCodeScannerUseCase</ID>
    <ID>UndocumentedPublicClass:Question.kt$Question : Serializable</ID>
    <ID>UndocumentedPublicClass:Question.kt$Question$Type</ID>
    <ID>UndocumentedPublicClass:QuestionActivity.kt$QuestionActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:QuestionController.kt$QuestionController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:QuestionController.kt$QuestionController : EpoxyControllerQuestionsCollection</ID>
    <ID>UndocumentedPublicClass:QuestionController.kt$ViewControllerInterface</ID>
    <ID>UndocumentedPublicClass:QuestionJsonAdapter.kt$QuestionJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:QueueChatClient.kt$QueueChatClient : QueueListener</ID>
    <ID>UndocumentedPublicClass:QuickActionButton.kt$QuickActionButton : FrameLayout</ID>
    <ID>UndocumentedPublicClass:QuickActionDetailItemJsonAdapter.kt$QuickActionDetailItemJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:QuickActionMainPageJsonAdapter.kt$QuickActionMainPageJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:QuickActionMenuItemJsonAdapter.kt$QuickActionMenuItemJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:QuickActions.kt$QuickActionDetailItem : Parcelable</ID>
    <ID>UndocumentedPublicClass:QuickActions.kt$QuickActionMainPage</ID>
    <ID>UndocumentedPublicClass:QuickActions.kt$QuickActionMenuItem : Parcelable</ID>
    <ID>UndocumentedPublicClass:QuickActions.kt$QuickActions</ID>
    <ID>UndocumentedPublicClass:QuickActionsJsonAdapter.kt$QuickActionsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RatingUtils.kt$RatingUtils</ID>
    <ID>UndocumentedPublicClass:Reading.kt$Reading : ReadingView</ID>
    <ID>UndocumentedPublicClass:Reading.kt$ReadingView</ID>
    <ID>UndocumentedPublicClass:ReadingJsonAdapter.kt$ReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ReadingsController.kt$ReadingsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:ReadingsController.kt$ReadingsController$Listener</ID>
    <ID>UndocumentedPublicClass:ReadingsFragment.kt$ReadingsFragment : UserReadings</ID>
    <ID>UndocumentedPublicClass:ReadingsImportFragment.kt$ReadingsImportFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ReadingsImportFragmentArgs.kt$ReadingsImportFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ReadingsUseCase.kt$ReadingsUseCase</ID>
    <ID>UndocumentedPublicClass:RealmCache.kt$RealmCache : Cache</ID>
    <ID>UndocumentedPublicClass:RealmStringMap.kt$RealmStringMap : RealmObject</ID>
    <ID>UndocumentedPublicClass:RecSpans.kt$ResSpans : Iterable</ID>
    <ID>UndocumentedPublicClass:RecentAchievementUseCase.kt$RecentAchievementUseCase</ID>
    <ID>UndocumentedPublicClass:RecentAchievementsResponse.kt$RecentAchievementsResponse</ID>
    <ID>UndocumentedPublicClass:RecentAchievementsResponseJsonAdapter.kt$RecentAchievementsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RecentAchievementsViewModel.kt$RecentAchievementsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:RecommendationJsonAdapter.kt$RecommendationJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RedeemResult.kt$RedeemFailed : Failed</ID>
    <ID>UndocumentedPublicClass:RedeemResult.kt$RedeemResult</ID>
    <ID>UndocumentedPublicClass:RedeemRewardActivity.kt$RedeemRewardActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:Refreshable.kt$DefaultRefreshable : Refreshable</ID>
    <ID>UndocumentedPublicClass:Refreshable.kt$Refreshable</ID>
    <ID>UndocumentedPublicClass:Refreshable.kt$SharingStartedUntil : SharingStarted</ID>
    <ID>UndocumentedPublicClass:RefreshableViewModel.kt$SharingStartedUntil : SharingStarted</ID>
    <ID>UndocumentedPublicClass:RegionSupport.kt$RegionSupport</ID>
    <ID>UndocumentedPublicClass:RegionSupportJsonAdapter.kt$RegionSupportJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RelationshipSelectionUseCase.kt$RelationshipSelectionState</ID>
    <ID>UndocumentedPublicClass:RelationshipSelectionUseCase.kt$RelationshipSelectionUseCase</ID>
    <ID>UndocumentedPublicClass:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagValue$NotSet&lt;T : Any> : RemoteFeatureFlagValue</ID>
    <ID>UndocumentedPublicClass:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagValue$Set&lt;T : Any> : RemoteFeatureFlagValue</ID>
    <ID>UndocumentedPublicClass:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi</ID>
    <ID>UndocumentedPublicClass:RemoveDependentDialog.kt$OnRemoveDependentListener</ID>
    <ID>UndocumentedPublicClass:RemoveDependentDialog.kt$RemoveDependentDialog : BaseDialog</ID>
    <ID>UndocumentedPublicClass:RemoveReadingUseCase.kt$RemoveReadingUseCase</ID>
    <ID>UndocumentedPublicClass:RemoveReadingsController.kt$ReadingsToBeDeleted</ID>
    <ID>UndocumentedPublicClass:RemoveReadingsController.kt$RemoveReadingsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:RemoveReadingsFragment.kt$RemoveReadingsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:RenderedTemplateJsonAdapter.kt$RenderedTemplateJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:Repository.kt$Repository</ID>
    <ID>UndocumentedPublicClass:RequestError.kt$RequestError</ID>
    <ID>UndocumentedPublicClass:RequestErrorJsonAdapter.kt$RequestErrorJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RequiredDocument.kt$RequiredDocument</ID>
    <ID>UndocumentedPublicClass:RequiredDocument.kt$RequiredDocument$Documents : RequiredDocument</ID>
    <ID>UndocumentedPublicClass:RequiredDocument.kt$RequiredDocument$None : RequiredDocument</ID>
    <ID>UndocumentedPublicClass:RestAPIUtils.kt$RestAPIUtils</ID>
    <ID>UndocumentedPublicClass:RestAPIUtils.kt$RestAPIUtils$RequestErrorConverterFactory : Factory</ID>
    <ID>UndocumentedPublicClass:RevolvingCarousel.kt$RevolvingCarousel : FrameLayout</ID>
    <ID>UndocumentedPublicClass:RevolvingCarousel.kt$RevolvingCarousel$CaptionedImage</ID>
    <ID>UndocumentedPublicClass:Reward.kt$Reward</ID>
    <ID>UndocumentedPublicClass:RewardBanner.kt$RewardBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:RewardDetails.kt$RewardDetails</ID>
    <ID>UndocumentedPublicClass:RewardJsonAdapter.kt$RewardJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardLevelsResponse.kt$RewardLevelsResponse</ID>
    <ID>UndocumentedPublicClass:RewardLevelsResponseJsonAdapter.kt$RewardLevelsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardViewModel.kt$RewardViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:RewardsAPI.kt$RewardsAPI</ID>
    <ID>UndocumentedPublicClass:RewardsAPI.kt$RewardsAPI$GetLeagueBalance : MessageRequest</ID>
    <ID>UndocumentedPublicClass:RewardsAPI.kt$RewardsAPI$GetRewardLevels : MessageRequest</ID>
    <ID>UndocumentedPublicClass:RewardsAPI.kt$RewardsAPI$RedeemLeaguePoints : MessageRequest</ID>
    <ID>UndocumentedPublicClass:RewardsAPI_GetLeagueBalanceJsonAdapter.kt$RewardsAPI_GetLeagueBalanceJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardsAPI_GetRewardLevelsJsonAdapter.kt$RewardsAPI_GetRewardLevelsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardsAPI_RedeemLeaguePointsJsonAdapter.kt$RewardsAPI_RedeemLeaguePointsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardsBalanceController.kt$RewardsBalanceController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:RewardsBalanceController.kt$RewardsBalanceController$Navigation</ID>
    <ID>UndocumentedPublicClass:RewardsBalanceFragment.kt$RewardsBalanceFragment : RootFragmentNavigation</ID>
    <ID>UndocumentedPublicClass:RewardsBalanceViewModel.kt$RewardsBalanceViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:RewardsDataInjectionModule.kt$RewardsDataInjectionModule</ID>
    <ID>UndocumentedPublicClass:RewardsFragment.kt$RewardsFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:RewardsFragmentDirections.kt$RewardsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:RewardsModule.kt$RewardsDrawables</ID>
    <ID>UndocumentedPublicClass:RewardsModule.kt$RewardsModule</ID>
    <ID>UndocumentedPublicClass:RewardsRepositoryModule.kt$RewardsRepositoryModule</ID>
    <ID>UndocumentedPublicClass:RewardsTransaction.kt$RewardsTransaction</ID>
    <ID>UndocumentedPublicClass:RewardsTransactionJsonAdapter.kt$RewardsTransactionJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardsTransactions.kt$RewardsTransactions</ID>
    <ID>UndocumentedPublicClass:RewardsTransactionsController.kt$RewardsTransactionsController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:RewardsTransactionsFragment.kt$RewardsTransactionsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:RewardsTransactionsJsonAdapter.kt$RewardsTransactionsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:RewardsTransactionsViewModel.kt$RewardsTransactionsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:RewardsUseCaseModule.kt$RewardsUseCaseModule</ID>
    <ID>UndocumentedPublicClass:RewardsViewModelModule.kt$RewardsViewModelModule</ID>
    <ID>UndocumentedPublicClass:RichText.kt$RichText : LinearLayout</ID>
    <ID>UndocumentedPublicClass:RichText.kt$RichText$HtmlImageGetter : ImageGetter</ID>
    <ID>UndocumentedPublicClass:RichTextActivity.kt$RichTextActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:RichTextController.kt$RichTextController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:RoadRunnerColorActivity.kt$RoadRunnerColorActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:RoadRunnerDatabase.kt$RoadRunnerDatabase : BaseRoomDatabase</ID>
    <ID>UndocumentedPublicClass:RoadrunnerApplication.kt$RoadrunnerApplication : RootApplication</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker$RoadrunnerPaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker.RoadrunnerPaths$HealthProfile : RoadrunnerPaths</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker.RoadrunnerPaths$HealthPrograms : RoadrunnerPaths</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker.RoadrunnerPaths$Marketplace : RoadrunnerPaths</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker.RoadrunnerPaths$Rewards : RoadrunnerPaths</ID>
    <ID>UndocumentedPublicClass:RoadrunnerDeepLinker.kt$RoadrunnerDeepLinker.RoadrunnerPaths$Settings : RoadrunnerPaths</ID>
    <ID>UndocumentedPublicClass:RoadrunnerNavigation.kt$RoadrunnerNavigation : CoreNavigation</ID>
    <ID>UndocumentedPublicClass:RoadrunnerPointsRepo.kt$RoadrunnerPointsRepo : PointsRepository</ID>
    <ID>UndocumentedPublicClass:RoadrunnerRepository.kt$RoadrunnerRepository : Repository</ID>
    <ID>UndocumentedPublicClass:RoomCache.kt$RoomCache : Cache</ID>
    <ID>UndocumentedPublicClass:RootActivity.kt$RootActivity : AppCompatActivityImageHandlerOnRequestPermissionsResultCallbackObserver</ID>
    <ID>UndocumentedPublicClass:RootApplication.kt$RootApplication : Application</ID>
    <ID>UndocumentedPublicClass:RootDao.kt$RootDao&lt;T></ID>
    <ID>UndocumentedPublicClass:RootFragment.kt$RootFragment : FragmentImageHandlerObserver</ID>
    <ID>UndocumentedPublicClass:RowActivity.kt$RowActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:RowController.kt$RowController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:SalesforceChatClient.kt$SalesforceChatClient : LeagueChatClientSessionStateListenerAgentListenerQueueListenerFileTransferRequestListener</ID>
    <ID>UndocumentedPublicClass:SalesforceChatClientData.kt$SalesforceChatClientData : Parcelable</ID>
    <ID>UndocumentedPublicClass:SalesforceChatMapResponse.kt$SalesforceChatMapResponse</ID>
    <ID>UndocumentedPublicClass:SalesforceConfigResponse.kt$SalesforceConfigResponse</ID>
    <ID>UndocumentedPublicClass:SalesforceProvinceState.kt$SalesforceProvinceState</ID>
    <ID>UndocumentedPublicClass:SalesforceUtils.kt$SalesforceUtils</ID>
    <ID>UndocumentedPublicClass:SalesforceUtils.kt$SalesforceUtils$SalesforceConfig</ID>
    <ID>UndocumentedPublicClass:ScreenInfo.kt$ScreenInfo : Parcelable</ID>
    <ID>UndocumentedPublicClass:ScreenInfoJsonAdapter.kt$ScreenInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SdkPresenterApplication.kt$SdkPresenterApplication : Application</ID>
    <ID>UndocumentedPublicClass:SdkPresenterViewModelModule.kt$SdkPresenterViewModelModule</ID>
    <ID>UndocumentedPublicClass:SearchInputUseCase.kt$SearchInputState</ID>
    <ID>UndocumentedPublicClass:SearchInputUseCase.kt$SearchInputUseCase</ID>
    <ID>UndocumentedPublicClass:Secrets.kt$Secrets</ID>
    <ID>UndocumentedPublicClass:SegmentAnalyticsTracker.kt$SegmentAnalyticsTracker : AnalyticsTracker</ID>
    <ID>UndocumentedPublicClass:SelectDateUseCase.kt$SelectAvailableDateState</ID>
    <ID>UndocumentedPublicClass:SelectGenderIdentityDialogFragment.kt$SelectGenderIdentityDialogFragment : DialogFragmentCoreKoinComponent</ID>
    <ID>UndocumentedPublicClass:SelectGenderIdentityDialogFragmentDirections.kt$SelectGenderIdentityDialogFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectGenderIdentityViewModel.kt$SelectGenderIdentityViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SelectPatientFragment.kt$SelectPatientFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectPatientUseCase.kt$SelectablePatientModel</ID>
    <ID>UndocumentedPublicClass:SelectPatientUseCase.kt$SelectedPatientModel</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientAnalyticsEvent$AddPatient : SelectPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientAnalyticsEvent$ContinueClicked : SelectPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientAnalyticsEvent$SelectMyself : SelectPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientAnalyticsEvent$SelectOther : SelectPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientAnalyticsEvent$ViewScreen : SelectPatientAnalyticsEvent</ID>
    <ID>UndocumentedPublicClass:SelectPatientViewModel.kt$SelectPatientModel</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyFragment.kt$SelectPharmacyFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyFragmentArgs.kt$SelectPharmacyFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyFragmentDirections.kt$SelectPharmacyFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyRefillFragment.kt$SelectPharmacyRefillFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyRefillFragmentArgs.kt$SelectPharmacyRefillFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyRefillFragmentDirections.kt$SelectPharmacyRefillFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyRefillViewModel.kt$Pharmacy</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyRefillViewModel.kt$SelectPharmacyRefillViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyViewModel.kt$Pharmacy</ID>
    <ID>UndocumentedPublicClass:SelectPharmacyViewModel.kt$SelectPharmacyViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SelectPrescriptionsFragment.kt$SelectPrescriptionsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:SelectPrescriptionsFragmentDirections.kt$SelectPrescriptionsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectPrescriptionsViewModel.kt$Prescription</ID>
    <ID>UndocumentedPublicClass:SelectPrescriptionsViewModel.kt$PrescriptionType</ID>
    <ID>UndocumentedPublicClass:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SelectPronounDialogFragment.kt$SelectPronounDialogFragment : DialogFragment</ID>
    <ID>UndocumentedPublicClass:SelectPronounDialogFragmentDirections.kt$SelectPronounDialogFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectPronounViewModel.kt$SelectPronounViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SelectServiceAnalyticEvents.kt$SelectServiceAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SelectServiceAnalyticEvents.kt$SelectServiceAnalyticEvents$TrackServiceSelected : SelectServiceAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SelectServiceAnalyticEvents.kt$SelectServiceAnalyticEvents$ViewServiceSelectionScreen : SelectServiceAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SelectServiceFragment.kt$SelectServiceFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectServiceUseCase.kt$ServiceAppointmentType</ID>
    <ID>UndocumentedPublicClass:SelectServiceUseCase.kt$ServicePricing</ID>
    <ID>UndocumentedPublicClass:SelectServiceUseCase.kt$ServicePricing$Price : ServicePricing</ID>
    <ID>UndocumentedPublicClass:SelectServiceUseCase.kt$ServicePricing$PriceRange : ServicePricing</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotFragment.kt$SelectTimeslotFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotUseCase.kt$SelectTimeslotUseCase</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotUseCase.kt$SelectableTimeslotModel</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotUseCase.kt$SelectableTimeslotState</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotViewModel.kt$SelectTimeslotAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotViewModel.kt$SelectTimeslotAnalyticsEvents$DaySelected : SelectTimeslotAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotViewModel.kt$SelectTimeslotAnalyticsEvents$ShowNextMonth : SelectTimeslotAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotViewModel.kt$SelectTimeslotAnalyticsEvents$TimeSelected : SelectTimeslotAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotViewModel.kt$SelectTimeslotAnalyticsEvents$ViewLoaded : SelectTimeslotAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:SelectTimeslotViewModel.kt$SelectTimeslotState</ID>
    <ID>UndocumentedPublicClass:SelectionRow.kt$SelectionRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:ServiceBookingDefaults.kt$ServiceBookingDefaults</ID>
    <ID>UndocumentedPublicClass:ServiceBookingExitDialog.kt$ServiceBookingExitDialog : BottomSheetDialogFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections</ID>
    <ID>UndocumentedPublicClass:ServiceBookingLandingDialogFragmentArgs.kt$ServiceBookingLandingDialogFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:ServiceBookingSelections.kt$IntakeFormSelections : Parcelable</ID>
    <ID>UndocumentedPublicClass:ServiceBookingSelections.kt$PractitionerSelection : Parcelable</ID>
    <ID>UndocumentedPublicClass:ServiceBookingSelections.kt$SelectedProvince : Parcelable</ID>
    <ID>UndocumentedPublicClass:ServiceBookingSelections.kt$ServiceBookingSelections : Parcelable</ID>
    <ID>UndocumentedPublicClass:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections</ID>
    <ID>UndocumentedPublicClass:ServiceResult.kt$ServiceResult$Empty&lt;T> : ServiceResult</ID>
    <ID>UndocumentedPublicClass:ServiceResult.kt$ServiceResult$Error&lt;T> : ServiceResult</ID>
    <ID>UndocumentedPublicClass:ServiceResult.kt$ServiceResult$Loading&lt;T> : ServiceResult</ID>
    <ID>UndocumentedPublicClass:ServiceResult.kt$ServiceResult$Success&lt;T> : ServiceResult</ID>
    <ID>UndocumentedPublicClass:ServiceResult.kt$ServiceResult&lt;T></ID>
    <ID>UndocumentedPublicClass:Session.kt$Session</ID>
    <ID>UndocumentedPublicClass:SessionJsonAdapter.kt$SessionJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SessionStateChatClient.kt$SessionStateChatClient : SessionStateListener</ID>
    <ID>UndocumentedPublicClass:SessionUtils.kt$SessionUtils</ID>
    <ID>UndocumentedPublicClass:SettingsActivity.kt$SettingsActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:SettingsActivityDirections.kt$SettingsActivityDirections</ID>
    <ID>UndocumentedPublicClass:SettingsFragment.kt$SettingsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:SettingsFragmentArgs.kt$SettingsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SettingsFragmentDirections.kt$SettingsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SettingsNavGraphDirections.kt$SettingsNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:SettingsPersonalInfoFragment.kt$SettingsPersonalInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:SettingsPersonalInfoFragmentDirections.kt$SettingsPersonalInfoFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SettingsScreenViewModel.kt$SettingsData</ID>
    <ID>UndocumentedPublicClass:SettingsScreenViewModel.kt$SettingsScreenViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SettingsUseCase.kt$SettingsUseCase</ID>
    <ID>UndocumentedPublicClass:SettingsViewModel.kt$SettingsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SettingsViewModel.kt$SettingsViewModel$PrivacyLockAuthMethod</ID>
    <ID>UndocumentedPublicClass:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod$Biometric : PrivacyLockAuthMethod</ID>
    <ID>UndocumentedPublicClass:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod$None : PrivacyLockAuthMethod</ID>
    <ID>UndocumentedPublicClass:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod$Pin : PrivacyLockAuthMethod</ID>
    <ID>UndocumentedPublicClass:Sex.kt$Sex</ID>
    <ID>UndocumentedPublicClass:SexSelectionUseCase.kt$SexSelectionState</ID>
    <ID>UndocumentedPublicClass:SexSelectionUseCase.kt$SexSelectionUseCase</ID>
    <ID>UndocumentedPublicClass:SfChatTranscriptJsonAdapter.kt$SfChatTranscriptJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ShadowScrollView.kt$ShadowScrollView : ScrollView</ID>
    <ID>UndocumentedPublicClass:ShareScreenshotFragment.kt$ShareScreenshotFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:ShareScreenshotViewModel.kt$ShareScreenshotViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SharedPreferencesDataSource.kt$SharedPreferencesDataSource</ID>
    <ID>UndocumentedPublicClass:ShopifyMoney.kt$ShopifyMoney</ID>
    <ID>UndocumentedPublicClass:ShopifyMoneyJsonAdapter.kt$ShopifyMoneyJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ShopifyProduct.kt$ShopifyProduct</ID>
    <ID>UndocumentedPublicClass:ShopifyProductJsonAdapter.kt$ShopifyProductJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ShortDateAdapter.kt$ShortDateAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ShortDateToStringConverter.kt$ShortDateToStringConverter</ID>
    <ID>UndocumentedPublicClass:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist</ID>
    <ID>UndocumentedPublicClass:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague</ID>
    <ID>UndocumentedPublicClass:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth</ID>
    <ID>UndocumentedPublicClass:SignInMethod.kt$SignInMethod</ID>
    <ID>UndocumentedPublicClass:SignInMethod.kt$SignInMethod$Google : SignInMethod</ID>
    <ID>UndocumentedPublicClass:SignInMethod.kt$SignInMethod$Password : SignInMethod</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$AuthFailed : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$ExpiredSession : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$ExpiredTimeout : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$SecurityDisabled : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$ServerError : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$UserLogOut : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$UserNotLoggedIn : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$UserWantsToSignIn : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SignOutReason.kt$SignOutReason$UserWantsToSignUp : SignOutReason</ID>
    <ID>UndocumentedPublicClass:SimpleAvatarHeader.kt$SimpleAvatarHeader : LinearLayout</ID>
    <ID>UndocumentedPublicClass:SimpleCard.kt$SimpleCard : FrameLayout</ID>
    <ID>UndocumentedPublicClass:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog : BottomSheetDialogFragment</ID>
    <ID>UndocumentedPublicClass:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog$Builder</ID>
    <ID>UndocumentedPublicClass:SingleRowTable.kt$SingleRowTable</ID>
    <ID>UndocumentedPublicClass:SpaceJsonAdapter.kt$SpaceJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpacingAttrRes.kt$SpacingAttrRes</ID>
    <ID>UndocumentedPublicClass:SpannableAppendable.kt$SpannableAppendable : Appendable</ID>
    <ID>UndocumentedPublicClass:SpannableStringCreator.kt$SpannableStringCreator</ID>
    <ID>UndocumentedPublicClass:Spanner.kt$Spanner</ID>
    <ID>UndocumentedPublicClass:SpecialitiesResponse.kt$SpecialtyAttributes</ID>
    <ID>UndocumentedPublicClass:SpecialitiesResponse.kt$SpecialtyResponse</ID>
    <ID>UndocumentedPublicClass:Speciality.kt$AppointmentType</ID>
    <ID>UndocumentedPublicClass:Speciality.kt$Specialty : Parcelable</ID>
    <ID>UndocumentedPublicClass:SpecialtyAttributesJsonAdapter.kt$SpecialtyAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpecialtyFlow.kt$PreConsultSteps</ID>
    <ID>UndocumentedPublicClass:SpecialtyFlow.kt$SpecialtyFlow</ID>
    <ID>UndocumentedPublicClass:SpecialtyFlowAttributesJsonAdapter.kt$SpecialtyFlowAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpecialtyFlowResponse.kt$SpecialtyFlowAttributes</ID>
    <ID>UndocumentedPublicClass:SpecialtyFlowResponse.kt$SpecialtyFlowResponse</ID>
    <ID>UndocumentedPublicClass:SpecialtyFlowResponseJsonAdapter.kt$SpecialtyFlowResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingAnalyticEvents.kt$SpecialtyLandingAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingAnalyticEvents.kt$SpecialtyLandingAnalyticEvents$ContinuePressed : SpecialtyLandingAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingAnalyticEvents.kt$SpecialtyLandingAnalyticEvents$ShowBrandingDialog : SpecialtyLandingAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingAnalyticEvents.kt$SpecialtyLandingAnalyticEvents$ViewSpecialtyDetails : SpecialtyLandingAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingFragment.kt$SpecialtyLandingFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocation.kt$Coordinates</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocation.kt$DayHoursOfOperation</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocation.kt$SpecialtyLocation</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocation.kt$Timeframe</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocationsAttributesJsonAdapter.kt$SpecialtyLocationsAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocationsResponse.kt$HoursOfOperation</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocationsResponse.kt$SpecialtyLocationsResponse</ID>
    <ID>UndocumentedPublicClass:SpecialtyLocationsResponseJsonAdapter.kt$SpecialtyLocationsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpecialtyResponseJsonAdapter.kt$SpecialtyResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpecialtySelectionFragment.kt$SpecialtySelectionFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:SpecialtySelectionFragmentArgs.kt$SpecialtySelectionFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyAnalyticEvents.kt$SpecialtyUrgencyAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyAnalyticEvents.kt$SpecialtyUrgencyAnalyticEvents$TrackAppointmentTypeSelected : SpecialtyUrgencyAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyAnalyticEvents.kt$SpecialtyUrgencyAnalyticEvents$ViewSpecialtyUrgencyScreen : SpecialtyUrgencyAnalyticEvents</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyFragment.kt$SpecialtyUrgencyFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyViewModel.kt$SpecialtyUrgencyModel</ID>
    <ID>UndocumentedPublicClass:SpecialtyUrgencyViewModel.kt$UrgencyModel</ID>
    <ID>UndocumentedPublicClass:SpeechBubbleBanner.kt$Link : Serializable</ID>
    <ID>UndocumentedPublicClass:SpeechBubbleBanner.kt$SpeechBubbleBanner : Serializable</ID>
    <ID>UndocumentedPublicClass:SpeechBubbleBanner.kt$SpeechBubbleComponent : Serializable</ID>
    <ID>UndocumentedPublicClass:SpeechBubbleBannerJsonAdapter.kt$SpeechBubbleBannerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpeechBubbleComponentJsonAdapter.kt$SpeechBubbleComponentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog</ID>
    <ID>UndocumentedPublicClass:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog$Builder</ID>
    <ID>UndocumentedPublicClass:SplashFragment.kt$SplashFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:SplashFragmentDirections.kt$SplashFragmentDirections</ID>
    <ID>UndocumentedPublicClass:SplashViewModel.kt$SplashViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:SplashViewModel.kt$SplashViewModel$AppLaunchState</ID>
    <ID>UndocumentedPublicClass:SplashViewModel.kt$SplashViewModel$LoginState</ID>
    <ID>UndocumentedPublicClass:StackSelectQuestion.kt$StackSelectQuestion : LinearLayout</ID>
    <ID>UndocumentedPublicClass:StackSelectQuestion.kt$StackSelectQuestion$Option</ID>
    <ID>UndocumentedPublicClass:StackSelectQuestion.kt$StackSelectQuestion$SelectionMode</ID>
    <ID>UndocumentedPublicClass:StackedActionBanner.kt$StackedActionBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:State.kt$Failed&lt;T> : State</ID>
    <ID>UndocumentedPublicClass:State.kt$Loaded&lt;T> : State</ID>
    <ID>UndocumentedPublicClass:State.kt$Loading&lt;T> : State</ID>
    <ID>UndocumentedPublicClass:State.kt$State&lt;T></ID>
    <ID>UndocumentedPublicClass:State.kt$Uninitialized&lt;T> : State</ID>
    <ID>UndocumentedPublicClass:StatusActivity.kt$StatusActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:StatusBanner.kt$StatusBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:StatusBannerJsonAdapter.kt$StatusBannerJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:StatusButtonActionRow.kt$StatusButtonActionRow : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:StatusCounts.kt$StatusCounts : Serializable</ID>
    <ID>UndocumentedPublicClass:StatusCountsJsonAdapter.kt$StatusCountsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:StatusPageHeader.kt$StatusPageHeader : FrameLayout</ID>
    <ID>UndocumentedPublicClass:StatusPageHeader.kt$StatusPageHeader$ButtonAction</ID>
    <ID>UndocumentedPublicClass:StatusPageHeader.kt$StatusPageHeader$Status</ID>
    <ID>UndocumentedPublicClass:StickerActivity.kt$StickerActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:StickerController.kt$StickerController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:StickyButtonFooter.kt$StickyButtonFooter : LinearLayout</ID>
    <ID>UndocumentedPublicClass:StickyRoundedFooter.kt$StickyRoundedFooter : FrameLayout</ID>
    <ID>UndocumentedPublicClass:StringMap.kt$StringMap</ID>
    <ID>UndocumentedPublicClass:StringMapJsonAdapter.kt$StringMapJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:StringProvider.kt$StringProvider</ID>
    <ID>UndocumentedPublicClass:StripNullJsonFactory.kt$StripNullJsonFactory : Factory</ID>
    <ID>UndocumentedPublicClass:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity : LeagueRootActivityView</ID>
    <ID>UndocumentedPublicClass:SuccessScreen.kt$SuccessScreen : Serializable</ID>
    <ID>UndocumentedPublicClass:SuccessScreenJsonAdapter.kt$SuccessScreenJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup : Parcelable</ID>
    <ID>UndocumentedPublicClass:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroupsResponse</ID>
    <ID>UndocumentedPublicClass:Suggestion.kt$Suggestion : Parcelable</ID>
    <ID>UndocumentedPublicClass:SuggestionJsonAdapter.kt$SuggestionJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SwitchInputState.kt$SwitchInputState</ID>
    <ID>UndocumentedPublicClass:SysJsonAdapter.kt$SysJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:SystemChatMessage.kt$SystemChatMessage : LinearLayout</ID>
    <ID>UndocumentedPublicClass:TabActivity.kt$TabActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:Table.kt$Table : EpoxyRecyclerView</ID>
    <ID>UndocumentedPublicClass:Table.kt$Table$Data</ID>
    <ID>UndocumentedPublicClass:Table.kt$Table$RowData</ID>
    <ID>UndocumentedPublicClass:TableActivity.kt$TableActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:TableRow.kt$TableRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:TagBanner.kt$Style</ID>
    <ID>UndocumentedPublicClass:TagBanner.kt$TagBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:TagBanner.kt$TagBanner$Style</ID>
    <ID>UndocumentedPublicClass:TermsConditionViewModel.kt$TermsAndConditionsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:TermsConditionViewModel.kt$TermsAndConditionsAnalyticsEvents$PrivacyPolicyClicked : TermsAndConditionsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:TermsConditionViewModel.kt$TermsAndConditionsAnalyticsEvents$TermsAndConditionsAccepted : TermsAndConditionsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:TermsConditionViewModel.kt$TermsAndConditionsAnalyticsEvents$TermsOfUseClicked : TermsAndConditionsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:TermsConditionViewModel.kt$TermsAndConditionsAnalyticsEvents$ViewLoaded : TermsAndConditionsAnalyticsEvents</ID>
    <ID>UndocumentedPublicClass:TermsConditionViewModel.kt$TermsConditionModel</ID>
    <ID>UndocumentedPublicClass:TermsConditionsFragment.kt$TermsConditionsFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections</ID>
    <ID>UndocumentedPublicClass:TestAppointment.kt$TestAppointment</ID>
    <ID>UndocumentedPublicClass:TestAppointment.kt$TestAppointmentsRequest</ID>
    <ID>UndocumentedPublicClass:TestAppointment.kt$TestAppointmentsResponse</ID>
    <ID>UndocumentedPublicClass:TestChatClient.kt$TestChatClient : CareChatClient</ID>
    <ID>UndocumentedPublicClass:TextInputRow.kt$TextInputRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:TextInputRxNumberFieldState.kt$TextInputRxNumberFieldState</ID>
    <ID>UndocumentedPublicClass:TextInputState.kt$TextInputState</ID>
    <ID>UndocumentedPublicClass:TextInputStoreNumberFieldState.kt$TextInputStoreNumberFieldState</ID>
    <ID>UndocumentedPublicClass:TextInputUseCases.kt$ErrorResult</ID>
    <ID>UndocumentedPublicClass:TextInputUseCases.kt$TextErrorState</ID>
    <ID>UndocumentedPublicClass:TextInputUseCases.kt$TextInputUseCase</ID>
    <ID>UndocumentedPublicClass:TextInputUseCases.kt$Transformation</ID>
    <ID>UndocumentedPublicClass:TextInputUseCases.kt$Validation</ID>
    <ID>UndocumentedPublicClass:TextOnlyCard.kt$TextOnlyCard : FrameLayout</ID>
    <ID>UndocumentedPublicClass:TextQuestion.kt$TextQuestion : LinearLayout</ID>
    <ID>UndocumentedPublicClass:ThirdPartyDetailsJsonAdapter.kt$ThirdPartyDetailsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:TimeChangedReceiver.kt$TimeChangedReceiver : BroadcastReceiverKoinComponent</ID>
    <ID>UndocumentedPublicClass:TimeRangeJsonAdapter.kt$TimeRangeJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:TimeUtil.kt$TimeUtil</ID>
    <ID>UndocumentedPublicClass:Timeslot.kt$AvailableTimeslotDate</ID>
    <ID>UndocumentedPublicClass:Timeslot.kt$Timeslot</ID>
    <ID>UndocumentedPublicClass:TimeslotResponseJsonAdapter.kt$TimeslotResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:TimeslotsAttributesJsonAdapter.kt$TimeslotsAttributesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:TintedBackgroundResource.kt$TintedBackgroundResource</ID>
    <ID>UndocumentedPublicClass:TokenSdkAuthenticatorImpl.kt$TokenSdkAuthenticatorImpl : TokenSdkAuthenticatorLeagueSocketAPIAuthenticatorLeagueRestAPIAuthenticatorContentAPIAuthenticator</ID>
    <ID>UndocumentedPublicClass:ToolTipJsonAdapter.kt$ToolTipJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ToolbarActivity.kt$ToolbarActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:Topic.kt$Topic : SerializableParcelable</ID>
    <ID>UndocumentedPublicClass:TopicJsonAdapter.kt$TopicJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:TransactionHistoryActivity.kt$TransactionHistoryActivity : LeagueRootActivity</ID>
    <ID>UndocumentedPublicClass:TransactionHistoryController.kt$TransactionHistoryController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:TransactionHistoryViewModel.kt$TransactionHistoryViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:TransactionRow.kt$TransactionRow : LinearLayout</ID>
    <ID>UndocumentedPublicClass:TransactionRow.kt$TransactionRow$TransactionType</ID>
    <ID>UndocumentedPublicClass:TriageActivity.kt$TriageActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:TriageConfiguration.kt$Triage</ID>
    <ID>UndocumentedPublicClass:TriageConfiguration.kt$TriageNotInitializedExpection : Exception</ID>
    <ID>UndocumentedPublicClass:TriageDeepLinker.kt$TriageDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:TriageDeepLinker.kt$TriageDeepLinker$TriagePaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:TriageDeepLinker.kt$TriageDeepLinker.TriagePaths$AppointmentDetails : TriagePaths</ID>
    <ID>UndocumentedPublicClass:TriageDeepLinker.kt$TriageDeepLinker.TriagePaths$Triage : TriagePaths</ID>
    <ID>UndocumentedPublicClass:TriageErrorBody.kt$TriageErrorBody</ID>
    <ID>UndocumentedPublicClass:TriageErrorBodyJsonAdapter.kt$TriageErrorBodyJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:TriageFeatureFlags.kt$TriageFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:TriageLandingFragment.kt$TriageLandingFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:TriageLandingFragmentDirections.kt$TriageLandingFragmentDirections</ID>
    <ID>UndocumentedPublicClass:TriageLocationSelectorFragment.kt$TriageLocationSelectorFragment : RootFragmentTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections</ID>
    <ID>UndocumentedPublicClass:TriageMenuController.kt$TriageMenuController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:TriageMenuController.kt$TriageMenuController$Listener</ID>
    <ID>UndocumentedPublicClass:TriageMenuFragment.kt$TriageMenuFragment : RootFragmentListenerTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:TriageMenuFragmentDirections.kt$TriageMenuFragmentDirections</ID>
    <ID>UndocumentedPublicClass:TriageMenuViewModel.kt$TriageMenuState</ID>
    <ID>UndocumentedPublicClass:TriageMenuViewModel.kt$UpcomingAppointmentsState</ID>
    <ID>UndocumentedPublicClass:TriageNavGraphDirections.kt$TriageNavGraphDirections</ID>
    <ID>UndocumentedPublicClass:TriageService.kt$GetConsentRequest</ID>
    <ID>UndocumentedPublicClass:TriageService.kt$GetTimeslotsRequest</ID>
    <ID>UndocumentedPublicClass:TriageSubMenuController.kt$TriageSubMenuController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:TriageSubMenuController.kt$TriageSubMenuController$Listener</ID>
    <ID>UndocumentedPublicClass:TriageSubMenuFragment.kt$TriageSubMenuFragment : RootFragmentListenerTriageKoinComponent</ID>
    <ID>UndocumentedPublicClass:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:TriageSubMenuFragmentDirections.kt$TriageSubMenuFragmentDirections</ID>
    <ID>UndocumentedPublicClass:TypographyActivity.kt$TypographyActivity : PresenterActivity</ID>
    <ID>UndocumentedPublicClass:UrgentBanner.kt$UrgentBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:UserAchievement.kt$AchievementCategory</ID>
    <ID>UndocumentedPublicClass:UserAchievement.kt$UserAchievement</ID>
    <ID>UndocumentedPublicClass:UserConfgTypeConverter.kt$UserConfgTypeConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:UserConfig.kt$UserConfig</ID>
    <ID>UndocumentedPublicClass:UserConfigDao.kt$UserConfigDao : RootDao</ID>
    <ID>UndocumentedPublicClass:UserConfigJsonAdapter.kt$UserConfigJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserConfigTable.kt$UserConfigTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:UserConverter.kt$UserConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:UserCredential.kt$UserCredential</ID>
    <ID>UndocumentedPublicClass:UserCredentialJsonAdapter.kt$UserCredentialJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserCredentialsJsonAdapter.kt$UserCredentialsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserDao.kt$UserDao : RootDao</ID>
    <ID>UndocumentedPublicClass:UserDependent.kt$UserDependent</ID>
    <ID>UndocumentedPublicClass:UserDependentJsonAdapter.kt$UserDependentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserDocument.kt$UserDocument</ID>
    <ID>UndocumentedPublicClass:UserDocumentConverter.kt$UserDocumentConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:UserDocumentDao.kt$UserDocumentDao : RootDao</ID>
    <ID>UndocumentedPublicClass:UserDocumentJsonAdapter.kt$UserDocumentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserDocumentTable.kt$UserDocumentTable</ID>
    <ID>UndocumentedPublicClass:UserDocumentsResponse.kt$UserDocumentsResponse</ID>
    <ID>UndocumentedPublicClass:UserDocumentsResponseJsonAdapter.kt$UserDocumentsResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserFlags.kt$UserFlags</ID>
    <ID>UndocumentedPublicClass:UserFlagsConverter.kt$UserFlagsConverter : BaseTypeConverter</ID>
    <ID>UndocumentedPublicClass:UserFlagsDao.kt$UserFlagsDao : RootDao</ID>
    <ID>UndocumentedPublicClass:UserFlagsJsonAdapter.kt$UserFlagsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserFlagsTable.kt$UserFlagsTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:UserInfo.kt$UserInfo</ID>
    <ID>UndocumentedPublicClass:UserInfoUseCase.kt$UserInfoUseCase</ID>
    <ID>UndocumentedPublicClass:UserJsonAdapter.kt$UserJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserLiveBalances.kt$Balances</ID>
    <ID>UndocumentedPublicClass:UserLiveBalances.kt$LiveBalanceNetwork</ID>
    <ID>UndocumentedPublicClass:UserLiveBalances.kt$LiveBalanceSpendType : Parcelable</ID>
    <ID>UndocumentedPublicClass:UserLiveBalances.kt$UserLiveBalances</ID>
    <ID>UndocumentedPublicClass:UserLiveBalances.kt$UserLiveBalancesData</ID>
    <ID>UndocumentedPublicClass:UserLiveBalancesDataJsonAdapter.kt$UserLiveBalancesDataJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserLiveBalancesJsonAdapter.kt$UserLiveBalancesJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserPcid.kt$UserPcid</ID>
    <ID>UndocumentedPublicClass:UserProfile.kt$UserProfile</ID>
    <ID>UndocumentedPublicClass:UserReading.kt$UserReading</ID>
    <ID>UndocumentedPublicClass:UserReadingJsonAdapter.kt$UserReadingJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:UserReadings.kt$UserReadings : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:UserRepository.kt$UserRepository</ID>
    <ID>UndocumentedPublicClass:UserRepositoryImpl.kt$UserRepositoryImpl : RepositoryUserRepository</ID>
    <ID>UndocumentedPublicClass:UserSettings.kt$UserSettings</ID>
    <ID>UndocumentedPublicClass:UserTable.kt$UserTable : SingleRowTable</ID>
    <ID>UndocumentedPublicClass:UserText.kt$UserText</ID>
    <ID>UndocumentedPublicClass:UserText.kt$UserText$NonTranslatable : UserText</ID>
    <ID>UndocumentedPublicClass:UserText.kt$UserText$Translatable : UserText</ID>
    <ID>UndocumentedPublicClass:UserType.kt$UserType</ID>
    <ID>UndocumentedPublicClass:UserTypeResponse.kt$UserTypeResponse</ID>
    <ID>UndocumentedPublicClass:UserTypeResponseJsonAdapter.kt$UserTypeResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:VaccinationDetails.kt$Appointment</ID>
    <ID>UndocumentedPublicClass:VaccinationDetails.kt$AppointmentDetails</ID>
    <ID>UndocumentedPublicClass:VaccinationDetails.kt$VaccinationDetails</ID>
    <ID>UndocumentedPublicClass:VaccinationForm.kt$BookingFormData : Parcelable</ID>
    <ID>UndocumentedPublicClass:VaccinationForm.kt$FormHeroFormData : Parcelable</ID>
    <ID>UndocumentedPublicClass:VaccinationStatusDetail.kt$StatusDetail</ID>
    <ID>UndocumentedPublicClass:VaccinationStatusDetailIcon.kt$VaccinationStatusDetailIcon</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$AddressResponse</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$AppointmentDetailsResponse</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$AppointmentResponse</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$Cta</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$Detail</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$FormDetails : Parcelable</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$PatientInfo</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$StatusDetailResponse</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$Store</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$VaccinationWorkflow</ID>
    <ID>UndocumentedPublicClass:VaccinationWorkflow.kt$VaccineState</ID>
    <ID>UndocumentedPublicClass:VaccineAssessmentFormFragment.kt$VaccineAssessmentFormFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:VaccineBookingFormFragment.kt$VaccineBookingFormFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:VaccineBookingWebViewClient.kt$VaccineBookingWebViewClient : VaccineWebViewClient</ID>
    <ID>UndocumentedPublicClass:VaccineDeepLinker.kt$VaccineDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:VaccineDeepLinker.kt$VaccineDeepLinker$VaccinePaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:VaccineDeepLinker.kt$VaccineDeepLinker.VaccinePaths$Vaccine : VaccinePaths</ID>
    <ID>UndocumentedPublicClass:VaccineFormInterface.kt$VaccineFormInterface</ID>
    <ID>UndocumentedPublicClass:VaccineFormLayout.kt$VaccineFormLayout : FrameLayout</ID>
    <ID>UndocumentedPublicClass:VaccineLandingActivity.kt$VaccineLandingActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:VaccineLandingController.kt$VaccineLandingController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:VaccineLandingController.kt$VaccineLandingController$Listener</ID>
    <ID>UndocumentedPublicClass:VaccineLandingFragment.kt$VaccineLandingFragment : RootFragmentListener</ID>
    <ID>UndocumentedPublicClass:VaccineLandingViewModel.kt$VaccineLandingViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:VaccinePreFilledFields.kt$VaccineAssessmentPreFilledFields : Parcelable</ID>
    <ID>UndocumentedPublicClass:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields : Parcelable</ID>
    <ID>UndocumentedPublicClass:VaccinePushNotificationPromptFragment.kt$VaccinePushNotificationPromptFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:VaccineRegistrationFormFragment.kt$VaccineRegistrationFormFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:VaccineRepository.kt$VaccineRepository</ID>
    <ID>UndocumentedPublicClass:VaccineType.kt$VaccineType</ID>
    <ID>UndocumentedPublicClass:VaccineViewModelModule.kt$VaccineViewModelModule</ID>
    <ID>UndocumentedPublicClass:VaccineWebViewClient.kt$VaccineWebViewClient : WebViewClient</ID>
    <ID>UndocumentedPublicClass:ValidateDependentFormFieldsUseCase.kt$ValidateDependentFormFieldsUseCase</ID>
    <ID>UndocumentedPublicClass:ValidicDataType.kt$ValidicDataType</ID>
    <ID>UndocumentedPublicClass:ValidicDataUtil.kt$ValidicDataUtil</ID>
    <ID>UndocumentedPublicClass:ValidicUser.kt$DeviceType</ID>
    <ID>UndocumentedPublicClass:ValidicUser.kt$DisconnectResponse</ID>
    <ID>UndocumentedPublicClass:ValidicUser.kt$ValidicUser : Serializable</ID>
    <ID>UndocumentedPublicClass:ValidicUser.kt$WearableDevice : Serializable</ID>
    <ID>UndocumentedPublicClass:ValidicUserJsonAdapter.kt$ValidicUserJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:ValueQuestion.kt$ValueQuestion : LinearLayout</ID>
    <ID>UndocumentedPublicClass:ValueQuestion.kt$ValueQuestion$Units</ID>
    <ID>UndocumentedPublicClass:ValueQuestion.kt$ValueQuestion$ValueAndUnits</ID>
    <ID>UndocumentedPublicClass:ValueUnit.kt$ValueUnit : Parcelable</ID>
    <ID>UndocumentedPublicClass:ValueUnitJsonAdapter.kt$ValueUnitJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail : Serializable</ID>
    <ID>UndocumentedPublicClass:VerifiableActivityProgressDetailJsonAdapter.kt$VerifiableActivityProgressDetailJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:VerificationQuestion.kt$VerificationAnswer</ID>
    <ID>UndocumentedPublicClass:VerificationQuestion.kt$VerificationQuestion</ID>
    <ID>UndocumentedPublicClass:ViewAllAchievementsFragment.kt$ViewAllAchievementsFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:ViewAllAchievementsViewModel.kt$ViewAllAchievementsViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:ViewBindingProperty.kt$ClearOnDestroyProperty$ClearOnDestroyLifecycleObserver : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:ViewBindingProperty.kt$ClearOnDestroyProperty&lt;T> : ReadOnlyProperty</ID>
    <ID>UndocumentedPublicClass:WaitingRoomLinkOuts.kt$WaitingRoomLinkOuts</ID>
    <ID>UndocumentedPublicClass:WaitingRoomLinkOuts.kt$WaitingRoomMenuItems : Parcelable</ID>
    <ID>UndocumentedPublicClass:WaitingRoomLinkOutsJsonAdapter.kt$WaitingRoomLinkOutsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WaitingRoomMenuItemsJsonAdapter.kt$WaitingRoomMenuItemsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WaitingScreenMenuController.kt$WaitingScreenMenuController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:WaitingScreenMenuController.kt$WaitingScreenMenuController$Listener</ID>
    <ID>UndocumentedPublicClass:Wallet.kt$DependentCardsResponse</ID>
    <ID>UndocumentedPublicClass:Wallet.kt$Wallet</ID>
    <ID>UndocumentedPublicClass:WalletCardAction.kt$WalletCardActionIconInfo</ID>
    <ID>UndocumentedPublicClass:WalletCardActionIconInfoJsonAdapter.kt$WalletCardActionIconInfoJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WalletCardActionJsonAdapter.kt$WalletCardActionJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WalletCardAddCreditActivity.kt$WalletCardAddCreditActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:WalletCardAddCreditViewModel.kt$WalletCardAddCreditViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailActivity.kt$WalletCardDetailActivity : RootActivityWalletDetailClickListener</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailController.kt$FeedbackWidgetData</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailController.kt$WalletCardDetailController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailController.kt$WalletDetailClickListener</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailViewModel.kt$LiveBalanceFetchErrorType</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailViewModel.kt$WalletCardDetailViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WalletCardDetailViewModel.kt$WalletCardDetailsErrorType</ID>
    <ID>UndocumentedPublicClass:WalletCardItemView.kt$WalletCardItemView : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:WalletCardView.kt$WalletCardView : FrameLayout</ID>
    <ID>UndocumentedPublicClass:WalletCardView.kt$WalletCardView$WalletCardData</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$Name</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletCard</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletCard$BenefitCard : WalletCard</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletCard$FinanceCard : WalletCard</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletCategoriesItemSectioned</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletCategory</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletResponseCategory</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletResponseItem</ID>
    <ID>UndocumentedPublicClass:WalletCategories.kt$WalletResponseSection</ID>
    <ID>UndocumentedPublicClass:WalletCategoriesController.kt$WalletCardClickData</ID>
    <ID>UndocumentedPublicClass:WalletCategoriesController.kt$WalletCardClickListener</ID>
    <ID>UndocumentedPublicClass:WalletCategoriesController.kt$WalletCategoriesController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:WalletCategoriesFragment.kt$WalletCategoriesFragment : RootFragmentWalletCardClickListener</ID>
    <ID>UndocumentedPublicClass:WalletCategoriesViewModel.kt$WalletCategoriesPageData</ID>
    <ID>UndocumentedPublicClass:WalletCategoriesViewModel.kt$WalletCategoriesViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WalletConfiguration.kt$Wallet</ID>
    <ID>UndocumentedPublicClass:WalletConfiguration.kt$WalletNotInitializedExpection : Exception</ID>
    <ID>UndocumentedPublicClass:WalletConfiguration.kt$WalletSettings</ID>
    <ID>UndocumentedPublicClass:WalletDeepLinker.kt$WalletDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:WalletDeepLinker.kt$WalletPaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:WalletDeepLinker.kt$WalletPaths$ManageDependentLanding : WalletPaths</ID>
    <ID>UndocumentedPublicClass:WalletDeepLinker.kt$WalletPaths$QLERequest : WalletPaths</ID>
    <ID>UndocumentedPublicClass:WalletEnrollmentFragment.kt$WalletEnrollmentFragment : LeagueRootFragment</ID>
    <ID>UndocumentedPublicClass:WalletEnrollmentFragmentDirections.kt$WalletEnrollmentFragmentDirections</ID>
    <ID>UndocumentedPublicClass:WalletEnrollmentViewModel.kt$WalletEnrollmentViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WalletFeatureFlags.kt$WalletFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:WalletIndividualLiveBalanceActivity.kt$WalletIndividualLiveBalanceActivity : RootActivityWalletIndividualSpendClickListener</ID>
    <ID>UndocumentedPublicClass:WalletIndividualLiveBalanceController.kt$WalletIndividualLiveBalanceController : EpoxyController</ID>
    <ID>UndocumentedPublicClass:WalletIndividualLiveBalanceController.kt$WalletIndividualSpendClickListener</ID>
    <ID>UndocumentedPublicClass:WalletJsonAdapter.kt$WalletJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WalletModule.kt$WalletModule</ID>
    <ID>UndocumentedPublicClass:WalletRepository.kt$WalletRepository</ID>
    <ID>UndocumentedPublicClass:WalletUseCaseModule.kt$WalletUseCaseModule</ID>
    <ID>UndocumentedPublicClass:WalletUseCases.kt$WalletUseCases</ID>
    <ID>UndocumentedPublicClass:WalletViewModelModule.kt$WalletViewModelModule</ID>
    <ID>UndocumentedPublicClass:WalletWebView.kt$WalletWebView : WebView</ID>
    <ID>UndocumentedPublicClass:WarningBanner.kt$WarningBanner : FrameLayout</ID>
    <ID>UndocumentedPublicClass:WearableConfiguration.kt$Wearable</ID>
    <ID>UndocumentedPublicClass:WearableConfiguration.kt$WearableDrawables</ID>
    <ID>UndocumentedPublicClass:WearableConfiguration.kt$WearableTheme</ID>
    <ID>UndocumentedPublicClass:WearableConfiguration.kt$WearablesNotInitializedExpection : Exception</ID>
    <ID>UndocumentedPublicClass:WearableConsent.kt$WearableConsent : Serializable</ID>
    <ID>UndocumentedPublicClass:WearableConsentInfoFragment.kt$WearableConsentInfoFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:WearableConsentJsonAdapter.kt$WearableConsentJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WearableConsentPrimerFragment.kt$WearableConsentPrimerFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:WearableConsentResponse.kt$ConsentData : Serializable</ID>
    <ID>UndocumentedPublicClass:WearableConsentResponse.kt$WearableConsentResponse : Serializable</ID>
    <ID>UndocumentedPublicClass:WearableDataType.kt$WearableDataType</ID>
    <ID>UndocumentedPublicClass:WearableDeepLinker.kt$WearableDeepLinker</ID>
    <ID>UndocumentedPublicClass:WearableDeepLinker.kt$WearableDeepLinker$WearablePaths : DeepLink</ID>
    <ID>UndocumentedPublicClass:WearableDeepLinker.kt$WearableDeepLinker.WearablePaths$AppsAndDevices : WearablePaths</ID>
    <ID>UndocumentedPublicClass:WearableDeepLinker.kt$WearableDeepLinker.WearablePaths$AppsAndDevicesWithRequiredDataPointAndBackNavigation : WearablePaths</ID>
    <ID>UndocumentedPublicClass:WearableDeepLinker.kt$WearableDeepLinker.WearablePaths$WearableCloudRedirect : WearablePaths</ID>
    <ID>UndocumentedPublicClass:WearableDeepLinker.kt$WearableDeepLinker.WearablePaths$WearableConsent : WearablePaths</ID>
    <ID>UndocumentedPublicClass:WearableDeviceJsonAdapter.kt$WearableDeviceJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WearableFeatureFlag.kt$WearableFeatureFlag : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:WearableGenericConsentFragment.kt$WearableGenericConsentFragment : RootFragmentWearablesKoinComponent</ID>
    <ID>UndocumentedPublicClass:WearableGenericConsentFragmentDirections.kt$WearableGenericConsentFragmentDirections</ID>
    <ID>UndocumentedPublicClass:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WearablePresenterApplication.kt$WearablePresenterApplication : Application</ID>
    <ID>UndocumentedPublicClass:WearableService.kt$WearableService</ID>
    <ID>UndocumentedPublicClass:WearablesPresenterViewModelModule.kt$WearablesPresenterViewModelModule</ID>
    <ID>UndocumentedPublicClass:WebBrowserActivity.kt$WebBrowserActivity : RootActivity</ID>
    <ID>UndocumentedPublicClass:WebBrowserFragment.kt$WebBrowserFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:WebBrowserFragmentArgs.kt$WebBrowserFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:WebBrowserFragmentDirections.kt$WebBrowserFragmentDirections</ID>
    <ID>UndocumentedPublicClass:WebviewAuthenticator.kt$WebviewAuthenticator</ID>
    <ID>UndocumentedPublicClass:WelcomeFragment.kt$WelcomeFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:WelcomeFragmentArgs.kt$WelcomeFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:WelcomeFragmentDirections.kt$WelcomeFragmentDirections</ID>
    <ID>UndocumentedPublicClass:WelcomeNewUserFragment.kt$WelcomeNewUserFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:WelcomeNewUserFragmentDirections.kt$WelcomeNewUserFragmentDirections</ID>
    <ID>UndocumentedPublicClass:WelcomeNewUserViewModel.kt$WelcomeNewUserViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WelcomeViewModel.kt$WelcomeViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI.kt$WellnessStationAPI</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI.kt$WellnessStationAPI$GetAddedReadings : MessageRequest</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI.kt$WellnessStationAPI$GetClaimCode : MessageRequest</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI.kt$WellnessStationAPI$GetInsightCards : MessageRequest</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI.kt$WellnessStationAPI$GetReadings : MessageRequest</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI.kt$WellnessStationAPI$RemoveReadings : MessageRequest</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI_GetAddedReadingsJsonAdapter.kt$WellnessStationAPI_GetAddedReadingsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI_GetClaimCodeJsonAdapter.kt$WellnessStationAPI_GetClaimCodeJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI_GetInsightCardsJsonAdapter.kt$WellnessStationAPI_GetInsightCardsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI_GetReadingsJsonAdapter.kt$WellnessStationAPI_GetReadingsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WellnessStationAPI_RemoveReadingsJsonAdapter.kt$WellnessStationAPI_RemoveReadingsJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WellnessStationConfig.kt$WellnessStation</ID>
    <ID>UndocumentedPublicClass:WellnessStationConfig.kt$WellnessStationNotInitializedException : Exception</ID>
    <ID>UndocumentedPublicClass:WellnessStationDeepLinker.kt$WellnessStationDeepLinker : DeepLinker</ID>
    <ID>UndocumentedPublicClass:WellnessStationDeepLinker.kt$WellnessStationDeepLinker$Paths : DeepLink</ID>
    <ID>UndocumentedPublicClass:WellnessStationDeepLinker.kt$WellnessStationDeepLinker.Paths$ImportReading : Paths</ID>
    <ID>UndocumentedPublicClass:WellnessStationDeepLinker.kt$WellnessStationDeepLinker.Paths$WellnessStationInsights : Paths</ID>
    <ID>UndocumentedPublicClass:WellnessStationFeatureFlags.kt$WellnessStationFeatureFlags : FeatureFlags</ID>
    <ID>UndocumentedPublicClass:WellnessStationHighlightResponse.kt$WellnessStationHighlightResponse</ID>
    <ID>UndocumentedPublicClass:WellnessStationHighlightResponseJsonAdapter.kt$WellnessStationHighlightResponseJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:WellnessStationModule.kt$WellnessStationModule</ID>
    <ID>UndocumentedPublicClass:WellnessStationPolicy.kt$WellnessStationPolicy</ID>
    <ID>UndocumentedPublicClass:WellnessStationRepositoryModule.kt$WellnessStationRepositoryModule</ID>
    <ID>UndocumentedPublicClass:WellnessStationUseCase.kt$WellnessStationUseCase</ID>
    <ID>UndocumentedPublicClass:WellnessStationViewModuleModule.kt$WellnessStationViewModuleModule</ID>
    <ID>UndocumentedPublicClass:WellnessStationsAnalytics.kt$WellnessStationsAnalytics</ID>
    <ID>UndocumentedPublicClass:WellnessStationsAnalytics.kt$WellnessStationsAnalytics$Actions</ID>
    <ID>UndocumentedPublicClass:WellnessStationsAnalytics.kt$WellnessStationsAnalytics$Categories</ID>
    <ID>UndocumentedPublicClass:WellnessStationsAnalytics.kt$WellnessStationsAnalytics$Labels</ID>
    <ID>UndocumentedPublicClass:WellnessStationsAnalytics.kt$WellnessStationsAnalytics$Pages</ID>
    <ID>UndocumentedPublicClass:WellnessStationsAnalytics.kt$WellnessStationsAnalytics$User</ID>
    <ID>UndocumentedPublicClass:WellnessStationsUseCaseModule.kt$WellnessStationsUseCaseModule</ID>
    <ID>UndocumentedPublicClass:WipFragment.kt$WipFragment : RootFragment</ID>
    <ID>UndocumentedPublicClass:WipFragmentArgs.kt$WipFragmentArgs : NavArgs</ID>
    <ID>UndocumentedPublicClass:WipFragmentDirections.kt$WipFragmentDirections</ID>
    <ID>UndocumentedPublicClass:YAxisConfig.kt$YAxisConfig</ID>
    <ID>UndocumentedPublicClass:YAxisConfigJsonAdapter.kt$YAxisConfigJsonAdapter : JsonAdapter</ID>
    <ID>UndocumentedPublicClass:settings.gradle.kts$Module</ID>
    <ID>UndocumentedPublicFunction:API.kt$API$// use userId in the key to ensure cached results are limited in scope to the user who made the request fun getCacheKey(key: String)</ID>
    <ID>UndocumentedPublicFunction:API.kt$API$@Synchronized fun clearCache()</ID>
    <ID>UndocumentedPublicFunction:API.kt$API$fun cacheResponse(request: String, response: ApiSuccess&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:API.kt$API$fun onServerError(serverError: ServerError)</ID>
    <ID>UndocumentedPublicFunction:API.kt$API$fun sessionExpired(expiredSession: ExpiredSession)</ID>
    <ID>UndocumentedPublicFunction:API.kt$API$suspend inline fun &lt;reified T> getCachedResponse(request: String): Success&lt;T>?</ID>
    <ID>UndocumentedPublicFunction:API.kt$API.Companion$// this function exists so that we can mock it to return a mocked EncryptedSharedPreferences. // because mockk can't mock EncryptedSharedPreferences.create directly fun getEncryptedSharedPreferences(context: Context, filename: String)</ID>
    <ID>UndocumentedPublicFunction:API_Analytic.kt$fun API.sendAnalyticsEvent(name: String, version: String, appName: String, properties: Map&lt;String, Any?>)</ID>
    <ID>UndocumentedPublicFunction:API_Auth.kt$suspend fun API.setUserCredentials( idToken: String?, accessToken: String? ): Outcome&lt;life.league.authentication.core.model.UserCredential></ID>
    <ID>UndocumentedPublicFunction:API_Authentication.kt$suspend fun API.authenticateDevice(deviceToken: String): Outcome&lt;AuthInfo></ID>
    <ID>UndocumentedPublicFunction:API_Avatar.kt$fun API.setAvatar(imageFilePath: String, callback: RequestCallback&lt;UserProfileSet>)</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.generateInteracCode( paymentCredentialId: String, callback: RequestCallback&lt;GenerateInteracCodeResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.getPaymentCredentials(callback: RequestCallback&lt;UserPaymentCredentialsResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.removePaymentCredential( paymentCredentialId: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.setDefaultAccount(paymentCredentialId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.setDirectDepositProfile( paymentCredentialId: String?, fieldToValue: HashMap&lt;String, String>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.setEuDirectDeposit( paymentCredentialId: String?, fieldToValue: HashMap&lt;String, String>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.setInteracProfile( paymentCredentialId: String?, fieldToValue: HashMap&lt;String, String>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Banking.kt$fun API.validatePaymentCredentials( accountNumber: String, routingNumber: String?, bankingInfoType: String, callback: RequestCallback&lt;ValidatePaymentCredentialsResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_BrainTree.kt$fun API.getBrainTreeClientToken(callback: RequestCallback&lt;BrainTreeClientTokenData>)</ID>
    <ID>UndocumentedPublicFunction:API_BrainTree.kt$fun API.submitBrainTreeNonce(nonce: String?)</ID>
    <ID>UndocumentedPublicFunction:API_Claim.kt$fun API.cancelClaim(claimId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Claim.kt$fun API.getClaim(claimId: String, callback: RequestCallback&lt;Claim>)</ID>
    <ID>UndocumentedPublicFunction:API_Claim.kt$fun API.getClaimHistory(claimId: String, callback: RequestCallback&lt;ClaimsHistoryResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Claim.kt$fun API.getClaims(status: String?, callback: RequestCallback&lt;ClaimsResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Coverage.kt$fun API.getCoverageSummary( productType: String, query: String?, callback: RequestCallback&lt;CoverageSummary> )</ID>
    <ID>UndocumentedPublicFunction:API_DailyScreener.kt$fun API.getCovidDailyAssessmentInformation(callback: RequestCallback&lt;CovidHealthAssessmentInformation>)</ID>
    <ID>UndocumentedPublicFunction:API_DailyScreener.kt$fun API.retakeHealthAssessment(moduleId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_DailyScreener.kt$fun API.setReturnToWorkDate(moduleId: String, date: Date, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_DailyScreener.kt$fun API.setReturnToWorkStatus( moduleId: String, returningToWork: Boolean, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_DailyScreener.kt$fun API.setUserModuleConsent(moduleId: String, consentToShare: Boolean, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_DailyScreener.kt$fun API.submitFastTrackForHealthProfileModule(moduleId: String, consentToShare: Boolean, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Dependents.kt$fun API.getDependentData( userId: String, groupId: String, callback: RequestCallback&lt;DependentsList> )</ID>
    <ID>UndocumentedPublicFunction:API_Dependents.kt$fun API.sendDependentInvitation( dependentId: String, dependentEmail: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Document.kt$fun API.deleteUserDocuments(documentId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Document.kt$fun API.getBenefitForm( formType: String, benefitId: String, callback: RequestCallback&lt;BenefitFormResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_Document.kt$fun API.getUserDocuments(callback: RequestCallback&lt;UserDocumentsResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Document.kt$fun API.uploadAndSetUserDocument( name: String, type: String, description: String, notes: String, documents: List&lt;Document>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Enrollment.kt$fun API.getEnrollmentDataFromWallet(callback: RequestCallback&lt;Wallet>)</ID>
    <ID>UndocumentedPublicFunction:API_FeatureFlags.kt$fun API.getUserFeatureFlag(): Flow&lt;Outcome&lt;FeatureFlagsResponse>></ID>
    <ID>UndocumentedPublicFunction:API_Ftux.kt$fun API.markFtux( versionOneCompleted: Boolean, createBookingVersionOne: Boolean )</ID>
    <ID>UndocumentedPublicFunction:API_Ftux.kt$fun API.setClaimsAssistantFtuxViewed(viewed: Boolean, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Ftux.kt$fun API.setFtuxViewed( viewed: Boolean, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Group.kt$fun API.getGroup(groupId: String, callback: RequestCallback&lt;Group>)</ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$fun API.completeHealthProfileQuestion( questionId: String, moduleId: String? = null, answers: Answers, campaignId: String? = null, activityId: String? = null, callback: RequestCallback&lt;CompleteQuestionResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$fun API.exitAssessment( moduleId: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$fun API.getHealthNeed(urlSlug: String): Flow&lt;Outcome&lt;HealthNeed>></ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$fun API.getHealthProfileModule(id: String, callback: RequestCallback&lt;Module>)</ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$fun API.getHealthSolutionCategory(slug: String, callback: RequestCallback&lt;HealthSolutionCategory>)</ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$fun API.setHealthProfileModuleOnboardingComplete( moduleId: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_HealthProfile.kt$suspend fun API.getHealthProfile(): Outcome&lt;HealthProfileResponse></ID>
    <ID>UndocumentedPublicFunction:API_History.kt$fun API.getCareProviderHistory(limit: Int, offset: Int, callback: RequestCallback&lt;CareProviderHistory>)</ID>
    <ID>UndocumentedPublicFunction:API_Home.kt$fun API.getHomeArticles( listId: String?, location: Location?, callback: RequestCallback&lt;ArticleListData> )</ID>
    <ID>UndocumentedPublicFunction:API_Home.kt$fun API.getHomeBanner( listId: String?, location: Location?, callback: RequestCallback&lt;HomeBanner> )</ID>
    <ID>UndocumentedPublicFunction:API_Home.kt$fun API.getHomeLayout(): Flow&lt;Outcome&lt;HomeLayoutData>></ID>
    <ID>UndocumentedPublicFunction:API_JWT.kt$fun API.refreshJwt(sessionId: String, deviceToken: String, callback: RequestCallback&lt;AuthInfo>)</ID>
    <ID>UndocumentedPublicFunction:API_Lifemarket.kt$fun API.getLifemarketMerchList( listId: String, maxListSize: Int?, maxImageHeightInPixels: Int?, callback: RequestCallback&lt;LifemarketMerchList> )</ID>
    <ID>UndocumentedPublicFunction:API_Maple.kt$fun API.getMapleUser(callback: RequestCallback&lt;MapleUser>)</ID>
    <ID>UndocumentedPublicFunction:API_Maple.kt$fun API.getMapleUserFlow()</ID>
    <ID>UndocumentedPublicFunction:API_Maple.kt$fun API.requestMapleAuthorization( context: Context, userIntent: MapleUserIntent, deviceContext: String, utmParams: JSONObject = JSONObject(), callback: RequestCallback&lt;MapleAuthorization> )</ID>
    <ID>UndocumentedPublicFunction:API_Maple.kt$fun API.setMapleConsent(callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Maple.kt$fun API.unlinkMapleUser(callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Notification.kt$fun API.getNotifications(callback: RequestCallback&lt;NotificationData>)</ID>
    <ID>UndocumentedPublicFunction:API_Notification.kt$fun API.setNotificationsRead(beforeDate: Date, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Notification.kt$fun API.setNotificationsRead(notificationIds: List&lt;String>, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_Onboarding.kt$fun API.acceptMemberTerms(callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_PushNotification.kt$fun API.setPushNotificationOpened(notificationId: String)</ID>
    <ID>UndocumentedPublicFunction:API_PushNotification.kt$fun API.setPushToken(token: String, deviceID: String, isAuth0: Boolean)</ID>
    <ID>UndocumentedPublicFunction:API_PushNotification.kt$fun API.updateEmailNotificationSettings(healthAtWorkNotification: Boolean)</ID>
    <ID>UndocumentedPublicFunction:API_PushNotification.kt$fun API.updatePushNotificationSettings(healthAtWorkNotification: Boolean)</ID>
    <ID>UndocumentedPublicFunction:API_PushNotification.kt$suspend fun API.updateCommunicationPref(language: String): Outcome&lt;Empty></ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.getDependentsRelationshipSchema( groupId: String, isQle: Boolean?, callback: RequestCallback&lt;DependentsRelationshipSchemaResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.getQleRequest( qleRequestId: String, callback: RequestCallback&lt;QleRequestResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.getQleSchema(callback: RequestCallback&lt;GetQleSchemaResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.removeQleDependent( fieldToValues: HashMap&lt;String, String>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.setQleDependent( fieldToValues: HashMap&lt;String, String>, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.setQleEnrollment( qleRequestId: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_Qle.kt$fun API.setQleRequest( type: String, groupId: String, qleDate: String, qleQuestions: List&lt;QleQuestion>, callback: RequestCallback&lt;QleReenrollmentResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_Rewards.kt$fun API.getRewardsHistory(callback: RequestCallback&lt;RewardsTransactions>)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.createSalesforceChatMap(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.createSalesforceChatMap(agentType: String, callback: RequestCallback&lt;SalesforceChatMapResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.createSalesforceOfflineCase( subject: String, agentType: String, callback: RequestCallback&lt;OfflineCaseResponse> )</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.getChatAvailability(callback: RequestCallback&lt;ChatAvailabilityResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.getChatProvider(providerType: String, agentType: String, callback: RequestCallback&lt;ChatProviderResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.getChatTranscriptById(chatId: String, callback: RequestCallback&lt;ChatTranscriptMessagesResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.getChatTranscripts(limit: Int, offset: Int, callback: RequestCallback&lt;ChatTranscriptResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.getSalesforceConfig()</ID>
    <ID>UndocumentedPublicFunction:API_Salesforce.kt$fun API.getSalesforceConfig(callback: RequestCallback&lt;SalesforceConfigResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$fun API.sendAndReceiveData( json: JSONObject, responseMessageType: String? = null, callback: RequestCallback&lt;*> )</ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$inline fun &lt;reified T> API.sendAndReceiveCachedAndSocketData( messageRequest: MessageRequest, tag: String = "API" ): Flow&lt;Outcome&lt;T>></ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$inline fun &lt;reified T> API.sendAndReceiveCachedAndSocketData( messageType: String, params: JSONObject? = null, responseMessageType: String? = null, requiresAuthentication: Boolean = true, tag: String = "API" ): Flow&lt;Outcome&lt;T>></ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$inline fun &lt;reified T> API.sendAndReceiveCachedAndSocketData( messageType: String, params: Map&lt;String, Any?>? = null, responseMessageType: String? = null, requiresAuthentication: Boolean = true, tag: String = "API" ): Flow&lt;Outcome&lt;T>></ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$inline fun &lt;reified T> API.sendAndReceiveFlowData( messageRequest: MessageRequest, tag: String = "API" ): Flow&lt;Outcome&lt;T>></ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$inline fun &lt;reified T> API.sendAndReceiveFlowData( messageType: String, params: JSONObject? = null, responseMessageType: String? = null, requiresAuthentication: Boolean = true, tag: String = "API" ): Flow&lt;Outcome&lt;T>></ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$suspend inline fun &lt;reified T> API.sendAndReceiveData( messageRequest: MessageRequest, tag: String = "API" ): Outcome&lt;T></ID>
    <ID>UndocumentedPublicFunction:API_SendData.kt$suspend inline fun &lt;reified T> API.sendAndReceiveData( messageType: String, params: JSONObject? = null, responseMessageType: String? = null, requiresAuthentication: Boolean = true, tag: String = "API" ): Outcome&lt;T></ID>
    <ID>UndocumentedPublicFunction:API_SignOut.kt$fun API.signOut(invalidateSessionId: Boolean)</ID>
    <ID>UndocumentedPublicFunction:API_Transaction.kt$fun API.getTransactionHistory( index: Int, pageSize: Int, accountType: String, callback: RequestCallback&lt;TransactionHistory> )</ID>
    <ID>UndocumentedPublicFunction:API_Triage.kt$fun API.getChatProviderList(): Flow&lt;Outcome&lt;ChatProviders>></ID>
    <ID>UndocumentedPublicFunction:API_Triage.kt$fun API.getQuickActions(): Flow&lt;Outcome&lt;QuickActions>></ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.getAuthMethod(callback: RequestCallback&lt;AuthMethod>)</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.getUserConfig()</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.getUserConfig(callback: RequestCallback&lt;UserConfig>)</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.getUserProfile(callback: RequestCallback&lt;UserProfile>?)</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.getUserProfile(userId: String?, callback: RequestCallback&lt;UserProfile>?)</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.setChangePassword( authToken: String, newAuthToken: String, callback: RequestCallback&lt;AuthMethod> )</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.setOptedIntoMarketing(optedIntoMarketing: Boolean, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.setUserOptimumProfile( memberId: String, memberSinceDate: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$fun API.setUserProfile(user: User, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_User.kt$suspend fun API.setChangeEmail(email: String): Outcome&lt;Empty></ID>
    <ID>UndocumentedPublicFunction:API_UserAlert.kt$fun API.getUserAlerts(callback: RequestCallback&lt;AppAlertsResponse>)</ID>
    <ID>UndocumentedPublicFunction:API_UserAlert.kt$fun API.setUserAlertRead(alertId: String, actionId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_UserPcid.kt$fun API.getUserPcid()</ID>
    <ID>UndocumentedPublicFunction:API_UserPcid.kt$fun API.getUserPcid(callback: RequestCallback&lt;UserPcid>)</ID>
    <ID>UndocumentedPublicFunction:API_Vaccine.kt$fun API.getUserVaccinationWorkflow(vaccineType: VaccineType, provinceCode: String)</ID>
    <ID>UndocumentedPublicFunction:API_Vaccine.kt$fun API.setVaccineFormSubmitted(vaccineType: VaccineType, formId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:API_WaitingRoomLinkOuts.kt$fun API.getWaitingRoomLinkOuts(waitingTime: Int, agentType: String)</ID>
    <ID>UndocumentedPublicFunction:API_WaitingRoomLinkOuts.kt$fun API.getWaitingRoomLinkOuts(waitingTime: Int, agentType: String, callback: RequestCallback&lt;WaitingRoomLinkOuts>)</ID>
    <ID>UndocumentedPublicFunction:API_Wallet.kt$fun API.getUserBenefitsLiveBalances(userBenefitId: String): Flow&lt;Outcome&lt;UserLiveBalancesData>></ID>
    <ID>UndocumentedPublicFunction:API_Wallet.kt$fun API.getWallet(cardId: String = ""): Flow&lt;Outcome&lt;Wallet>></ID>
    <ID>UndocumentedPublicFunction:API_Wallet.kt$fun API.getWalletCategories(): Flow&lt;Outcome&lt;WalletCategoriesItemSectioned>></ID>
    <ID>UndocumentedPublicFunction:API_Wallet.kt$fun API.getWalletDependents(): Flow&lt;Outcome&lt;DependentCardsResponse>></ID>
    <ID>UndocumentedPublicFunction:API_Wallet.kt$fun API.redeemPromoCode(code: String): Flow&lt;Outcome&lt;PersonalStoreCreditRedeemed>></ID>
    <ID>UndocumentedPublicFunction:API_Wallet.kt$fun API.setBenefitVendorCard( memberId: String, benefitId: String, callback: RequestCallback&lt;Empty> )</ID>
    <ID>UndocumentedPublicFunction:API_WearableConsent.kt$suspend fun API.disconnectDevice(deviceType: DeviceType): Outcome&lt;DisconnectResponse></ID>
    <ID>UndocumentedPublicFunction:API_WearableConsent.kt$suspend fun API.getValidicUser(dataObjects: List&lt;WearableDataType>): Outcome&lt;ValidicUser></ID>
    <ID>UndocumentedPublicFunction:API_WearableConsent.kt$suspend fun API.getWearableConsentForDataPoints(dataObjects: List&lt;WearableDataType>): Outcome&lt;WearableConsentResponse></ID>
    <ID>UndocumentedPublicFunction:API_WearableConsent.kt$suspend fun API.setWearableConsent(): Outcome&lt;WearableConsent></ID>
    <ID>UndocumentedPublicFunction:AboutPCHealthFragmentDirections.kt$AboutPCHealthFragmentDirections.Companion$public fun navigateToPoweredByLeague(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AboutPCHealthFragmentDirections.kt$AboutPCHealthFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountActivity.kt$AccountActivity.Companion$fun deepLinkTo(context: Context, uri: Uri): Intent</ID>
    <ID>UndocumentedPublicFunction:AccountController.kt$AccountController.Listener$fun navigateToAccountDetails()</ID>
    <ID>UndocumentedPublicFunction:AccountController.kt$AccountController.Listener$fun navigateToNotificationSettings()</ID>
    <ID>UndocumentedPublicFunction:AccountController.kt$AccountController.Listener$fun navigateToPersonalInfo()</ID>
    <ID>UndocumentedPublicFunction:AccountController.kt$AccountController.Listener$fun navigateToPrivacyPolicy()</ID>
    <ID>UndocumentedPublicFunction:AccountController.kt$AccountController.Listener$fun navigateToTerms()</ID>
    <ID>UndocumentedPublicFunction:AccountController.kt$AccountController.Listener$fun signOut()</ID>
    <ID>UndocumentedPublicFunction:AccountDeletionConfiguration.kt$AccountDeletion$fun initialize( drawables: AccountDeletionDrawables, strings: AccountDeletionStrings, api: API, sessionUtils: SessionUtils, )</ID>
    <ID>UndocumentedPublicFunction:AccountDeletionConfirmationFragmentDirections.kt$AccountDeletionConfirmationFragmentDirections.Companion$public fun toAccountDeletionSignOutFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AccountDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AccountDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsFragmentDirections.kt$AccountDetailsFragmentDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsFragmentDirections.kt$AccountDetailsFragmentDirections.Companion$public fun navigateToChangeNumber(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsFragmentDirections.kt$AccountDetailsFragmentDirections.Companion$public fun navigateToChangePasswordFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$@Suppress("Deprecation") fun isModified(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$@Suppress("Deprecation") fun saveData()</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$fun fetchAuthenticationMethod()</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$fun isDataValid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$fun setChangePassword(currentPassword: String, newPassword: String)</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$fun setCommunicationPreference(preference: String)</ID>
    <ID>UndocumentedPublicFunction:AccountDetailsViewModel.kt$AccountDetailsViewModel$fun setEmail(newEmail: String)</ID>
    <ID>UndocumentedPublicFunction:AccountFragmentDirections.kt$AccountFragmentDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountFragmentDirections.kt$AccountFragmentDirections.Companion$public fun navigateToAccountDetailsFragment(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountFragmentDirections.kt$AccountFragmentDirections.Companion$public fun navigateToPersonalInfoFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSettingsNavGraphDirections.kt$AccountSettingsNavGraphDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupGenderFragmentDirections.kt$AccountSetupGenderFragmentDirections.Companion$public fun navigateToSelectGenderIdentity(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupGenderFragmentDirections.kt$AccountSetupGenderFragmentDirections.Companion$public fun navigateToSelectPronoun(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupGenderFragmentDirections.kt$AccountSetupGenderFragmentDirections.Companion$public fun navigateToSetupLocation(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupLandingFragmentDirections.kt$AccountSetupLandingFragmentDirections.Companion$public fun navigateToSetupPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupLocationFragmentDirections.kt$AccountSetupLocationFragmentDirections.Companion$public fun navigateToSetupComplete(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupNavHostFragmentDirections.kt$AccountSetupNavHostFragmentDirections.Companion$public fun navigateToAccountSetup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupNavHostFragmentDirections.kt$AccountSetupNavHostFragmentDirections.Companion$public fun navigateToAuthentication(isPhoneSet: Boolean = false, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupNavHostFragmentDirections.kt$AccountSetupNavHostFragmentDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupNavHostFragmentDirections.kt$AccountSetupNavHostFragmentDirections.Companion$public fun navigateToLiveAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupNavHostFragmentDirections.kt$AccountSetupNavHostFragmentDirections.Companion$public fun navigateToLoginIntro(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupPersonalInfoFragmentDirections.kt$AccountSetupPersonalInfoFragmentDirections.Companion$public fun navigateToSetupGender(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountSetupViewModel.kt$AccountSetupViewModel$fun completeAccountSetup()</ID>
    <ID>UndocumentedPublicFunction:AccountSetupViewModel.kt$AccountSetupViewModel$fun setGenderIdentities(genderIdentities: List&lt;GenderIdentity>)</ID>
    <ID>UndocumentedPublicFunction:AccountSetupViewModel.kt$AccountSetupViewModel$fun setPronouns(pronouns: List&lt;Pronoun>)</ID>
    <ID>UndocumentedPublicFunction:AccountSetupViewModel.kt$AccountSetupViewModel$fun validateGender(sex: String?)</ID>
    <ID>UndocumentedPublicFunction:AccountSetupViewModel.kt$AccountSetupViewModel$fun validateLocation( address1: String, address2: String, city: String, province: Province?, postalCode: String )</ID>
    <ID>UndocumentedPublicFunction:AccountSetupViewModel.kt$AccountSetupViewModel$fun validatePersonalInfo( firstName: String, lastName: String, dateOfBirth: Date?, optedIntoMarketingCommunications: Boolean )</ID>
    <ID>UndocumentedPublicFunction:AccountUnlinkedFragmentDirections.kt$AccountUnlinkedFragmentDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountUnlinkedFragmentDirections.kt$AccountUnlinkedFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AccountViewModel.kt$AccountViewModel$fun getUser()</ID>
    <ID>UndocumentedPublicFunction:AccountViewModel.kt$AccountViewModel$fun getUserConfig()</ID>
    <ID>UndocumentedPublicFunction:AccountViewModel.kt$AccountViewModel$fun setAvatar(file: File)</ID>
    <ID>UndocumentedPublicFunction:AchievementProgressUseCase.kt$AchievementProgressUseCase$fun fetchAchievementsProgress()</ID>
    <ID>UndocumentedPublicFunction:AchievementUseCase.kt$AchievementUseCase$fun fetchAchievementInfoOnCompletion(rewardPoints: Int)</ID>
    <ID>UndocumentedPublicFunction:AchievementUseCase.kt$AchievementUseCase$fun fetchAllAchievements()</ID>
    <ID>UndocumentedPublicFunction:AchievementsRepository.kt$AchievementsRepository$fun fetchAchievementInfoOnCompletion(): Flow&lt;Outcome&lt;AchievementCompletionResponse>></ID>
    <ID>UndocumentedPublicFunction:AchievementsRepository.kt$AchievementsRepository$fun fetchAchievementsProgress(): Flow&lt;Outcome&lt;MilestoneTrackerResult>></ID>
    <ID>UndocumentedPublicFunction:AchievementsRepository.kt$AchievementsRepository$fun fetchAllAchievements(): Flow&lt;Outcome&lt;AchievementCompletionResponse>></ID>
    <ID>UndocumentedPublicFunction:AchievementsRepository.kt$AchievementsRepository$fun fetchRecentlyEarnedAchievements(): Flow&lt;Outcome&lt;RecentAchievementsResponse>></ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@JvmOverloads @ModelProp fun setShowChevron(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@JvmOverloads @TextProp fun setTitleText(titleText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ActionBanner.kt$ActionBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Builder$fun addAction(action: Action): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Builder$fun addOnCancelListener(cancelListener: (() -> Unit)?): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Builder$fun setTitle(title: String): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Builder$fun show(fragmentManager: FragmentManager, tag: String? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Builder$fun showCloseButton(isCloseButtonVissible: Boolean = false): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$// working with a loading state within genesis is going to be tricky, // might need to use view reference within the click handler logic // and cast it to an ActionButton. We don't want to have to update // the data model for it! Might be worth just avoiding all together fun setLoadingStateOn()</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$@JvmOverloads @TextProp fun setText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:ActionButton.kt$ActionButton$fun setLoadingStateOff()</ID>
    <ID>UndocumentedPublicFunction:ActionDialog.kt$ActionDialog.Builder$fun setMessage(message: String): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionDialog.kt$ActionDialog.Builder$fun setPrimaryAction(text: String = "", actionClickListener: (() -> Unit)? = null): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionDialog.kt$ActionDialog.Builder$fun setSecondaryAction( text: String = "", onClickListener: (() -> Unit)? = null ): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionDialog.kt$ActionDialog.Builder$fun setSubTitle(subTitle: String): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionDialog.kt$ActionDialog.Builder$fun setTitle(title: String): Builder</ID>
    <ID>UndocumentedPublicFunction:ActionDialog.kt$ActionDialog.Builder$fun show()</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$@Composable fun ActionRow( modifier: Modifier = Modifier, contentPadding: PaddingValues = ActionRowDefaults.contentPadding(), borderStroke: BorderStroke? = null, shape: Shape = RectangleShape, icon: @Composable() (BoxScope.() -> Unit)? = null, showChevron: Boolean = false, onClick: (() -> Unit)? = null, textContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$@Composable fun ActionRow( modifier: Modifier = Modifier, contentPadding: PaddingValues = ActionRowDefaults.contentPadding(), borderStroke: BorderStroke? = null, shape: Shape = RectangleShape, text: String, textStyle: TextStyle = GenesisTheme.typography.subtitle2, icon: @Composable() (BoxScope.() -> Unit)? = null, showChevron: Boolean = false, onClick: (() -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$@Preview(name = "Action Row", group = "Row") @Composable fun ActionRowPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setBodyColor(color: Int = DEFAULT_BODY_COLOR)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setBodySubtitleColor(color: Int = DEFAULT_BODY_COLOR)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setIconSize(iconSize: IconSize = IconSize.SMALL)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setInnerLayoutMinHeight(@AttrRes attrRes: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setShowChevron(showChevron: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setShowDivider(showDivider: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setTitleColor(color: Int = DEFAULT_TITLE_COLOR)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp fun setTitleStyleAttr(@AttrRes titleStyle: Int = R.attr.typography_subtitle1)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @TextProp fun setBodySubtitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @TextProp fun setBodyText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @TextProp fun setOverlineText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$fun getBodyText(): String</ID>
    <ID>UndocumentedPublicFunction:ActionRow.kt$ActionRow$fun getTitleText(): String</ID>
    <ID>UndocumentedPublicFunction:ActionRowDefaults.kt$ActionRowDefaults$@Composable fun contentPadding( horizontal: Dp = GenesisTheme.spacing.one, vertical: Dp = GenesisTheme.spacing.one )</ID>
    <ID>UndocumentedPublicFunction:ActivitiesFetch.kt$fun CoroutineScope.getHealthJourneyItemSections( healthJourneySections: MutableLiveData&lt;State&lt;List&lt;HealthJourneyItemsSection>>>, healthJourneyRepo: HealthJourneyRepository, )</ID>
    <ID>UndocumentedPublicFunction:ActivityCompletion.kt$ActivityCompletion$fun resetObtainedRewardPoints()</ID>
    <ID>UndocumentedPublicFunction:ActivityCompletion.kt$ActivityCompletion$fun setObtainedRewardPoints(rewardPoints: Int)</ID>
    <ID>UndocumentedPublicFunction:ActivityCompletionBottomSheet.kt$ActivityCompletionBottomSheet.Builder$fun dismiss()</ID>
    <ID>UndocumentedPublicFunction:ActivityCompletionBottomSheet.kt$ActivityCompletionBottomSheet.Builder$fun show( fragmentManager: FragmentManager, tag: String? = null, userAchievement: UserAchievement )</ID>
    <ID>UndocumentedPublicFunction:ActivityCompletionViewModel.kt$ActivityCompletionViewModel$fun fetchAchievementInfoOnCompletion(rewardPoints: Int)</ID>
    <ID>UndocumentedPublicFunction:ActivityExtension.kt$fun Activity.launchChatSurvey( typeformUrl: String = Chat.configuration.koinApplication.koin.get&lt;CareChatClient>().typeformUrl, analyticsTracker: AnalyticsTracker = Chat.configuration.koinApplication.koin.get(), )</ID>
    <ID>UndocumentedPublicFunction:ActivityExtension.kt$fun Activity.navigateToPlayStoreListing()</ID>
    <ID>UndocumentedPublicFunction:ActivityExtension.kt$fun Activity.onClickChatSurveyModal(typeformUrl: String)</ID>
    <ID>UndocumentedPublicFunction:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AddDependentFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AddDependentFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AddDependentFormFragmentDirections.kt$AddDependentFormFragmentDirections.Companion$public fun actionAddDependentFormToDependentFormSuccess(title: Int, description: Int): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddDependentRelationshipFragment.kt$@Composable fun AddDependentRelationshipView( successfulNextClick: (String) -> Unit, onCloseClicked: () -> Unit, onTooltipClicked: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:AddDependentRelationshipFragmentDirections.kt$AddDependentRelationshipFragmentDirections.Companion$public fun actionAddDependentRelationshipToAddDependentForm(relationshipType: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Composable fun AddPatientForm( modifier: Modifier = Modifier, formData: AddPatientFormData, )</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Composable fun DateSelectionInputRow( state: DateSelectionState, label: String, placeholder: String, )</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Composable fun MaxDependentsErrorDialog( onDismiss: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Composable fun RelationshipSelectionInputRow( state: RelationshipSelectionState, label: String, placeholder: String, )</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Composable fun SexSelectionInputRow( state: SexSelectionState, label: String, placeholder: String, )</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Composable fun TextInputForm( label: String, state: TextErrorState, keyboardImeAction: ImeAction = ImeAction.Done, )</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragment.kt$@Preview(showBackground = true) @Composable fun AddPatientViewPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentArgs.kt$AddPatientFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentArgs.kt$AddPatientFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AddPatientFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentArgs.kt$AddPatientFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AddPatientFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientFragmentDirections.kt$AddPatientFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AddPatientViewModel.kt$fun AddPatientFormData.isValid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): AgentAvailabilityFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AgentAvailabilityFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AgentChatClient.kt$AgentChatClient$fun setChatClient(chatClient: ChatClient)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.Presenter$fun attach( chatClient: LeagueChatClient? = null, chatToken: String? = null, userId: String? = null, chatAvailabilities: List&lt;ChatAvailability>? = null, agentType: String )</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.Presenter$fun onCancelChat()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.Presenter$fun onConfirmClose()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.Presenter$fun onEndChat()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.Presenter$fun onSendMessage(message: String)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.Presenter$fun shouldShowConfirmationClose(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun close(typeformUrl: String? = null)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun confirmClose(typeformUrl: String?)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun hideAgentIsTyping()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun hideAttachmentUploadButton()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun hideProgressDialog()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun hideSendOfflineMessage()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showAgentEndedChat(groupName: String)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showAgentIsTyping()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showAgentJoined(agentName: String)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showAgentLeft(agentName: String)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showAgentUnavailable(errorMessage: String = "")</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showAttachmentUploadButton(callback: (file: File) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showChat()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showChatAvailability( chatAvailabilities: List&lt;ChatAvailability>, onSendMessageListener: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showChatTransferred()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showError(message: String)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showEstimatedWaitingTime(minutes: Int)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showFileUploadCancelled()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showFileUploadSuccessful(file: File)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showLoadingState()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showMessage(agentId: String, agentName: String, message: String, timestamp: Long, file: File?)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showProgressDialog()</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showQueuePosition(position: Int)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showSendOfflineMessage(onSendMessageListener: (message: String) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showSnackbar(@StringRes stringRes: Int, vararg data: Any? = arrayOf())</ID>
    <ID>UndocumentedPublicFunction:AgentChatContract.kt$AgentChatContract.View$fun showSnackbar(message: String, vararg data: Any? = arrayOf())</ID>
    <ID>UndocumentedPublicFunction:AgentChatFragment.kt$AgentChatFragment$fun hideAgentIsTyping()</ID>
    <ID>UndocumentedPublicFunction:AgentChatFragment.kt$AgentChatFragment$fun hideChatInput()</ID>
    <ID>UndocumentedPublicFunction:AgentChatFragment.kt$AgentChatFragment$fun hideUploadingImageMessage()</ID>
    <ID>UndocumentedPublicFunction:AgentChatFragment.kt$AgentChatFragment$fun showAgentIsTyping()</ID>
    <ID>UndocumentedPublicFunction:AgentChatFragment.kt$AgentChatFragment$fun showMessage(message: LeagueChatMessage)</ID>
    <ID>UndocumentedPublicFunction:AgentChatFragment.kt$AgentChatFragment$fun showUploadingImageMessage()</ID>
    <ID>UndocumentedPublicFunction:AgentLoadingViewModel.kt$AgentLoadingViewModel$fun fetchWaitingRoomLinkOuts(waitingTime: Int, agentType: String)</ID>
    <ID>UndocumentedPublicFunction:AgentSendEmailFragmentArgs.kt$AgentSendEmailFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AgentSendEmailFragmentArgs.kt$AgentSendEmailFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AgentSendEmailFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AgentSendEmailFragmentArgs.kt$AgentSendEmailFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AgentSendEmailFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AgentSendEmailFragmentDirections.kt$AgentSendEmailFragmentDirections.Companion$public fun navigateBackToLanding(chatType: String = "", agentTypeDescription: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AgentTyping.kt$AgentTyping$@JvmOverloads @TextProp fun setMessage(message: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker.kt$AnalyticsTracker$// ****** Important ******* // Don't use any of the methods below, use AnalyticsTracker.trackAnalyticsEvent(eventName, parameters) instead @Deprecated( level = DeprecationLevel.WARNING, message = "Replaced by AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", replaceWith = ReplaceWith( expression = "AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", "life.league.core.analytics.AnalyticsTracker" ) ) fun viewScreen(screenName: String, parameters: Map&lt;String, Any?>? = null)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker.kt$AnalyticsTracker$@Deprecated( level = DeprecationLevel.WARNING, message = "Replaced by AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", replaceWith = ReplaceWith( expression = "AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", "life.league.core.analytics.AnalyticsTracker" ) ) fun trackDebugEvent(debugMessage: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker.kt$AnalyticsTracker$@Deprecated( level = DeprecationLevel.WARNING, message = "Replaced by AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", replaceWith = ReplaceWith( expression = "AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", "life.league.core.analytics.AnalyticsTracker" ) ) fun trackDebugEvent(eventName: String, params: Map&lt;String, String>)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker.kt$AnalyticsTracker$@Deprecated( level = DeprecationLevel.WARNING, message = "Replaced by AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", replaceWith = ReplaceWith( expression = "AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", "life.league.core.analytics.AnalyticsTracker" ) ) fun trackDeepLinkUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker.kt$AnalyticsTracker$@Deprecated( level = DeprecationLevel.WARNING, message = "Replaced by AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", replaceWith = ReplaceWith( expression = "AnalyticsTracker.trackAnalyticsEvent(eventName, parameters)", "life.league.core.analytics.AnalyticsTracker" ) ) fun trackEvent( category: String, action: String? = null, label: String? = null, value: Long? = null, parameters: Map&lt;String, Any?>? = null )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Account.kt$fun AnalyticsTracker.viewMyAccount()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_AppRating.kt$fun AnalyticsTracker.trackRatingPromptCompleted()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_AppRating.kt$fun AnalyticsTracker.trackRatingPromptShown(condition: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// Component 112: A https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAppointmentDetailsViewMoreAppointmentDetails(orgId: AppointmentOrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// Component 72: https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAppointmentDetailCancelAppointment(orgId: AppointmentOrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// Component 73-B https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAppointmentDetailsJoinTheWaitingRoom(orgId: AppointmentOrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// Component 73: A https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAppointmentDetailsContactSupport(orgId: AppointmentOrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// Component [105, 106]: https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAppointmentConfirmationViewAppointment( providerName: OrgId, appointmentType: AppointmentType, clinicianPreference: PractitionerSelection, pricing: Pricing, confirmAppointment: Boolean, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// component 102 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440&amp;range=A1076 fun AnalyticsTracker.checkCancellationPolicy( orgId: OrgId, appointmentType: AppointmentType, practitionerSelection: PractitionerSelection, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$// component 104 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440&amp;range=A1076 fun AnalyticsTracker.bookAppointment( orgId: OrgId, appointmentType: AppointmentType, practitionerSelection: PractitionerSelection, pricing: Pricing, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.checkTermsAndConditions()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.selectCompletedAppointment()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.selectUpcomingAppointment()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.viewAppointmentDetailScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.viewAppointmentListScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.viewConfirmationScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun AnalyticsTracker.viewSummaryScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Appointment.kt$fun successfulBookingAnalyticsKey(confirmAppointment: Boolean): Pair&lt;String, Boolean></ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackCallMeInstead()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackCountrySelection(countryCode: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackInvalidPhoneNumber()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackInvalidVerificationCode()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackPhoneNumberInput()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackSendCodeAgain()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackSendVerificationCode()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackSignIn()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackSignOut()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackVerificationCodeBackClick()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackVerificationCodeContinueClick()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.trackVerificationCodeInput()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.viewLogin()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.viewPhoneNumberScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Authentication.kt$fun AnalyticsTracker.viewVerificationCodeScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.backendErrorValidatingAddAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.backendErrorValidatingEditAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.cancelAddingAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.cancelDeletingAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.cancelEditingAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.changeDefaultAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.confirmAccountToAdd(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.confirmAccountToEdit(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.confirmDeleteAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.copyInteracCode()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.errorAddingAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.errorDeletingAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.errorEditingAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.errorGeneratingInteracCode()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.frontendErrorValidatingAddAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.frontendErrorValidatingEditAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.generateNewInteracCode()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.selectAccountToAdd(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.selectAccountToEdit(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.validateAddAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.validateEditAccount(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.viewAddAccountHelpPopup(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.viewBankingInfoAccountDetail()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.viewBankingInfoAddAccountList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.viewBankingInfoEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.viewBankingInfoList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Banking.kt$fun AnalyticsTracker.viewEditAccountHelpPopup(accountType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.acceptEndChatWarning()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.cancelChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.dismissFeedbackModal()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.endChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.giveChatFeedback()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.navigateToHelpCentreFromChatOfflineScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.sendEmailOnChatError()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.sendOfflineMessageToAgent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.startChat(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackCancelEndChat(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackChatEndedByAgentDismiss()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackChatEndedByInactivityDismiss()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackChatWaitingEvent(agentType: String?, queuePosition: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackCloseChatMenuOptions()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackCloseConsentSheet()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackConfirmEndChat(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackEndActiveChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackEndedByAgentViewChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackEndedByInactivityViewChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackEnterActiveChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackExitChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackExitChatHistory()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackExitChatHistoryDetails()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackExitChatIntro(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackExitMapleInfoModal()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackFtuxCompleted(userId: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackLoadMoreChatHistory()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackMapleAgreeAndContinue()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackNavigateAwayFromChat(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackOpenChatHistory()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackOpenChatHistoryDetails(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackOpenChatHistoryInMaple(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackOpenChatMenuOptions()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackPersistentMenu(menuItemName: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackQuickReply(quickReplyName: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackSelectChatAgent(agentType: String, provider: ChatAnalyticsProvider, price: String, buttonText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackSendMessageToClinic(userId: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackSendMessageToLeague()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackSendMessageToMember(userId: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackSendMessageToPro(userId: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackStartChatFromPreChatScreen(buttonText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackStartEmail(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackSubmitEmail(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackViewHours(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackViewMapleChatDetails()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackViewMapleInfoModal(buttonText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackViewMaplePricingAndAvailability(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.trackWaitingRoomLinkOutEvent(agentType: String?, label: String?, url: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.uploadFileFailToChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.uploadFileIconAppeared()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.uploadFileSuccessToChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewActiveChatScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewChatErrorPage()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewChatHistoryScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewChatIntroScreen(agentType: String?, provider: ChatAnalyticsProvider, price: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewChatScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewChatUnavailableScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewChatWaitingScreen(agentType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewMapleConsentSheet()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewMapleInfoModal()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewPersistentMenu()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Chat.kt$fun AnalyticsTracker.viewPreChatFormScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.cancelClaim()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.editClaim()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.filterClaimsList(filter: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.speakWithAgent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.submitClaimFromEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.viewAllClaimsFromEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.viewClaimDocuments()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Claim.kt$fun AnalyticsTracker.viewClaimsDetails()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Clinic.kt$// Component 85 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewLocationDetailScreen(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Clinic.kt$// Component 86 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackLocationDetailClickPhone(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Clinic.kt$// Component 87 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackLocationDetailClickEmail(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Clinic.kt$// Component 88 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackLocationDetailClickUrl(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Clinic.kt$// Component 89 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackLocationDetailSelectLocation(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Conversation.kt$fun AnalyticsTracker.trackConversationOption(optionText: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Conversation.kt$fun AnalyticsTracker.trackFilterConversation()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Conversation.kt$fun AnalyticsTracker.trackNumberOfConversations(numConversations: Long)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Conversation.kt$fun AnalyticsTracker.viewConversationsDetail()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Conversation.kt$fun AnalyticsTracker.viewConversationsHome()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Conversation.kt$fun AnalyticsTracker.viewConversationsLeague()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_DataPrivacyTnC.kt$fun AnalyticsTracker.trackAcceptTermsAndConditions(pageTitle: String, buttonCtaText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_DataPrivacyTnC.kt$fun AnalyticsTracker.trackCloseTermsAndConditions(pageTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_DataPrivacyTnC.kt$fun AnalyticsTracker.trackViewInfoModal(pageTitle: String, headerText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_DataPrivacyTnC.kt$fun AnalyticsTracker.viewDataPrivacyTNCInfoModal(pageTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_DataPrivacyTnC.kt$fun AnalyticsTracker.viewDataPrivacyTermsAndConditions(pageTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackAddDependent(relationshipType: String?, qualifyingLifeEvent: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackCancelAddDependent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackDependentInvitationFailure(dependentId: String, errorMessage: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackDependentInvitationSuccess(dependentId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackEditDependent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackQleBannerClicked()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackReSendDependentInvitation(dependentId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackRemoveDependent(qualifyingLifeEvent: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.trackSendDependentInvitation(dependentId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.viewAddDependent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.viewEditDependent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.viewMyDependentsList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.viewNoDependents()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.viewQualifyingDependents()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Dependents.kt$fun AnalyticsTracker.viewRemoveDependent()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.attemptEditDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.attemptUploadDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.cancelEditDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.cancelUploadDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.documentsCustomTypeSet(type: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.downloadForm(formName: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.editDocument(type: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.failedApiCallUploadOrEdit()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.failedImageUpload()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.multipleDocsEdited(numberOfPages: Int)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.multipleDocsUploaded(numberOfPages: Int)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.uploadDocument(type: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentTooltip(tooltipTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentsAdd()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentsEdit()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentsEoiNotice()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentsFormsEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentsFormsList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Document.kt$fun AnalyticsTracker.viewDocumentsList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.trackClaimsAssistantFTUXCancelled()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.trackClaimsAssistantFTUXCompleted()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.trackClaimsAssistantFTUXSkipped(pageTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.trackFtuxCompleted()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.trackFtuxSkipped(pageTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.viewClaimsAssistantFtuxItsInTheCards()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.viewClaimsAssistantFtuxSaveTheBestForLast()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.viewClaimsAssistantFtuxWeCanHelp()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.viewFtuxNeverMissADeal()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.viewFtuxNewHealthSection()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Ftux.kt$fun AnalyticsTracker.viewFtuxNewLookAndFeel()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Global.kt$fun AnalyticsTracker.trackRetryLoad(errorType: String? = null)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Global.kt$fun AnalyticsTracker.viewErrorScreen(errorType: String? = null)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackAssessmentInfoModalHealthProfile( moduleId: String, moduleType: String, modalLinkName: String?, pageNumber: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackAssessmentResultsChangeReturnDate( moduleId: String, moduleType: String, backToWorkStatus: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackAssessmentResultsChatWithCare( moduleId: String, moduleType: String, backToWorkStatus: String, agentType: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackAssessmentResultsRetake( moduleId: String, moduleType: String, backToWorkStatus: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackBeginAssessment( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCompleteAssessmentOnboarding( moduleId: String, moduleType: String, buttonText: String, pageNumber: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCompleteHealthProfilePage( moduleId: String, moduleType: String, pageName: String?, questionId: String, questionNumber: Int, totalQuestions: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCompleteProfile( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackConsentOption( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackContinueOnboardingHealthProfile( moduleId: String, moduleType: String, screenTitle: String, pageNumber: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCovidFastTrackRetake( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCovidFastTrackShare( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCovidGoingIntoWork( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCovidNotGoingIntoWork( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCovidPauseReminders( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackCovidReminder(moduleId: String, moduleType: String, label: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackExitHealthProfileOnboarding( moduleId: String, moduleType: String, screenTitle: String, pageNumber: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackExitScreenKeepGoing( moduleId: String, moduleType: String, questionId: String, questionNumber: Int, totalQuestions: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackExitScreenSaveProgressAndExit( moduleId: String, moduleType: String, questionId: String, questionNumber: Int, totalQuestions: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackHealthNeedChatWithCareTeam(healthNeedName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackHealthProfileChatWithCareTeam(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackMetricReadings()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackMetricReadingsEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackReadyToSubmitGoBackHealthProfile( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackReadyToSubmitSubmitHealthProfile( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackRestartAssessment( moduleId: String, moduleType: String, buttonText: String, backToWorkStatus: String = "" )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackResumeHealthProfile( moduleId: String, moduleType: String, questionTitle: String, questionId: String, questionNumber: Int, totalQuestions: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackSelectFocusArea(focusName: String, url: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackSelectHealthNeedRecommendationFromCategory( category: HealthSolutionCategory, healthNeed: HealthNeedRecommendation, rank: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackSelectRecommendedHealthSolution( healthNeedName: String, recommendation: HealthNeedRecommendation, rank: Int, healthNeedId: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackSelectResource( moduleId: String, moduleType: String, buttonText: String, backToWorkStatus: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackViewDimensionsOfHealth(topicName: String, url: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackViewHealthProfileEmptyStateModal(screenTitle: String, heading: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackViewHealthProfileEmptyStateStartOnboarding(screenTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.trackViewMyResults( moduleId: String, moduleType: String, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewAssessmentCovidElegibilityCheck(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewAssessmentOboarding(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewBeginAssessment(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewDimensionsOfHealth()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthAssessmentComplete(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthAssessmentConsent(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthAssessmentFastTrack(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthAssessmentResults(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthNeed(healthNeedName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthProfile()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthProfileEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewHealthSolutionCategory(categoryName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewReturnToWorkDate(moduleType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_HealthProfile.kt$fun AnalyticsTracker.viewWellnessStationEmptyState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$// Component 4 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=2020879146 fun AnalyticsTracker.trackHomeHeaderCTAClicked(buttonText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackDismissAppStoreReview()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackFeaturedProduct(id: String?, productName: String?, carouselIndex: Int?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackGetMembersFailed(code: Int, requestError: RequestError? = null)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackInfoHubCardClicked(ctaText: String, infoHubUrl: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackMarkGoalAsComplete( programId: String, programName: String, goalId: String, goalName: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackMarkGoalAsSkipped( programId: String, programName: String, goalId: String, goalName: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackPromptForAppStoreReview()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackRecommendedProduct( id: String?, productName: String?, carouselName: String?, recommendationRank: Int? )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackSelectActiveHealthGoal( programId: String, goalId: String, goalName: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackSelectHealthJourneyActivity( activityType: String?, activityName: String?, activityId: String? )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackSelectPopularProgram( programName: String?, programId: String?, carouselName: String?, carouselRecommendationRank: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackSelectRecommendedHealthProgram( programId: String, programName: String, carouselName: String, carouselRecommendationRank: Int )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackViewAllPrograms()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackViewEarnPoints()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackViewHealthJourney()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.trackViewPointsBalance()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.viewHome()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.viewShop()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Home.kt$fun AnalyticsTracker.viewVaccineInfoHub(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackAllProductsMarketplace()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackBanner(linkLocation: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackBannerNoImage(linkLocation: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackBannerUrgent(linkLocation: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackDismissNotification()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackFeaturedProduct(id: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackHomeRecommendedHealthProgram(programName: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackHomeViewAllHealthPrograms()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackPointsBalanceClick()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackSelectActiveHealthGoal(name: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackSelectHealthJourneyActivity(activityType: String, activityName: String, activityId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackSelectHealthProgramCategory(name: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackSelectPopularProgram(programName: String, programId: String, carouselName: String, carouselRecommendationRank: Int)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackViewAllPrograms()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackViewArticle(articleUrl: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackViewHealthAtWorkProduct(id: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackViewHealthJourney()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackViewHomeNotification(type: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.trackViewMore(type: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Homescreen.kt$fun AnalyticsTracker.viewHome()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_IntakeForm.kt$// Component 126 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewIntakeForm( orgId: OrgId, appointmentType: AppointmentType, clinicianPreference: PractitionerSelection?, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_IntakeForm.kt$// Component 127 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackIntakeFormContinue( orgId: OrgId, appointmentType: AppointmentType, clinicianPreference: PractitionerSelection?, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Location.kt$// Component 82 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewSelectLocationScreen(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Location.kt$// Component 83 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSelectLocationTypeAddress(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Location.kt$// Component 84 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSelectLocationSelectFromList(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.trackFtuxDiscrepency()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.trackPcIdSignIn()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.trackPcIdSignUp()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.trackSignInClose()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.trackSignUpClose()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.viewSignIn()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.viewSignInIntro()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Login.kt$fun AnalyticsTracker.viewSignUp()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Marketplace.kt$fun AnalyticsTracker.viewMarketplace()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_MissingProfile.kt$@Suppress("DEPRECATION") fun AnalyticsTracker.cancelOnMissingProfileDialog()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_MissingProfile.kt$@Suppress("DEPRECATION") fun AnalyticsTracker.closeProfilePageOnMissingProfileDialog(isValid: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_MissingProfile.kt$@Suppress("DEPRECATION") fun AnalyticsTracker.continueOnMissingProfileDialog()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_MissingProfile.kt$@Suppress("DEPRECATION") fun AnalyticsTracker.viewMissingProfileDialog(missingFields: List&lt;MissingField>)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Navigation.kt$fun AnalyticsTracker.selectSideNavHeader()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Navigation.kt$fun AnalyticsTracker.selectSideNavHelp()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Navigation.kt$fun AnalyticsTracker.selectSideNavMenuItem(label: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Navigation.kt$fun AnalyticsTracker.trackBottomNavItemSelection(item: BottomNavItem)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Navigation.kt$fun AnalyticsTracker.trackNavigationViewChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Navigation.kt$fun AnalyticsTracker.viewSideNav()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Notification.kt$fun AnalyticsTracker.trackViewNotification(type: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Notification.kt$fun AnalyticsTracker.viewNotifications()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_NotificationPrompt.kt$// Component 42 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=963101686&amp;range=A44 fun AnalyticsTracker.trackEnableNotifications(pageTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_NotificationPrompt.kt$// Component 42 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=963101686&amp;range=A44 fun AnalyticsTracker.viewNotificationPrompt(pageTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_NotificationPrompt.kt$// Component 43 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=963101686&amp;range=A46 fun AnalyticsTracker.trackDismissNotificationPrompt(pageTitle: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Onboarding.kt$fun AnalyticsTracker.trackFirstTimeAppLaunch()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Component 117 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 @Suppress("DEPRECATION") fun AnalyticsTracker.viewPatientSelectionScreen( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 118 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackPatientSelectionMyself( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 119 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackPatientSelection( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 120 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAddPatient( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 121 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSelectPatientContinue( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 122 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 @Suppress("DEPRECATION") fun AnalyticsTracker.viewAddPatientScreen( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 123 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAddPatientCancel( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Patient.kt$// Components 124 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackAddPatientContinue( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Practitioner.kt$// Component 91 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 @Suppress("DEPRECATION") fun AnalyticsTracker.viewClinicianSelectionScreen( orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Practitioner.kt$// Component 92-93 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackClinicianSelectionSelectClinician( practitionerId: String?, orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Practitioner.kt$// Component 94 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 @Suppress("DEPRECATION") fun AnalyticsTracker.viewClinicianDetailsScreen( orgId: OrgId, appointmentType: AppointmentType )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Practitioner.kt$// Component 95 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackClinicianDetailsSelectClinician( orgId: OrgId, appointmentType: AppointmentType )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.deviceAuthPermissionAccepted(accepted: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.deviceAuthSucceeded()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.signedOutDueToPrivacyLock(isDueToAuthCancel: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.trackDeviceAuthFailed(nonInteraction: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.trackDeviceAuthPermission(isGranted: Boolean, timesPromptShown: Int)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.trackDeviceAuthSettingsToggle(isGranted: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.trackDeviceAuthSignedOut(isDeviceSecurityEnabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.trackDeviceAuthSucceeded( isBiometricUsed: Boolean, privacyLockMethodUsed: String = "" )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.trackDeviceAuthSucceeded()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.viewAuthDialog()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.viewDeviceAuthPermission()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.viewPermissionBiometrics()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_PrivacyLock.kt$fun AnalyticsTracker.viewSignedOutAlert()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.checkIfIQualifyQle()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.confirmQle()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.declineQle()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.openChatOtherTypeOfQle()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.openChatOutOfWindow()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.qleHelpCenter(linkName: String?, url: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.qleQuestion(fieldName: String?, input: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.selectQle(eventType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Qle.kt$fun AnalyticsTracker.viewQleOverview()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.clickBookAppointment()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.closeQuickActionMenu(fromDetails: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.exitTriage(questionTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.openActionsMenu()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.openAppointmentList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.openQuickActionMenu()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.openUpcomingAppointmentList()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.selectQuickAction(actionTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.selectQuickActionCustCareChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.selectQuickActionHealthChat()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.selectQuickActionQuestion(fromDetails: Boolean, questionTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.selectQuickActionQuestionFromDetails(questionTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.trackActionMenuSelected(menu: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.trackFooterActionButton(questionTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.trackSelectChatAgentFromTriage(buttonText: String, agentType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.trackShowAllProviders()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.trackTriageBack(questionTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.viewGetCareMainScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.viewQuickActionDetail()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_QuickAction.kt$fun AnalyticsTracker.viewQuickActionSubMenu(subMenu: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackBackToRewards()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackCancelRedeemPoints()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackConfirmRedeemPoints( rewardPointsBalance: String, rewardRedemptionValue: String, rewardPointsRedeemed: String, currency: String )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackDismissPcoSignUp(buttonText: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackExitPcoPrompt()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackExitPointsBalance()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackExploreLifemarket()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackExplorePrograms()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackNavigateToPointsActivity()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackNavigateToPointsBalance()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackOpenPcoApp()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackPcoInfoExit()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackPointsInfoGetHelp()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackPurchaseProductOrService()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackRewardRedemptionTiers()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackSelectRedeemPoints()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackStartHealthProgram(ctaLabel: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackStartHealthProgramNoActivity()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackStartPcoSignUp(buttonText: String, url: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.trackViewPointsInfo()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewJoinPcoPrompt()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewPointsActivity()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewPointsActivityNoHistory()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewPointsBalance()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewPointsInfo()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewRewardRedemptionTiers()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Rewards.kt$fun AnalyticsTracker.viewRewards()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Service.kt$// Component 90 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewServiceSelectionScreen(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Service.kt$// Component 91 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackServiceSelected( serviceName: String, orgId: OrgId, appointmentType: AppointmentType, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.cancelUnlinkAccount(label: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.closeSettings()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.confirmUnlinkAccount(label: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.deviceAuthentication(isChecked: Boolean?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.deviceAuthenticationSettingEnabled(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.enableMarketingConsent(isOptIn: Boolean?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.enablePushNotifications(isChecked: Boolean?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.healthAtWorkEmailNotificationSettingEnabled(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.healthAtWorkPushNotificationSettingEnabled(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.linkedAccounts()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openAboutPCHealth()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openChatWithUs()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openSettingsChatHistory()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openSettingsFAQ()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openSettingsNotifications()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openSettingsPersonalInfo()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openSettingsPrivacyPolicy()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.openTermsOfService()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.personalInfoBack()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.pushNotificationSettingEnabled(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.savePersonalInfo()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.selectLinkedAccount(accountName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.selectUnlinkAccount(accountName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.settingsRateUs()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.signOut()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.unlinkAccountError(label: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.unlinkAccountSuccessful(label: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewAboutPCHealth()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewChatWithUs()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewPushNotificationSettings()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewSettings()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewSettingsNotifications()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewSettingsPersonalInfo()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Settings.kt$fun AnalyticsTracker.viewSettingsScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SpecialityUrgency.kt$// Component 80 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewAppointmentTypeSelectionScreen(orgId: OrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SpecialityUrgency.kt$// Component 81 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.selectAppointmentType(orgId: OrgId, appointmentType: AppointmentType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Specialty.kt$// Component 74 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewSpecialtyListScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Specialty.kt$// Component 75 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSpecialtyListProvinceSelection(province: Province)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Specialty.kt$// Component 76 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSpecialtyListSelectSpecialty(specialtyName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Specialty.kt$// Component 77 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewSpecialtyDetailScreen(specialtyName: String, orgId: OrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Specialty.kt$// Component 78 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSpecialtyDetailViewProviderDetails(specialtyName: String, orgId: OrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Specialty.kt$// Component 79 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackSpecialtyDetailConfirmSpecialty(specialtyName: String, orgId: OrgId)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Splash.kt$fun AnalyticsTracker.viewSplashScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimAddDocumentCamera()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimAddDocumentPhotoAlbum()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimAddNote()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimButtonClick()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimCancel()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimDeleteDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimFail(errorMessage: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.trackSubmitClaimSuccess(numberOfDocuments: Int)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.viewSubmitClaimAddDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.viewSubmitClaimAddNote()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.viewSubmitClaimAddSupportingDocument()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.viewSubmitClaimThankYou()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_SubmitClaim.kt$fun AnalyticsTracker.viewSubmitClaimYourClaim()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Terms.kt$fun AnalyticsTracker.trackAcceptTerms()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Terms.kt$fun AnalyticsTracker.trackReviewTerms()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Terms.kt$fun AnalyticsTracker.viewTermsDialog()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_TermsAndConditions.kt$// Component 113 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.viewTermsAndConditionsScreen( orgId: OrgId, appointmentType: AppointmentType )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_TermsAndConditions.kt$// Component 114 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackTermsOfUseOpened( orgId: OrgId, appointmentType: AppointmentType )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_TermsAndConditions.kt$// Component 115 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackPrivacyPolicyOpened( orgId: OrgId, appointmentType: AppointmentType )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_TermsAndConditions.kt$// Component 116 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackTermsAndConditionsAccepted( orgId: OrgId, appointmentType: AppointmentType )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Timeslot.kt$// Component 96 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 @Suppress("DEPRECATION") fun AnalyticsTracker.viewTimeSelectionScreen( orgId: OrgId, appointmentType: AppointmentType, practitionerSelection: PractitionerSelection, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Timeslot.kt$// Component 97 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackTimeSelectorNextMonthShown( orgId: OrgId, appointmentType: AppointmentType, practitionerSelection: PractitionerSelection, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Timeslot.kt$// Component 98 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackTimeslotSelectorDaySelected( orgId: OrgId, appointmentType: AppointmentType, practitionerSelection: PractitionerSelection, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Timeslot.kt$// Component 99 https://docs.google.com/spreadsheets/d/1DttAz6ytYXeKgtrfgPzBS4k5hkjBiZejgLbJKeH52OM/edit#gid=2098117440 fun AnalyticsTracker.trackTimeslotSelectorTimeSelected( orgId: OrgId, appointmentType: AppointmentType, practitionerSelection: PractitionerSelection, )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_User.kt$fun AnalyticsTracker.trackUser(userId: String, tenantId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_User.kt$fun AnalyticsTracker.trackUserCreditCard(hasCreditCard: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_User.kt$fun AnalyticsTracker.trackUserProfile(user: User)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_User.kt$fun AnalyticsTracker.trackUserType(isPro: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserAlert.kt$fun AnalyticsTracker.alertDismissed(actionId: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserAlert.kt$fun AnalyticsTracker.alertShown(alertId: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewAccountDetails()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewAccountDetailsError()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewEditPassword()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewEditPasswordError()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewEditPasswordMatchError()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewEditPasswordUpdated()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewPersonalInfo()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_UserProfile.kt$fun AnalyticsTracker.viewPersonalInfoError()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 10.1 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackVaccineRegistrationEnrollNow(cta: String, vaccineType: VaccineType, status: List&lt;VaccineState>)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 10.2 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackVaccineBookingAction(cta: String, vaccineType: VaccineType, status: List&lt;VaccineState>)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 10.3 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackCompleteFormAction(cta: String, vaccineType: VaccineType, status: List&lt;VaccineState>)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 11 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackRescueduleAppointment(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 12 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackCancelAppointment(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 13 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackSubmitNewForm(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 2 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackVaccineInfoHub(vaccineType: VaccineType, ctaText: String, url: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 3 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackVaccineInfoHubScreenView(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 4 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.viewVaccineLandingPage(vaccineType: VaccineType, status: List&lt;VaccineState>)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 7 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackVaccineRegistrationAutocompleteConsentClose(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 8 fun AnalyticsTracker.trackVaccineRegistrationAutocompleteConsent(vaccineType: VaccineType, consentGiven: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$// Component 9 https://docs.google.com/spreadsheets/d/1GpH_S8gDBMbSWZkASA0cbS5fwLDpBS7drJDlCkkbZDg/edit?ts=602d3a54#gid=381361810 fun AnalyticsTracker.trackVaccineLandingBack(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$fun AnalyticsTracker.trackVaccineAssessmentFormExit(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$fun AnalyticsTracker.trackVaccineBookingFormExit(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$fun AnalyticsTracker.trackVaccineRegistrationFormExit(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$fun AnalyticsTracker.viewVaccineAssessmentForm(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$fun AnalyticsTracker.viewVaccineBookingForm(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Vaccine.kt$fun AnalyticsTracker.viewVaccineRegistrationForm(vaccineType: VaccineType)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackContactCustCare(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackContactCustCareDependent(cardType: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackCoverageContactCustCare(productName: String?, searchTerm: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackCoverageSearch(productName: String?, searchTerm: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackSelectCardByStatus(cardStatus: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackSelectWalletCard(status: String?, cardType: String?, cardId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackShareDependentCard(cardType: String?, cardId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackViewCoverageCategory( productName: String?, coverageCategoryName: String? )</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackViewDependentWalletCard(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackWalletAction(cardType: String?, action: String, cardId: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.trackWalletAddPromoCode(promoCode: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.viewCoverageSummary(@NonNull productName: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.viewDependentWalletCard(@NonNull cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.viewTransactionHistory()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.viewWallet()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.viewWalletCard(@NonNull cardTitle: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_Wallet.kt$fun AnalyticsTracker.viewWalletEnrollmentState()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackAllowCameraAccessWalletDetailEntry(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackCancelMemberIdFlow(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackDenyCameraAccessWalletDetailEntry(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackLiveBalanceRequested(success: Boolean, benefitCardName: String)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackManualEntry(isAdd: Boolean, cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackMoreInfoTooltip(fieldName: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackReadPrivacyPolicy(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackScanCard(isAdd: Boolean, cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackWalletCardDetailEntryCardActions(actionName: String?, cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.trackWalletDetailEntryCameraAccessPrompt(cardType: String?)</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.viewWalletDetailConfirmationScreen()</ID>
    <ID>UndocumentedPublicFunction:AnalyticsTracker_WalletCardDetail.kt$fun AnalyticsTracker.viewWalletDetailEducationScreen()</ID>
    <ID>UndocumentedPublicFunction:AnyExtension.kt$fun &lt;T> Any.getClass(): Class&lt;T>?</ID>
    <ID>UndocumentedPublicFunction:AppCompatActivityExtension.kt$fun Activity.setStatusBarColor(@ColorInt color: Int, isDarkColor: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AppCompatActivityExtension.kt$fun Activity.setStatusBarColorAttr(@AttrRes attrResId: Int, isDarkColor: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AppCompatActivityExtension.kt$fun Activity.setStatusBarColorRes(@ColorRes colorResId: Int, isDarkColor: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AppCompatActivityExtension.kt$fun AppCompatActivity.hideKeyboard()</ID>
    <ID>UndocumentedPublicFunction:AppCompatActivityExtension.kt$fun ComponentActivity.setGenesisContent( parent: CompositionContext? = null, content: @Composable () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getArticleListDao(): ArticleListDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getDependentsDao(): DependentsDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getFormDao(): FormDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getHealthProfileDao(): HealthProfileDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getHomeBannerDao(): HomeBannerDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getLifemarketMerchListDao(): LifemarketMerchListDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getNotificationDao(): NotificationDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase$abstract fun getUserDocumentDao(): UserDocumentDao</ID>
    <ID>UndocumentedPublicFunction:AppDatabase.kt$AppDatabase.Companion$fun getDatabase(context: Context): AppDatabase</ID>
    <ID>UndocumentedPublicFunction:AppLogsDao.kt$AppLogsDao$@Insert suspend fun saveLog(log: AppLogsTable)</ID>
    <ID>UndocumentedPublicFunction:AppLogsDao.kt$AppLogsDao$@Query("DELETE from appLogsTable where id in (:ids)") suspend fun deleteLogsWithIds(ids: List&lt;String>)</ID>
    <ID>UndocumentedPublicFunction:AppLogsDao.kt$AppLogsDao$@Query("SELECT * FROM appLogsTable WHERE applicationName = :applicationName") suspend fun fetchLogs(applicationName: String): List&lt;AppLogsTable></ID>
    <ID>UndocumentedPublicFunction:AppLogsDao.kt$AppLogsDao$@Query("SELECT COUNT(*) from appLogsTable") suspend fun getLogsCount(): Int</ID>
    <ID>UndocumentedPublicFunction:AppNavGraphDirections.kt$AppNavGraphDirections.Companion$public fun navigateToAccountSetup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppNavGraphDirections.kt$AppNavGraphDirections.Companion$public fun navigateToAuthentication(isPhoneSet: Boolean = false, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppNavGraphDirections.kt$AppNavGraphDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppNavGraphDirections.kt$AppNavGraphDirections.Companion$public fun navigateToLiveAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppNavGraphDirections.kt$AppNavGraphDirections.Companion$public fun navigateToLoginIntro(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppSettingsFragmentDirections.kt$AppSettingsFragmentDirections.Companion$public fun actionAppSettingsFragmentToPushNotificationSettingsFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppSettingsViewModel.kt$AppSettingsViewModel$fun getUser()</ID>
    <ID>UndocumentedPublicFunction:AppSettingsViewModel.kt$AppSettingsViewModel$fun pushNotificationsSelected()</ID>
    <ID>UndocumentedPublicFunction:AppSettingsViewModel.kt$AppSettingsViewModel$fun saveHealthAtWorkPushNotificationSettings(isChecked: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AppSettingsViewModel.kt$AppSettingsViewModel$fun savePushNotificationSettings(isChecked: Boolean)</ID>
    <ID>UndocumentedPublicFunction:AppVersionFooter.kt$AppVersionFooter$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:AppVersionFooter.kt$AppVersionFooter$@ModelProp fun setAppVersionData(data: AppVersionData)</ID>
    <ID>UndocumentedPublicFunction:ApplyModuleAdapters.kt$ApplyModuleAdapters$abstract operator fun invoke(builder: Moshi.Builder): Moshi.Builder</ID>
    <ID>UndocumentedPublicFunction:Appointment.kt$AppointmentOrgId.Companion$fun fromJson(jsonName: String): AppointmentOrgId</ID>
    <ID>UndocumentedPublicFunction:Appointment.kt$PaymentMode.Companion$fun fromJson(jsonName: String): PaymentMode</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppointmentDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AppointmentDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentDetailsFragmentDirections.kt$AppointmentDetailsFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentListFragmentDirections.kt$AppointmentListFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentListFragmentDirections.kt$AppointmentListFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentListFragmentDirections.kt$AppointmentListFragmentDirections.Companion$public fun navigateToServiceBooking(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentListScreen.kt$@Composable fun DetailedAppointmentItem( modifier: Modifier = Modifier, state: DetailedAppointment, onClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppointmentListScreen.kt$@Composable fun SimpleAppointmentItem( modifier: Modifier = Modifier, state: SimpleAppointment, onClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppointmentOrgIdExtensions.kt$fun AppointmentOrgId.cancelAppointmentCta(phone: String? = null): UserText.Translatable</ID>
    <ID>UndocumentedPublicFunction:AppointmentService.kt$GetAppointmentPricingRequest$operator fun invoke( appointmentType: AppointmentType, orgId: OrgId, serviceId: String, specialtyId: String, locationId: String?, patientId: String?, practitionerId: String?, serviceLocationId: String?, timeSlot: Timeslot?, ): Flow&lt;Outcome&lt;Pricing>></ID>
    <ID>UndocumentedPublicFunction:AppointmentService.kt$GetAppointmentRequest$operator fun invoke( appointmentId: String, ): Flow&lt;Outcome&lt;Appointment>></ID>
    <ID>UndocumentedPublicFunction:AppointmentService.kt$GetAppointmentsRequest$operator fun invoke( criteria: Criteria, ): Flow&lt;Outcome&lt;List&lt;Appointment>>></ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppointmentSuccessFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AppointmentSuccessFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSuccessFragmentDirections.kt$AppointmentSuccessFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppointmentSummaryFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AppointmentSummaryFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryFragmentDirections.kt$AppointmentSummaryFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryTimeslotErrorComposable.kt$@Composable fun AppointmentSummaryTimeslotErrorComposable( title: String, changeAppointmentClicked: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppointmentSummaryTimeslotErrorComposable.kt$@Preview @Composable fun AppointmentSummaryTimeslotErrorPreview()</ID>
    <ID>UndocumentedPublicFunction:AppsAndDeviceConnectionDialogView.kt$@Composable fun AppsAndDevicesConnectionError(onClose: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDeviceConnectionDialogView.kt$@Composable fun AppsAndDevicesConnectionLoading()</ID>
    <ID>UndocumentedPublicFunction:AppsAndDeviceConnectionDialogView.kt$@Composable fun AppsAndDevicesConnectionView( device: DeviceType, onReconnect: (DeviceType) -> Unit, onDisconnect: (DeviceType) -> Unit, onCancel: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppsAndDeviceConnectionDialogView.kt$@Preview(name = "Disconnect/Reconnect Error") @Composable fun PreviewAppsAndDevicesConnectionError(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDeviceConnectionDialogView.kt$@Preview(name = "Disconnect/Reconnect Loading") @Composable fun PreviewAppsAndDevicesConnectionLoading(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDeviceConnectionDialogView.kt$@Preview(name = "Disconnect/Reconnect") @Composable fun PreviewAppsAndDevicesConnection(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppsAndDevicesConnectionDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AppsAndDevicesConnectionDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogViewModel$fun disconnectDevice(deviceType: DeviceType)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogViewModel$fun reconnectDevice( deviceType: DeviceType, onSuccess: (wearableDevice: WearableDevice) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AppsAndDevicesFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AppsAndDevicesFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevices( selectedDevice: String? = null, dataPoints: String? = null, dataPointsString: String? = null, fromJourney: Boolean = false, device: String? = null, moduleIdentifier: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevicesFragmentToDeviceInfo(deviceType: DeviceType, moduleIdentifier: String? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevicesFragmentToDisconnectDialog(device: DeviceType, moduleIdentifier: String? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevicesFragmentToGoogleFitPermissionsDialog(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevicesFragmentToWearableConsentPrimerFragment( wearableDevice: WearableDevice, dataPoints: Array&lt;String>? = null, moduleIdentifier: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevicesFragmentToWearableGenericConsentFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesFragmentDirections.kt$AppsAndDevicesFragmentDirections.Companion$public fun actionAppsAndDevicesToCloudRedirect(device: String, moduleIdentifier: String? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Composable fun DisplayConnectedDevices( connectedDevices: List&lt;WearableDevice>, onConnectedDeviceClick: (WearableDevice) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Composable fun DisplaySuggestedDevices( suggestedDevices: List&lt;WearableDevice>, onSuggestedDeviceClick: (WearableDevice) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Composable fun ErrorLoadingAppsAndDevices(onTryAgain: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Composable fun GetDeviceSubtitle(connectedDevice: WearableDevice)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Composable fun LoadingAppsAndDevices()</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Preview(name = "Connect Apps and Devices Error", showSystemUi = true) @Composable fun PreviewCloudConsentError(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Preview(name = "Connect Apps and Devices Loading", showSystemUi = true) @Composable fun PreviewCloudConsentLoading(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Preview(name = "Connect Apps and Devices Success w/ Data Point Error", showSystemUi = true) @Composable fun PreviewCloudConsentSuccessWithDataPointError(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesView.kt$@Preview(name = "Connect Apps and Devices Success", showSystemUi = true) @Composable fun PreviewCloudConsentSuccess(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$fun clearExpectingCloudDevice()</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$fun clearWearableConsentValue()</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$fun expectCloudDevice(deviceType: DeviceType)</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$fun getValidicUser()</ID>
    <ID>UndocumentedPublicFunction:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$fun getValidicUserAndDeviceInfo()</ID>
    <ID>UndocumentedPublicFunction:ArchivePrescriptionBottomSheet.kt$@Composable fun ArchivePrescriptionBottomSheet( onPrimaryButtonClick: () -> Unit, onCancelClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ArticleListDao.kt$ArticleListDao$@Query("SELECT * FROM articlelist WHERE id = :id LIMIT 1") fun getArticleListWithId(id: String): ArticleListTable?</ID>
    <ID>UndocumentedPublicFunction:ArticleListDao.kt$ArticleListDao$@Query("SELECT * FROM articlelist") fun getTable(): List&lt;ArticleListTable>?</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentCompleteFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentCompleteFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentDirections.kt$AssessmentCompleteFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentDirections.kt$AssessmentCompleteFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentDirections.kt$AssessmentCompleteFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteFragmentDirections.kt$AssessmentCompleteFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentCompleteView.kt$@Composable fun AssessmentCompleteView( imageId: String, points: String, title: String, description: String, pointsVisible: Boolean, viewResultsBtnText: String, onViewResultClick: () -> Unit = {} )</ID>
    <ID>UndocumentedPublicFunction:AssessmentContract.kt$QuestionsCollection$fun getIndexOfQuestion(questionId: String): Int</ID>
    <ID>UndocumentedPublicFunction:AssessmentContract.kt$QuestionsCollection$fun getQuestionAtViewIndex(index: Int): Question?</ID>
    <ID>UndocumentedPublicFunction:AssessmentContract.kt$QuestionsCollection$fun rebuildModels(module: Module)</ID>
    <ID>UndocumentedPublicFunction:AssessmentContract.kt$QuestionsCollection$fun setQuestionAnswers(questionId: String, userAnswers: Answers?)</ID>
    <ID>UndocumentedPublicFunction:AssessmentContract.kt$ViewState$fun decrementIndex(): ViewState</ID>
    <ID>UndocumentedPublicFunction:AssessmentContract.kt$ViewState$fun incrementIndex(): ViewState</ID>
    <ID>UndocumentedPublicFunction:AssessmentExitViewModel.kt$AssessmentExitViewModel$fun notifyBackendAssessmentExit(moduleId: String)</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentFrictionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentFrictionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$public fun actionAssessmentSubmitFragmentToAssessmentCompleteFragment( points: Int = 0, moduleId: String, moduleType: String, isRetake: Boolean = false, navigationTarget: Int = 38, successScreen: SuccessScreen ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentFrictionFragmentDirections.kt$AssessmentFrictionFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentIntro.kt$AssessmentIntro$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssessmentIntro.kt$AssessmentIntro$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssessmentIntro.kt$AssessmentIntro$@JvmOverloads @TextProp fun setTimeLengthText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssessmentIntro.kt$AssessmentIntro$@ModelProp fun setBackgroundResId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:AssessmentIntro.kt$AssessmentIntro$@ModelProp fun setCarouselCaptionedImages(captionedImages: List&lt;RevolvingCarousel.CaptionedImage>)</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentLoadingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentLoadingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionAssessmentLoadingFragmentToAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionAssessmentLoadingFragmentToBuilderDailyScreenerNavGraph( moduleId: String, moduleType: String, previousResponse: PreviousResponse? = null, retakeAssessment: Boolean = false, campaignId: String = "\"\"", activityId: String = "\"\"" ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionAssessmentLoadingFragmentToHealthProfileStartNavGraph( onboardingPages: Array&lt;OnboardingPage>, isCovidCheckin: Boolean, moduleId: String, moduleType: String, retakeAssessment: Boolean = false ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentLoadingFragmentDirections.kt$AssessmentLoadingFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentNavGraphDirections.kt$AssessmentNavGraphDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentNavGraphDirections.kt$AssessmentNavGraphDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentNavGraphDirections.kt$AssessmentNavGraphDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentNavGraphDirections.kt$AssessmentNavGraphDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingAdditionalInfoFragment.kt$AssessmentOnboardingAdditionalInfoFragment.Companion$fun newInstance(additionalInfo: OnboardingPage.AdditionalInfo): AssessmentOnboardingAdditionalInfoFragment</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentOnboardingAdditionalInfoFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentOnboardingAdditionalInfoFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): AssessmentOnboardingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentOnboardingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentOnboardingFragmentDirections.kt$AssessmentOnboardingFragmentDirections.Companion$public fun actionAssessmentOnboardingFragmentToBuilderOnboardingAdditionalInfoFragment(additionalInfo: OnboardingPage.AdditionalInfo, retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentArgs.kt$AssessmentQuestionFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentArgs.kt$AssessmentQuestionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentQuestionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentArgs.kt$AssessmentQuestionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentQuestionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionAssessmentQuestionFragmentToAssessmentCompleteFragment( points: Int = 0, moduleId: String, moduleType: String, isRetake: Boolean = false, navigationTarget: Int = 38, successScreen: SuccessScreen ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionAssessmentQuestionFragmentToAssessmentFrictionFragment( points: Int = 0, questionId: String, moduleId: String, moduleType: String, answers: Answers?, isRetake: Boolean = false, successScreen: SuccessScreen? = null, frictionScreen: FrictionScreen? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionAssessmentQuestionFragmentToAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionAssessmentQuestionFragmentToCovidDataSharingFragment( exitScreen: ExitScreen? = null, moduleId: String, moduleType: String, previousResponse: PreviousResponse? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionAssessmentQuestionFragmentToOutcomeSuggestionsFragment2( moduleId: String, campaignId: String, activityId: String ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionFragmentDirections.kt$AssessmentQuestionFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$fun getCurrentQuestionIndex(): Int</ID>
    <ID>UndocumentedPublicFunction:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$fun saveInitialModule(module: Module, campaignId: String = "", activityId: String = "")</ID>
    <ID>UndocumentedPublicFunction:AssessmentRepository.kt$AssessmentRepository$fun completeOnboarding(moduleId: String): Flow&lt;Outcome&lt;Empty>></ID>
    <ID>UndocumentedPublicFunction:AssessmentRepository.kt$AssessmentRepository$fun exitAssessment(moduleId: String): Flow&lt;Outcome&lt;Empty>></ID>
    <ID>UndocumentedPublicFunction:AssessmentRepository.kt$AssessmentRepository$fun getHealthProfileModule(moduleId: String): Flow&lt;Outcome&lt;Module>></ID>
    <ID>UndocumentedPublicFunction:AssessmentViewModel.kt$AssessmentViewModel$fun completeOnboarding(moduleId: String)</ID>
    <ID>UndocumentedPublicFunction:AssessmentViewModel.kt$AssessmentViewModel$fun initAssessmentData(moduleId: String)</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AssessmentsExitFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AssessmentsExitFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$public fun actionAssessmentsExitFragmentToAssessmentFrictionFragment( points: Int = 0, questionId: String, moduleId: String, moduleType: String, answers: Answers?, isRetake: Boolean = false, successScreen: SuccessScreen? = null, frictionScreen: FrictionScreen? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssessmentsExitFragmentDirections.kt$AssessmentsExitFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$@Composable fun AssetBanner( modifier: Modifier = Modifier, @AttrRes imageAttr: Int, title: String, body: String, backgroundColor: Color = GenesisTheme.colors.fillNeutralLight, backgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, onClick: (() -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$@Composable fun AssetBanner( modifier: Modifier = Modifier, imageUrl: String, placeholder: Painter? = null, title: String, body: String, backgroundColor: Color = GenesisTheme.colors.fillNeutralLight, backgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, onClick: (() -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$@Composable fun AssetBanner( modifier: Modifier = Modifier, painter: Painter, title: String, body: String, backgroundColor: Color = GenesisTheme.colors.fillNeutralLight, backgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, onClick: (() -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$@Composable fun AssetBanner( modifier: Modifier = Modifier, title: String, body: String, backgroundColor: Color = GenesisTheme.colors.fillNeutralLight, backgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, onClick: (() -> Unit)? = null, imageContent: @Composable RowScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$@Preview(name = "Asset Banner") @Composable fun AssetBannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setAdjustBounds(shouldAdjust: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setBackgroundImageResource(@DrawableRes imageResId: Int = R.drawable.background_card_secondary)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setBottomLeftAccessibilityText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setBottomLeftTextColor(@AttrRes color: Int = R.attr.color_on_surface_text_primary)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setBottomLeftTextStyle(@AttrRes style: Int = R.attr.typography_caption)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setBottomRightTextColor(@AttrRes color: Int = R.attr.color_on_surface_text_primary)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setBottomRightTextStyle(@AttrRes style: Int = R.attr.typography_caption)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setDescriptionStyle(@AttrRes style: Int = R.attr.typography_caption)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setDescriptionTextColor(@AttrRes color: Int = R.attr.color_on_surface_text_primary)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setIconAlpha(alpha: Float = 1f)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setOverlineStyle(@AttrRes style: Int = R.attr.typography_overline)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setOverlineTextColor(@AttrRes color: Int = R.attr.color_on_surface_text_primary)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setStyle(style: Style = Style.FULL_IMAGE)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setTitleStyle(@AttrRes titleStyle: Int = R.attr.typography_subtitle2)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp fun setTitleTextColor(@AttrRes color: Int = R.attr.color_on_surface_text_primary)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @TextProp fun setBottomLeftText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @TextProp fun setBottomRightText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @TextProp fun setDescriptionText(descriptionText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @TextProp fun setOverlineText(style: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@JvmOverloads @TextProp fun setTitleText(titleText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp @JvmOverloads fun setIconToWrapContent(isWrapContent: Boolean? = null)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp fun setBottomLeftTextBackground(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp fun setBottomLeftTextBackgroundAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp fun setIconMaxHeight(maxHeight: Int)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp fun setIconMaxWidth(maxWidth: Int)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:AssetBanner.kt$AssetBanner$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:Auth0Authenticator.kt$Auth0Authenticator$// TODO: make this private so it's only called from clearState suspend fun logout(localContext: Context)</ID>
    <ID>UndocumentedPublicFunction:Auth0Authenticator.kt$Auth0Authenticator$// This needs to get called from onActivityResult in order for the auth0 biometrics // check to work fun checkAuthenticationResult(requestCode: Int, resultCode: Int): Boolean</ID>
    <ID>UndocumentedPublicFunction:Auth0Authenticator.kt$Auth0Authenticator$suspend fun refreshJwt()</ID>
    <ID>UndocumentedPublicFunction:Auth0LeagueAuthenticator.kt$Auth0LeagueAuthenticator$@VisibleForTesting fun truncateUrl(url: String): String</ID>
    <ID>UndocumentedPublicFunction:AuthNavGraphArgs.kt$AuthNavGraphArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:AuthNavGraphArgs.kt$AuthNavGraphArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): AuthNavGraphArgs</ID>
    <ID>UndocumentedPublicFunction:AuthNavGraphArgs.kt$AuthNavGraphArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): AuthNavGraphArgs</ID>
    <ID>UndocumentedPublicFunction:AuthPhoneNumberFragmentDirections.kt$AuthPhoneNumberFragmentDirections.Companion$public fun navigateToVerification( isRequestingChange: Boolean = false, countryCode: String? = null, phoneNumber: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:AuthenticationViewModel.kt$AuthenticationViewModel$fun authorizeDevice( isRequestingChange: Boolean, deviceAuthorizationCode: String )</ID>
    <ID>UndocumentedPublicFunction:AuthenticationViewModel.kt$AuthenticationViewModel$fun requestDeviceAuth( isRequestingChange: Boolean, phoneCountryCode: Int? = null, phoneNumber: String? = null, voiceCall: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:AutoRefillWarningBottomSheet.kt$@Composable fun AutoRefillWarningBottomSheet( onCloseClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:AvatarHeader.kt$@Composable fun AvatarHeader( modifier: Modifier = Modifier, avatarPainterRes: Painter, avatarSize: Dp = 162.dp, subtitle: String )</ID>
    <ID>UndocumentedPublicFunction:AvatarHeader.kt$@Composable fun AvatarHeader( modifier: Modifier = Modifier, avatarPainterRes: Painter, avatarSize: Dp = 162.dp, title: String, description: String )</ID>
    <ID>UndocumentedPublicFunction:AvatarHeader.kt$@Composable fun EmptyAvatarHeader( modifier: Modifier, avatarPainterRes: Painter, avatarSize: Dp, content: @Composable ColumnScope.() -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:AvatarHeader.kt$@Preview(name = "Avatar Header", group = "Header") @Composable fun AvatarHeaderPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:AvatarImageView.kt$AvatarImageView$fun setAvatarContentId(contentId: String?)</ID>
    <ID>UndocumentedPublicFunction:BMIInfoFragment.kt$@Composable @Preview fun BMIInfoPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:BMIInfoFragment.kt$@Composable fun BMIInfoContent(onLinkClicked: () -> Unit, onClose: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:BannedUserErrorDialog.kt$@Composable fun BannedUserErrorDialog( onDismiss: () -> Unit, @StringRes title: Int = R.string.triage_book_appointment_blocked_user_title, @StringRes text: Int = R.string.triage_book_appointment_blocked_user_text, )</ID>
    <ID>UndocumentedPublicFunction:BannerWidget.kt$@Composable fun BannerImage(banner: Banner)</ID>
    <ID>UndocumentedPublicFunction:BannerWidget.kt$@Composable fun BannerImage(painter: Painter)</ID>
    <ID>UndocumentedPublicFunction:BannerWidget.kt$@Preview @Composable fun BannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:BarcodeGenerator.kt$BarcodeGenerator$fun encodeAsBitmap(str: String): Bitmap?</ID>
    <ID>UndocumentedPublicFunction:BarcodeView.kt$BarcodeView$fun createBarcode(message: String)</ID>
    <ID>UndocumentedPublicFunction:BaseRadioSelectionBottomSheetDialog.kt$BaseRadioSelectionBottomSheetDialog$fun setOnCancelListener(cancelListener: (() -> Unit)?)</ID>
    <ID>UndocumentedPublicFunction:BaseRadioSelectionBottomSheetDialog.kt$BaseRadioSelectionBottomSheetDialog$fun setOnSelectionListener(selectionListener: ((selection: String?) -> Unit)?)</ID>
    <ID>UndocumentedPublicFunction:BaseRoomDatabase.kt$BaseRoomDatabase$abstract fun &lt;T> getDao(table: T): RootDao&lt;*>?</ID>
    <ID>UndocumentedPublicFunction:BaseRoomDatabase.kt$BaseRoomDatabase$abstract fun &lt;T> getDao(tableClass: Class&lt;T>): RootDao&lt;*>?</ID>
    <ID>UndocumentedPublicFunction:BaseTypeConverter.kt$BaseTypeConverter$@TypeConverter fun fromJson(value: String?): T?</ID>
    <ID>UndocumentedPublicFunction:BaseTypeConverter.kt$BaseTypeConverter$@TypeConverter fun toJson(value: T?): String?</ID>
    <ID>UndocumentedPublicFunction:BasicBanner.kt$BasicBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:BasicBanner.kt$BasicBanner$@JvmOverloads @ModelProp fun setBackground(@DrawableRes resId: Int = R.drawable.background_card_primary_highlight)</ID>
    <ID>UndocumentedPublicFunction:BasicBanner.kt$BasicBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:BasicBanner.kt$BasicBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$@Composable fun BasicIconBanner( modifier: Modifier = Modifier, onClick: () -> Unit = {}, backgroundColor: Color = GenesisTheme.colors.backgroundSecondary, headerTextAllCaps: Boolean = true, headerTextColor: Color = GenesisTheme.colors.backgroundTopicOverline, bodyTextColor: Color = GenesisTheme.colors.textPrimary, linkTextColor: Color = GenesisTheme.colors.backgroundTopicOverline, headerIconContentDescription: String? = null, headerIconSize: Dp = 20.dp, headerText: String?, bodyText: String, headerIconUrl: String?, link: String? = null, )</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$@Composable fun BasicIconBanner( modifier: Modifier = Modifier, onClick: () -> Unit = {}, backgroundColor: Color = GenesisTheme.colors.backgroundSecondary, headerTextAllCaps: Boolean = true, headerTextColor: Color = GenesisTheme.colors.backgroundTopicOverline, bodyTextColor: Color = GenesisTheme.colors.textPrimary, linkTextColor: Color = GenesisTheme.colors.backgroundTopicOverline, headerText: String?, bodyText: String, link: String? = null, headerIcon: @Composable (RowScope.() -> Unit)? )</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$@Composable fun BasicIconBanner( modifier: Modifier = Modifier, onClick: () -> Unit = {}, backgroundColor: Color = GenesisTheme.colors.backgroundSecondary, headerTextAllCaps: Boolean = true, headerTextColor: Color = GenesisTheme.colors.backgroundTopicOverline, headerText: String?, link: String? = null, linkTextColor: Color = GenesisTheme.colors.backgroundTopicOverline, headerIcon: @Composable (RowScope.() -> Unit)?, body: @Composable (ColumnScope.() -> Unit) )</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$@Preview(name = "Basic Icon Banner", group = "Banner") @Composable fun BasicIconBannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @CallbackProp fun setOnClickActionText(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @ModelProp fun setIsCollapsed(isCollapsed: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @ModelProp(group = "background") fun setBackground(@DrawableRes resId: Int = R.drawable.background_card_primary_highlight)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @TextProp fun setExpandActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@JvmOverloads @TextProp fun setTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@ModelProp(group = "background") fun setBackgroundFromAttr(@AttrRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:BasicIconBanner.kt$BasicIconBanner$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:BasicScreen.kt$@Composable fun BasicScreen( toolbar: @Composable ColumnScope.() -> Unit, footer: @Composable (ColumnScope.() -> Unit)? = null, scrollableContent: @Composable ColumnScope.() -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:BasicScreenLayout.kt$@Composable fun BasicScreen( modifier: Modifier = Modifier, toolbar: @Composable ColumnScope.() -> Unit, footer: @Composable (ColumnScope.() -> Unit)? = null, scrollableContent: @Composable ColumnScope.() -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:BenefitSticker.kt$BenefitSticker$@ModelProp fun handleStatus(status: Int)</ID>
    <ID>UndocumentedPublicFunction:BenefitSticker.kt$BenefitSticker$@TextProp fun setDetailsText(text: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:BenefitSticker.kt$BenefitSticker$@TextProp fun setSubtitleText(text: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:BenefitSticker.kt$BenefitSticker$@TextProp fun setTitleText(text: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:BloodPressureInfoFragment.kt$@Composable @Preview fun PCHealthStationMoreInfoPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:BloodPressureInfoFragment.kt$@Composable fun BloodPressureInfoContent( onBackClicked: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:BooleanExtensions.kt$// Returns LCL or SDM pharmacy icon fun Boolean.isLCL(): Int</ID>
    <ID>UndocumentedPublicFunction:BorderedText.kt$@Composable fun BorderedText( text: String, error: Boolean = false, onClick: () -> Unit, trailingIcon: @Composable (() -> Unit)? = null )</ID>
    <ID>UndocumentedPublicFunction:BorderedText.kt$@Composable fun BorderedTextWithIcon( text: String, label: String, error: String, isError: Boolean = false, onClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun changeCloseImage(image: Int = -1, size: Int = 0, accessibilitySize: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun dismiss()</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun setCancelable(isCancelable: Boolean): Builder</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun setCloseButtonSpacingAttrRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun setContentView(contentView: View): Builder</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun setOnCancelListener(cancelListener: (() -> Unit)?): Builder</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun setOnDismissListener(cancelListener: (() -> Unit)?): Builder</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun setPrimaryButtonVisibility(visibility: Boolean): Builder</ID>
    <ID>UndocumentedPublicFunction:BottomSheetDialog.kt$BottomSheetDialog.Builder$fun show(fragmentManager: FragmentManager, tag: String? = null)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @ModelProp fun setLoading(loading: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @ModelProp fun setRedeemableFor(cents: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @ModelProp fun setRewardPoints(points: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setLogoImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@JvmOverloads @TextProp fun setCaption(caption: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@ModelProp(group = "image") fun setLogoContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@ModelProp(group = "image") fun setLogoImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:BrandedPointsBanner.kt$BrandedPointsBanner$@ModelProp(group = "image") fun setLogoUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:BrowserActivity.kt$BrowserActivity$fun setupToolbar()</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$// backward the browser navigation fun back()</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$// forward the browser navigation fun forward()</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$fun canGoBack()</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$fun canGoForward()</ID>
    <ID>UndocumentedPublicFunction:BuildInfoUtils.kt$BuildInfoUtils$fun uniqueDeviceId(): String</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerDataSharingViewModel.kt$BuilderDailyScreenerDataSharingViewModel$fun fetchDailyScreenerResults()</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerDataSharingViewModel.kt$BuilderDailyScreenerDataSharingViewModel$fun submitDataSharingPrefs(consentToShare: Boolean)</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): BuilderDailyScreenerFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): BuilderDailyScreenerFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerFragmentDirections.kt$BuilderDailyScreenerFragmentDirections.Companion$public fun goingToWorkWithPreviousResponses( moduleId: String, moduleType: String, previousResponse: PreviousResponse? = null, retakeAssesment: Boolean = false ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerFragmentDirections.kt$BuilderDailyScreenerFragmentDirections.Companion$public fun notGoingIntoWork( moduleId: String, moduleType: String, canNavigateBack: Boolean = false, returnToWorkDate: Date? = null, retakeAssessment: Boolean = false ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): BuilderDailyScreenerResponsesFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): BuilderDailyScreenerResponsesFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): BuilderDailyScreenerReturnToWorkDateFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): BuilderDailyScreenerReturnToWorkDateFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:BundleUtils.kt$BundleUtils$fun toBundle(map: Map&lt;String, Any?>)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @ModelProp fun setButtonStyle(@ButtonStyle buttonStyle: Int = BUTTON_STYLE_PRIMARY)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @ModelProp fun setDrawableBackground(@DrawableRes drawableInt: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @ModelProp fun setHeightInDp(dp: Int = DEFAULT_BUTTON_HEIGHT_DP)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @ModelProp fun setLoadingState(isLoading: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@JvmOverloads @TextProp fun setText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$fun getText(): CharSequence?</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$fun setLoadingStateOff()</ID>
    <ID>UndocumentedPublicFunction:Button.kt$Button$fun setLoadingStateOn()</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@CallbackProp @JvmOverloads fun setButtonOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@JvmOverloads @ModelProp fun buttonVisibility(visible: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@JvmOverloads @ModelProp fun setDescriptionStyleAttr(@AttrRes titleStyle: Int = R.attr.typography_subtitle1)</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@JvmOverloads @ModelProp fun setTitleStyleAttr(@AttrRes titleStyle: Int = R.attr.typography_subtitle1)</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@TextProp @JvmOverloads fun setButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@TextProp @JvmOverloads fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ButtonRow.kt$ButtonRow$@TextProp @JvmOverloads fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ButtonsFooter.kt$@Composable fun GenesisButtonsFooter( modifier: Modifier = Modifier, primaryButtonText: String, secondaryButtonText: String, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:ButtonsFooter.kt$@Preview(name = "Genesis Buttons Footer", group = "Button") @Composable fun GenesisButtonsFooterPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$@Deprecated(message = "This should only be used for Realm") fun &lt;T> executeTransaction(block: (T) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun &lt;T> delete(obj: T)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun &lt;T> delete(objCollection: Collection&lt;T>)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun &lt;T> deleteAll(objClass: Class&lt;T>)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun &lt;T> getDao(objClass: Class&lt;*>): T?</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun &lt;T> insertOrUpdate(obj: T)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun &lt;T> insertOrUpdate(objs: List&lt;T>)</ID>
    <ID>UndocumentedPublicFunction:Cache.kt$Cache$fun clear()</ID>
    <ID>UndocumentedPublicFunction:CaptionedImageView.kt$CaptionedImageView$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:CaptionedImageView.kt$CaptionedImageView$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:CaptionedImageView.kt$CaptionedImageView$@ModelProp fun setCaption(caption: String?)</ID>
    <ID>UndocumentedPublicFunction:CaptionedImageView.kt$CaptionedImageView$@ModelProp(group = "image") fun setImageContentId(contentId: String?)</ID>
    <ID>UndocumentedPublicFunction:CaptionedImageView.kt$CaptionedImageView$fun setupViews()</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @ModelProp fun setHighlightOverline(highlightOverline: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @ModelProp fun setImageShape(imageShape: ImageShape = ImageShape.LANDSCAPE)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @ModelProp fun setSize(@CardSize cardSize: Int = CARD_SIZE_MEDIUM)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @ModelProp fun setTitleMaxLines(maxLines: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @TextProp fun setOverlineText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:Card.kt$Card$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:CareChatClient.kt$CareChatClient$/* * Ends the current chat and clears up configuration data */ fun endChat()</ID>
    <ID>UndocumentedPublicFunction:CareChatClient.kt$CareChatClient$/* * Sends a [LeagueChatMessage] to the current chat session */ fun sendMessage(message: LeagueChatMessage)</ID>
    <ID>UndocumentedPublicFunction:CareChatClient.kt$CareChatClient$/* * Starts a chat with the given agent/chat params */ fun startChat( agentType: String, agentTypeDescription: String, isCovidChat: Boolean, preChatDetails: String, chatAgentConfig: ChatAgentConfig ): Flow&lt;StartChatResponse></ID>
    <ID>UndocumentedPublicFunction:CareChatClient.kt$CareChatClient$/* * Uploads a file using the current chat session */ fun uploadFile(file: File)</ID>
    <ID>UndocumentedPublicFunction:CategorizedActionRowsList.kt$CategorizedActionRowsList$@ModelProp fun setData(pageData: PageData&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @CallbackProp fun setActionOnClickListener(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @ModelProp fun setBodyBackground(@DrawableRes resId: Int = R.drawable.background_banner_informational)</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:CenteredBanner.kt$CenteredBanner$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:ChallengeLandingFragmentArgs.kt$ChallengeLandingFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ChallengeLandingFragmentArgs.kt$ChallengeLandingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChallengeLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChallengeLandingFragmentArgs.kt$ChallengeLandingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChallengeLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChallengeLandingFragmentDirections.kt$ChallengeLandingFragmentDirections.Companion$public fun challengeLandingSettings(userChallengeId: String, showLeaveButton: Boolean): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeLandingFragmentDirections.kt$ChallengeLandingFragmentDirections.Companion$public fun challengeSignUpFlow(challengeId: String, userChallengeId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeLandingFragmentDirections.kt$ChallengeLandingFragmentDirections.Companion$public fun showTooltip( title: String, description: String, ctaText: String ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeRepository.kt$ChallengeRepository$fun getChallenges(): Flow&lt;Outcome&lt;List&lt;Challenge>>></ID>
    <ID>UndocumentedPublicFunction:ChallengeRepository.kt$ChallengeRepository$fun getUserChallengeDetails(challengeId: String): Flow&lt;Outcome&lt;UserChallenge>></ID>
    <ID>UndocumentedPublicFunction:ChallengeRepository.kt$ChallengeRepository$fun signUpUser(userChallengeId: String, challengeId: String): Flow&lt;Outcome&lt;Empty>></ID>
    <ID>UndocumentedPublicFunction:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChallengeSettingsBottomSheetDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChallengeSettingsBottomSheetDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChallengeSettingsBottomSheetDialogFragmentDirections.kt$ChallengeSettingsBottomSheetDialogFragmentDirections.Companion$public fun leaveChallengeConfirmation(userChallengeId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpChooseAvatarFragmentDirections.kt$ChallengeSignUpChooseAvatarFragmentDirections.Companion$public fun chooseAvatar(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpChooseAvatarFragmentDirections.kt$ChallengeSignUpChooseAvatarFragmentDirections.Companion$public fun chooseProfilePhoto(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpChooseAvatarFragmentDirections.kt$ChallengeSignUpChooseAvatarFragmentDirections.Companion$public fun completeSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpChooseAvatarFragmentDirections.kt$ChallengeSignUpChooseAvatarFragmentDirections.Companion$public fun connectDevice(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpChooseAvatarFragmentDirections.kt$ChallengeSignUpChooseAvatarFragmentDirections.Companion$public fun finishSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpCompletionFragmentDirections.kt$ChallengeSignUpCompletionFragmentDirections.Companion$public fun chooseAvatar(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpCompletionFragmentDirections.kt$ChallengeSignUpCompletionFragmentDirections.Companion$public fun chooseProfilePhoto(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpCompletionFragmentDirections.kt$ChallengeSignUpCompletionFragmentDirections.Companion$public fun completeSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpCompletionFragmentDirections.kt$ChallengeSignUpCompletionFragmentDirections.Companion$public fun connectDevice(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpCompletionFragmentDirections.kt$ChallengeSignUpCompletionFragmentDirections.Companion$public fun finishSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpDeviceConnectionFragmentDirections.kt$ChallengeSignUpDeviceConnectionFragmentDirections.Companion$public fun chooseAvatar(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpDeviceConnectionFragmentDirections.kt$ChallengeSignUpDeviceConnectionFragmentDirections.Companion$public fun chooseProfilePhoto(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpDeviceConnectionFragmentDirections.kt$ChallengeSignUpDeviceConnectionFragmentDirections.Companion$public fun completeSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpDeviceConnectionFragmentDirections.kt$ChallengeSignUpDeviceConnectionFragmentDirections.Companion$public fun connectDevice(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpDeviceConnectionFragmentDirections.kt$ChallengeSignUpDeviceConnectionFragmentDirections.Companion$public fun finishSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpFlowDirections.kt$ChallengeSignUpFlowDirections.Companion$public fun chooseAvatar(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpFlowDirections.kt$ChallengeSignUpFlowDirections.Companion$public fun chooseProfilePhoto(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpFlowDirections.kt$ChallengeSignUpFlowDirections.Companion$public fun completeSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpFlowDirections.kt$ChallengeSignUpFlowDirections.Companion$public fun connectDevice(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpFlowDirections.kt$ChallengeSignUpFlowDirections.Companion$public fun finishSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChallengeSignUpPrivacyPolicyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChallengeSignUpPrivacyPolicyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentDirections.kt$ChallengeSignUpPrivacyPolicyFragmentDirections.Companion$public fun chooseAvatar(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentDirections.kt$ChallengeSignUpPrivacyPolicyFragmentDirections.Companion$public fun chooseProfilePhoto(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentDirections.kt$ChallengeSignUpPrivacyPolicyFragmentDirections.Companion$public fun completeSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentDirections.kt$ChallengeSignUpPrivacyPolicyFragmentDirections.Companion$public fun connectDevice(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpPrivacyPolicyFragmentDirections.kt$ChallengeSignUpPrivacyPolicyFragmentDirections.Companion$public fun finishSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpProfilePhotoFragmentDirections.kt$ChallengeSignUpProfilePhotoFragmentDirections.Companion$public fun chooseAvatar(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpProfilePhotoFragmentDirections.kt$ChallengeSignUpProfilePhotoFragmentDirections.Companion$public fun chooseProfilePhoto(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpProfilePhotoFragmentDirections.kt$ChallengeSignUpProfilePhotoFragmentDirections.Companion$public fun completeSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpProfilePhotoFragmentDirections.kt$ChallengeSignUpProfilePhotoFragmentDirections.Companion$public fun connectDevice(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengeSignUpProfilePhotoFragmentDirections.kt$ChallengeSignUpProfilePhotoFragmentDirections.Companion$public fun finishSignup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChallengesNavigation.kt$fun NavController.navigateToChallenge(challengeId: String)</ID>
    <ID>UndocumentedPublicFunction:ChallengesWearablesService.kt$ChallengesWearablesService$suspend fun isDeviceConnected(dataPoints: List&lt;String>): Outcome&lt;Boolean></ID>
    <ID>UndocumentedPublicFunction:ChallengesWearablesService.kt$ChallengesWearablesService$suspend fun isReceivingData(dataPoints: List&lt;String>): Outcome&lt;Boolean></ID>
    <ID>UndocumentedPublicFunction:ChangePasswordFragmentDirections.kt$ChangePasswordFragmentDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@JvmOverloads @TextProp fun setBubbleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@JvmOverloads @TextProp fun setNameText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ChatBubbleBanner.kt$ChatBubbleBanner$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ChatConfiguration.kt$Chat$@Suppress("LongParameterList", "LongMethod") fun initialize( applicationContext: Context, api: API, repo: Repository, analytics: AnalyticsTracker, featureFlagsRepository: FeatureFlagsRepository, userRepository: UserRepository, leagueSocketAPIAuthenticator: LeagueSocketAPIAuthenticator )</ID>
    <ID>UndocumentedPublicFunction:ChatDetailsFragmentArgs.kt$ChatDetailsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ChatDetailsFragmentArgs.kt$ChatDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChatDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChatDetailsFragmentArgs.kt$ChatDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChatDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChatDetailsFragmentDirections.kt$ChatDetailsFragmentDirections.Companion$public fun navigateToChatHistory(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatDetailsFragmentDirections.kt$ChatDetailsFragmentDirections.Companion$public fun setRootToChatDetails(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryController.kt$ChatHistoryController$fun appendTranscripts(value: List&lt;CareProviderHistory.ChatHistoryRow>, limit: Int)</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryController.kt$ChatHistoryController.OnLoadMoreClickListener$fun loadMoreTranscripts()</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryController.kt$ChatHistoryController.OnTranscriptClickListener$fun navigateToMapleTranscript(consult: MaplePostConsultsRow)</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryController.kt$ChatHistoryController.OnTranscriptClickListener$fun navigateToSFChatTranscript(chatId: String)</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryFragmentDirections.kt$ChatHistoryFragmentDirections.Companion$public fun navigateToChatHistory(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryFragmentDirections.kt$ChatHistoryFragmentDirections.Companion$public fun navigateToMapleChatDetails(consult: MaplePostConsultsRow): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryFragmentDirections.kt$ChatHistoryFragmentDirections.Companion$public fun navigateToSFChatDetails(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryFragmentDirections.kt$ChatHistoryFragmentDirections.Companion$public fun setRootToChatDetails(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryNavGraphDirections.kt$ChatHistoryNavGraphDirections.Companion$public fun navigateToChatHistory(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatHistoryNavGraphDirections.kt$ChatHistoryNavGraphDirections.Companion$public fun setRootToChatDetails(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatInput.kt$ChatInput$fun setAttachmentIconContentDescription(contentDescription: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:ChatInput.kt$ChatInput$fun setInputHint(hint: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:ChatInput.kt$ChatInput$fun setOnAttachmentButtonListener(listener: (() -> Unit)?)</ID>
    <ID>UndocumentedPublicFunction:ChatInput.kt$ChatInput$fun setOnImagePreviewClickListener(listener: ((File?) -> Unit)?)</ID>
    <ID>UndocumentedPublicFunction:ChatInput.kt$ChatInput$fun setPersistentMenuPostOnAnimation(runnable: Runnable)</ID>
    <ID>UndocumentedPublicFunction:ChatInput.kt$ChatInput$fun setSendButtonText(text: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:ChatLandingActivity.kt$ChatLandingActivity.Companion$fun getAgentIntent(context: Context, chatType: String): Intent</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChatLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChatLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentDirections.kt$ChatLandingFragmentDirections.Companion$public fun navigateToAvailabilityFragment(agentTypeDescription: String = "", chatAvailabilities: Array&lt;ChatAvailability>): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentDirections.kt$ChatLandingFragmentDirections.Companion$public fun navigateToLiveAgent( agentTypeDescription: String = "", agentType: String = "", chatAgentConfig: ChatAgentConfig? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentDirections.kt$ChatLandingFragmentDirections.Companion$public fun navigateToPreChatForm( agentType: String = "", agentTypeDescription: String = "", chatAgentConfig: ChatAgentConfig? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatLandingFragmentDirections.kt$ChatLandingFragmentDirections.Companion$public fun navigateToSendEmail(agentType: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ChatLandingViewModel.kt$ChatLandingViewModel$fun checkOfflineStatus(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:ChatLandingViewModel.kt$ChatLandingViewModel$fun sendOfflineMessage(message: String, agentType: String)</ID>
    <ID>UndocumentedPublicFunction:ChatMessage.kt$ChatMessage$@JvmOverloads @CallbackProp fun setOnMessageLongClickListener(listener: OnLongClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ChatMessage.kt$ChatMessage$@JvmOverloads @ModelProp fun setImageResource(path: String? = null)</ID>
    <ID>UndocumentedPublicFunction:ChatMessage.kt$ChatMessage$@JvmOverloads @ModelProp fun setIsFromAgent(isFromAgent: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ChatMessage.kt$ChatMessage$@JvmOverloads @TextProp fun setTimestamp(timestamp: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ChatMessage.kt$ChatMessage$@ModelProp fun setMessage(message: MessageInfo)</ID>
    <ID>UndocumentedPublicFunction:ChatMessage.kt$ChatMessage$fun setContentDescriptionForMessage(text: CharSequence = "", senderName: String = "")</ID>
    <ID>UndocumentedPublicFunction:ChatNavGraphArgs.kt$ChatNavGraphArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ChatNavGraphArgs.kt$ChatNavGraphArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ChatNavGraphArgs</ID>
    <ID>UndocumentedPublicFunction:ChatNavGraphArgs.kt$ChatNavGraphArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ChatNavGraphArgs</ID>
    <ID>UndocumentedPublicFunction:ChatWithUsFragmentDirections.kt$ChatWithUsFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CheckUserInfoCompleteUseCase.kt$CheckUserInfoCompleteUseCase$operator fun invoke(): Flow&lt;CompleteUserProfileResult></ID>
    <ID>UndocumentedPublicFunction:CheckboxInputRow.kt$CheckboxInputRow$@JvmOverloads @CallbackProp fun setOnCheckedChangeListener(onCheckedChangeListener: CompoundButton.OnCheckedChangeListener? = null)</ID>
    <ID>UndocumentedPublicFunction:CheckboxInputRow.kt$CheckboxInputRow$@JvmOverloads @ModelProp fun setChecked(isChecked: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:CheckboxInputRow.kt$CheckboxInputRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:CheckboxInputRow.kt$CheckboxInputRow$@JvmOverloads @ModelProp fun setTextStyle(styleAttr: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:CheckboxInputRow.kt$CheckboxInputRow$@JvmOverloads @TextProp fun setText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CheckboxInputRow.kt$CheckboxInputRow$fun isChecked(): Boolean</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$@Composable fun CircleButton( modifier: Modifier = Modifier, buttonStyle: ButtonStyle = ButtonStyle.Primary, horizontalContentPadding: Dp = GenesisTheme.spacing.one, verticalContentPadding: Dp = GenesisTheme.spacing.one, isLoading: Boolean = false, enabled: Boolean = true, onClick: () -> Unit, loadingSize: Dp = 24.dp, content: @Composable RowScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$@Composable fun NextButton( modifier: Modifier = Modifier, isLoading: Boolean = false, contentDescription: String = stringResource(R.string.genesis_next), onClick: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$@Composable fun PreviousButton( modifier: Modifier = Modifier, contentDescription: String = stringResource(R.string.genesis_previous), onClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$@Preview(name = "Circle Button", group = "Button") @Composable fun CircleButtonPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$@Preview(name = "Navigation Buttons", group = "Button") @Composable fun NavigationButtonsPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$CircleButton$fun setButtonContentDescription(description: String?)</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$CircleButton$fun setButtonStyle(@CircleButtonStyle buttonStyle: Int)</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$CircleButton$fun setImageSrc(image: Drawable?)</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$CircleButton$fun setLoadingStateOff()</ID>
    <ID>UndocumentedPublicFunction:CircleButton.kt$CircleButton$fun setLoadingStateOn()</ID>
    <ID>UndocumentedPublicFunction:CircularProgressBar.kt$@Composable fun CircularProgressBar( modifier: Modifier = Modifier, percentage: Float, radius: Dp = 50.dp, strokeWidth: Dp = GenesisTheme.spacing.half, padding: Dp = GenesisTheme.spacing.half, animationDuration: Int = 0, progressArcUnFilledColor: Color = GenesisTheme.colors.surfaceCardDisable, )</ID>
    <ID>UndocumentedPublicFunction:CircularProgressBar.kt$@Preview(name = "Circular Progress Bar", group = "Progress") @Composable fun CircularProgressBarPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ClaimDetail.kt$ClaimDetail$fun getFormattedStatus(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:ClaimDetail.kt$ClaimDetail$fun needsMoreInfo(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ClaimDetail.kt$ClaimDetail.Companion$@JvmStatic @ColorRes fun getBubbleColorIdForStatus(status: String?): Int</ID>
    <ID>UndocumentedPublicFunction:ClaimDetail.kt$ClaimDetail.Companion$@JvmStatic @ColorRes fun getContainerColorIdForStatus(status: String?): Int</ID>
    <ID>UndocumentedPublicFunction:ClaimDetail.kt$ClaimDetail.Companion$@JvmStatic fun getFormattedStatus(context: Context, status: String?): String</ID>
    <ID>UndocumentedPublicFunction:ClaimDetail.kt$ClaimDetail.Companion$@JvmStatic fun isSupportedStatus(status: String?): Boolean</ID>
    <ID>UndocumentedPublicFunction:ClaimDocumentFragment.kt$ClaimDocumentFragment$fun refresh()</ID>
    <ID>UndocumentedPublicFunction:ClaimDocumentFragment.kt$ClaimDocumentFragment$fun setOnRefreshListener(listener: OnRefreshListener?)</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ClinicDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ClinicDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ClinicDetailsFragmentDirections.kt$ClinicDetailsFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CloudDeviceUtil.kt$CloudDeviceUtil$fun openWearablesFAQ(activity: Activity)</ID>
    <ID>UndocumentedPublicFunction:CloudDeviceUtil.kt$CloudDeviceUtil$fun openWebUrl(activity: Activity, url: String)</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragment.kt$@Composable fun CloudConsentLoading()</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragment.kt$@Composable fun CloudConsentSuccessContent( onClose: () -> Unit, deviceType: DeviceType? )</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragment.kt$@Composable fun CloudConsentSuccessError(onClose: () -> Unit, onTryAgain: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragment.kt$@Preview @Composable fun PreviewCloudConsentError(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragment.kt$@Preview @Composable fun PreviewCloudConsentLoading(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragment.kt$@Preview @Composable fun PreviewCloudConsentSuccess(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): CloudRedirectFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): CloudRedirectFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectViewModel.kt$CloudRedirectViewModel$fun checkUserForDevices(deviceStr: String)</ID>
    <ID>UndocumentedPublicFunction:CloudRedirectViewModel.kt$CloudRedirectViewModel$fun retryConnectDevice(deviceStr: String, connectDevice: (WearableDevice) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@JvmOverloads @ModelProp fun setTitleMaxLines(maxLines: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@JvmOverloads @TextProp fun setTitleText(titleText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:CobrandingBanner.kt$CobrandingBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:CodeAnalyzerContract.kt$CodeAnalyzerListener$fun onCodeFound(code: String?)</ID>
    <ID>UndocumentedPublicFunction:CodeAnalyzerContract.kt$CodeAnalyzerListener$fun onCodeNotFound()</ID>
    <ID>UndocumentedPublicFunction:CodeAnalyzerContract.kt$CodeAnalyzerListener$fun requestPermission( frag: Fragment, cameraPermissionGranted: (permission: Boolean) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:CodeAnalyzerContract.kt$PermissionManager$fun requestPermission()</ID>
    <ID>UndocumentedPublicFunction:CodeScanner.kt$CodeScanner$fun setImageAnalyzer(analyzer: CodeAnalyzer)</ID>
    <ID>UndocumentedPublicFunction:CodeScanner.kt$CodeScanner$fun startCamera()</ID>
    <ID>UndocumentedPublicFunction:ColorLoading.kt$fun loadLegacyGenesisColors(context: Context, @StyleRes theme: Int): GenesisColors</ID>
    <ID>UndocumentedPublicFunction:ComponentBrowserFragmentDirections.kt$ComponentBrowserFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ComposeViewExtension.kt$fun ComposeView.setGenesisContent( content: @Composable () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator$suspend fun authenticateSocketAndPopulateUserFlags( api: API, UserRepository: UserRepository )</ID>
    <ID>UndocumentedPublicFunction:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator.AuthenticationMethod.Companion$fun parse(value: String): AuthenticationMethod?</ID>
    <ID>UndocumentedPublicFunction:ConnectionSharedViewModel.kt$ConnectionSharedViewModel$fun resetValue()</ID>
    <ID>UndocumentedPublicFunction:ConnectionSharedViewModel.kt$ConnectionSharedViewModel$fun setConnected(connected: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ConnectivityUtils.kt$ConnectivityUtils$@Suppress("DEPRECATION") fun getNetworkClass(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:ConnectivityUtils.kt$ConnectivityUtils$@Suppress("DEPRECATION") fun getWifiStrength(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:ConnectivityUtils.kt$ConnectivityUtils$fun isTelephonyEnabled(context: Context?): Boolean</ID>
    <ID>UndocumentedPublicFunction:ConsentFragment.kt$@Composable @Preview fun ConsentScreenViewPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ConsentFragment.kt$@Composable fun ConsentScreenView( modifier: Modifier = Modifier, onCloseClick: () -> Unit = {}, onCtaClicked: () -> Unit, showSteps: Boolean = true )</ID>
    <ID>UndocumentedPublicFunction:ConsentFragmentArgs.kt$ConsentFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ConsentFragmentArgs.kt$ConsentFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ConsentFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ConsentFragmentArgs.kt$ConsentFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ConsentFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ConsentFragmentDirections.kt$ConsentFragmentDirections.Companion$public fun actionConsentFragmentToQRCodeGenerationFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ConsentFragmentDirections.kt$ConsentFragmentDirections.Companion$public fun actionConsentFragmentToQRCodeScannerFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ConsentFragmentDirections.kt$ConsentFragmentDirections.Companion$public fun actionConsentFragmentToReadingsImportFragment(claimCode: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @CallbackProp fun setOnButtonClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @ModelProp fun setLoadingState(isLoading: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @ModelProp fun showConsentCheckbox(showConsentCheckbox: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @TextProp fun setButtonText(buttonText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @TextProp fun setConsentCheckboxText(consentCheckboxText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @TextProp fun setConsentText(consentText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$@ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:ConsentScreen.kt$ConsentScreen$fun canProceedWithConsent(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContactCustomerSupportScreen.kt$@Composable fun CallButton( buttonLabel: String, clickAction: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ContactCustomerSupportScreen.kt$@Composable fun ContactCustomerSupportScreen( loblawPharmacySubtitle: Int, callSDMPharmacy: () -> Unit, callLoblawPharmacy: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ContactCustomerSupportScreen.kt$@Composable fun LoblawContactSupportComponent(loblawPharmacySubtitle: Int, callLoblawPharmacy: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ContactCustomerSupportScreen.kt$@Composable fun PharmacyCallHours( topPadding: Dp, label: String, hours: String )</ID>
    <ID>UndocumentedPublicFunction:ContactCustomerSupportScreen.kt$@Composable fun SdmContactSupportComponent(callSDMPharmacy: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ContactCustomerSupportScreen.kt$@Preview @Composable fun PreviewBannerSelectionScreenContent(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ContactUs.kt$@Composable fun ContactUs(modifier: Modifier = Modifier, onClick: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ContactUs.kt$@Preview @Composable fun ContactUsPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ContactUsDemo.kt$ContactUsDemo.Companion$fun getViewModelForScenario(scenario: Int): ContactCustomerSupportViewModelInterface</ID>
    <ID>UndocumentedPublicFunction:ContactUsFragmentArgs.kt$ContactUsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ContactUsFragmentArgs.kt$ContactUsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ContactUsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ContactUsFragmentArgs.kt$ContactUsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ContactUsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ContactUsFragmentDirections.kt$ContactUsFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ContactUsScreen.kt$@Composable fun ContactUsScreen( loblawPharmacySubtitleStateFlow: StateFlow&lt;Int>, callSDMPharmacy: () -> Unit, callLoblawPharmacy: () -> Unit, navigationOnClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ContactUsScreen.kt$@Composable fun ContactUsScreenAdapter( viewModelImpl: ContactCustomerSupportViewModelInterface = ContactCustomerSupportViewModel(), callSDMPharmacy: () -> Unit, callLoblawPharmacy: () -> Unit, navigationOnClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ContactUsScreen.kt$@Preview @Composable fun PreviewBannerSelectionScreenContent(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ContentAPIAuthenticator.kt$ContentAPIAuthenticator$fun buildContentSaveUrl(endpoint: String): String</ID>
    <ID>UndocumentedPublicFunction:ContentAPIAuthenticator.kt$ContentAPIAuthenticator$fun buildNewAuthenticatedRequest(request: Request): Request</ID>
    <ID>UndocumentedPublicFunction:ContentAPIAuthenticator.kt$ContentAPIAuthenticator$suspend fun refreshAndAuthenticateSession(api: API): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContentAPI_OpenContent.kt$UriProvider$fun getUriForFile(context: Context, file: File): Uri</ID>
    <ID>UndocumentedPublicFunction:ContentAPI_Upload.kt$suspend fun ContentAPI.uploadContent( imageFilePath: String, contentType: String? = null, ): Outcome&lt;String></ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @CallbackProp fun setPrimaryOnClickListener(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @CallbackProp fun setSecondaryOnClickListener(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @ModelProp fun setCenteredContent(isCenteredContent: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @ModelProp fun setHideContent(hideContent: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @ModelProp fun useLinkMovementMethod(isEnabled: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @TextProp fun setAlertText(alert: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @TextProp fun setDescription(description: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @TextProp fun setOverlineText(overline: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @TextProp fun setPrimaryButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @TextProp fun setSecondaryButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@JvmOverloads @TextProp fun setTitle(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ContentConfirmDialog.kt$ContentConfirmDialog$fun setupViews(attrSet: AttributeSet? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@JvmOverloads @ModelProp(group = "centeredImage", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setCenteredImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@JvmOverloads @ModelProp(group = "largeImage", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setLargeImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@JvmOverloads @TextProp fun setDescription(points: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@JvmOverloads @TextProp fun setHeading(points: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "centeredImage") fun setCenteredImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "centeredImage") fun setCenteredImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "centeredImage") fun setCenteredImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "image") fun setImageUrlWithFitCenterScale(url: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "largeImage") fun roundLargeImageCorners(hasRoundedCorners: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "largeImage") fun setLargeImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "largeImage") fun setLargeImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$@ModelProp(group = "largeImage") fun setLargeImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ContentProviderInfo.kt$ContentProviderInfo$fun setupViews(attrSet: AttributeSet? = null)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$@ColorInt fun Context.getColorFromAttr(@AttrRes attrColor: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$@JvmOverloads fun Context.displayAlertDialog( title: String = "", message: String = "", dismissListener: (() -> Unit)? = null )</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$@Px fun Context.getDimensionPixelSizeFromAttr(@AttrRes attrDimen: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$@StyleRes fun Context.getStyleFromAttr(@AttrRes attrStyle: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$@Suppress("UNUSED_PARAMETER") // Keeping errorMessage around in case we want to switch back to showing it @JvmOverloads fun Context.displayErrorDialog( errorMessage: String = "", dismissListener: (() -> Unit)? = null, onTryAgainListener: OnTryAgain? = null )</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.createTempFileOnExternalCacheDir(fileName: String, fileDirectory: String): File</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.databaseExist(name: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.dpToPx(dp: Float): Float</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.dpToPx(dp: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getDrawableFromAttr(@AttrRes attr: Int): Drawable</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getFileAuthorityName(): String</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getHtmlString(@StringRes stringRes: Int)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getIntegerFromAttr(@AttrRes attrInt: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getPackageNameForSecrets()</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getResourceIdFromAttr(@AttrRes attrInt: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.getUriForFile(authority: String, file: File): Uri</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.hasPermission(permission: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.hideKeyboard(windowToken: IBinder?)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.isDarkColor(@ColorInt color: Int): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.isDarkColorRes(@ColorRes colorRes: Int): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.isScreenReaderOn(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.launchAppNotificationSettings()</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openInEmail(email: String)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openInEmail(email: Uri)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openInInternalBrowser(url: String)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openInMaps(address: String)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openInPhone(phoneNumber: String)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openInPhone(phoneNumber: Uri)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.openPermissionSettings()</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.showSnackbar(view: View, message: String)</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.showSnackbar(view: View, message: String, actionTitle: String, action: (() -> Unit))</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.startShareContentUriIntent( intentChooserTitle: String, mimeType: String, intentOptions: (Intent.() -> Unit)? = null, vararg uris: Uri )</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun Context.startShareContentUriIntent( intentChooserTitle: String, mimeType: String, vararg uris: Uri )</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$fun densityToPixel(dp: Int): Int</ID>
    <ID>UndocumentedPublicFunction:ContextExtension.kt$inline fun Context.resSpans(options: ResSpans.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @CallbackProp fun setOnLeftActionClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @CallbackProp fun setOnRightActionClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @ModelProp(group = "actionLeftImage", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setActionLeftImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @ModelProp(group = "actionRightImage", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setActionRightImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @TextProp fun setLeftActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @TextProp fun setRightActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@JvmOverloads @TextProp fun setTopOverlayText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@ModelProp fun setOffline(isOffline: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@ModelProp(group = "actionLeftImage") fun setActionLeftImageSrc(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@ModelProp(group = "actionRightImage") fun setActionRightImageSrc(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ConversationCard.kt$ConversationCard$@ModelProp(group = "image") fun setImageSrc(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:CoreConfiguration.kt$Core$// The profile screens are split across the apps and share some common code in core. // They should probably live in their own module, but for now we expose these // shared view models here so that we don't force usage of koin anywhere fun getGenderIdentityViewModel(fragment: Fragment): SelectGenderIdentityViewModel</ID>
    <ID>UndocumentedPublicFunction:CoreConfiguration.kt$Core$@Suppress("LongMethod", "LongParameterList") fun initialize( applicationContext: Context, api: API, sessionUtils: SessionUtils, analytics: AnalyticsTracker, featureFlagsRepository: FeatureFlagsRepository, privacyLockUtils: PrivacyLockUtils, coreNavigation: CoreNavigation, leagueSocketApiAuthenticator: LeagueSocketAPIAuthenticator, environmentUtils: EnvironmentUtils, jsonAdapter: JsonAdapter, settings: CoreSettings )</ID>
    <ID>UndocumentedPublicFunction:CoreConfiguration.kt$Core$fun getSelectPronounViewModel(fragment: Fragment): SelectPronounViewModel</ID>
    <ID>UndocumentedPublicFunction:CoreDatabase.kt$CoreDatabase$abstract fun getUserConfigDao(): UserConfigDao</ID>
    <ID>UndocumentedPublicFunction:CoreDatabase.kt$CoreDatabase$abstract fun getUserDao(): UserDao</ID>
    <ID>UndocumentedPublicFunction:CoreDatabase.kt$CoreDatabase$abstract fun getUserFlagsDao(): UserFlagsDao</ID>
    <ID>UndocumentedPublicFunction:CoreDatabase.kt$CoreDatabase.Companion$fun getDatabase(context: Context): CoreDatabase</ID>
    <ID>UndocumentedPublicFunction:CoreEnvironmentConfiguration.kt$CoreEnvironmentConfiguration$fun getEnvironmentList(flavor: String): Array&lt;Environment></ID>
    <ID>UndocumentedPublicFunction:CoreLogger.kt$CoreLogger$@Suppress("LongParameterList") fun log( priority: Int, tag: String, message: String, th: Throwable?, logToCrashReporter: Boolean, logToRemote: Boolean )</ID>
    <ID>UndocumentedPublicFunction:CoreNavigation.kt$CoreNavigation$fun navigateToDeeplink( activity: Activity, uri: Uri, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int?, navController: NavController?, navOptions: NavOptions? ): Boolean</ID>
    <ID>UndocumentedPublicFunction:CoreNavigation.kt$CoreNavigation$fun parseDeeplink(url: String): NavigationTarget?</ID>
    <ID>UndocumentedPublicFunction:Countries.kt$Countries.Companion$fun getAll(): List&lt;Countries></ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragment.kt$CovidDataSharingFragment$fun ActivityBuilderDailyScreenerDataSharingBinding.doNotShareData(dailyScreenerResults: CovidHealthAssessmentInformation)</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragment.kt$CovidDataSharingFragment$fun setLoadingState(loading: Boolean)</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragment.kt$CovidDataSharingFragment$fun setupObservables()</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): CovidDataSharingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): CovidDataSharingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionCovidDataSharingFragmentToAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionCovidDataSharingFragmentToBuilderDailyScreenerNavGraph(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionCovidDataSharingFragmentToDailyScreenerResults(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidDataSharingFragmentDirections.kt$CovidDataSharingFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@JvmOverloads @ModelProp fun setBottomSpacingRes(@AttrRes bottomSpacingResId: Int = R.attr.spacing_none)</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundAttr(@AttrRes imageAttr: Int)</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroudResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:CovidOnboardingSlide.kt$CovidOnboardingSlide$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:CrashReportingLogger.kt$CrashReportingLogger$fun logToCrashReporter( message: String, th: Throwable? )</ID>
    <ID>UndocumentedPublicFunction:CrashReportingLogger.kt$CrashReportingLogger$fun setUserId(userId: String)</ID>
    <ID>UndocumentedPublicFunction:CreateProfileFragmentDirections.kt$CreateProfileFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CreateProfileScreen.kt$@Composable fun CreateProfileScreen( viewModel: CreateProfileViewModel, onBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:CreateProfileScreen.kt$@Composable fun DateOfBirthField(state: DateOfBirthInputState)</ID>
    <ID>UndocumentedPublicFunction:CreateProfileScreen.kt$@Composable fun TermsOfUseInfoRow()</ID>
    <ID>UndocumentedPublicFunction:CreateProfileScreen.kt$@Composable fun TermsOfUseRow(state: CreateProfileData)</ID>
    <ID>UndocumentedPublicFunction:CreateProfileSuccessFragmentDirections.kt$CreateProfileSuccessFragmentDirections.Companion$public fun actionCreateProfileToEnableAutoRefill(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CreateProfileSuccessFragmentDirections.kt$CreateProfileSuccessFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:CreateProfileSuccessScreen.kt$@Composable fun CreateProfileSuccessScreen(onContinueClick: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:CreateProfileViewModel.kt$CreateProfileViewModel$fun createProfile()</ID>
    <ID>UndocumentedPublicFunction:CurrencyStringExtension.kt$// FIXME: the 0 case for this isn't formatted by locale fun Double.formatWithComma(): String</ID>
    <ID>UndocumentedPublicFunction:CurrencyStringExtension.kt$// FIXME: this isn't scaleable to other currencies fun String.formatCurrency(currency: String): String</ID>
    <ID>UndocumentedPublicFunction:CurrencyStringExtension.kt$fun Int.formatWithComma()</ID>
    <ID>UndocumentedPublicFunction:CurrencyStringExtension.kt$fun Long.formatWithComma()</ID>
    <ID>UndocumentedPublicFunction:CurrencyStringExtension.kt$fun String.formatWithComma()</ID>
    <ID>UndocumentedPublicFunction:CurrencyUtil.kt$CurrencyUtil$// FIXME: remove french specific checks and format this in a more generic way fun getFormattedPriceText(value: String, currency: String, isDoubleFormat: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:CurrencyUtil.kt$CurrencyUtil$@JvmStatic fun currencySymbol(locale: Locale): String</ID>
    <ID>UndocumentedPublicFunction:CurrencyUtil.kt$CurrencyUtil$@JvmStatic fun currencySymbol(locale: Locale, currencyString: String): String</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @ModelProp fun setPoints(numberOfPoints: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @ModelProp fun setPointsIndicatorTheme(theme: PointsIndicator.Status = PointsIndicator.Status.LIGHT)</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @ModelProp fun setShowPoints(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @ModelProp fun setStyle(@CurrentGoalStyle cardSize: Int = CURRENT_GOAL_STYLE_DARK)</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CurrentGoalCard.kt$CurrentGoalCard$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:CurrentLocationButton.kt$@Preview @Composable fun CurrentLocationButtonPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:CyclicAdapter.kt$CyclicAdapter$fun adjustedPosition(position: Int)</ID>
    <ID>UndocumentedPublicFunction:CyclicAdapter.kt$CyclicAdapter$fun getActualItemCount()</ID>
    <ID>UndocumentedPublicFunction:DailyScreener.kt$CovidHealthAssessmentResult$fun isCleared()</ID>
    <ID>UndocumentedPublicFunction:DailyScreener.kt$CovidHealthAssessmentResult$fun isNotCleared()</ID>
    <ID>UndocumentedPublicFunction:DailyScreener.kt$CovidHealthAssessmentResult$fun isNotGoingIntoWork()</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsController.kt$DailyScreenerResultsController.Listener$fun changeReturnToWorkDate()</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsController.kt$DailyScreenerResultsController.Listener$fun chatWithHealthConcierge()</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsController.kt$DailyScreenerResultsController.Listener$fun navigateToDeeplink(url: String, finish: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsFragment.kt$DailyScreenerResultsFragment$fun closeResults()</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsFragment.kt$DailyScreenerResultsFragment$fun setLoadingState(loading: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsFragment.kt$DailyScreenerResultsFragment$fun setupObservables()</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsFragmentDirections.kt$DailyScreenerResultsFragmentDirections.Companion$public fun updateReturnToWorkDate( moduleId: String, moduleType: String, canNavigateBack: Boolean = true, returnToWorkDate: Date? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DailyScreenerResultsViewModel.kt$DailyScreenerResultsViewModel$fun fetchDailyScreenerResults()</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentArgs.kt$DashboardFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentArgs.kt$DashboardFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DashboardFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentArgs.kt$DashboardFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DashboardFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentDirections.kt$DashboardFragmentDirections.Companion$public fun actionDashboardFragmentToMultiBannerSettingsFragment(userType: UserType = UserType.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentDirections.kt$DashboardFragmentDirections.Companion$public fun actionDashboardFragmentToSelectPharmacyRefillFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentDirections.kt$DashboardFragmentDirections.Companion$public fun actionDashboardFragmentToSettingsFragment(userType: UserType = UserType.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DashboardFragmentDirections.kt$DashboardFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DashboardScreen.kt$@Composable fun DashboardScreen( stateFlow: StateFlow&lt;State&lt;UserInfo>>, onClick: (banner: Banner) -> Unit, onAccountSettingsClick: (banner: UserType) -> Unit, contactUsClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:DashboardScreen.kt$@Composable fun DashboardScreenContent( userInfo: UserInfo, onClick: (banner: Banner) -> Unit, onAccountSettingsClick: (banner: UserType) -> Unit, contactUsClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:DashboardScreen.kt$@Preview @Composable fun DashboardScreenPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:DataPointsUtil.kt$DataPointsUtil$fun getDataPointString(context: Context, dataPoints: List&lt;String>): String</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$/* * Gets the given calendar field of the Date */ fun Date.get(calendarField: Int)</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$/* * Returns the maximum number of weeks in any of the months within a given range */ fun maxWeeksInRange(minDate: Date?, maxDate: Date?): Int</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.differenceInMonths(date: Date): Int</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.differenceInYears(date: Date): Int</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.formatLong(): String</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.greaterThanDayAway(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.greaterThanMonthAway(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.lessThanDayAway(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.lessThanMonthAway(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.lessThanWeekAway(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.startOfDay(): Date</ID>
    <ID>UndocumentedPublicFunction:DateExtension.kt$fun Date.toCalendar(): Calendar</ID>
    <ID>UndocumentedPublicFunction:DateExtensions.kt$fun Date.isSameDayAndYear(dateTime: LocalDate?): Boolean</ID>
    <ID>UndocumentedPublicFunction:DateExtensions.kt$fun LocalDate.toCalendarInstance(): Calendar</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @CallbackProp fun setOnDateChangedListener(listener: OnDateChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @ModelProp fun isInvalid(isInvalid: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @ModelProp fun setDate(date: Date? = null)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @ModelProp fun setMaxDate(date: Date? = null)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @ModelProp fun setMinDate(date: Date? = null)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setAccessibilityText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setDatePickerMessage(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setDatePickerTitle(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setInvalidText(errorText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@ModelProp fun setDate(timeStamp: Long)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@ModelProp fun setDefaultDate(defaultDate: Date)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$@ModelProp fun setDefaultDate(timeStamp: Long)</ID>
    <ID>UndocumentedPublicFunction:DateInputRow.kt$DateInputRow$fun getDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @CallbackProp fun setOnDateChangedListener(listener: OnDateChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @ModelProp fun setDate(date: Date? = null)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @ModelProp fun setMaxDate(date: Date? = null)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @ModelProp fun setMinDate(date: Date? = null)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroudResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:DateQuestion.kt$DateQuestion$fun getDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:DateSelectionUseCase.kt$Date$fun toLocalDate(): LocalDate</ID>
    <ID>UndocumentedPublicFunction:DateSelectionUseCase.kt$DateSelectionUseCase$operator fun invoke(): Flow&lt;DateSelectionState></ID>
    <ID>UndocumentedPublicFunction:DateSelectionUseCase.kt$DateToLocalDateUseCase$operator fun invoke(value: Date?): LocalDate?</ID>
    <ID>UndocumentedPublicFunction:DateToLongConverter.kt$DateToLongConverter$@TypeConverter fun dateToTimestamp(date: Date?): Long?</ID>
    <ID>UndocumentedPublicFunction:DateToLongConverter.kt$DateToLongConverter$@TypeConverter fun fromTimestamp(value: Long?): Date?</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$// Gets the number of days between two dates ignoring the time value fun daysBetweenDates(start: Date, end: Date): Int</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun daysToMonths(days: Int): Int</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun daysToWeeks(days: Int): Int</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatAppointmentDateTime(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateCalendar(date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateForConversationTimestamp(context: Context, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateFullMonthDay(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateMonthDay(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateMonthDayYear(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateNewMessage(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDatePolicyWithoutLocaleAndTimezone(date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatDateRating(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatFullDateWith12hrTime(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatTimeHourMinute(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatTranscriptHeader(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun formatTranscriptMessage(locale: Locale, date: Date?): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun getDifferenceInDateFromNowInHours(date: Date?): Long</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun getISO8601DateString(date: Date?): String?</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun getShortDateString(date: Date?): String?</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun parseISO8601WithoutTimezone(dateString: String?): Date?</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun parseShortDate(shortDate: String): Date?</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$@JvmStatic fun weekDay(locale: Locale, date: Date): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$fun dayDiff(start: Date, end: Date): Int</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$fun differenceBetweenDate(start: Date?, end: Date?): String?</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$DateUtils$fun formatYearOnlyFromDate(locale: Locale, date: Date): String</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$ShortDate$fun getDate()</ID>
    <ID>UndocumentedPublicFunction:DateUtils.kt$ShortDate$fun getString(): String</ID>
    <ID>UndocumentedPublicFunction:DeepLinker.kt$DeepLinker$fun buildPath(url: Uri)</ID>
    <ID>UndocumentedPublicFunction:DeepLinker.kt$DeepLinker$fun constructUrl( scheme: String, host: String, pathLink: String, queryParameters: String? ): String</ID>
    <ID>UndocumentedPublicFunction:DeepLinker.kt$DeepLinker$fun navigateToDeepLink( context: Context, url: Uri, navController: NavController? = null, navOptions: NavOptions? = null ): Boolean</ID>
    <ID>UndocumentedPublicFunction:DefaultTheme.kt$fun createDefaultTheme(): Theme</ID>
    <ID>UndocumentedPublicFunction:Dependent.kt$fun Dependent.getFormattedRelationshipType(): Int</ID>
    <ID>UndocumentedPublicFunction:Dependent.kt$fun Dependent.toUserDependent(): UserDependent</ID>
    <ID>UndocumentedPublicFunction:Dependent.kt$fun UserDependent.toDependent(): Dependent</ID>
    <ID>UndocumentedPublicFunction:DependentAddedDialog.kt$DependentAddedDialog$fun setOnDependentAddDialogListener(listener: OnDependentAddedDialogListener?)</ID>
    <ID>UndocumentedPublicFunction:DependentAddedDialog.kt$OnDependentAddedDialogListener$fun onClose()</ID>
    <ID>UndocumentedPublicFunction:DependentCardController.kt$DependentCardClickListener$fun actionClicked(action: WalletCardAction)</ID>
    <ID>UndocumentedPublicFunction:DependentCardController.kt$DependentCardClickListener$fun customerServiceBannerClicked()</ID>
    <ID>UndocumentedPublicFunction:DependentCardController.kt$DependentCardController$fun setCardData(data: WalletCardView.WalletCardData)</ID>
    <ID>UndocumentedPublicFunction:DependentCardViewModel.kt$DependentCardViewModel$fun getDependentCardData(cardType: String, dependentId: String)</ID>
    <ID>UndocumentedPublicFunction:DependentCardViewModel.kt$DependentCardViewModel$fun onClickShare(context: Context, bitmap: Bitmap)</ID>
    <ID>UndocumentedPublicFunction:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DependentDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentDetailsFragmentDirections.kt$DependentDetailsFragmentDirections.Companion$public fun actionDependentDetailsToEditDependent( dependentId: String, dependentName: String, relationshipType: String ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DependentDetailsScreen.kt$@Composable fun DependentDetailsScreen( modifier: Modifier = Modifier, dependentName: String, dependentId: String, relationship: String, viewModel: DependentDetailsViewModel, showEditButton: Boolean, onClickEdit: () -> Unit, loadingError: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:DependentDetailsViewModel.kt$DependentDetailsViewModel$fun getDependentData( dependentId: String, relationship: String ): StateFlow&lt;State&lt;List&lt;DependentDetailsRowData>>></ID>
    <ID>UndocumentedPublicFunction:DependentDynamicForm.kt$@Composable fun DependentDynamicForm( modifier: Modifier = Modifier, viewModel: DependentFormViewModel, headerText: String, @StringRes uploadButtonString: Int, onCancelClicked: () -> Unit, onTooltipClicked: (item: DependentFormField) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:DependentFormAdapter.kt$DependentFormAdapter$fun setFieldToValue(fieldToValue: HashMap&lt;String, String?>?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormAdapter.kt$DependentFormAdapter$fun updateDynamicFieldSchema(schemaFields: RealmList&lt;DependentRelationshipSchemaField>)</ID>
    <ID>UndocumentedPublicFunction:DependentFormAdapter.kt$DependentFormAdapter$fun validateFields(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DependentFormAdapter.kt$OnMessageListener$fun onMessage(message: String?, messageAction: String?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormFragment$fun setDependent(dependent: Dependent?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormFragment$fun setDependentFormListener(dependentFormListener: DependentFormListener?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormFragment$fun setSchema(schema: DependentRelationshipSchemaField?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormFragment$fun setStaticFields(staticFields: RealmList&lt;DependentRelationshipSchemaField>?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormListener$fun onChatWithAgent()</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormListener$fun onCloseForm()</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormListener$fun onDependentQualification()</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormListener$fun onRemoveDependentClicked(userDependent: Dependent?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormFragment.kt$DependentFormListener$fun setDependent(editedUserDependent: Dependent?)</ID>
    <ID>UndocumentedPublicFunction:DependentFormSuccessFragment.kt$@Composable fun DependentFormSuccessView( title: Int, description: Int, onCloseClicked: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DependentFormSuccessFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentFormSuccessFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentFormSuccessFragmentDirections.kt$DependentFormSuccessFragmentDirections.Companion$public fun actionDependentFormSuccessToManageDependentsLanding(qleRequestId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DependentFormViewModel.kt$DependentFormViewModel$open fun getCurrentFields(): StateFlow&lt;State&lt;List&lt;DependentFormField>>></ID>
    <ID>UndocumentedPublicFunction:DependentFormsUtils.kt$fun List&lt;DependentFormRelationshipData>.findBackendKey(displayRes: Int): String</ID>
    <ID>UndocumentedPublicFunction:DependentFormsUtils.kt$fun List&lt;DependentFormRelationshipData>.findDisplayRes(backendKey: String): Int</ID>
    <ID>UndocumentedPublicFunction:DependentFormsUtils.kt$fun getDependentFormFieldLabel(context: Context, field: DependentFormField)</ID>
    <ID>UndocumentedPublicFunction:DependentFormsUtils.kt$fun updateDependentFormFields( currentFields: ArrayList&lt;DependentFormField>, index: Int, inputValue: String, uploadMap: MutableMap&lt;String, String>, errorMap: SnapshotStateMap&lt;Int, Boolean> ): List&lt;DependentFormField></ID>
    <ID>UndocumentedPublicFunction:DependentInviteActivity.kt$DependentInviteActivity$fun getDependentId()</ID>
    <ID>UndocumentedPublicFunction:DependentInviteActivity.kt$DependentInviteLauncher$fun launch(context: Context, dependent: Dependent, isReSendInvitation: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DependentInviteEmailFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentInviteEmailFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentInviteEmailFragmentDirections.kt$DependentInviteEmailFragmentDirections.Companion$public fun actionDependentInviteEmailToDependentSuccessInvite(email: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DependentInviteStatusWidget.kt$DependentInviteStatusWidget$@ModelProp fun setStatus(status: DependentInviteStatus)</ID>
    <ID>UndocumentedPublicFunction:DependentInviteSuccessFragment.kt$@Composable fun DependentInviteSuccessView( email: String, onCloseClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:DependentInviteSuccessFragmentArgs.kt$DependentInviteSuccessFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DependentInviteSuccessFragmentArgs.kt$DependentInviteSuccessFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DependentInviteSuccessFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentInviteSuccessFragmentArgs.kt$DependentInviteSuccessFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DependentInviteSuccessFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DependentInviteSuccessFragmentDirections.kt$DependentInviteSuccessFragmentDirections.Companion$public fun actionDependentInviteSuccessToManageDependentsLanding(qleRequestId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DependentInviteViewModel.kt$DependentInviteViewModel$fun sendInvitation(dependentId: String, email: String)</ID>
    <ID>UndocumentedPublicFunction:DependentWalletCardActivity.kt$DependentWalletCardLauncher$fun launch(activity: Activity, dependentId: String, cardType: String)</ID>
    <ID>UndocumentedPublicFunction:DependentsActivity.kt$DependentsActivity$fun close()</ID>
    <ID>UndocumentedPublicFunction:DependentsActivity.kt$DependentsActivity$fun closeForm()</ID>
    <ID>UndocumentedPublicFunction:DependentsActivity.kt$DependentsActivity$fun showChat()</ID>
    <ID>UndocumentedPublicFunction:DependentsActivity.kt$DependentsActivity$fun showDependentQualification()</ID>
    <ID>UndocumentedPublicFunction:DependentsActivity.kt$DependentsActivity$fun showRemoveDependentDialog(dependent: Dependent)</ID>
    <ID>UndocumentedPublicFunction:DependentsController.kt$DependentsController$fun setProgressBarVisible(visible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DependentsController.kt$DependentsController$fun updateDependents(userDependents: List&lt;Dependent>)</ID>
    <ID>UndocumentedPublicFunction:DependentsController.kt$OnDependentClickListener$fun onDependentClick(dependent: Dependent)</ID>
    <ID>UndocumentedPublicFunction:DependentsController.kt$OnDependentClickListener$fun onInviteButtonClicked(dependent: Dependent, isReSend: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DependentsDao.kt$DependentsDao$@Query("SELECT * FROM dependents") fun getAllDependents(): List&lt;Dependent></ID>
    <ID>UndocumentedPublicFunction:DependentsForm.kt$fun String.mapFormDataType()</ID>
    <ID>UndocumentedPublicFunction:DependentsForm.kt$fun String.mapFormInputType()</ID>
    <ID>UndocumentedPublicFunction:DependentsFormsUseCases.kt$FetchAddDependentFormSchema$fun getAddFormSchema(dependentRelationship: String): Flow&lt;Outcome&lt;List&lt;DependentFormField>>></ID>
    <ID>UndocumentedPublicFunction:DependentsFormsUseCases.kt$FetchEditDependentFormSchema$fun getEditFormSchema( dependentId: String, dependentRelationship: String ): Flow&lt;Outcome&lt;List&lt;DependentFormField>>></ID>
    <ID>UndocumentedPublicFunction:DependentsFormsUseCases.kt$FetchSingleDependentData$fun getDependentData( dependentId: String, dependentRelationship: String ): Flow&lt;Outcome&lt;List&lt;DependentDetailsRowData>>></ID>
    <ID>UndocumentedPublicFunction:DependentsFormsUseCases.kt$UploadDependentFormUseCase$fun uploadDependentForm(dependentValues: Map&lt;String, String>): Flow&lt;Outcome&lt;Empty>></ID>
    <ID>UndocumentedPublicFunction:DependentsListController.kt$DependentClickListener$fun onDependentClick(dependent: Dependent)</ID>
    <ID>UndocumentedPublicFunction:DependentsListController.kt$DependentClickListener$fun onInviteButtonClicked(dependent: Dependent, isReSend: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DependentsListController.kt$DependentsListController$fun setProgressBarVisible(visible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DependentsListController.kt$DependentsListController$fun updateDependents(userDependents: List&lt;Dependent>)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$@Suppress("DEPRECATION") fun isManageDependentV2()</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun addDependent()</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun editDependent(dependent: Dependent?)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun filterAndUpdateDependents()</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun getEditableStaticFields(staticFields: RealmList&lt;DependentRelationshipSchemaField>): RealmList&lt;DependentRelationshipSchemaField></ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun getQleRequest(qleRequestId: String)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun getReadOnlyStaticFields(staticFields: RealmList&lt;DependentRelationshipSchemaField>): RealmList&lt;DependentRelationshipSchemaField></ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun getScreenConfiguration(requestId: String?)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun isRequestLandingPageFlow()</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun removeDependent(dependent: Dependent, fieldToValues: HashMap&lt;String, String>)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun removeDependentV2(dependent: Dependent)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun removeDependentViaDialog(dependent: Dependent?)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun setDependent(editUserDependent: Dependent)</ID>
    <ID>UndocumentedPublicFunction:DependentsViewModel.kt$DependentsViewModel$fun setupViewAfterScreener(qleRequestResponse: QleRequestResponse, qleRequestId: String)</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @ModelProp fun setIsHeader(isHeader: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @ModelProp fun setShowDivider(showDivider: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @TextProp fun setBodyText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailRow.kt$DetailRow$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@JvmOverloads @ModelProp fun setDescriptionHeaderStyle(@Header.DescriptionStyle descriptionStyle: Int = Header.DESCRIPTION_STYLE_BODY2)</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@JvmOverloads @ModelProp fun setHeaderStyle(@Header.HeaderStyle headerStyle: Int = Header.HEADER_STYLE_SUBTITLE1)</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailView.kt$DetailView$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @ModelProp fun setLogoContentId(contentId: String = "")</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @ModelProp fun setProgress(progressConfig: GenesisProgressBar.ProgressConfig = GenesisProgressBar.ProgressConfig(0, 1, R.string.genesis_empty))</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @ModelProp fun setShowProgress(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @TextProp fun setCaption(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@JvmOverloads @TextProp fun setTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:DetailedProgressCard.kt$DetailedProgressCard$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): DeviceInfoFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DeviceInfoFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable @Preview(showSystemUi = true, name = "Wearable Consent Error view") fun DeviceInfoFailurePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable @Preview(showSystemUi = true, name = "Wearable Consent Error view") fun DeviceInfoLoadingPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable @Preview(showSystemUi = true, name = "Wearable Consent Error view") fun DeviceInfoSuccessPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable fun DeviceInfoFailureView(onRetry: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable fun DeviceInfoLoadingView()</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable fun DeviceInfoView( deviceType: DeviceType, stateFlow: StateFlow&lt;State&lt;Map&lt;WearableDataType, Boolean>>>, @DrawableRes successIcon: Int, @DrawableRes failureIcon: Int, onBackNavigation: () -> Unit, onRetry: () -> Unit, openFaq: () -> Unit, reconnectActionLoading: Boolean, disconnectActionLoading: Boolean, disconnectDevice: () -> Unit, reconnectDevice: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Composable fun StatusView( dataPoint: WearableDataType, status: Boolean, @DrawableRes successIcon: Int, @DrawableRes failureIcon: Int, )</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoView.kt$@Suppress("LongMethod") @Composable fun DeviceInfoSuccessView( deviceType: DeviceType, deviceInfo: Map&lt;WearableDataType, Boolean>, @DrawableRes successIcon: Int, @DrawableRes failureIcon: Int, onLearnMoreClick: () -> Unit, reconnectActionLoading: Boolean, disconnectActionLoading: Boolean, onRequiredPermissionsClick: () -> Unit, onDisconnectClick: () -> Unit, onReconnectClick: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoViewModel.kt$DeviceInfoViewModel$fun disconnectDevice(onDisconnect: () -> Unit, onError: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoViewModel.kt$DeviceInfoViewModel$fun getDeviceInfo()</ID>
    <ID>UndocumentedPublicFunction:DeviceInfoViewModel.kt$DeviceInfoViewModel$fun reconnectDevice(onDisconnect: (WearableDevice) -> Unit, onError: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun setCancelButton( text: String, @ColorInt textColor: Int? = null, shouldDismiss: Boolean = true, onCancelClickListener: ((AlertDialog) -> Unit)? = null ): Builder</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun setCancellable(cancellable: Boolean): Builder</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun setConfirmButton( text: String, @ColorInt textColor: Int? = null, shouldDismiss: Boolean = true, onConfirmClickListener: ((AlertDialog) -> Unit)? = null ): Builder</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun setMessage(message: String): Builder</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun setOnDismissListener(onDismissListener: (AlertDialog) -> Unit): Builder</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun setTitle(title: String): Builder</ID>
    <ID>UndocumentedPublicFunction:Dialog.kt$Dialog.Builder$fun show()</ID>
    <ID>UndocumentedPublicFunction:DigitalPharmacyConfiguration.kt$DigitalPharmacy$fun initialize( userRepository: UserRepository )</ID>
    <ID>UndocumentedPublicFunction:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$fun fetchFakePrescriptionDetails(): Flow&lt;Outcome&lt;PrescriptionDetail>></ID>
    <ID>UndocumentedPublicFunction:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$fun fetchUserInfoOnCompletion(): Flow&lt;Outcome&lt;UserInfo>></ID>
    <ID>UndocumentedPublicFunction:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$fun fetchUserSettings(): Flow&lt;Outcome&lt;UserSettings>></ID>
    <ID>UndocumentedPublicFunction:DigitalPharmacyRepository.kt$DigitalPharmacyRepository$fun fetchUserVerificationQuestion(): Flow&lt;Outcome&lt;List&lt;VerificationQuestion>>></ID>
    <ID>UndocumentedPublicFunction:DigitalPharmacyUserInfoUseCase.kt$DigitalPharmacyUserInfoUseCase$operator fun invoke(): Flow&lt;Outcome&lt;UserInfo>></ID>
    <ID>UndocumentedPublicFunction:DigitalpharmacyNavGraphDirections.kt$DigitalpharmacyNavGraphDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): DimensionsOfHealthFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): DimensionsOfHealthFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:DirectorPageFragment.kt$@Composable fun DirectorView(directorPageViewModel: DirectorPageViewModel)</ID>
    <ID>UndocumentedPublicFunction:DirectorPageFragment.kt$@Composable fun EmailField(emailAddress: (String) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:DirectorPageFragment.kt$@Composable fun SocialButton(icon: Painter, title: String)</ID>
    <ID>UndocumentedPublicFunction:DirectorPageFragment.kt$@Preview(showBackground = true) @Composable fun DirectorPagePreview( @PreviewParameter(ThemeProvider::class) theme: Theme, )</ID>
    <ID>UndocumentedPublicFunction:DirectorPageViewModel.kt$DirectorPageViewModel$fun setAndValidateEmailAddress(email: String)</ID>
    <ID>UndocumentedPublicFunction:Divider.kt$@Composable fun HorizontalDivider(modifier: Modifier = Modifier)</ID>
    <ID>UndocumentedPublicFunction:Divider.kt$@Preview(name = "Horizontal Divider", group = "Divider") @Composable fun HorizontalDividerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:DotsIndexIndicator.kt$DotsIndexIndicator$fun setIndex(index: Int, animate: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DropDown.kt$DropDown$fun refreshSelections(selectedOptionValue: Option?)</ID>
    <ID>UndocumentedPublicFunction:DropDown.kt$DropDown$fun setContentDescription(contentDescription: String)</ID>
    <ID>UndocumentedPublicFunction:DropDown.kt$DropDown$fun setSelectedValue(value: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:DropDown.kt$DropDown$fun setSpinnerClickable(value: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @CallbackProp fun setOnSelectionChanged(selectionListener: OnDropDownSelectionChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @CallbackProp fun setQuestionTextOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @ModelProp fun isInvalid(isInvalid: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @ModelProp fun setDropDownClickable(isClickable: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @ModelProp fun setOptions(selectionOptions: Options = Options())</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @ModelProp fun showTooltipIcon(showTooltip: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @TextProp fun setInvalidText(errorText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @TextProp fun setQuestionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$@JvmOverloads @TextProp fun setSelectedValue(value: CharSequence? = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$fun getSelectedValue(): DropDown.Option?</ID>
    <ID>UndocumentedPublicFunction:DropDownInputRow.kt$DropDownInputRow$fun refreshSelections()</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @CallbackProp fun setOnSelectionChanged(selectionListener: OnDropDownSelectionChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @ModelProp fun setOptions(selectionOptions: DropDownInputRow.Options = DropDownInputRow.Options())</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:DropDownQuestion.kt$DropDownQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroudResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @ModelProp fun setLeftSubtitleColor(color: Int = DEFAULT_SUBTITLE_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @ModelProp fun setLeftTitleColor(color: Int = DEFAULT_TITLE_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @ModelProp fun setRightSubtitleColor(color: Int = DEFAULT_SUBTITLE_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @ModelProp fun setRightTitleColor(color: Int = DEFAULT_TITLE_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @ModelProp fun setShowDivider(showDivider: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @TextProp fun setAccessibilityDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @TextProp fun setLeftSubtitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @TextProp fun setLeftTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @TextProp fun setRightSubtitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualColumnRow.kt$DualColumnRow$@JvmOverloads @TextProp fun setRightTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @ModelProp fun setLeftTextColor(color: Int = DEFAULT_TEXT_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @ModelProp fun setRightTextColor(color: Int = DEFAULT_TEXT_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @ModelProp fun setRowBackgroundColor(color: Int = DEFAULT_ROW_COLOR)</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @ModelProp fun setShowDivider(showDivider: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @ModelProp fun setTextAppearanceFromAttr(@AttrRes attrRes: Int = R.attr.typography_body2)</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @TextProp fun setAccessibilityDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @TextProp fun setLeftText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:DualTableRow.kt$DualTableRow$@JvmOverloads @TextProp fun setRightText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun getDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun getDefaultDate(): Date</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun getMaxDate()</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun getMinDate()</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setDate(date: Date?)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setDate(timeStamp: Long)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setDefaultDate(defaultDate: Date)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setDefaultDate(timeStamp: Long)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setMaxDate(maxDate: Date?)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setMaxDate(timeStamp: Long)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setMinDate(minDate: Date?)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setMinDate(timeStamp: Long)</ID>
    <ID>UndocumentedPublicFunction:EditDate.kt$EditDate$fun setOnDateChangedListener(listener: OnDateChangedListener?)</ID>
    <ID>UndocumentedPublicFunction:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): EditDependentFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EditDependentFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:EditDependentFormFragmentDirections.kt$EditDependentFormFragmentDirections.Companion$public fun actionEditDependentFormToDependentFormSuccess(title: Int, description: Int): NavDirections</ID>
    <ID>UndocumentedPublicFunction:EditDependentViewModel.kt$EditDependentViewModel.Companion$fun parametersOf(dependentId: String, relationshipType: String)</ID>
    <ID>UndocumentedPublicFunction:EditPhoneNumber.kt$EditPhoneNumber$fun setCountryCode(code: Int)</ID>
    <ID>UndocumentedPublicFunction:EditPhoneNumber.kt$EditPhoneNumber$fun setHint(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditPhoneNumber.kt$EditPhoneNumber$fun setPhoneNumber(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@JvmOverloads @CallbackProp fun setOnCameraClick(onClick: (() -> Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@JvmOverloads @ModelProp fun setLoadingState(isLoading: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@JvmOverloads @TextProp fun setNameText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:EditableAvatarHeader.kt$EditableAvatarHeader$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @CallbackProp fun clickListener(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @ModelProp fun setShowDivider(showDivider: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @ModelProp(options = [ModelProp.Option.IgnoreRequireHashCode], group = "image") fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @TextProp fun setOverlineText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:EditorialRow.kt$EditorialRow$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:EmptyAppointmentsComposable.kt$@Composable fun EmptyAppointmentsComposable(onBookAnAppointmentClick: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:EmptyResultsView.kt$@Composable fun EmptyResultsView( modifier: Modifier = Modifier, heading: String, description: String )</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@JvmOverloads @TextProp fun setDesc(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@JvmOverloads @TextProp fun setTitle(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:EmptyStateBanner.kt$EmptyStateBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:EnableAutoRefillFragmentDirections.kt$EnableAutoRefillFragmentDirections.Companion$public fun actionEnableRefillToEnableNotification(arEnabled: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:EnableAutoRefillFragmentDirections.kt$EnableAutoRefillFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:EnableAutoRefillScreen.kt$@Composable fun EnableAutoRefillScreen( onActionClick: (Boolean) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationFragmentArgs.kt$EnableNotificationFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationFragmentArgs.kt$EnableNotificationFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): EnableNotificationFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationFragmentArgs.kt$EnableNotificationFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EnableNotificationFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationFragmentDirections.kt$EnableNotificationFragmentDirections.Companion$public fun actionEnableNotificationToDashboardFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationFragmentDirections.kt$EnableNotificationFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationScreen.kt$@Composable fun ActionButtons( primaryButtonEnabled: Boolean, primaryButtonText: String, onPrimaryButtonClick: () -> Unit, secondaryButtonText: String, onSecondaryButtonClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationScreen.kt$@Composable fun EnableNotificationScreen( uiState: State&lt;EnableNotificationData>, isAREnabled: Boolean, onActionClick: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:EnableNotificationScreen.kt$@Composable fun NotificationActionRow(title: String, text: String, inputState: SwitchInputState)</ID>
    <ID>UndocumentedPublicFunction:EnrollmentData.kt$fun Wallet.getEnrollmentDataFromWalletResponse()</ID>
    <ID>UndocumentedPublicFunction:EnvironmentConfiguration.kt$EnvironmentConfiguration$@JvmStatic fun getEnvironment(name: String): Environment?</ID>
    <ID>UndocumentedPublicFunction:EnvironmentConfiguration.kt$EnvironmentConfiguration$fun getPCHAppEnvironment(environmentName: String): PCHAppEnvironment</ID>
    <ID>UndocumentedPublicFunction:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): EnvironmentNavGraphArgs</ID>
    <ID>UndocumentedPublicFunction:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EnvironmentNavGraphArgs</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$@Composable @Preview fun EnvironmentSwitcherPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$@Composable fun EnvironmentSwitcherContent( environmentNames: List&lt;String>, environmentViewModel: EnvironmentViewModel = viewModel() )</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$@Composable fun LabelAndDropDown( label: String, items: List&lt;String>, onItemClick: (index: Int) -> Unit = {}, selectedIndex: Int = 0 )</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$@Composable fun LabelAndEditText(label: String, value: String, onValueChange: () -> Unit = {})</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$fun updateEnvironmentValues(selectedIndex: Int = 1)</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): EnvironmentSwitcherFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): EnvironmentSwitcherFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:EnvironmentUtils.kt$EnvironmentUtils$fun addNewEnvironmentConfiguration(env: Environment)</ID>
    <ID>UndocumentedPublicFunction:EnvironmentUtils.kt$EnvironmentUtils$fun deleteEnvironmentConfiguration(env: Environment)</ID>
    <ID>UndocumentedPublicFunction:EnvironmentUtils.kt$EnvironmentUtils$fun getAllSavedEnvironmentConfigurations(): Collection&lt;Environment></ID>
    <ID>UndocumentedPublicFunction:EpoxyControllerExt.kt$fun EpoxyController.buildHealthJourneyHomeScreenWidget( programSections: List&lt;HealthJourneyItemsSection>? = null, navController: NavController?, analyticsTracker: AnalyticsTracker, spacingAttrRes: SpacingAttrRes = SpacingAttrRes() )</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.actionBanner(modelInitializer: ActionBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.actionButton(modelInitializer: ActionButtonModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.actionRow(modelInitializer: ActionRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.agentTyping(modelInitializer: AgentTypingModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.appVersionFooter(modelInitializer: AppVersionFooterModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.assessmentIntro(modelInitializer: AssessmentIntroModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.assetBanner(modelInitializer: AssetBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.assetErrorBanner(modelInitializer: AssetErrorBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.basicBanner(modelInitializer: BasicBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.basicIconBanner(modelInitializer: BasicIconBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.benefitSticker(modelInitializer: BenefitStickerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.brandedPointsBanner(modelInitializer: BrandedPointsBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.button(modelInitializer: ButtonModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.buttonRow(modelInitializer: ButtonRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.captionedImageView(modelInitializer: CaptionedImageViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.card(modelInitializer: CardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.categorizedActionRowsList(modelInitializer: CategorizedActionRowsListModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.centeredBanner(modelInitializer: CenteredBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.chatBubbleBanner(modelInitializer: ChatBubbleBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.chatInput(modelInitializer: ChatInputModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.chatMessage(modelInitializer: ChatMessageModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.checkboxInputRow(modelInitializer: CheckboxInputRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.cobrandingBanner(modelInitializer: CobrandingBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.consentScreen(modelInitializer: ConsentScreenModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.contentConfirmDialog(modelInitializer: ContentConfirmDialogModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.contentProviderInfo(modelInitializer: ContentProviderInfoModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.conversationCard(modelInitializer: ConversationCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.covidOnboardingSlide(modelInitializer: CovidOnboardingSlideModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.currentGoalCard(modelInitializer: CurrentGoalCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dateInputRow(modelInitializer: DateInputRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dateQuestion(modelInitializer: DateQuestionModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dependentInviteStatusWidget(modelInitializer: DependentInviteStatusWidgetModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.detailRow(modelInitializer: DetailRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.detailView(modelInitializer: DetailViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.detailedProgressCard(modelInitializer: DetailedProgressCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dropDownInputRow(modelInitializer: DropDownInputRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dropDownQuestion(modelInitializer: DropDownQuestionModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dualColumnRow(modelInitializer: DualColumnRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.dualTableRow(modelInitializer: DualTableRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.editableAvatarHeader(modelInitializer: EditableAvatarHeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.editorialRow(modelInitializer: EditorialRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.emptyStateBanner(modelInitializer: EmptyStateBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.epoxyHealthProgramsCarousel(modelInitializer: EpoxyHealthProgramsCarouselModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.epoxyHealthProgramsCarousels(modelInitializer: EpoxyHealthProgramsCarouselsModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.epoxyTextView(modelInitializer: EpoxyTextViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.errorBanner(modelInitializer: ErrorBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.expandableRow(modelInitializer: ExpandableRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.expandableStatusRow(modelInitializer: ExpandableStatusRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.expandableTextView(modelInitializer: ExpandableTextViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.feedEmptyNotification(modelInitializer: FeedEmptyNotificationModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.feedNotification(modelInitializer: FeedNotificationModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.feedbackView(modelInitializer: FeedbackViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.fullInformationalBanner(modelInitializer: FullInformationalBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.genericEmptyState(modelInitializer: GenericEmptyStateModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.genericPagesWithTabs(modelInitializer: GenericPagesWithTabsModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.genesisCarousel(modelInitializer: GenesisCarouselModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.genesisDivider(modelInitializer: GenesisDividerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.genesisSwitch(modelInitializer: GenesisSwitchModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.goalDetails(modelInitializer: GoalDetailsModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.header(modelInitializer: HeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.healthProfileEmptyState(modelInitializer: HealthProfileEmptyStateModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.homeHealthJourneyGroupedWidget(modelInitializer: HomeHealthJourneyGroupedWidgetModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.iconFooter(modelInitializer: IconFooterModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.imagePager(modelInitializer: ImagePagerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.importantBanner(modelInitializer: ImportantBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.informationalBanner(modelInitializer: InformationalBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.informationalSlide(modelInitializer: InformationalSlideModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.insightRowView(modelInitializer: InsightRowViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.insightsBanner(modelInitializer: InsightsBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.itemRow(modelInitializer: ItemRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.leagueCreditCard(modelInitializer: LeagueCreditCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.linkButton(modelInitializer: LinkButtonModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.liveBalance(modelInitializer: LiveBalanceModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.liveBalanceNetworkWidget(modelInitializer: LiveBalanceNetworkWidgetModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.liveBalancePage(modelInitializer: LiveBalancePageModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.loadingSpinner(modelInitializer: LoadingSpinnerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.loadingStateProgressBar(modelInitializer: LoadingStateProgressBarModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.logoCtaHeader(modelInitializer: LogoCtaHeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.marketplaceProductCard(modelInitializer: MarketplaceProductCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.multipleSelectionInputRow(modelInitializer: MultipleSelectionInputRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.multipleSelectionQuestion(modelInitializer: MultipleSelectionQuestionModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.normalBanner(modelInitializer: NormalBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.normalImageBanner(modelInitializer: NormalImageBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.noticeBanner(modelInitializer: NoticeBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.pageHeader(modelInitializer: PageHeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.phoneNumberInputRow(modelInitializer: PhoneNumberInputRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.pillButton(modelInitializer: PillButtonModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.progressCard(modelInitializer: ProgressCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.progressHeader(modelInitializer: ProgressHeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.progressRow(modelInitializer: ProgressRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.quickActionButton(modelInitializer: QuickActionButtonModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.rewardBanner(modelInitializer: RewardBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.richText(modelInitializer: RichTextModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.selectionRow(modelInitializer: SelectionRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.simpleAvatarHeader(modelInitializer: SimpleAvatarHeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.simpleCard(modelInitializer: SimpleCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.stackSelectQuestion(modelInitializer: StackSelectQuestionModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.stackedActionBanner(modelInitializer: StackedActionBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.statusBanner(modelInitializer: StatusBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.statusButtonActionRow(modelInitializer: StatusButtonActionRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.statusPageHeader(modelInitializer: StatusPageHeaderModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.systemChatMessage(modelInitializer: SystemChatMessageModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.table(modelInitializer: TableModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.tableRow(modelInitializer: TableRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.tagBanner(modelInitializer: TagBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.textInputRow(modelInitializer: TextInputRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.textOnlyCard(modelInitializer: TextOnlyCardModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.textQuestion(modelInitializer: TextQuestionModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.topicBanner(modelInitializer: TopicBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.transactionRow(modelInitializer: TransactionRowModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.urgentBanner(modelInitializer: UrgentBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.valueQuestion(modelInitializer: ValueQuestionModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.walletCardItemView(modelInitializer: WalletCardItemViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.walletCardView(modelInitializer: WalletCardViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyModelViewProcessorKotlinExtensions.kt$public inline fun ModelCollector.warningBanner(modelInitializer: WarningBannerModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyProcessorKotlinExtensions.kt$public inline fun ModelCollector.colorView(modelInitializer: ColorViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyProcessorKotlinExtensions.kt$public inline fun ModelCollector.mainNavigationHeaderView(modelInitializer: MainNavigationHeaderViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyProcessorKotlinExtensions.kt$public inline fun ModelCollector.mainNavigationView(modelInitializer: MainNavigationViewModelBuilder.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setBackgroundColorFromAttr(@AttrRes colorAttr: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setBackgroundResource(drawableRes: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setEpoxyGravity(gravity: Int = Gravity.TOP or Gravity.START)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setEpoxyTextAlignment(textAlignment: Int = View.TEXT_ALIGNMENT_TEXT_START)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setPaddingRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setTextAppearanceFromAttr(@AttrRes attrRes: Int = R.attr.typography_body1)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun setTextColorAttr(@AttrRes color: Int = R.attr.color_on_surface_text_primary)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @ModelProp fun useLinkMovementMethod(isEnabled: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:EpoxyTextView.kt$EpoxyTextView$@JvmOverloads @TextProp fun setEpoxyText(text: CharSequence? = "")</ID>
    <ID>UndocumentedPublicFunction:ErrorBanner.kt$ErrorBanner$@JvmOverloads @CallbackProp fun setActionButtonOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ErrorBanner.kt$ErrorBanner$@JvmOverloads @TextProp fun setActionButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ErrorBanner.kt$ErrorBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ErrorBanner.kt$ErrorBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ErrorBanner.kt$ErrorBanner$@ModelProp fun setActionButtonBackground(@AttrRes pageBackground: Int)</ID>
    <ID>UndocumentedPublicFunction:ErrorBanner.kt$ErrorBanner$@ModelProp fun setBackground(@AttrRes pageBackground: Int)</ID>
    <ID>UndocumentedPublicFunction:ErrorScreen.kt$@Composable fun ErrorScreen()</ID>
    <ID>UndocumentedPublicFunction:ErrorUtils.kt$ErrorUtils$fun parseError(errorResponse: String): String</ID>
    <ID>UndocumentedPublicFunction:ExpandableRow.kt$ExpandableRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ExpandableRow.kt$ExpandableRow$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:ExpandableRow.kt$ExpandableRow$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$@JvmOverloads @ModelProp fun setCollapsed(isCollapsed: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$@JvmOverloads @ModelProp fun setStatus(status: Status = Status.APPROVED)</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$@JvmOverloads @TextProp fun setSubTitleText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:ExpandableStatusRow.kt$ExpandableStatusRow$fun isCollapsed()</ID>
    <ID>UndocumentedPublicFunction:ExpandableText.kt$@Composable fun ExpandableText( modifier: Modifier = Modifier, text: String, expandText: String, collapsedNumOfLines: Int = 3, bodyTextStyle: TextStyle = GenesisTheme.typography.body2, bodyTextColor: Color = GenesisTheme.colors.onSurfaceTextSubdued, expandTextColor: Color = GenesisTheme.colors.secondaryTextDefault, expandTextStyle: TextStyle = GenesisTheme.typography.subtitle1 )</ID>
    <ID>UndocumentedPublicFunction:ExpandableText.kt$@Preview(name = "Expandable Text", group = "Text") @Composable fun ExpandableTextPreview( @PreviewParameter(ThemeProvider::class) theme: Theme )</ID>
    <ID>UndocumentedPublicFunction:ExpandableTextView.kt$ExpandableTextView$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ExpandableTextView.kt$ExpandableTextView$@JvmOverloads @TextProp fun setExpandActionText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:ExpandableTextView.kt$ExpandableTextView$@JvmOverloads @TextProp fun setText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:FadeAnimation.kt$@Composable fun FadeAnimation( modifier: Modifier = Modifier, animationDuration: Int = 1000, animationDelay: Int = 0, fadeIn: Boolean = true, startAnimating: Boolean = true, content: @Composable () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FadeAnimation.kt$@Preview(name = "Fade In Animation", group = "Animations") @Composable fun FadeInAnimationPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FadeAnimation.kt$@Preview(name = "Fade Out Animation", group = "Animations") @Composable fun FadeOutAnimationPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FadingText.kt$@Composable fun FadingText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, color: Color = Color.Unspecified, textAlign: TextAlign = TextAlign.Start, animationDuration: Int = 1000 )</ID>
    <ID>UndocumentedPublicFunction:FadingText.kt$@Composable fun VerticalFadingText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, color: Color = Color.Unspecified, textAlign: TextAlign = TextAlign.Start, animationDuration: Int = 1000, distance: Float = 30f )</ID>
    <ID>UndocumentedPublicFunction:FadingText.kt$@Preview(name = "FadingText Animation", group = "Animations") @Composable fun FadingTextPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FadingText.kt$@Preview(name = "Vertical FadingText Animation", group = "Animations") @Composable fun VerticalFadingTextPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FakeUserInfoUseCase.kt$FakeUserInfoUseCase$operator fun invoke(): Flow&lt;Outcome&lt;UserInfo>></ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable @Preview fun FeatureFlagBooleanRemoteOverridePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable @Preview fun FeatureFlagBooleanRemotePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable @Preview fun FeatureFlagLongPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable @Preview fun FeatureFlagStringPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun EditBooleanFeatureFlag( featureFlag: FeatureFlagWithValueState&lt;Boolean>, onSaveBoolean: (Boolean) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun EditFieldFeatureFlag( featureFlag: FeatureFlagWithValueState&lt;*>, overrideValue: String, isNewValueValid: Boolean, onSaveField: (String) -> Unit, onOverrideValueChange: (String) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun FeatureFlagDetailContent( featureFlag: FeatureFlagWithValueState&lt;*>, isNewValueValid: Boolean, onSaveBoolean: (Boolean) -> Unit, onSaveField: (String) -> Unit, onClearOverride: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun LabelAndValue(label: String, value: String)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun defaultLabel(isRemote: Boolean)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun getFlagTypeDescription(flag: FeatureFlag&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragment.kt$@Composable fun getKeyboardType(flag: FeatureFlag&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): FeatureFlagDetailFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): FeatureFlagDetailFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel$fun clearOverride()</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel$fun fetchFeatureFlag(id: String)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel$fun setValue(value: Boolean)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagDetailViewModel.kt$FeatureFlagDetailViewModel$fun setValue(value: String)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsFragment.kt$@Composable @Preview fun EmptyFeatureFlagsPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsFragment.kt$@Composable @Preview fun FeatureFlagsPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsFragment.kt$@Composable fun FeatureFlagsContent( featureFlags: List&lt;FeatureFlagWithValueState&lt;*>>, onFeatureFlagClick: (FeatureFlagWithValueState&lt;*>) -> Unit, onClearAllOverrides: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsFragmentDirections.kt$FeatureFlagsFragmentDirections.Companion$public fun navigateToFeatureFlagDetailFragment(featureFlagId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsRepository.kt$FeatureFlagsRepository$// Uses reflection to pull out all the feature flags from the container objects // We could write an annotation processor to do this nicely, but I'm not sure it's worth // the effort fun addFeatureFlagContainers(vararg featureFlagsContainers: FeatureFlags)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsRepository.kt$FeatureFlagsRepository$fun &lt;T> getValue(flag: FeatureFlag&lt;T>): T</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsRepository.kt$FeatureFlagsRepository$fun clearAllLocalValues()</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsRepository.kt$FeatureFlagsRepository$fun clearLocalValue(flag: FeatureFlag&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsViewModel.kt$FeatureFlagsViewModel$fun clearAllOverrides()</ID>
    <ID>UndocumentedPublicFunction:FeatureFlagsViewModel.kt$FeatureFlagsViewModel$fun fetchFeatureFlags()</ID>
    <ID>UndocumentedPublicFunction:FeatureModuleSettings.kt$fun applyFeatureModuleSettings(context: Context)</ID>
    <ID>UndocumentedPublicFunction:FeatureModuleSettings.kt$fun resetFeatureModuleSettings(context: Context)</ID>
    <ID>UndocumentedPublicFunction:FeedEmptyNotification.kt$FeedEmptyNotification$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:FeedEmptyNotification.kt$FeedEmptyNotification$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @CallbackProp fun setOnRemoveClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @CallbackProp fun setOnViewAllClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FeedNotification.kt$FeedNotification$@JvmOverloads @TextProp fun setViewAllText(text: CharSequence = context.getString(R.string.genesis_view_all))</ID>
    <ID>UndocumentedPublicFunction:FeedbackView.kt$FeedbackView$@JvmOverloads @CallbackProp fun setRatingsOnClick(onRatingChosenListener: ((rating: Int) -> Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:FeedbackView.kt$FeedbackView$@JvmOverloads @ModelProp fun setBackground(@AttrRes pageBackground: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:FeedbackView.kt$FeedbackView$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:FeedbackView.kt$FeedbackView$@JvmOverloads @TextProp fun setDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FeedbackView.kt$FeedbackView$@JvmOverloads @TextProp fun setTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FetchHasLinkedMapleUserUseCase.kt$FetchHasLinkedMapleUserUseCase$operator fun invoke(): Flow&lt;Outcome&lt;Boolean>></ID>
    <ID>UndocumentedPublicFunction:FetchPharmacyVerificationQuestionUseCase.kt$FetchPharmacyVerificationQuestionUseCase$operator fun invoke(): Flow&lt;Outcome&lt;FetchPharmacyVerificationQuestionModel>></ID>
    <ID>UndocumentedPublicFunction:FetchPharmacyVerificationQuestionUseCase.kt$fun FetchPharmacyVerificationQuestionUseCase.getUpdatedQuestionList( questions: List&lt;VerificationQuestion>, answerMap: SimpleArrayMap&lt;Int, Int> ): List&lt;VerificationQuestion></ID>
    <ID>UndocumentedPublicFunction:FetchPlaceAutocompletePredictionsUseCase.kt$FetchPlaceAutocompletePredictionsUseCase$operator fun invoke( query: String, token: AutocompleteSessionToken ): Flow&lt;Outcome&lt;List&lt;PlaceAutocompletePrediction>?>></ID>
    <ID>UndocumentedPublicFunction:FetchPlaceCoordinatesUseCase.kt$FetchPlaceCoordinatesUseCase$operator fun invoke( placeId: String, token: AutocompleteSessionToken ): Flow&lt;Outcome&lt;Coordinates>></ID>
    <ID>UndocumentedPublicFunction:FetchPrescriptionDetailUseCase.kt$FetchPrescriptionDetailUseCase$operator fun invoke(): Flow&lt;Outcome&lt;PrescriptionDetail>></ID>
    <ID>UndocumentedPublicFunction:FetchUserAddressRowUseCase.kt$FetchUserAddressRowUseCase$operator fun invoke(): Flow&lt;Outcome&lt;AddressRow>></ID>
    <ID>UndocumentedPublicFunction:FetchUserCoordinatesUseCase.kt$FetchUserCoordinatesUseCase$operator fun invoke(): Flow&lt;Outcome&lt;Coordinates>></ID>
    <ID>UndocumentedPublicFunction:FetchUserFullNameUseCase.kt$FetchUserFullNameUseCase$operator fun invoke(): Flow&lt;Outcome&lt;String>></ID>
    <ID>UndocumentedPublicFunction:FetchUserProvinceUseCase.kt$FetchUserProvinceUseCase$operator fun invoke(): Flow&lt;Outcome&lt;Province>></ID>
    <ID>UndocumentedPublicFunction:FetchUserSettingsUseCase.kt$FetchUserSettingsUseCase$operator fun invoke(): Flow&lt;Outcome&lt;UserSettings>></ID>
    <ID>UndocumentedPublicFunction:FileChooserChromeClient.kt$FileChooserChromeClient$fun handleFileChooserData( resultCode: Int, intent: Intent? )</ID>
    <ID>UndocumentedPublicFunction:FileChooserChromeClient.kt$FileChooserChromeClient.Callback$fun handleFileChooserError()</ID>
    <ID>UndocumentedPublicFunction:FileChooserChromeClient.kt$FileChooserChromeClient.Callback$fun openFileChooser(intent: Intent)</ID>
    <ID>UndocumentedPublicFunction:FileUtils.kt$FileUtils$@JvmStatic @JvmOverloads fun createFile(context: Context, filename: String? = null): File</ID>
    <ID>UndocumentedPublicFunction:FileUtils.kt$FileUtils$suspend fun createTempFileFromBitmap( context: Context, bitmap: Bitmap, bitmapFileConfig: BitmapFileConfig )</ID>
    <ID>UndocumentedPublicFunction:FileUtils.kt$FileUtils$suspend fun createTempFileFromBitmapAndGetUri( context: Context, bitmap: Bitmap, bitmapFileConfig: BitmapFileConfig ): Uri</ID>
    <ID>UndocumentedPublicFunction:FilterOptionView.kt$FilterOptionView$fun setChecked(isChecked: Boolean)</ID>
    <ID>UndocumentedPublicFunction:FilterOptionView.kt$FilterOptionView$fun setImage(@DrawableRes drawableRes: Int?)</ID>
    <ID>UndocumentedPublicFunction:FilterOptionView.kt$FilterOptionView$fun setImage(drawable: Drawable?)</ID>
    <ID>UndocumentedPublicFunction:FilterOptionView.kt$FilterOptionView$fun setText(@StringRes stringId: Int)</ID>
    <ID>UndocumentedPublicFunction:FilterOptionView.kt$FilterOptionView$fun setText(text: String?)</ID>
    <ID>UndocumentedPublicFunction:FindLocationWithRxAndStoreNumberFragmentDirections.kt$FindLocationWithRxAndStoreNumberFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:FindLocationWithRxAndStoreNumberScreen.kt$@Composable fun FindLocationWithRxAndStoreNumberScreen( findPharmacyFormState: FindLocationWithRxAndStoreData, onBackClick: () -> Unit, onContinueClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreNumberViewModel$fun createFindLocationForm()</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyFragmentArgs.kt$FindPharmacyFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyFragmentArgs.kt$FindPharmacyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): FindPharmacyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyFragmentArgs.kt$FindPharmacyFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): FindPharmacyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyFragmentDirections.kt$FindPharmacyFragmentDirections.Companion$public fun actionFindPharmacyFragmentToSelectPharmacyFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyFragmentDirections.kt$FindPharmacyFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyScreen.kt$@Composable fun CurrentLocationClickableComponent(useMyCurrentLocationClick: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyScreen.kt$@Composable fun FindPharmacyScreen( banner: Banner, useMyCurrentLocationClick: () -> Unit, onFindYourPharmacyClick: (banner: Banner) -> Unit, onBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyScreen.kt$@Composable fun SearchField(searchedText: (String) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:FindPharmacyScreen.kt$@Preview @Composable fun PreviewFindLocationScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:FlowExtension.kt$// Override function to default to the same type if needed inline fun &lt;reified T> Flow&lt;Outcome&lt;T>>.asStateIn( scope: CoroutineScope ): StateFlow&lt;State&lt;T>></ID>
    <ID>UndocumentedPublicFunction:FlowExtension.kt$@Suppress("UNCHECKED_CAST") fun &lt;T1, T2, T3, R> combineWithDefaults( flow1: Flow&lt;T1>, flow2: Flow&lt;T2>, flow3: Flow&lt;T3>, transform: suspend (T1?, T2?, T3?) -> R ): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:FlowExtension.kt$@Suppress("UNCHECKED_CAST") fun &lt;T1, T2, T3, T4, R> combineWithDefaults( flow1: Flow&lt;T1>, flow2: Flow&lt;T2>, flow3: Flow&lt;T3>, flow4: Flow&lt;T4>, transform: suspend (T1?, T2?, T3?, T4?) -> R ): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:FlowExtension.kt$fun &lt;T1, T2, T3, R> combineSuccess( flow1: Flow&lt;Outcome&lt;T1>>, flow2: Flow&lt;Outcome&lt;T2>>, flow3: Flow&lt;Outcome&lt;T3>>, transform: suspend (T1, T2, T3) -> R, ): Flow&lt;Outcome&lt;R>></ID>
    <ID>UndocumentedPublicFunction:FlowExtension.kt$fun &lt;T> Flow&lt;Outcome&lt;T>>.foldNull(): Flow&lt;T?></ID>
    <ID>UndocumentedPublicFunction:FormDao.kt$FormDao$@Insert(onConflict = REPLACE) fun insertAll(forms: List&lt;FormTable>)</ID>
    <ID>UndocumentedPublicFunction:FormDao.kt$FormDao$@Query("SELECT * FROM form WHERE id = :id LIMIT 1") fun getFormWithId(id: String): FormTable?</ID>
    <ID>UndocumentedPublicFunction:FormDao.kt$FormDao$@Query("SELECT * FROM form") fun getTable(): List&lt;FormTable>?</ID>
    <ID>UndocumentedPublicFunction:FragmentExtension.kt$fun Fragment.setStatusBarColorAttr( @AttrRes attrResId: Int, isDarkColor: Boolean, @AttrRes bannerAttrResId: Int = R.attr.color_background_tab_selected, isBannerDarkColor: Boolean = true )</ID>
    <ID>UndocumentedPublicFunction:FragmentExtension.kt$fun Fragment.setStatusBarColorAttr(@AttrRes attrResId: Int, isDarkColor: Boolean)</ID>
    <ID>UndocumentedPublicFunction:FragmentExtension.kt$fun Fragment.setStatusBarColorRes(@ColorRes colorResId: Int, isDarkColor: Boolean)</ID>
    <ID>UndocumentedPublicFunction:FragmentManagerExtension.kt$fun FragmentManager.presentModal(parent: View, fragment: Fragment, addToBackStack: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:FragmentManagerExtension.kt$fun FragmentManager.presentModal(parentId: Int, fragment: Fragment, addToBackStack: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:FragmentManagerExtension.kt$fun FragmentManager.pushFragment(parent: View, fragment: Fragment, addToBackStack: Boolean? = null)</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@JvmOverloads @ModelProp fun setMarginRes(marginAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@JvmOverloads @TextProp fun setActionTitle(actionTitle: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@JvmOverloads @TextProp fun setCaptionText(caption: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@JvmOverloads @TextProp fun setText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:FullInformationalBanner.kt$FullInformationalBanner$fun setupViews(context: Context, attrsSet: AttributeSet? = null)</ID>
    <ID>UndocumentedPublicFunction:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): FullScreenContentFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): FullScreenContentFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:FullScreenContentFragmentDirections.kt$FullScreenContentFragmentDirections.Companion$public fun actionFirstGoalTomorrowFragmentToHealthJourneyFragment(tabIndex: Int = 0, healthJourneyEntryPoint: String = "health_journey"): NavDirections</ID>
    <ID>UndocumentedPublicFunction:FusionColors.kt$GenesisColors$fun update(other: GenesisColors)</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getCardName()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getCarrierCode()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getFinalDeactivationDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getHtmlBack()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getHtmlFront()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getIssueNumber()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getMemberNumber()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getPlanName()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getPolicyEndDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getPolicyNumber()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getPolicyStartDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getRxBin()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getRxCarrier()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getRxGroup()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getRxId()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getRxPcn()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getViewType()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun getWalletActionMessage(context: Context): String?</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun isActive()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun isPast()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun isPending()</ID>
    <ID>UndocumentedPublicFunction:GenericCard.kt$GenericCard$fun setHtmlFront(html: String)</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@JvmOverloads @ModelProp fun setDescriptionTextColor(color: Int = DEFAULT_DESCRIPTION_COLOR)</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:GenericEmptyState.kt$GenericEmptyState$fun setupViews(attrSet: AttributeSet? = null)</ID>
    <ID>UndocumentedPublicFunction:GenericErrorComposable.kt$@Composable fun GenericErrorDialog(errorMessage: String)</ID>
    <ID>UndocumentedPublicFunction:GenericErrorComposable.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun GenericErrorComposable( modifier: Modifier = Modifier, state: Failed&lt;*>? = null, retryClicked: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenericPagesWithTabs.kt$GenericPagesWithTabs$@JvmOverloads @CallbackProp fun setTabSelectedListener(tabSelectedCallback: ((TabLayout.Tab?) -> Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:GenericPagesWithTabs.kt$GenericPagesWithTabs$@ModelProp fun setData(data: List&lt;PageWithTab>)</ID>
    <ID>UndocumentedPublicFunction:Genesis.kt$Genesis$fun initialize( imageViewLoader: GenesisImageViewLoader )</ID>
    <ID>UndocumentedPublicFunction:GenesisBordedListTile.kt$@Composable fun EmptyBorderTile( modifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), content: @Composable RowScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenesisBordedListTile.kt$@Composable fun GenesisBorderedListTile( modifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), headerText: String, bodyText: String, )</ID>
    <ID>UndocumentedPublicFunction:GenesisBordedListTile.kt$@Composable fun GenesisBorderedListTile( modifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), iconPainterRes: Painter, iconSize: Dp = 48.dp, headerText: String, bodyText: String, )</ID>
    <ID>UndocumentedPublicFunction:GenesisBordedListTile.kt$@Composable fun GenesisBorderedListTile( modifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), iconPainterRes: Painter, iconSize: Dp = 48.dp, labelText: String, headerText: String, bodyText: String, )</ID>
    <ID>UndocumentedPublicFunction:GenesisBordedListTile.kt$@Composable fun GenesisBorderedListTile( modifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), iconPainterRes: Painter, iconSize: Dp = 48.dp, labelText: String, headerText: String, bodyText: String, radio: @Composable RowScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenesisBordedListTile.kt$@Preview( name = "Genesis Bordered Radio Field", group = "Radio Input" ) @Composable fun GenesisBorderedListTilePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisBorderedRadioField.kt$@Composable fun GenesisBorderedRadioField( modifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), text: String, content: (@Composable () -> Unit)? = null )</ID>
    <ID>UndocumentedPublicFunction:GenesisBorderedRadioField.kt$@Preview( name = "Genesis Bordered Radio Field", group = "Radio Input", showBackground = true, widthDp = 350 ) @Composable fun GenesisBorderedRadioFieldPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun GenesisButton( modifier: Modifier = Modifier, buttonStyle: ButtonStyle = ButtonStyle.Primary, isLoading: Boolean = false, enabled: Boolean = true, onClick: () -> Unit, content: @Composable RowScope.() -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun GenesisButton( modifier: Modifier = Modifier, text: String = "", icon: @Composable() (BoxScope.() -> Unit)? = null, buttonStyle: ButtonStyle = ButtonStyle.Primary, isLoading: Boolean = false, enabled: Boolean = true, onClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun dangerButtonColors( isLoading: Boolean, backgroundColor: Color = GenesisTheme.colors.backgroundButtonDanger, contentColor: Color = GenesisTheme.colors.textButtonDanger, disabledBackgroundColor: Color = GenesisTheme.colors.backgroundButtonDisabled, disabledContentColor: Color = GenesisTheme.colors.textButtonDisabled ): ButtonColors</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun dangerMinimalButtonColors( isLoading: Boolean, backgroundColor: Color = GenesisTheme.colors.backgroundButtonSubtle, contentColor: Color = GenesisTheme.colors.textDanger, disabledBackgroundColor: Color = GenesisTheme.colors.backgroundButtonDisabled, disabledContentColor: Color = GenesisTheme.colors.textButtonDisabled ): ButtonColors</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun minimalButtonColors( isLoading: Boolean, backgroundColor: Color = GenesisTheme.colors.backgroundButtonSubtle, contentColor: Color = GenesisTheme.colors.textButtonSubtle, disabledBackgroundColor: Color = GenesisTheme.colors.backgroundButtonDisabled, disabledContentColor: Color = GenesisTheme.colors.textButtonDisabled ): ButtonColors</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun minimalSecondaryButtonColors( isLoading: Boolean, backgroundColor: Color = GenesisTheme.colors.backgroundButtonSubtle, contentColor: Color = GenesisTheme.colors.textButtonSubtleSecondary, disabledBackgroundColor: Color = GenesisTheme.colors.backgroundButtonDisabled, disabledContentColor: Color = GenesisTheme.colors.textButtonDisabled ): ButtonColors</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun primaryButtonColors( isLoading: Boolean, backgroundColor: Color = GenesisTheme.colors.backgroundButtonPrimary, contentColor: Color = GenesisTheme.colors.textButtonPrimary, disabledBackgroundColor: Color = GenesisTheme.colors.backgroundButtonDisabled, disabledContentColor: Color = GenesisTheme.colors.textButtonDisabled ): ButtonColors</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun secondaryBorder()</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Composable fun secondaryButtonColors( isLoading: Boolean, backgroundColor: Color = GenesisTheme.colors.backgroundButtonSecondary, contentColor: Color = GenesisTheme.colors.textButtonSecondary, disabledBackgroundColor: Color = GenesisTheme.colors.backgroundButtonDisabled, disabledContentColor: Color = GenesisTheme.colors.textButtonDisabled ): ButtonColors</ID>
    <ID>UndocumentedPublicFunction:GenesisButton.kt$@Preview(name = "Genesis Button", group = "Button") @Composable fun GenesisButtonPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisCalendarView.kt$@Composable @Preview(group = "Calendar", name = "Multi Select Calendar") fun MultiSelectGenesisCalendarViewPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisCalendarView.kt$@Composable @Preview(group = "Calendar", name = "Single Select Calendar") fun SingleSelectGenesisCalendarViewPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisCalendarView.kt$@Composable fun CalendarColumnLabel( text: String, )</ID>
    <ID>UndocumentedPublicFunction:GenesisCalendarView.kt$@Composable fun CalendarMonthView( modifier: Modifier = Modifier, year: Int, month: Int, minWeeks: Int = MAX_WEEKS_IN_MONTH, isSelected: (Date) -> Boolean, isEnabled: (Date) -> Boolean, dateSelected: (Date, Boolean) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:GenesisCarousel.kt$GenesisCarousel$@ModelProp fun setShareViewPoolAcrossContext(shareViewPool: Boolean)</ID>
    <ID>UndocumentedPublicFunction:GenesisCarousel.kt$GenesisCarousel$@ModelProp(group = "padding") fun setPaddingAttr(padding: PaddingAttr)</ID>
    <ID>UndocumentedPublicFunction:GenesisCheckbox.kt$@Preview(name = "Genesis Checkbox", group = "Input") @Composable fun GenesisCheckboxPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisColors.kt$GenesisColors$fun update(other: GenesisColors)</ID>
    <ID>UndocumentedPublicFunction:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet.Builder$fun dismiss()</ID>
    <ID>UndocumentedPublicFunction:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet.Builder$fun modifyCloseButton(image: Int, size: Dp = 48.dp)</ID>
    <ID>UndocumentedPublicFunction:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet.Builder$fun setComposeView(showPrimaryButton: Boolean = true, showCloseButton: Boolean = true, content: @Composable () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:GenesisComposableBottomSheet.kt$GenesisComposableBottomSheet.Builder$fun show(fragmentManager: FragmentManager, tag: String? = null)</ID>
    <ID>UndocumentedPublicFunction:GenesisDateField.kt$@Composable fun GenesisDateField( modifier: Modifier = Modifier, title: String = "", message: String = "", value: Date? = null, onValueChanges: (Date) -> Unit, maxDate: Date? = null, minDate: Date? = null, positiveButtonText: String = "", negativeButtonText: String = "", isError: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:GenesisDateField.kt$@Preview(name = "Date Field", group = "Input") @Composable fun GenesisDateFieldPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisDivider.kt$GenesisDivider$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:GenesisDivider.kt$GenesisDivider$@ModelProp @JvmOverloads fun setColor(@AttrRes background: Int = R.attr.color_surface_background_secondary)</ID>
    <ID>UndocumentedPublicFunction:GenesisDivider.kt$GenesisDivider$@ModelProp @JvmOverloads fun setDividerHeight(@AttrRes res: Int = R.attr.spacing_three_quarters)</ID>
    <ID>UndocumentedPublicFunction:GenesisDropDown.kt$@Preview(name = "Drop Down", group = "Input") @Composable fun GenesisDropDownPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisEmptySectionView.kt$@Composable fun GenesisEmptySectionView( modifier: Modifier = Modifier, sectionHeader: String = "", title: String, description: String, ctaText: String = "", ctaAction: () -> Unit = {}, navigationText: String = "", navigationAction: () -> Unit = {}, showToolTip: Boolean = false, toolTipAction: () -> Unit = {} )</ID>
    <ID>UndocumentedPublicFunction:GenesisEmptySectionView.kt$@Preview(name = "Genesis Empty Section View", group = "Widget") @Composable fun PreviewGenesisEmptySectionView(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisEmptyStateWidget.kt$@Preview(name = "Genesis Empty State Widget", group = "Widget") @Composable fun PreviewGenesisEmptyStateWidget(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisErrorScreen.kt$@Composable fun ErrorStateView( errorTitle: String, image: Painter, retryButtonText: String, onRetry: () -> Unit, onCrossClicked: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:GenesisErrorScreen.kt$@Preview(name = "GenesisErrorView", group = "Widget") @Composable fun ErrorScreenPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisGridView.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun &lt;T> GenesisGridView( modifier: Modifier = Modifier, cols: Int = 3, verticalSpacing: Dp = GenesisTheme.spacing.one, items: List&lt;T>, contentPaddingValues: PaddingValues = PaddingValues(0.dp), contentView: @Composable RowScope.(T, Int) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenesisGridView.kt$@Preview(name = "GenesisGridView") @Composable fun GridViewSample(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisHorizontalPager.kt$@Preview(name = "Genesis Horizontal Pager", group = "Pager") @Composable fun GenesisHorizontalPagerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageContent(imageContentId: String, imageView: ImageView)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageContentNoCrop(imageContentId: String, imageView: ImageView)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageContentWithAvatarCrop(imageContentId: String, imageView: ImageView)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageFile(file: File, imageView: ImageView, skipCache: Boolean)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageFile(path: String, imageView: ImageView, skipCache: Boolean)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImagePartContent(imageContentId: String, imageView: ImageView)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImagePartUrl(url: String, imageView: ImageView)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageResourceAsGif(@RawRes @DrawableRes resourceId: Int, imageView: ImageView)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Deprecated(message = "Use ImageViewExtension instead") fun loadImageUrl(url: String, imageView: ImageView, imageScaleType: ImageScaleType)</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Throws(IOException::class) fun downloadImageContent(imageContentId: String): Bitmap</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$@Throws(IOException::class) fun downloadImageUrl(url: String): Bitmap</ID>
    <ID>UndocumentedPublicFunction:GenesisImageViewLoader.kt$GenesisImageViewLoader$fun clearCaches()</ID>
    <ID>UndocumentedPublicFunction:GenesisIndeterminateProgressBar.kt$@Composable fun GenesisCenteredIntermittentProgressBar( modifier: Modifier = Modifier, color: Color = GenesisTheme.colors.interactiveActionPrimary )</ID>
    <ID>UndocumentedPublicFunction:GenesisIndeterminateProgressBar.kt$@Composable fun GenesisIntermittentProgressBar( modifier: Modifier = Modifier, color: Color = GenesisTheme.colors.interactiveActionPrimary )</ID>
    <ID>UndocumentedPublicFunction:GenesisIndeterminateProgressBar.kt$@Preview( name = "Indeterminate Circular Progress Bar", group = "Progress Bars" ) @Composable fun GenesisIntermittentProgressBarPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisInformationalSlide.kt$@Composable fun InformationalSlide( modifier: Modifier, image: Painter, titleText: AnnotatedString, subtitleText: AnnotatedString, descriptionText: AnnotatedString, linkText: AnnotatedString, linkTextVisible: Boolean = true, imageContentDescription: String, onLinkTextClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenesisInformationalSlide.kt$@Preview @Composable fun PreviewInformationalSlide(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisInputDecorations.kt$@Composable fun decorateError( colors: GenesisTextFieldColors = genesisTextFieldColors(), error: @Composable() (() -> Unit)?, ): @Composable (() -> Unit)?</ID>
    <ID>UndocumentedPublicFunction:GenesisInputDecorations.kt$@Composable fun decorateLabel( colors: GenesisTextFieldColors = genesisTextFieldColors(), label: @Composable() (() -> Unit)?, ): @Composable (() -> Unit)?</ID>
    <ID>UndocumentedPublicFunction:GenesisNoScrollGridView.kt$@Composable fun &lt;T> GenesisNoScrollGridView( modifier: Modifier = Modifier, numberOfColumns: Int = 3, items: List&lt;T>, verticalSpacing: Dp = GenesisTheme.spacing.none, content: @Composable (dataModel: T) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GenesisNoScrollGridView.kt$@Preview(name = "GenesisNoScrollGridView") @Composable fun NoScrollGridViewSample(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisProgressBar.kt$@Composable fun GenesisProgressBar( modifier: Modifier = Modifier, height: Dp = 6.dp, shape: Shape = GenesisTheme.shapes.pillRoundedCorner, progressBarBackgroundColor: Color = GenesisTheme.colors.interactiveBackgroundDisable, progressBarColor: Color = GenesisTheme.colors.fillMultiProgressBarPrimary, // todo: no corresponding new token progress: Float )</ID>
    <ID>UndocumentedPublicFunction:GenesisProgressBar.kt$@Preview(name = "Progress Bar", group = "Progress") @Composable fun GenesisProgressBarPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisProgressBar.kt$GenesisProgressBar$fun setProgress( progress: Int, max: Int = binding.androidProgressBar.max, @ProgressTextType progressTextType: Int = PROGRESS_TEXT_TYPE_NONE, unit: String = "" )</ID>
    <ID>UndocumentedPublicFunction:GenesisProgressBar.kt$GenesisProgressBar$fun setProgress(progressConfig: ProgressConfig)</ID>
    <ID>UndocumentedPublicFunction:GenesisProgressBar.kt$GenesisProgressBar$fun setStyle(style: Style = Style.THIN_PRIMARY)</ID>
    <ID>UndocumentedPublicFunction:GenesisProgressBar.kt$GenesisProgressBar.ProgressConfig$fun Context.units()</ID>
    <ID>UndocumentedPublicFunction:GenesisRadioButton.kt$@Preview(name = "Genesis Radio Button", group = "Radio Input") @Composable fun GenesisRadioButtonPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisRadioField.kt$@Composable fun GenesisRadioField( modifier: Modifier = Modifier, surfaceModifier: Modifier = Modifier, selected: Boolean, onClick: (() -> Unit), text: String, textStyle: TextStyle = GenesisTheme.typography.body1, isError: Boolean = false, content: (@Composable () -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:GenesisRadioField.kt$@Preview( name = "Genesis Radio Field", group = "Radio Input", showBackground = true, widthDp = 350 ) @Composable fun GenesisRadioFieldPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisShapes.kt$GenesisShapes$fun toMaterialShapes()</ID>
    <ID>UndocumentedPublicFunction:GenesisShapes.kt$fun RoundedCornerShape.squareEnd(): RoundedCornerShape</ID>
    <ID>UndocumentedPublicFunction:GenesisShapes.kt$fun RoundedCornerShape.squareStart(): RoundedCornerShape</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun ColumnScope.FillingSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun FiveHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun FiveVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun FourHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun FourVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun HalfHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun HalfVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun OneAndHalfHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun OneAndHalfVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun OneHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun OneVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun QuarterHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun RowScope.FillingSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun ThreeHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun ThreeQuartersHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun ThreeQuartersVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun ThreeVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun TwoAndHalfHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun TwoAndHalfVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun TwoHorizontalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisSpacing.kt$@Composable fun TwoVerticalSpacer()</ID>
    <ID>UndocumentedPublicFunction:GenesisStaticDropdown.kt$@Composable fun GenesisStaticDropdown( modifier: Modifier = Modifier, staticContent: GenesisStaticDropdownContent, shape: Shape = GenesisTheme.shapes.inputField, onStaticDropdownClick: () -> Unit, onTooltipClick: (() -> Unit)? = null, enabled: Boolean = true, isError: Boolean = false, colors: GenesisTextFieldColors = genesisTextFieldColors(), interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, borderStroke: BorderStroke = getBorderStroke(colors, enabled, isError, interactionSource).value )</ID>
    <ID>UndocumentedPublicFunction:GenesisStaticDropdown.kt$@Preview(name = "Static TextField", group = "Input") @Composable fun GenesisStaticDropdownPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisStrokes.kt$GenesisStrokes$fun thickBorderStroke(color: Color)</ID>
    <ID>UndocumentedPublicFunction:GenesisStrokes.kt$GenesisStrokes$fun thinBorderStroke(color: Color)</ID>
    <ID>UndocumentedPublicFunction:GenesisSwitch.kt$@Composable fun genesisSwitchColors(): SwitchColors</ID>
    <ID>UndocumentedPublicFunction:GenesisSwitch.kt$@Preview(name = "Genesis Switch", group = "Input") @Composable fun GenesisSwithPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisSwitch.kt$GenesisSwitch$@JvmOverloads @ModelProp fun setDrawableStart(@DrawableRes resId: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:GenesisSwitch.kt$GenesisSwitch$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:GenesisSwitch.kt$GenesisSwitch$@ModelProp fun setState(isChecked: Boolean)</ID>
    <ID>UndocumentedPublicFunction:GenesisSwitch.kt$GenesisSwitch$@TextProp fun setSwitchText(text: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:GenesisTagHandler.kt$GenesisTagHandler.Companion$fun String.replaceListTags(): String</ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$@Composable fun genesisTextFieldColors()</ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$@Composable fun getBorderStroke( colors: GenesisTextFieldColors, enabled: Boolean, error: Boolean, interactionSource: MutableInteractionSource, ): State&lt;BorderStroke></ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$@Preview(name = "Text Field", group = "Input") @Composable fun GenesisTextFieldPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$GenesisTextFieldColors$@Composable fun backgroundColor(enabled: Boolean): State&lt;Color></ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$GenesisTextFieldColors$@Composable fun indicatorColor( enabled: Boolean, isError: Boolean, interactionSource: InteractionSource, )</ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$GenesisTextFieldColors$@Composable fun placeholderColor(enabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:GenesisTextField.kt$GenesisTextFieldColors$@Composable fun trailingIconColor(enabled: Boolean, isError: Boolean): State&lt;Color></ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$@Deprecated( message = "@ColorRes colors are deprecated, use @AttrRes colors instead so that the color is theme-able", replaceWith = ReplaceWith("setBackgroundColorAttrRes()") ) fun setBackgroundColorRes(@ColorRes colorRes: Int)</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$@Deprecated( message = "Not needed anymore, now the text is always centered", replaceWith = ReplaceWith("setTitle()") ) // this applies insets to right so that the text is in center if there is is not button on right fun setTitleCenteredWithTextOnly(title: String)</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun disableAddButton()</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun enableAddButton(listener: OnClickListener, buttonText: String? = null)</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun setAsSupportActionBar()</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun setBackgroundColor(@ColorInt color: Int, animate: Boolean)</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun setBackgroundColorAttrRes(@AttrRes colorAttrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun setBarButton(barButton: BarButton?)</ID>
    <ID>UndocumentedPublicFunction:GenesisToolbar.kt$GenesisToolbar$fun setTitle(drawable: Drawable?)</ID>
    <ID>UndocumentedPublicFunction:GenesisTopAppBar.kt$@Composable fun GenesisTopAppBar( title: @Composable () -> Unit, modifier: Modifier = Modifier, isModal: Boolean = false, navigationOnClick: (() -> Unit)? = null, actions: @Composable RowScope.() -> Unit = {}, backgroundColor: Color = GenesisTheme.colors.backgroundPrimary, contentColor: Color = getContentColor(backgroundColor), elevation: Dp = AppBarDefaults.TopAppBarElevation )</ID>
    <ID>UndocumentedPublicFunction:GenesisTopAppBar.kt$@Preview(name = "Top App Bar", group = "App Bar") @Composable fun GenesisTopAppBarPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @ModelProp fun setPointsIndicator(points: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @ModelProp fun setShowPoints(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @ModelProp fun setShowPointsValue(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @ModelProp fun setState(state: State = State.ACTIVE)</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @TextProp fun setDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @TextProp fun setExpandActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @TextProp fun setGoalName(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @TextProp fun setHeading(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @TextProp fun setProgramName(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GoalDetails.kt$GoalDetails$@JvmOverloads @TextProp fun setShortGoalDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:GoalProgress.kt$@Composable @SuppressWarnings("LongMethod") fun MultiStepGoalProgress( currentGoal: Float, animationDuration: Int = 200, onMultiStepEditStateClick: (String, String, Int?, HealthJourneyItemDetail) -> Unit, errorText: String, stepSize: Int = 1, multiStepProgressPlusMinusListener: MultiStepProgressPlusMinusListener, healthJourneyItemDetail: HealthJourneyItemDetail )</ID>
    <ID>UndocumentedPublicFunction:GoalProgress.kt$@SuppressLint("PrivateResource") @SuppressWarnings("ComplexCondition", "LongMethod", "MagicNumber") @Composable fun EditGoalDialog( title: String, goalDescription: String, defaultValue: Int?, onMultiStepEditStateConfirmationClick: (newState: Int?) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:GoogleFitPermissionDialogView.kt$@Composable fun GoogleFitPermissionContent(@DrawableRes drawableRes: Int, @StringRes stringRes: Int)</ID>
    <ID>UndocumentedPublicFunction:GoogleFitPermissionDialogView.kt$@Composable fun GoogleFitPermissionModalContent(onClose: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:GoogleFitPermissionDialogView.kt$@Preview(name = "Google Permission Modal ", showSystemUi = true) @Composable fun PreviewGoogleFitPermissionModal(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:GraphData.kt$GraphData$fun hasReadings(): Boolean</ID>
    <ID>UndocumentedPublicFunction:GraphData.kt$GraphData$fun isLessThan10Values()</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @CallbackProp fun setOnActionClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp @Suppress("DEPRECATION") fun setDescriptionStyle(@DescriptionStyle style: Int = DESCRIPTION_STYLE_BODY2)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp @Suppress("DEPRECATION") fun setHeaderStyle(@HeaderStyle style: Int = HEADER_STYLE_H2)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setActionIconRes(@DrawableRes iconRes: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setDescriptionGravity(gravity: Int = Gravity.START or Gravity.TOP)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setHeaderAcessibility(isHeading: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setHeaderBackgroundColorAttr(@AttrRes colorResId: Int = R.attr.color_background_primary)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setHeaderGravity(gravity: Int = Gravity.START or Gravity.TOP)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp fun setPaddingRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads @TextProp fun setOverline(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@JvmOverloads fun setHeaderColorAttr(@AttrRes colorResId: Int = R.attr.color_text_primary)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:Header.kt$Header$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:HealthJourney.kt$HealthJourney$fun initialize( leagueCommonServices: LeagueCommonServices, drawables: HealthJourneyDrawables = HealthJourneyDrawables(), strings: HealthJourneyStrings = HealthJourneyStrings(), achievementsConfig: AchievementsConfig? = null, isEligibleForPoints: Boolean = true )</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyConfiguration.kt$@Composable fun getHealthJourneyKoin(): Koin</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDay.kt$HealthJourneyDay$fun createActiveChallengesCampaignSections(): List&lt;String>?</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDay.kt$HealthJourneyDay$fun createUpcomingChallengesCampaignSections(): List&lt;UpcomingChallengeSection>?</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDayPagerFragmentArgs.kt$HealthJourneyDayPagerFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDayPagerFragmentArgs.kt$HealthJourneyDayPagerFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyDayPagerFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDayPagerFragmentArgs.kt$HealthJourneyDayPagerFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyDayPagerFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDayPagerFragmentDirections.kt$HealthJourneyDayPagerFragmentDirections.Companion$public fun actionHealthJourneyDayPagerFragmentToHealthJourneyActivityFragment( healthJourneyItemId: String? = null, campaignId: String? = null, activityId: String? = null, campaignType: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyDayPagerFragmentDirections.kt$HealthJourneyDayPagerFragmentDirections.Companion$public fun actionHealthJourneyDayPagerFragmentToHealthJourneySuggestedActivityGroupFragment(group: SuggestedActivityGroup): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentEntryPointToHealthJourneyDayPagerFragment(isEntryPoint: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentEntryPointToHealthJourneyProgramLibraryFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentEntryPointToHealthJourneyProgressEntryFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentToHealthJourneyActivityFragment( healthJourneyItemId: String? = null, campaignId: String? = null, activityId: String? = null, campaignType: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentToHealthJourneyPreviewFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentToHealthJourneySuggestedActivityGroupFragment(group: SuggestedActivityGroup): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentToHealthProgramDetailsFragmentV2(programId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentToHealthProgramLibraryFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyFragmentDirections.kt$HealthJourneyFragmentDirections.Companion$public fun actionHealthJourneyFragmentToHealthProgramsLimitMessageDialog(programEnrollmentLimitModal: ProgramEnrollmentLimitModal): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyItemCompleteBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyItemCompleteBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompleteBottomSheetDialogDirections.kt$HealthJourneyItemCompleteBottomSheetDialogDirections.Companion$public fun actionHealthJourneyItemCompleteBottomSheetDialogPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$fun helpfulTipComplete(helpfulTip: HelpfulTip): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$fun isAutomaticMode(): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$fun isModuleActivity(): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$fun isVerifiableActivity(): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$fun toHealthJourneyItem()</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemExt.kt$fun HealthJourneyItem.getCaption(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyItemFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyItemFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections.Companion$public fun actionHealthJourneyActivityFragmentToHealthJourneyItemCompleteBottomSheetDialog(healthJourneyItemComplete: HealthJourneyItemCompletionScreen, healthJourneyItem: HealthJourneyItem?): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections.Companion$public fun actionHealthJourneyActivityFragmentToHealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog( activityName: String, activityId: String, activityType: String ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections.Companion$public fun actionHealthJourneyActivityFragmentToMultiStepHealthJourneyItemCompletionFragment( steps: CompletionMethod.MultiStep, doneText: String, activityName: String, activityId: String, activityType: String, complete: Boolean ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemFragmentDirections.kt$HealthJourneyItemFragmentDirections.Companion$public fun actionHealthJourneyActivityFragmentToRemoveHealthJourneyItemConfirmationBottomSheetDialog(healthJourneyItem: HealthJourneyItem? = null, healthProgram: HealthProgramDetails? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$fun createCompleteSection(): HealthJourneyItemsSection</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$fun createFotlSection(): HealthJourneyItemsSection</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$fun createHomeSections(): List&lt;HealthJourneyItemsSection></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$fun createMissedSection(): HealthJourneyItemsSection</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$fun createSections(): List&lt;HealthJourneyItemsSection></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$fun programsAvailable(): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyItemsSection.kt$HealthJourneyItemsSection$fun isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyProgressEntryFragmentDirections.kt$HealthJourneyProgressEntryFragmentDirections.Companion$public fun actionHealthJourneyProgressEntryFragmentToHealthProgramDetailsFragmentV2(programId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyProgressEntryFragmentDirections.kt$HealthJourneyProgressEntryFragmentDirections.Companion$public fun actionHealthJourneyProgressEntryFragmentToHealthProgramLibraryFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyProgressEntryFragmentDirections.kt$HealthJourneyProgressEntryFragmentDirections.Companion$public fun actionHealthJourneyProgressEntryFragmentToHealthProgramsLimitMessageDialog(programEnrollmentLimitModal: ProgramEnrollmentLimitModal): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalConfirmationBottomSheetDialogArgs.kt$HealthJourneyRemovalConfirmationBottomSheetDialogArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalConfirmationBottomSheetDialogArgs.kt$HealthJourneyRemovalConfirmationBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyRemovalConfirmationBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalConfirmationBottomSheetDialogArgs.kt$HealthJourneyRemovalConfirmationBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyRemovalConfirmationBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalConfirmationBottomSheetDialogDirections.kt$HealthJourneyRemovalConfirmationBottomSheetDialogDirections.Companion$public fun actionHealthJourneyRemovalConfirmationBottomSheetDialogToHealthJourneyRemovalSuccessBottomSheetDialog(healthJourneyItem: HealthJourneyItem? = null, healthProgram: HealthProgramDetails? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalSuccessBottomSheetDialogArgs.kt$HealthJourneyRemovalSuccessBottomSheetDialogArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalSuccessBottomSheetDialogArgs.kt$HealthJourneyRemovalSuccessBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneyRemovalSuccessBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalSuccessBottomSheetDialogArgs.kt$HealthJourneyRemovalSuccessBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneyRemovalSuccessBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalSuccessBottomSheetDialogDirections.kt$HealthJourneyRemovalSuccessBottomSheetDialogDirections.Companion$public fun actionHealthJourneyItemRemovedBottomSheetDialogPopToHealthJourneyActivityFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRemovalSuccessBottomSheetDialogDirections.kt$HealthJourneyRemovalSuccessBottomSheetDialogDirections.Companion$public fun actionHealthJourneyItemRemovedBottomSheetDialogPopToHealthProgramDetailsFragmentV2(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getActiveUserCampaigns(): Flow&lt;Outcome&lt;CampaignsResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getHealthJourneyItem(itemId: String?, campaignId: String?, activityId: String?): Flow&lt;Outcome&lt;HealthJourneyItemDetailResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getHealthJourneyItemForChallenge(itemId: String?): Flow&lt;Outcome&lt;HealthJourneyItemDetailResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getHealthJourneyItemsForCurrentDate(date: Date): Flow&lt;Outcome&lt;HealthJourneyItemsResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getHealthJourneyItemsForFutureDate(date: Date): Flow&lt;Outcome&lt;HealthJourneyItemsResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getHealthJourneyItemsForPastDate(date: Date): Flow&lt;Outcome&lt;HealthJourneyItemsResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getSuggestedActivityGroups(): Flow&lt;Outcome&lt;SuggestedActivityGroupsResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getSuggestedHealthJourneyItemGroup(groupId: String): Flow&lt;Outcome&lt;List&lt;HealthJourneyItem>>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$fun getUpcomingUserCampaigns(): Flow&lt;Outcome&lt;CampaignsResponse>></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$suspend fun completeActivity(userHealthActivityId: String): Outcome&lt;HealthJourneyItemCompletionResponse></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$suspend fun removeActivity(userHealthActivityId: String): Outcome&lt;Empty></ID>
    <ID>UndocumentedPublicFunction:HealthJourneyRepository.kt$HealthJourneyRepository$suspend fun setUserHealthActivityVerificationProgress( userHealthActivityId: String, activityVerificationProgress: HealthJourneyItemDetail.ActivityVerificationProgress ): Outcome&lt;HealthJourneyItemDetail.ActivityVerificationProgressResponse></ID>
    <ID>UndocumentedPublicFunction:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthJourneySuggestedActivityGroupFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthJourneySuggestedActivityGroupFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthJourneySuggestedActivityGroupFragmentDirections.kt$HealthJourneySuggestedActivityGroupFragmentDirections.Companion$public fun actionHealthJourneySuggestedActivityGroupFragmentToHealthJourneyActivityFragment( healthJourneyItemId: String? = null, campaignId: String? = null, activityId: String? = null, campaignType: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthNeedController.kt$HealthNeedController.Listener$fun navigateToDeeplink(url: String)</ID>
    <ID>UndocumentedPublicFunction:HealthNeedController.kt$HealthNeedController.Listener$fun onHealthConciergeClick()</ID>
    <ID>UndocumentedPublicFunction:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthNeedFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthNeedFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthNeedViewModel.kt$HealthNeedViewModel$fun getHealthNeed(slug: String)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun navigateToDigitalPharmacy()</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun navigateToDimensionsOfHealth(topics: List&lt;Topic>, topicId: String)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun navigateToHealthNeed(urlSlug: String, @ColorRes colorRes: Int)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun navigateToReadings()</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun navigateToSettings()</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun onCareTeamClick(@StringRes cardTitle: Int)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun onModalBannerClick(contentProvider: Modal)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileController.kt$HealthProfileController.Listener$fun openDeeplink(url: String)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileDao.kt$HealthProfileDao$@Query("SELECT * FROM healthprofile LIMIT 1") fun getTable(): HealthProfileTable?</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @CallbackProp fun setOnButtonClickListener(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @CallbackProp fun setOnLinkClickListener(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @ModelProp fun setPoints(points: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @ModelProp fun setShowPoints(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @TextProp fun setButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @TextProp fun setLinkText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @TextProp fun setPointsText(points: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @TextProp fun setReasonToSetupHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$@JvmOverloads @TextProp fun setTimeLengthText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:HealthProfileEmptyState.kt$HealthProfileEmptyState$fun setupViews(attrSet: AttributeSet? = null)</ID>
    <ID>UndocumentedPublicFunction:HealthProfileFragmentDirections.kt$HealthProfileFragmentDirections.Companion$public fun actionHealthProfileFragmentToDimensionsOfHealthFragment(topicId: String, topicsArray: Array&lt;Topic>): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthProfileViewModel.kt$HealthProfileViewModel$fun getHealthProfile()</ID>
    <ID>UndocumentedPublicFunction:HealthProfileViewModel.kt$HealthProfileViewModel$fun getUser()</ID>
    <ID>UndocumentedPublicFunction:HealthProgramCategoryFragmentArgs.kt$HealthProgramCategoryFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthProgramCategoryFragmentArgs.kt$HealthProgramCategoryFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthProgramCategoryFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthProgramCategoryFragmentArgs.kt$HealthProgramCategoryFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthProgramCategoryFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthProgramCategoryFragmentDirections.kt$HealthProgramCategoryFragmentDirections.Companion$public fun actionHealthProgramCategoryFragmentToHealthProgramDetailsFragmentV2(programId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthProgramDetailsFragmentArgs.kt$HealthProgramDetailsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthProgramDetailsFragmentArgs.kt$HealthProgramDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthProgramDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthProgramDetailsFragmentArgs.kt$HealthProgramDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthProgramDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthProgramDetailsFragmentDirections.kt$HealthProgramDetailsFragmentDirections.Companion$public fun actionHealthProgramDetailsFragmentV2ToFirstGoalTomorrowFragment(content: FullScreenContent): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthProgramDetailsFragmentDirections.kt$HealthProgramDetailsFragmentDirections.Companion$public fun actionHealthProgramDetailsFragmentV2ToHealthJourneyRemovalConfirmationBottomSheetDialog(healthJourneyItem: HealthJourneyItem? = null, healthProgram: HealthProgramDetails? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthProgramLibraryFragmentDirections.kt$HealthProgramLibraryFragmentDirections.Companion$public fun actionHealthProgramLibraryFragmentToHealthProgramCategoryFragment(categoryId: String? = null, healthProgramsCarousel: HealthProgramsCarousel? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthProgramLibraryFragmentDirections.kt$HealthProgramLibraryFragmentDirections.Companion$public fun actionHealthProgramLibraryFragmentToHealthProgramDetailsFragmentV2(programId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthProgramLibraryFragmentDirections.kt$HealthProgramLibraryFragmentDirections.Companion$public fun actionHealthProgramLibraryFragmentToHealthProgramsLimitMessageDialog(programEnrollmentLimitModal: ProgramEnrollmentLimitModal): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HealthPrograms.kt$HealthPrograms$fun createActiveChallengesSection(): HealthProgramsSection</ID>
    <ID>UndocumentedPublicFunction:HealthPrograms.kt$HealthPrograms$fun createActiveProgramsSection(): HealthProgramsSection</ID>
    <ID>UndocumentedPublicFunction:HealthProgramsCarousel.kt$HealthProgramsCarousel$fun toHealthPrograms()</ID>
    <ID>UndocumentedPublicFunction:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthProgramsLimitMessageDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthProgramsLimitMessageDialogArgs</ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getAllHealthPrograms(): Flow&lt;Outcome&lt;HealthPrograms>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getCuratedHealthProgramsCarouselsForFeatured(): Flow&lt;Outcome&lt;HealthProgramsCarousels>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getCuratedHealthProgramsCarouselsForHomeFeed(): Flow&lt;Outcome&lt;HealthProgramsCarousels>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getCuratedHealthProgramsCarouselsForLibrary(): Flow&lt;Outcome&lt;HealthProgramsCarousels>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getHealthProgramCategoryById(id: String): Flow&lt;Outcome&lt;HealthPrograms>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getHealthProgramDetails(id: String): Flow&lt;Outcome&lt;HealthProgramDetails>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getHealthProgramsCategories(): Flow&lt;Outcome&lt;HealthProgramsCategories>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getHealthProgramsInProgress(): Flow&lt;Outcome&lt;HealthPrograms>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$fun getSuggestedCarousels(): Flow&lt;Outcome&lt;HealthProgramsCarousels>></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$suspend fun addHealthProgramToJourney(id: String, customFields: CustomFields?): Outcome&lt;HealthProgramStart></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsRepository.kt$HealthProgramsRepository$suspend fun removeHealthProgramFromJourney(id: String): Outcome&lt;Empty></ID>
    <ID>UndocumentedPublicFunction:HealthProgramsSections.kt$HealthProgramsSection$fun isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:HealthSolutionCategoryController.kt$HealthSolutionCategoryController.Listener$fun openDeeplink(url: String)</ID>
    <ID>UndocumentedPublicFunction:HealthSolutionCategoryViewModel.kt$HealthSolutionCategoryViewModel$fun getHealthSolutionCategory(categorySlug: String)</ID>
    <ID>UndocumentedPublicFunction:HealthSolutionCategoryViewModel.kt$HealthSolutionCategoryViewModel$fun initialize(categorySlug: String)</ID>
    <ID>UndocumentedPublicFunction:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): HealthSolutionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): HealthSolutionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:HomeBannerDao.kt$HomeBannerDao$@Query("SELECT * FROM homebanner WHERE id = :id LIMIT 1") fun getHomeBannerWithId(id: String): HomeBannerTable?</ID>
    <ID>UndocumentedPublicFunction:HomeBannerDao.kt$HomeBannerDao$@Query("SELECT * FROM homebanner") fun getTable(): List&lt;HomeBannerTable>?</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun requestRebuildCollection()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateArticles(articleList: ArticleList)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateBanner(banner: HomeBanner)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateHealthActivities(healthActivitiesData: List&lt;HealthActivitiesCategory>)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateHealthGoalPoints(healthPoints: Int?)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateHomeLayout(layout: HomeLayout)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateLifemarketMerchList(lifemarketMerchList: LifemarketMerchList)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateLifemarketUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateName(name: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.Collection$fun updateNotification(homeNotification: HomeNotification)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun hideDailyScreenerTab()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToBlogs()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToChallenge(challengeId: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToHealthJourney()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToHealthJourneyActivity(healthJourneyItem: HealthJourneyItem)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToHealthModule(moduleId: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToHealthProgram(programId: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToHealthProgramCategory(categoryId: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToHealthPrograms()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToMarketplace(path: String = "")</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToMarketplaceService(serviceId: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToNotifications()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun navigateToRewards()</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun openDeeplink(path: String)</ID>
    <ID>UndocumentedPublicFunction:HomeContract.kt$HomeContract.View$fun setupDailyScreenerTab(moduleId: String, moduleType: String, subtitleText: String, description: String?, @DrawableRes imageRes: Int, deepLink: String)</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController$fun buildNotificationModels()</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController$fun setMemberData(name: String)</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController$fun setPcoPointsEligibility(member: Boolean)</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController$fun updateLifemarketMerchList(lifemarketMerchList: LifemarketMerchList)</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController$fun updatePoints( balance: Int? = null, isLoading: Boolean = false, clickDestination: Int? = null )</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onGetCareClicked()</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onHealthJourneyActivityClicked(healthJourneyItem: HealthJourneyItem)</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onHealthJourneyViewAllClicked()</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onHealthProgramClicked(carouselName: String, healthProgram: HealthProgram, index: Int)</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onHealthProgramViewAllClicked()</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onInfoHubClicked()</ID>
    <ID>UndocumentedPublicFunction:HomeController.kt$HomeController.Navigation$fun onMarketplaceItemClicked(url: String)</ID>
    <ID>UndocumentedPublicFunction:HomeFragment.kt$// (outside fragment scope, here's where compose functions go) @Composable @Preview fun HomePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:HomeFragment.kt$@Composable @Preview fun HomeContentPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:HomeFragment.kt$@Composable fun HomeContent( getUserClicked: () -> Unit, getTestAppointmentClicked: () -> Unit, userState: State&lt;User>, testAppointmentState: State&lt;TestAppointment> )</ID>
    <ID>UndocumentedPublicFunction:HomeFragment.kt$@Composable fun HomeContent( triageClicked: () -> Unit, healthJourneyClicked: () -> Unit, hjActivitiesClicked: () -> Unit, hjProgressClicked: () -> Unit, hjProgramsLibraryClicked: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:HomeFragmentDirections.kt$HomeFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HomeFragmentDirections.kt$HomeFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HomeFragmentDirections.kt$HomeFragmentDirections.Companion$public fun actionHomeFragmentToPcoSignUpPromptFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HomeFragmentDirections.kt$HomeFragmentDirections.Companion$public fun actionHomeFragmentToRewardsFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:HomeNotification.kt$HomeNotification$fun hasUnreadNotifications()</ID>
    <ID>UndocumentedPublicFunction:HomeNotificationData.kt$HomeNotificationData$@Subscribe(threadMode = ThreadMode.MAIN) fun handleNotificationDataUpdate(notificationData: NotificationData)</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$// Tests JsonAPI parsing fun fetchTestAppointment()</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun fetchPoints()</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun fetchUser()</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun getHealthActivitiesCategories()</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun getMarketplaceMerchantList()</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun getShouldUserSeeCovid19Flow()</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun markNotificationRead(notification: Notification)</ID>
    <ID>UndocumentedPublicFunction:HomeViewModel.kt$HomeViewModel$fun refreshData(location: Location?)</ID>
    <ID>UndocumentedPublicFunction:HorizontalProgressBar.kt$@Composable fun HorizontalProgressBar( modifier: Modifier = Modifier, percentage: Float = 0F, animationDuration: Int = 0, animationDelay: Int = 0, roundedCornerShape: RoundedCornerShape = GenesisTheme.shapes.largeRoundedCorner, backgroundColor: Color = GenesisTheme.colors.surfaceCardDisable, progressColor: Color = GenesisTheme.colors.decorativeBrandSecondaryDefault )</ID>
    <ID>UndocumentedPublicFunction:HorizontalProgressBar.kt$@Preview(name = "Horizontal Progress Bar with Delay", group = "Progress") @Composable fun HorizontalProgressBarWithDelayPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:HorizontalProgressBar.kt$@Preview(name = "Horizontal Progress Bar", group = "Progress") @Composable fun HorizontalProgressBarPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:HorizontalTranslationAnimation.kt$@Composable fun HorizontalTranslateAnimation( modifier: Modifier = Modifier, animationDuration: Int = 1000, animationDelay: Int = 0, animateFromRight: Boolean = true, distance: Float = 500f, startAnimating: Boolean = true, content: @Composable () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:HorizontalTranslationAnimation.kt$@Preview(name = "Left To Right Animation", group = "Animations") @Composable fun LeftToRightAnimationPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:HorizontalTranslationAnimation.kt$@Preview(name = "Right To Left Animation", group = "Animations") @Composable fun RightToLeftAnimationPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:HouseholdPointsDao.kt$HouseholdPointsDao$@Query("SELECT * FROM householdpoints LIMIT 1") fun getTable(): HouseholdPointsTable?</ID>
    <ID>UndocumentedPublicFunction:IconFooter.kt$IconFooter$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:IconFooter.kt$IconFooter$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:IconFooter.kt$IconFooter$@JvmOverloads @TextProp fun setAccessibilityDescription(contentDescription: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:IconFooter.kt$IconFooter$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:Identity.kt$fun List&lt;Identity>.filterForMemberIdentity(memberId: String): Identity?</ID>
    <ID>UndocumentedPublicFunction:IdentityDao.kt$IdentityDao$@Query("SELECT * FROM identity WHERE id = :id LIMIT 1") fun getIdentityWithId(id: String): IdentityTable?</ID>
    <ID>UndocumentedPublicFunction:IdentityDao.kt$IdentityDao$@Query("SELECT * FROM identity") fun getTable(): List&lt;IdentityTable>?</ID>
    <ID>UndocumentedPublicFunction:ImageBanner.kt$@Preview(name = "LargeImageRow", group = "Banner") @Composable fun LargeImageBannerRowPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ImageBanner.kt$@Preview(name = "SmallImageRow", group = "Banner") @Composable fun SmallImageBannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ImageHandler.kt$ImageHandler$fun onImageResult(images: List&lt;File>)</ID>
    <ID>UndocumentedPublicFunction:ImageHandler.kt$ImageHandler$fun startActivityForResult(intent: Intent?, requestCode: Int)</ID>
    <ID>UndocumentedPublicFunction:ImageHelper.kt$@Composable fun attrPainterResource(@AttrRes id: Int, context: Context = LocalContext.current): Painter</ID>
    <ID>UndocumentedPublicFunction:ImageLoader.kt$ImageLoader$@Throws(IOException::class) fun downloadImageWithCircleCrop(imageContentId: String): Bitmap</ID>
    <ID>UndocumentedPublicFunction:ImageLoader.kt$ImageLoader$fun preFetchImage(imageId: String)</ID>
    <ID>UndocumentedPublicFunction:ImagePager.kt$ImagePager$@ModelProp fun setImages(images: List&lt;ImageSource>)</ID>
    <ID>UndocumentedPublicFunction:ImagePromptWidget.kt$@Composable fun ImagePromptWidget( modifier: Modifier, image: Painter, title: String, description: String, onButtonCLick: () -> Unit, buttonText: String )</ID>
    <ID>UndocumentedPublicFunction:ImagePromptWidget.kt$@Preview(name = "Image Prompt", group = "Widget") @Composable fun PreviewImagePromptWidget(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ImageUtils.kt$ImageUtils$@JvmStatic fun compressImageFile( imageFile: File, onCompletion: RequestCallback&lt;File> )</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$// this crop adds a grey circular border around the image fun ImageView.loadContentWithAvatarCrop(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.fadeTintColor( @ColorInt newColor: Int, duration: Long = context.getIntegerFromAttr(R.attr.duration_base).toLong() )</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.fadeTintColorAttr( @AttrRes newColorAttr: Int, duration: Long = context.getIntegerFromAttr(R.attr.duration_base).toLong() )</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.fadeTintColorRes( @ColorRes newColorRes: Int, duration: Long = context.getIntegerFromAttr(R.attr.duration_base).toLong() )</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadByteArray(bytes: ByteArray, offset: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadContent(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadContentAndSetVisibility(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadContentNoCrop(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadFile(file: File, skipCache: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadFile(path: String, skipCache: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadGifResource(@RawRes @DrawableRes resourceId: Int)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadImagePartContent(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadImagePartUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadUrl(url: String, imageScaleType: ImageScaleType = ImageScaleType.CENTER_CROP)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.loadUrlAndSetVisibility(url: String, imageScaleType: ImageScaleType = ImageScaleType.CENTER_CROP)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.setImageAttrResource(@AttrRes attrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.setImageDrawableAndVisibility(drawable: Drawable?)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.setImageResourceAndVisibility(@DrawableRes imageRes: Int?)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.setImageTintAttr(@AttrRes attrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:ImageViewExtension.kt$fun ImageView.setTintColor(@ColorInt color: Int)</ID>
    <ID>UndocumentedPublicFunction:ImageViewerActivity.kt$ImageViewerActivity.Companion$fun showImageWithContentId(context: Context, contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewerActivity.kt$ImageViewerActivity.Companion$fun showImageWithPath(context: Context, imagePath: String)</ID>
    <ID>UndocumentedPublicFunction:ImageViewerActivity.kt$ImageViewerActivity.Companion$fun showImageWithUrl(context: Context, url: String)</ID>
    <ID>UndocumentedPublicFunction:ImportReadingViewModel.kt$ImportReadingViewModel$fun getAddedReadings(claimCode: String, accessToken: String)</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @TextProp fun setOverlineText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ImportantBanner.kt$ImportantBanner$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ImportedReadingsController.kt$ImportedReadingsController$fun updateState(importedReading: QRCodeAddedReading)</ID>
    <ID>UndocumentedPublicFunction:InMemoryCache.kt$InMemoryCache$fun getOrFetch(id: String, fetch: () -> Flow&lt;Outcome&lt;T>>): Flow&lt;Outcome&lt;T>></ID>
    <ID>UndocumentedPublicFunction:InMemoryCache.kt$InMemoryCache$fun save(fetch: () -> Flow&lt;Outcome&lt;List&lt;T>>>)</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setAction(text: String = "", actionClickListener: (() -> Unit)? = null): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setCloseClickListener( onCloseClickListener: (() -> Unit)? = null ): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setMessage(message: String): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setMessageTwo(message: String): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setSubTitle(subTitle: String): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setSubTitleTwo(subTitle: String): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun setTitle(title: String): Builder</ID>
    <ID>UndocumentedPublicFunction:InfoDialog.kt$InfoDialog.Builder$fun show()</ID>
    <ID>UndocumentedPublicFunction:InformationalBanner.kt$InformationalBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:InformationalBanner.kt$InformationalBanner$@JvmOverloads @ModelProp fun setMarginRes(marginAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:InformationalBanner.kt$InformationalBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:InformationalBanner.kt$InformationalBanner$@JvmOverloads @TextProp fun setActionTitle(actionTitle: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InformationalBanner.kt$InformationalBanner$@JvmOverloads @TextProp fun setText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InformationalBanner.kt$InformationalBanner$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @ModelProp fun setBottomSpacingRes(@AttrRes bottomSpacingResId: Int = R.attr.spacing_none)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @TextProp fun setSubtitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundAttr(@AttrRes imageAttr: Int)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroundResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@ModelProp(group = "image") fun setImageAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:InformationalSlide.kt$InformationalSlide$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): InsightDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): InsightDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsFragmentDirections.kt$InsightDetailsFragmentDirections.Companion$public fun actionGraphDetailsFragmentToBMIInfoFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsFragmentDirections.kt$InsightDetailsFragmentDirections.Companion$public fun actionGraphDetailsFragmentToBloodPressureInfoFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsFragmentDirections.kt$InsightDetailsFragmentDirections.Companion$public fun actionGraphDetailsFragmentToRemoveReadingsFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsViewModel.kt$InsightDetailsViewModel$// used to fetch insight cards fun getGraphData(readingCode: String, accessToken: String)</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsViewModel.kt$InsightDetailsViewModel$// used to fetch insight cards fun removeReadings(readingIds: List&lt;String>, accessToken: String)</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsViewModel.kt$InsightDetailsViewModel$fun editingEnabled(editing: Boolean)</ID>
    <ID>UndocumentedPublicFunction:InsightDetailsViewModel.kt$InsightDetailsViewModel$fun handleEvent(event: ReadingsViewEvent)</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @CallbackProp fun setOnDeleteClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @ModelProp fun setDeleteButtonState(enabled: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @TextProp fun setDay(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @TextProp fun setTime(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @TextProp fun setUnit(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @TextProp fun setUnitContentDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InsightRowView.kt$InsightRowView$@JvmOverloads @TextProp fun setValue(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @ModelProp fun setState(insightBannerState: InsightsBanner.InsightBannerState = EMPTY)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @TextProp fun setHint(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @TextProp fun setInsightText(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @TextProp fun setLastUpdated(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @TextProp fun setTitle(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @TextProp fun setUnit(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@JvmOverloads @TextProp fun setValue(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:InsightsBanner.kt$InsightsBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:IntExtension.kt$fun Int?.greaterThan(other: Int, ifNull: Boolean = false): Boolean</ID>
    <ID>UndocumentedPublicFunction:IntExtension.kt$fun Int?.lessThanOrEqual(other: Int, ifNull: Boolean = false): Boolean</ID>
    <ID>UndocumentedPublicFunction:IntExtensions.kt$// Returns LCL or SDM pharmacy icon @Composable fun Int?.orNotApplicable(): String</ID>
    <ID>UndocumentedPublicFunction:ItemRow.kt$ItemRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ItemRow.kt$ItemRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ItemRow.kt$ItemRow$@JvmOverloads @ModelProp fun setMinHeight(@DimenRes height: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:ItemRow.kt$ItemRow$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ItemRow.kt$ItemRow$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$fun &lt;T> Collection&lt;T>.takeIfNotEmpty(): Collection&lt;T>?</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$fun &lt;T> Collection&lt;T>.takeUnlessEmpty(): Collection&lt;T>?</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$inline fun &lt;T1 : Any, T2 : Any, R : Any> safeLet(p1: T1?, p2: T2?, block: (T1, T2) -> R?): R?</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$inline fun &lt;T1 : Any, T2 : Any, T3 : Any, R : Any> safeLet(p1: T1?, p2: T2?, p3: T3?, block: (T1, T2, T3) -> R?): R?</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$inline fun &lt;T1 : Any, T2 : Any, T3 : Any, T4 : Any, R : Any> safeLet(p1: T1?, p2: T2?, p3: T3?, p4: T4?, block: (T1, T2, T3, T4) -> R?): R?</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$inline fun &lt;T1 : Any, T2 : Any, T3 : Any, T4 : Any, T5 : Any, R : Any> safeLet(p1: T1?, p2: T2?, p3: T3?, p4: T4?, p5: T5?, block: (T1, T2, T3, T4, T5) -> R?): R?</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$inline fun &lt;T> Iterable&lt;T>.withEach(block: T.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:IterableExtension.kt$inline fun &lt;T> Iterable&lt;T>.withEachIndexed(block: T.(Int) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:JSONObjectExtension.kt$fun JSONArray.redactFields(vararg keys: String)</ID>
    <ID>UndocumentedPublicFunction:JobBindingProperty.kt$fun jobBinding(): ReadWriteProperty&lt;Fragment, Job?></ID>
    <ID>UndocumentedPublicFunction:JsonApi.kt$@Suppress("DEPRECATION") fun &lt;T> T.jsonData()</ID>
    <ID>UndocumentedPublicFunction:JsonApiAdapter.kt$JsonApiAdapter$//region flatten from JsonAPI to Android Data Model fun flattenJsonAPI(jsonAPI: String): String</ID>
    <ID>UndocumentedPublicFunction:KeyValueRow.kt$@Composable fun KeyValueRow(modifier: Modifier = Modifier, key: String, value: String)</ID>
    <ID>UndocumentedPublicFunction:KeyValueRow.kt$@Preview(name = "Key Value row", group = "Row") @Composable fun KeyValueRowPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun actionLandingFragmentToDashboardFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun actionLandingFragmentToWelcomeFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun actionLandingFragmentToWelcomeNewUserFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToBrowserScreen(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToCreateProfile(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToFindPharmacy(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToFindPharmacyWithStoreNumber(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToLockedOutScreen(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToMultibannerSettingsScreen(userType: UserType = UserType.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToPrescriptionDetails(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToProfileVerification(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToSelectPharmacy(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToSelectPharmacyRefill(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToSettingsScreen(userType: UserType = UserType.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingFragmentDirections.kt$LandingFragmentDirections.Companion$public fun demoActionLandingFragmentToSuccess(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LandingScreen.kt$@Composable fun LandingScreen( stateFlow: StateFlow&lt;State&lt;UserInfo>>, onReturnedClick: (banner: Banner) -> Unit, onNewUserClick: () -> Unit, onWelcomeClick: (banner: Banner) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LandingScreen.kt$@Composable fun LandingSwitch( userInfo: UserInfo, onReturnedClick: (banner: Banner) -> Unit, onNewUserClick: () -> Unit, onWelcomeClick: (banner: Banner) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LandingScreen.kt$@Composable fun NewVerifiedUserSwitch( userInfo: UserInfo, onWelcomeClick: (banner: Banner) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LandingScreen.kt$@Composable fun ReturnedVerifiedUserSwitch( userInfo: UserInfo, onReturnedClick: (banner: Banner) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LanguagePref.kt$LanguagePref.Companion$fun getAll(): List&lt;LanguagePref></ID>
    <ID>UndocumentedPublicFunction:LaunchFragment.kt$@Composable @Preview fun LaunchPreviewSignedIn(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:LaunchFragment.kt$@Composable @Preview fun LaunchPreviewSignedOut(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:LaunchFragment.kt$@Composable fun LaunchContent( isLoggedIn: Boolean, isLoading: Boolean, canUseBiometrics: Boolean, snackbarHostState: SnackbarHostState, currentEnvironment: String, onBrowseFeature: () -> Unit, onLogin: () -> Unit, onLogout: () -> Unit, onBiometrics: () -> Unit, onSwitchEnvironment: () -> Unit, onFeatureFlag: () -> Unit, onShareScreenshotFeature: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:LaunchFragment.kt$@Composable fun LaunchContent( isLoggedIn: Boolean, isLoading: Boolean, snackbarHostState: SnackbarHostState, currentEnvironment: String, onBrowseFeature: () -> Unit, onLogin: () -> Unit, onLogout: () -> Unit, onSwitchEnvironment: () -> Unit, onFeatureFlag: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LaunchFragment.kt$@Suppress("LongMethod") @Composable fun LaunchContent( isLoggedIn: Boolean, isLoading: Boolean, snackbarHostState: SnackbarHostState, onBrowseFeature: () -> Unit, onLogin: () -> Unit, onLogout: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LaunchViewModel.kt$LaunchViewModel$fun authenticateSession()</ID>
    <ID>UndocumentedPublicFunction:LaunchViewModel.kt$LaunchViewModel$fun authenticateSession(jwtToken: String, navigateOnSuccess: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LaunchViewModel.kt$LaunchViewModel$fun fetchCurrentEnvironment()</ID>
    <ID>UndocumentedPublicFunction:LaunchViewModel.kt$LaunchViewModel$fun fetchLogInStatus()</ID>
    <ID>UndocumentedPublicFunction:LaunchViewModel.kt$LaunchViewModel$fun refreshAndAuthenticateSession()</ID>
    <ID>UndocumentedPublicFunction:LeagueApplication.kt$LeagueApplication$@Subscribe(threadMode = ThreadMode.MAIN) fun handleRequireUpdateNotification(requireUpdateNotification: RequireUpdateNotification)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatUpdatesListener$fun onChatSessionEndedByAgent()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatUpdatesListener$fun onChatSessionEndedByInactivity()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatUpdatesListener$fun onNewMessage()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun announceForAccessibility(message: String)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun hideAgentIsTyping()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun hideUploadingImageMessage()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun onFileRequestCancelled()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun showAgentIsTyping()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun showAttachmentUploadButton(callback: (file: File) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$ChatViewListener$fun showUploadingImageMessage()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueAgentListener$fun onAgentJoined(agentName: String)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueAgentListener$fun onAgentLeft(agentName: String)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueAgentListener$fun onAgentTyping(isTyping: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueAgentListener$fun onMessageReceived(agentId: String, agentName: String, message: String, timestamp: Long)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueAgentListener$fun onTransferred()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueChatClient$fun endChat()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueChatClient$fun sendMessage(message: String)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueFileTransferRequestListener$// Send the setter the upload function to call once the image is chosen fun onFileRequested( uploadFunction: ( file: File, onFailure: (success: Boolean, errorMessage: String) -> Unit ) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueFileTransferRequestListener$fun onFileRequestCancelled()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueFileTransferRequestListener$fun onFileTransferRequest(assistant: FileTransferAssistant?)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueQueueListener$fun onEstimatedWaitTimeChanged(estimatedMinutesRemaining: Int)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueQueueListener$fun onQueuePositionChanged(position: Int)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueSessionStateListener$fun onChatEndedByAgent()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueSessionStateListener$fun onChatEndedByInactivity()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueSessionStateListener$fun onChatEndedByUser()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueSessionStateListener$fun onChatEndedForUnknownReason()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LeagueSessionStateListener$fun onChatStarted()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatClient.kt$LoadingViewListener$fun onChatStarted()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessage.kt$LeagueChatMessage$// Used for system messages like agent joined, left fun isSystemMessage()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessage.kt$LeagueChatMessage$fun isAgent()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessage.kt$LeagueChatMessage$fun isAgentTyping()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessage.kt$LeagueChatMessage$fun isUser()</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessageDao.kt$LeagueChatMessageDao$@Insert(onConflict = OnConflictStrategy.REPLACE) fun insertAll(chatMessages: List&lt;LeagueChatMessageTable>)</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessageDao.kt$LeagueChatMessageDao$@Query("SELECT * FROM leagueChatMessage") fun getTable(): List&lt;LeagueChatMessageTable>?</ID>
    <ID>UndocumentedPublicFunction:LeagueChatMessageDao.kt$LeagueChatMessageDao$@Query("SELECT * FROM leaguechatmessage") fun getTableAsFlow(): Flow&lt;List&lt;LeagueChatMessageTable>></ID>
    <ID>UndocumentedPublicFunction:LeagueColors.kt$fun loadLeagueColors(context: Context): GenesisColors</ID>
    <ID>UndocumentedPublicFunction:LeagueCreditCard.kt$LeagueCreditCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LeagueCreditCard.kt$LeagueCreditCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:LeagueCreditCard.kt$LeagueCreditCard$@JvmOverloads @TextProp fun setAccessibilityDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LeagueCreditCard.kt$LeagueCreditCard$@JvmOverloads @TextProp fun setCreditCardAmount(text: CharSequence = DEFAULT_AMOUNT)</ID>
    <ID>UndocumentedPublicFunction:LeagueNavigation.kt$LeagueNavigation$fun handleManageDependentsNavigation(context: Context, navigationTarget: NavigationTarget)</ID>
    <ID>UndocumentedPublicFunction:LeagueNavigation.kt$LeagueNavigation$fun navigateToCustomerCareChat( activity: Activity, requestCode: Int?, enterAnim: Int?, exitAnim: Int? )</ID>
    <ID>UndocumentedPublicFunction:LeagueNavigation.kt$LeagueNavigation$fun navigateToPrivacyPolicy(activity: Activity, isCanada: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LeagueNavigation.kt$LeagueNavigation$fun navigateToTerms(activity: Activity, isCanada: Boolean, enterAnim: Int?, exitAnim: Int?)</ID>
    <ID>UndocumentedPublicFunction:LeagueRepository.kt$LeagueRepository$@Suppress("UNUSED_PARAMETER") @Subscribe(threadMode = ThreadMode.MAIN) fun handlePushNotification(pushNotification: PushNotification)</ID>
    <ID>UndocumentedPublicFunction:LeagueRestAPIAuthenticator.kt$LeagueRestAPIAuthenticator$fun buildNewAuthenticatedRequest(request: Request): Request</ID>
    <ID>UndocumentedPublicFunction:LeagueRestAPIAuthenticator.kt$LeagueRestAPIAuthenticator$suspend fun refreshAndAuthenticateSession(api: API): Boolean</ID>
    <ID>UndocumentedPublicFunction:LeagueRootFragment.kt$LeagueRootFragment$fun displayOfflineScreen()</ID>
    <ID>UndocumentedPublicFunction:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$fun disconnect()</ID>
    <ID>UndocumentedPublicFunction:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$suspend fun authenticateSocket(api: API): Boolean</ID>
    <ID>UndocumentedPublicFunction:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$suspend fun authenticateUsingBiometrics( activity: FragmentActivity, promptTitle: String ): Boolean</ID>
    <ID>UndocumentedPublicFunction:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$suspend fun refreshAndAuthenticateSession(api: API): Boolean</ID>
    <ID>UndocumentedPublicFunction:LeagueTheme.kt$fun createLeagueTheme(context: Context)</ID>
    <ID>UndocumentedPublicFunction:LearnMoreBottomSheetScreen.kt$@Composable fun LearnMoreBottomSheetContent(bannerContent: @Composable () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:LearnMoreBottomSheetScreen.kt$@ExperimentalMaterialApi @Composable fun LearnMoreBottomSheetScreen( primaryButtonText: String? = null, title: String?, content: @Composable () -> Unit, onBottomSheetDismissClick: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:LearnMoreBottomSheetScreen.kt$@Preview @Composable fun PreviewLearnMoreBottomSheetContent(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LeaveChallengeConfirmationBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LeaveChallengeConfirmationBottomSheetDialogArgs</ID>
    <ID>UndocumentedPublicFunction:LeaveChallengeConfirmationBottomSheetDialogDirections.kt$LeaveChallengeConfirmationBottomSheetDialogDirections.Companion$public fun leaveChallengeSuccess(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LeaveHealthJourneyActivityConfirmationFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LeaveHealthJourneyActivityConfirmationFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LeaveHealthJourneyActivityConfirmationFragmentDirections.kt$LeaveHealthJourneyActivityConfirmationFragmentDirections.Companion$public fun actionLeaveHealthJourneyActivityConfirmationFragmentPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$@VisibleForTesting fun truncateUrl(url: String): String</ID>
    <ID>UndocumentedPublicFunction:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$fun setupCookiesForLoginWebview(url: String, includeDeviceToken: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$fun signIn(sessionId: String?, deviceToken: String?, userId: String?)</ID>
    <ID>UndocumentedPublicFunction:LifemarketMerchListDao.kt$LifemarketMerchListDao$@Query("SELECT * FROM lifemarket_merch_list WHERE id = :id LIMIT 1") fun getLifemarketMerchListWithId(id: String): LifemarketMerchListTable?</ID>
    <ID>UndocumentedPublicFunction:LifemarketMerchListDao.kt$LifemarketMerchListDao$@Query("SELECT * FROM lifemarket_merch_list") fun getTable(): List&lt;LifemarketMerchListTable>?</ID>
    <ID>UndocumentedPublicFunction:LineConfig.kt$LineConfig$fun isDashed()</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$@Composable fun LinkButton( modifier: Modifier, linkText: AnnotatedString, drawableEnd: Painter = painterResource(id = R.drawable.ic_right_chevron), onClick: () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$@Preview @Composable fun PreviewLinkButton(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setBackgroundResource(drawableRes: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setDrawableEnd(@DrawableRes drawable: Int = R.drawable.ic_right_chevron)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setDrawablePadding(@AttrRes drawable: Int = R.attr.spacing_three)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setEpoxyTextAlignment(textAlignment: Int = View.TEXT_ALIGNMENT_TEXT_START)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setPaddingRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setTextAppearanceFromAttr(@AttrRes attrRes: Int = R.attr.typography_body1)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun setTextColorAttr(@AttrRes color: Int = R.attr.color_interactive_action_primary)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @ModelProp fun updateGravity(gravity: Int = Gravity.CENTER_VERTICAL)</ID>
    <ID>UndocumentedPublicFunction:LinkButton.kt$LinkButton$@JvmOverloads @TextProp fun setEpoxyText(text: CharSequence? = "")</ID>
    <ID>UndocumentedPublicFunction:LinkedAccountsFragmentDirections.kt$LinkedAccountsFragmentDirections.Companion$public fun navigateToMapleAccount(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LinkedAccountsFragmentDirections.kt$LinkedAccountsFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatActivity.kt$LiveAgentChatActivity$fun setupChatClient( chatConfigResponse: SalesforceConfigResponse, salesforceResponse: SalesforceChatMapResponse, presenter: AgentChatPresenter, chatAgentConfig: ChatAgentConfig )</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatFragmentArgs.kt$LiveAgentChatFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatFragmentArgs.kt$LiveAgentChatFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LiveAgentChatFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatFragmentArgs.kt$LiveAgentChatFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LiveAgentChatFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$fun closeImagePreview()</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$fun imageSelected(file: File)</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$fun updatePreviousChatTime()</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$fun uploadFile(file: File)</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatViewModel.kt$LiveAgentChatViewModel.Input$fun setShowAgentIsTyping(boolean: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LiveAgentChatViewModel.kt$LiveAgentChatViewModel.Input$fun setShowUploadingMessage(boolean: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LiveAgentLoadingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LiveAgentLoadingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentDirections.kt$LiveAgentLoadingFragmentDirections.Companion$public fun navigateToAgentAvailability( agentType: String = "", agentTypeDescription: String = "", chatAvailabilities: Array&lt;ChatAvailability> ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentDirections.kt$LiveAgentLoadingFragmentDirections.Companion$public fun navigateToChat(agentType: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentDirections.kt$LiveAgentLoadingFragmentDirections.Companion$public fun navigateToSendEmail(agentType: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LiveAgentLoadingFragmentDirections.kt$LiveAgentLoadingFragmentDirections.Companion$public fun navigateToUnavailableAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LiveAgentViewModel.kt$LiveAgentViewModel$@DelicateCoroutinesApi fun startLoadingChatIfNeeded( agentType: String, agentTypeDescription: String, isCovidChat: Boolean, preChatDetails: String, chatAgentConfig: ChatAgentConfig, )</ID>
    <ID>UndocumentedPublicFunction:LiveAgentViewModel.kt$LiveAgentViewModel$fun getWaitRoomLinkOuts(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:LiveAgentViewModel.kt$LiveAgentViewModel$fun populateTypeformUrl()</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@JvmOverloads @CallbackProp fun setOnTooltipClickListener(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@ModelProp fun setTooltipIcon(drawableResId: Int)</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@TextProp fun setAmountRemaining(amount: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@TextProp fun setAmountSpent(string: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@TextProp fun setBalanceMilestone(amount: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@TextProp fun setBalanceName(string: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:LiveBalance.kt$LiveBalance$@TextProp fun setLabelNetwork(text: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @CallbackProp fun setDeductibleOnTooltipClickListener(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @CallbackProp fun setIndividualSpendClickListener(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @CallbackProp fun setOutOfPocketOnTooltipClickListener(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @ModelProp fun setDeductibleProgress(progress: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @ModelProp fun setIndividualSpendButtonBackground(@DrawableRes buttonBackground: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @ModelProp fun setOutOfPocketProgress(progress: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setDeductibleBalanceLimit(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setDeductibleBalanceTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setDeductibleRemainingAmount(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setDeductibleSpentAmount(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setLastUpdatedText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setNetworkLabels(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setOutOfPocketBalanceLimit(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setOutOfPocketRemainingAmount(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setOutOfPocketSpentAmount(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@JvmOverloads @TextProp fun setOutOfPocketTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@ModelProp fun setDeductibleLiveBalanceVisibility(visible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@ModelProp fun setOutOfPocketLiveBalanceVisibility(visible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@ModelProp fun setPageBackground(@AttrRes pageBackground: Int)</ID>
    <ID>UndocumentedPublicFunction:LiveBalanceNetworkWidget.kt$LiveBalanceNetworkWidget$@ModelProp fun setTooltipIcons(@DrawableRes drawableResId: Int)</ID>
    <ID>UndocumentedPublicFunction:LiveBalancePage.kt$LiveBalancePage$@ModelProp fun setData(data: LiveBalancesData)</ID>
    <ID>UndocumentedPublicFunction:LiveBalancesEpoxyPopulator.kt$fun createLiveBalancesTab( id: String, locale: Locale, spendType: SpendType, liveBalanceNetworkData: LiveBalanceNetworkData, lastUpdatedDate: Date, coverageProvider: String, individualSpendOnClick: (() -> Unit) = {}, openDeductibleTooltip: () -> Unit, openOutOfPocketTooltip: () -> Unit ): LiveBalanceNetworkWidgetModel_</ID>
    <ID>UndocumentedPublicFunction:LiveBalancesViewData.kt$LiveBalancesViewData.Companion$fun compileLiveBalancesViewData(userLiveBalances: UserLiveBalances): LiveBalancesViewData</ID>
    <ID>UndocumentedPublicFunction:LiveBalancesViewData.kt$fun LiveBalanceSpendType.isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LiveBalancesViewData.kt$fun LiveBalanceSpendType.isNotEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LiveChatBanner.kt$@Composable fun LiveChatBanner( openChat: () -> Unit, refreshStatusBar: (Boolean) -> Unit, viewModel: LiveChatBannerViewModel, stringProvider: StringProvider, )</ID>
    <ID>UndocumentedPublicFunction:LiveChatBannerViewModel.kt$LiveChatBannerViewModel$fun endChat()</ID>
    <ID>UndocumentedPublicFunction:LiveChatBannerViewModel.kt$LiveChatBannerViewModel$fun removeMessageListener()</ID>
    <ID>UndocumentedPublicFunction:LiveChatBannerViewModel.kt$LiveChatBannerViewModel$fun setMessageListener()</ID>
    <ID>UndocumentedPublicFunction:LoadingSpinner.kt$@Composable fun LoadingSpinner()</ID>
    <ID>UndocumentedPublicFunction:LoadingSpinner.kt$LoadingSpinner$fun setupViews()</ID>
    <ID>UndocumentedPublicFunction:LoadingStateProgressBar.kt$LoadingStateProgressBar$@ModelProp fun setColorFromAttribute(@AttrRes attrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:LocaleProvider.kt$LocaleProvider$fun getCurrentLocale(context: Context): Locale</ID>
    <ID>UndocumentedPublicFunction:LocaleUtils.kt$LocaleUtils$fun getSpanishLocale(): String</ID>
    <ID>UndocumentedPublicFunction:LocaleUtils.kt$LocaleUtils$fun updateLocale(c: Context): ContextWrapper</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LocationSelectionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LocationSelectionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToClinicDetails(serviceBookingSelections: ServiceBookingSelections, clinicId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LocationSelectionFragmentDirections.kt$LocationSelectionFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LockedOutFragmentArgs.kt$LockedOutFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LockedOutFragmentArgs.kt$LockedOutFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LockedOutFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LockedOutFragmentArgs.kt$LockedOutFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LockedOutFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LockedOutFragmentDirections.kt$LockedOutFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LockedOutScreen.kt$@Composable fun LockedOutScreen( loblawPharmacySubtitleStateFlow: StateFlow&lt;Int>, callSDMPharmacy: () -> Unit, callLoblawPharmacy: () -> Unit, labelGoBack: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LockedOutScreen.kt$@Composable fun LockedOutScreenAdapter( viewModelImpl: ContactCustomerSupportViewModelInterface = ContactCustomerSupportViewModel(), callSDMPharmacy: () -> Unit, callLoblawPharmacy: () -> Unit, labelGoBack: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:LockedOutScreen.kt$@Preview @Composable fun PreviewBannerSelectionScreenContent(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:Log.kt$Log$@JvmStatic @JvmOverloads fun d( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Log.kt$Log$@JvmStatic @JvmOverloads fun e( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Log.kt$Log$@JvmStatic @JvmOverloads fun i( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Log.kt$Log$@JvmStatic @JvmOverloads fun v( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Log.kt$Log$@JvmStatic @JvmOverloads fun w( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Log.kt$Log$@JvmStatic @JvmOverloads fun wtf( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:LogSanitization.kt$LogSanitization$fun sanitizeLog(log: String)</ID>
    <ID>UndocumentedPublicFunction:Logger.kt$Logger$fun d( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Logger.kt$Logger$fun e( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Logger.kt$Logger$fun i( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Logger.kt$Logger$fun v( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Logger.kt$Logger$fun w( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:Logger.kt$Logger$fun wtf( tag: String, string: String, th: Throwable? = null, logToCrashReporter: Boolean = false, logToRemote: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:LoginFragment.kt$LoginFragment$@SuppressLint("SetJavaScriptEnabled") fun setupViews()</ID>
    <ID>UndocumentedPublicFunction:LoginFragment.kt$LoginFragment$fun onChangeEnvironmentAction()</ID>
    <ID>UndocumentedPublicFunction:LoginFragment.kt$LoginFragment$fun setupToolbar()</ID>
    <ID>UndocumentedPublicFunction:LoginFragment.kt$LoginInterface$@JavascriptInterface fun clearDeviceToken()</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentArgs.kt$LoginFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentArgs.kt$LoginFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LoginFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentArgs.kt$LoginFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LoginFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentDirections.kt$LoginFragmentDirections.Companion$public fun navigateToAccountSetup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentDirections.kt$LoginFragmentDirections.Companion$public fun navigateToAuthentication(isPhoneSet: Boolean = false, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentDirections.kt$LoginFragmentDirections.Companion$public fun navigateToEnvironmentFragment( title: String, chosenEnvironment: Environment, environments: Array&lt;Environment> ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentDirections.kt$LoginFragmentDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentDirections.kt$LoginFragmentDirections.Companion$public fun navigateToLiveAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginFragmentDirections.kt$LoginFragmentDirections.Companion$public fun navigateToLoginIntro(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginIntroFragmentDirections.kt$LoginIntroFragmentDirections.Companion$public fun navigateToEnvironmentSwitcher( title: String, chosenEnvironment: Environment, environments: Array&lt;Environment> ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginIntroFragmentDirections.kt$LoginIntroFragmentDirections.Companion$public fun navigateToLogin(isRegistering: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): LoginVerificationFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): LoginVerificationFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:LoginViewModel.kt$LoginViewModel$fun setUserCredentials( idToken: String?, pcid: String?, accessToken: String?, refreshToken: String? )</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToAccountSetup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToAuthentication(isPhoneSet: Boolean = false, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToLiveAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToLogin(isRegistering: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToLoginFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LoginWelcomeBackFragmentDirections.kt$LoginWelcomeBackFragmentDirections.Companion$public fun navigateToLoginIntro(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@CallbackProp @JvmOverloads fun setButtonOnClick(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@JvmOverloads @CallbackProp fun setActionIconOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@JvmOverloads @CallbackProp fun setPointsOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@JvmOverloads @ModelProp fun setButtonStyle(btnStyle: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@JvmOverloads @ModelProp fun setPointsLoadingState(isLoading: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@JvmOverloads @TextProp fun setPointsText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setActionIconImage(@DrawableRes drawable: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setActionIconVisibility(visibility: Int = View.VISIBLE)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setBgImage(@DrawableRes drawable: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setImage(@DrawableRes drawable: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setImageScaleType(scaleType: ImageView.ScaleType = ImageView.ScaleType.FIT_CENTER)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setLogo(@DrawableRes drawable: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setLogoVisibility(visibility: Int = View.VISIBLE)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp @JvmOverloads fun setPointsVisibility(visibility: Int = View.VISIBLE)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@ModelProp fun setCustomTextColors(textColor: Int)</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@TextProp @JvmOverloads fun setButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@TextProp @JvmOverloads fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@TextProp @JvmOverloads fun setHeaderTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:LogoCtaHeader.kt$LogoCtaHeader$@TextProp @JvmOverloads fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity$fun registerFcmToken()</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity$fun setTabLayoutVisibility(show: Boolean)</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity$fun setToolbarElevation(elevation: Float)</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity.Companion$fun getLoginIntent(context: Context): Intent</ID>
    <ID>UndocumentedPublicFunction:MainMenuAdapter.kt$MainMenuAdapter.MainMenuHeaderViewHolder$fun bind(header: MainMenuHeader)</ID>
    <ID>UndocumentedPublicFunction:MainMenuAdapter.kt$MainMenuAdapter.MainMenuItemViewHolder$fun bind(item: MainMenuItem)</ID>
    <ID>UndocumentedPublicFunction:MainNavGraphDirections.kt$MainNavGraphDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainNavGraphDirections.kt$MainNavGraphDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragment.kt$MainNavHostFragment$fun chatSessionEndedByAgent()</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragment.kt$MainNavHostFragment$fun chatSessionEndedByInactivity()</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragmentDirections.kt$MainNavHostFragmentDirections.Companion$public fun navigateToAccountSetup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragmentDirections.kt$MainNavHostFragmentDirections.Companion$public fun navigateToAuthentication(isPhoneSet: Boolean = false, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragmentDirections.kt$MainNavHostFragmentDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragmentDirections.kt$MainNavHostFragmentDirections.Companion$public fun navigateToLiveAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainNavHostFragmentDirections.kt$MainNavHostFragmentDirections.Companion$public fun navigateToLoginIntro(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MainViewModel.kt$MainViewModel$fun fetchPcoAccount()</ID>
    <ID>UndocumentedPublicFunction:MainViewModel.kt$MainViewModel$fun fetchPrivacyLockPromptStatus()</ID>
    <ID>UndocumentedPublicFunction:MainViewModel.kt$MainViewModel$fun preFetchMainData()</ID>
    <ID>UndocumentedPublicFunction:MainViewModel.kt$MainViewModel$fun updatePrivacyLockPermissions(isGranted: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ManageDependentsLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ManageDependentsLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingFragmentDirections.kt$ManageDependentsLandingFragmentDirections.Companion$public fun actionManageDependentsLandingToAddDependentsRelationship(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingFragmentDirections.kt$ManageDependentsLandingFragmentDirections.Companion$public fun actionManageDependentsLandingToDependentDetails( dependentId: String, relationshipType: String, dependentName: String, canEditDependent: Boolean ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingFragmentDirections.kt$ManageDependentsLandingFragmentDirections.Companion$public fun actionManageDependentsLandingToDependentInviteEmail( dependentId: String, isReSend: Boolean, dependentFirstName: String = "", dependentEmail: String = "" ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingViewModel.kt$ManageDependentsLandingViewModel$fun fetchActions(qleRequestId: String = "")</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsLandingViewModel.kt$ManageDependentsLandingViewModel$fun fetchDependents()</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsNavHostActivity.kt$ManageDependentsNavHostActivity$fun hideToolbarAddButton()</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsNavHostActivity.kt$ManageDependentsNavHostActivity$fun showToolbarAddButton()</ID>
    <ID>UndocumentedPublicFunction:ManageDependentsRepository.kt$ManageDependentsRepository$fun addOrEditDependent(fieldToValues: Map&lt;String, String>): Flow&lt;Outcome&lt;Empty>></ID>
    <ID>UndocumentedPublicFunction:ManageDependentsRepository.kt$ManageDependentsRepository$fun getDependentSchema( relationshipType: String, action: String, qleRequestId: String = "", dependentId: String = "" ): Flow&lt;Outcome&lt;DependentsFormSchema>></ID>
    <ID>UndocumentedPublicFunction:ManageDependentsRepository.kt$ManageDependentsRepository$fun getDependents(userId: String, groupId: String): Flow&lt;Outcome&lt;DependentsList>></ID>
    <ID>UndocumentedPublicFunction:ManageDependentsRepository.kt$ManageDependentsRepository$fun getManageDependentsActions(qleRequestId: String = ""): Flow&lt;Outcome&lt;ManageDependentsActionsResponse>></ID>
    <ID>UndocumentedPublicFunction:ManageDependentsRepository.kt$ManageDependentsRepository$fun sendDependentInvite(dependentId: String, email: String): Flow&lt;Outcome&lt;Empty>></ID>
    <ID>UndocumentedPublicFunction:ManageDependentsUseCases.kt$FetchDependentUseCase$fun getDependents(): Flow&lt;Outcome&lt;DependentsList>></ID>
    <ID>UndocumentedPublicFunction:ManageDependentsUseCases.kt$FetchManageDependentsActionsUseCase$fun getActions(qleRequestId: String = ""): Flow&lt;Outcome&lt;ManageDependentsActions>></ID>
    <ID>UndocumentedPublicFunction:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$@JvmStatic @Suppress("UNCHECKED_CAST") public fun fromBundle(bundle: Bundle): MapleAvailabilityFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleAvailabilityFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleChatDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleChatDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleChatDetailsFragmentDirections.kt$MapleChatDetailsFragmentDirections.Companion$public fun navigateToChatHistory(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleChatDetailsFragmentDirections.kt$MapleChatDetailsFragmentDirections.Companion$public fun setRootToChatDetails(chatId: String = ""): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleChatViewModel.kt$MapleChatViewModel$fun connectToMaple(context: Context, serviceId: String, origin: String)</ID>
    <ID>UndocumentedPublicFunction:MapleChatViewModel.kt$MapleChatViewModel$fun getMapleUser()</ID>
    <ID>UndocumentedPublicFunction:MapleChatViewModel.kt$MapleChatViewModel$fun getProviderData(agentType: String)</ID>
    <ID>UndocumentedPublicFunction:MapleChatViewModel.kt$MapleChatViewModel$fun setMapleConsent()</ID>
    <ID>UndocumentedPublicFunction:MapleChatViewModel.kt$MapleChatViewModel$fun unlinkMapleUser()</ID>
    <ID>UndocumentedPublicFunction:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleConsentFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleConsentFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleHistoryViewModel.kt$MapleHistoryViewModel$fun openMapleConsult(context: Context, serviceId: String, origin: String)</ID>
    <ID>UndocumentedPublicFunction:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleIntroFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleIntroFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleIntroFragmentDirections.kt$MapleIntroFragmentDirections.Companion$public fun navigateToAvailabilityFragment(agentTypeDescription: String, chatAvailabilities: Array&lt;HoursPricing>): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleIntroFragmentDirections.kt$MapleIntroFragmentDirections.Companion$public fun navigateToConsentFragment( serviceId: String, origin: String = "", agentType: String = "", formattedEventPrice: String = "" ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleLinkedAccountFragmentDirections.kt$MapleLinkedAccountFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleLinkedAccountFragmentDirections.kt$MapleLinkedAccountFragmentDirections.Companion$public fun navigateToUnlinkAccount(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleUtils.kt$MapleUtils$@WorkerThread fun generateDeviceSignature(context: Context)</ID>
    <ID>UndocumentedPublicFunction:MapleUtils.kt$MapleUtils$fun generateDeviceSignatureEventParams( deviceSignature: DeviceSignature, mapleContext: String, error: String )</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewConfiguration.kt$MapleWebView$@Suppress("LongParameterList") fun initialize( okHttpClient: OkHttpClient, analytics: AnalyticsTracker, featureFlagsRepository: FeatureFlagsRepository, tenantIdToken: () -> String? = { null }, )</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MapleWebViewFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MapleWebViewFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MapleWebViewFragmentDirections.kt$MapleWebViewFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MarketplaceAuthenticator.kt$MarketplaceAuthenticator$fun authenticateAndLoadMarketplaceWebview(webview: WebView, url: String, baseUrl: String)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @ModelProp fun setBottomOverlay(bottomOverlayContent: List&lt;BottomOverlayContent> = listOf())</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @TextProp fun setFullPriceText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @TextProp fun setOverlineText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @TextProp fun setPriceText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@JvmOverloads @TextProp fun setTopOverlayText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceProductCard.kt$MarketplaceProductCard$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragment.kt$MarketplaceWebFragment.Companion$fun fromPath(path: String)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragment.kt$WebAppInterface$@JavascriptInterface fun copyToClipboard(text: String?)</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragmentArgs.kt$MarketplaceWebFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragmentArgs.kt$MarketplaceWebFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MarketplaceWebFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragmentArgs.kt$MarketplaceWebFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MarketplaceWebFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragmentDirections.kt$MarketplaceWebFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MarketplaceWebFragmentDirections.kt$MarketplaceWebFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MemberDao.kt$MemberDao$@Query("SELECT * FROM member LIMIT 1") fun getTable(): MemberTable?</ID>
    <ID>UndocumentedPublicFunction:MemberInfoController.kt$MemberInfoClickListener$fun dependentCardClicked(dependentId: String, cardType: String)</ID>
    <ID>UndocumentedPublicFunction:MemberInfoController.kt$MemberInfoController$fun setCardData(card: GenericCard)</ID>
    <ID>UndocumentedPublicFunction:MemberInfoController.kt$MemberInfoController$fun setUserName(name: String)</ID>
    <ID>UndocumentedPublicFunction:MemberInfoViewModel.kt$MemberInfoViewModel$fun getManageDependentsSetting()</ID>
    <ID>UndocumentedPublicFunction:MemberInfoViewModel.kt$MemberInfoViewModel$fun getSelectedCard(cardId: String)</ID>
    <ID>UndocumentedPublicFunction:MemberInfoViewModel.kt$MemberInfoViewModel$fun getUserName()</ID>
    <ID>UndocumentedPublicFunction:MerchListAdapter.kt$ArticleListAdapter$@FromJson fun fromJson(merchList: MerchListJson): ArticleList</ID>
    <ID>UndocumentedPublicFunction:MerchListAdapter.kt$HomeBannerAdapter$@FromJson fun fromJson(merchList: MerchListJson): HomeBanner</ID>
    <ID>UndocumentedPublicFunction:MessageUtil.kt$MessageUtil$fun createSocketMessage(messageType: String, info: JSONObject? = null)</ID>
    <ID>UndocumentedPublicFunction:MessageUtil.kt$MessageUtil$fun createSocketMessage(messageType: String, info: Map&lt;String, Any?>? = null)</ID>
    <ID>UndocumentedPublicFunction:MilestoneTracker.kt$@Composable fun MilestoneTracker( modifier: Modifier = Modifier, viewModel: AchievementProgressViewModel = getViewModel(), componentHeight: Dp = 160.dp )</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module$// this is a stop gap solution until more precise flags and fields are added to the Module api fun isCovidDailyAssessment()</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module$fun getProgress( currentQuestion: Question? ): MultiProgressBar.ProgressBars?</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module$fun getQuestionIndexInTopic(currentQuestion: Question?): TopicProgressData?</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module$fun isLastQuestion(question: Question?): Boolean</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module.Companion$fun checkIfCovidAssessment(type: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module.Companion$fun checkIfHealthAssessment(type: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:Module.kt$Module.Companion$fun getNumberOfCompletedQuestions(questions: List&lt;Question>): Int</ID>
    <ID>UndocumentedPublicFunction:Module.kt$PreviousResponse$// TODO: align this with results status fun isCleared()</ID>
    <ID>UndocumentedPublicFunction:Module.kt$PreviousResponse$fun isNotCleared()</ID>
    <ID>UndocumentedPublicFunction:Module.kt$PreviousResponse$fun isNotGoingIntoWork()</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsFragmentArgs.kt$MultiBannerSettingsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsFragmentArgs.kt$MultiBannerSettingsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MultiBannerSettingsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsFragmentArgs.kt$MultiBannerSettingsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MultiBannerSettingsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsFragmentDirections.kt$MultiBannerSettingsFragmentDirections.Companion$public fun actionMultiBannerSettingsFragmentToSettingsFragment(userType: UserType = UserType.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsFragmentDirections.kt$MultiBannerSettingsFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsScreen.kt$@Composable fun MultiBannerSettingsScreen( navigationOnClick: () -> Unit, onPharmacyClick: (userType: UserType) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:MultiBannerSettingsScreen.kt$@Preview @Composable fun PreviewMultiBannerSettingsScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:MultiHorizontalProgressBar.kt$@Composable fun MultiHorizontalProgressBar( modifier: Modifier = Modifier, animationDuration: Int = 0, backgroundColor: Color = GenesisTheme.colors.surfaceCardDisable, backgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, progressBars: List&lt;ProgressBarConfiguration> )</ID>
    <ID>UndocumentedPublicFunction:MultiHorizontalProgressBar.kt$@Preview(name = "MultiHorizontalProgressBar", group = "Progress") @Composable fun MultiHorizontalProgressBarPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:MultiProgressBar.kt$MultiProgressBar.Progress$fun getColor(context: Context): Int</ID>
    <ID>UndocumentedPublicFunction:MultiSelectOptionUseCase.kt$MultiSelectOptionUseCase$operator fun invoke()</ID>
    <ID>UndocumentedPublicFunction:MultiSelectOptionUseCase.kt$fun &lt;T, R> List&lt;Pair&lt;T, R>>.toLinkedHashMap(): LinkedHashMap&lt;T, R></ID>
    <ID>UndocumentedPublicFunction:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): MultiStepHealthJourneyItemCompletionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): MultiStepHealthJourneyItemCompletionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:MultiStepHealthJourneyItemCompletionFragmentDirections.kt$MultiStepHealthJourneyItemCompletionFragmentDirections.Companion$public fun actionMultiStepHealthJourneyItemCompletionFragmentToLeaveHealthJourneyActivityConfirmationFragment( activityName: String, activityId: String, activityType: String, totalSteps: Int, currentStep: Int ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @CallbackProp fun setOnClickTooltip(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @CallbackProp fun setOnTextChanged(listener: OnTextChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @CallbackProp fun setQuestionTextOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @ModelProp fun showTooltipIcon(showTooltip: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @TextProp fun setQuestionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$@JvmOverloads @TextProp fun setTextValue(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionInputRow.kt$MultipleSelectionInputRow$fun getTextValue(): String</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @CallbackProp fun setOnMultipleSelectionChangedListener(listener: OnMultipleSelectionChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @ModelProp fun setCustomOption(customOption: CustomOption? = null)</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @ModelProp fun setOptions(options: List&lt;Option> = listOf())</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @ModelProp fun setPaddingRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @TextProp fun setDescriptionText(descriptionText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$@JvmOverloads @TextProp fun setHeaderText(headerText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:MultipleSelectionQuestion.kt$MultipleSelectionQuestion$fun getSelectionOptions(): List&lt;Option></ID>
    <ID>UndocumentedPublicFunction:MutableListExtension.kt$fun &lt;T> MutableList&lt;T>.swap(index1: Int, index2: Int)</ID>
    <ID>UndocumentedPublicFunction:NavControllerExt.kt$fun NavController.navigateSafely(directions: NavDirections, navOptions: NavOptions? = null): Unit</ID>
    <ID>UndocumentedPublicFunction:NavControllerExt.kt$fun NavController.navigateSafely(uri: Uri, navOptions: NavOptions? = null): Unit</ID>
    <ID>UndocumentedPublicFunction:NavDestination.kt$infix fun NavDestination.isOfType(type: Class&lt;*>): Boolean</ID>
    <ID>UndocumentedPublicFunction:NavExtension.kt$fun AppCompatActivity.setupViewModelNavigation(viewModel: NavViewModel, navHost: Int)</ID>
    <ID>UndocumentedPublicFunction:NavExtension.kt$fun RootFragment.setupViewModelNavigation(viewModel: NavViewModel, lifecycleOwner: LifecycleOwner)</ID>
    <ID>UndocumentedPublicFunction:NavViewModel.kt$NavViewModel$fun navigate(directions: NavDirections)</ID>
    <ID>UndocumentedPublicFunction:NavigationExtension.kt$// https://stackoverflow.com/questions/56843184/how-to-use-navigateup-to-close-the-application fun NavController.popBackStackOrFinish(activity: Activity)</ID>
    <ID>UndocumentedPublicFunction:NavigationExtension.kt$fun Activity.findNavControllerSafely(@IdRes hostId: Int): NavController?</ID>
    <ID>UndocumentedPublicFunction:NetworkConnectionManager.kt$NetworkConnectionManager$@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY) fun removeObserver(lifecycleOwner: LifecycleOwner)</ID>
    <ID>UndocumentedPublicFunction:NetworkConnectionManager.kt$NetworkConnectionManager$@OnLifecycleEvent(Lifecycle.Event.ON_START) fun registerReceiver()</ID>
    <ID>UndocumentedPublicFunction:NetworkConnectionManager.kt$NetworkConnectionManager$@OnLifecycleEvent(Lifecycle.Event.ON_STOP) fun unregisterReceiver()</ID>
    <ID>UndocumentedPublicFunction:NetworkConnectionManager.kt$NetworkConnectionManager$fun isNetworkAvailable(context: Context?): Boolean</ID>
    <ID>UndocumentedPublicFunction:NetworkConnectionManager.kt$NetworkConnectionManager$fun observeNetworkAvailability(observer: Observer)</ID>
    <ID>UndocumentedPublicFunction:NetworkConnectionManager.kt$NetworkConnectionManager.Observer$fun onNetworkChanged(isNetworkAvailable: Boolean)</ID>
    <ID>UndocumentedPublicFunction:NoSearchResultsScreen.kt$@Composable fun NoSearchResultsScreen( title: String, subtitle: String, primaryButtonText: String, secondaryButtonText: String, onTryAgainClick: () -> Unit, onManuallyEnterYourLocationClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:NoSearchResultsScreen.kt$@Preview @Composable fun PreviewNoSearchResultsScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@ModelProp(group = "image") fun setBackgroundImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:NormalBanner.kt$NormalBanner$@ModelProp(group = "image") fun setBackgroundImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:NormalImageBanner.kt$NormalImageBanner$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @ModelProp fun isCompact(compact: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @ModelProp fun setMarginRes(marginAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @ModelProp fun setNoticeBannerStyle(@NoticeBannerStyle noticeBannerStyle: Int = NOTICE_BANNER_STYLE_PRIMARY)</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @TextProp fun setDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @TextProp fun setImageContentDescription(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@JvmOverloads @TextProp fun setTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:NoticeBanner.kt$NoticeBanner$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:Notification.kt$Notification$@DrawableRes fun getIcon(): Int</ID>
    <ID>UndocumentedPublicFunction:Notification.kt$Notification$fun getFormattedDate(): String</ID>
    <ID>UndocumentedPublicFunction:Notification.kt$Notification$fun getUrl(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:Notification.kt$Notification$fun isFromSameDate(secondDate: Date?): Boolean</ID>
    <ID>UndocumentedPublicFunction:NotificationDao.kt$NotificationDao$@Query("SELECT * FROM NOTIFICATIONS LIMIT 1") fun getTable(): NotificationTable?</ID>
    <ID>UndocumentedPublicFunction:NotificationData.kt$NotificationData$fun extractNotificationItems(): ArrayList&lt;Notification></ID>
    <ID>UndocumentedPublicFunction:NotificationData.kt$NotificationData$fun extractUnreadNotificationItems(): ArrayList&lt;Notification></ID>
    <ID>UndocumentedPublicFunction:NotificationSettingsFragmentDirections.kt$NotificationSettingsFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:NotificationSettingsViewModel.kt$NotificationSettingsViewModel$fun fetchOptIntoMarketingStatus()</ID>
    <ID>UndocumentedPublicFunction:NotificationSettingsViewModel.kt$NotificationSettingsViewModel$fun setOptedIntoMarketing(isOptIn: Boolean)</ID>
    <ID>UndocumentedPublicFunction:NumericCircleButton.kt$NumericCircleButton$@Deprecated( message = "We are removing this function to use isEnabled property", replaceWith = ReplaceWith("isEnabled") ) fun setButtonEnabled(enabled: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:NumericCircleButton.kt$NumericCircleButton$@Deprecated( message = "We are removing this function to use isSelected property and selectors", replaceWith = ReplaceWith("isSelected") ) fun setButtonSelected(selected: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:NumericCircleButton.kt$NumericCircleButton$fun setOnClickListener(clickListener: ((rating: Int) -> Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:OnBackPressedListener.kt$OnBackPressedListener$fun onBackPressed(): BackPressedDetails?</ID>
    <ID>UndocumentedPublicFunction:OnBackPressedListener.kt$OnBackPressedListener.BackPressedDetails$fun shouldInvokeSuperOnBackPressed(): Boolean</ID>
    <ID>UndocumentedPublicFunction:OptionFillParent.kt$OptionFillParent$fun getText()</ID>
    <ID>UndocumentedPublicFunction:OptionFillParent.kt$OptionFillParent$fun setOnClick(clickListener: OnClickListener?)</ID>
    <ID>UndocumentedPublicFunction:OptionFillParent.kt$OptionFillParent$fun setOnTextChangedListener(watcher: TextWatcher?)</ID>
    <ID>UndocumentedPublicFunction:OptionFillParent.kt$OptionFillParent$fun setOptionText(text: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:OptionFillParent.kt$OptionFillParent$fun setText(text: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:OptionWrapContent.kt$OptionWrapContent$fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:OptionWrapContent.kt$OptionWrapContent$fun setOptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:OrgId.kt$OrgId.Companion$fun fromJson(jsonName: String): OrgId</ID>
    <ID>UndocumentedPublicFunction:OrgIdExtensions.kt$fun OrgId.toAppointmentOrgId(): AppointmentOrgId</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragment.kt$@Suppress("LongMethod", "FunctionName", "FunctionNaming") @Composable fun OutcomesView( outcomesScreenDataModel: OutcomesScreenDataModel, navController: NavController?, itemClick: (ResourceCLickDataModel) -> Unit, onPrimaryButtonClick: (Int, String) -> Unit, onSecondaryButtonClick: (Int) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragment.kt$@SuppressLint("PrivateResource") @Composable fun FrictionScreen(title: String, description: String)</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragment.kt$@SuppressLint("PrivateResource") @Suppress("LongParameterList", "FunctionName", "FunctionNaming") @Composable fun OutcomesScreen( viewModel: OutcomesSuggestionsViewModel, navController: NavController?, moduleId: String, itemClick: (ResourceCLickDataModel) -> Unit, logViewOutcomesError: () -> Unit, logViewOutcomesScreen: () -> Unit, onReloadErrorScreen: (String) -> Unit, onCloseErrorScreen: () -> Unit, logViewFrictionScreen: () -> Unit, onPrimaryButtonClick: (Int, String) -> Unit, onSecondaryButtonClick: (Int) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): OutcomeSuggestionsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): OutcomeSuggestionsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentDirections.kt$OutcomeSuggestionsFragmentDirections.Companion$public fun actionAssessmentNavGraphPop(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentDirections.kt$OutcomeSuggestionsFragmentDirections.Companion$public fun actionGlobalAssessmentQuestionFragment(retakeAssessment: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentDirections.kt$OutcomeSuggestionsFragmentDirections.Companion$public fun actionGlobalAssessmentsExitFragment( exitScreen: ExitScreen? = null, successScreen: SuccessScreen? = null, questionId: String = "\"\"", moduleId: String = "\"\"", moduleType: String = "\"\"", currentQuestion: Int = 0, totalQuestions: Int = 0, points: Int = 0, answers: Answers? = null, retake: Boolean = false, redirectUrl: String? = null ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsFragmentDirections.kt$OutcomeSuggestionsFragmentDirections.Companion$public fun actionGlobalCovidAssesment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:OutcomeSuggestionsUseCase.kt$OutcomeSuggestionsUseCase$operator fun invoke( assessmentId: String, ): Flow&lt;Outcome&lt;OutcomesScreenDataModel>></ID>
    <ID>UndocumentedPublicFunction:OutcomesAnalytics.kt$fun AnalyticsTracker.trackClose(noOfResources: Int)</ID>
    <ID>UndocumentedPublicFunction:OutcomesAnalytics.kt$fun AnalyticsTracker.trackCloseErrorScreen()</ID>
    <ID>UndocumentedPublicFunction:OutcomesAnalytics.kt$fun AnalyticsTracker.trackOutcomeSelection( resourceCLickDataModel: ResourceCLickDataModel, resource: ResourceIdentity )</ID>
    <ID>UndocumentedPublicFunction:OutcomesAnalytics.kt$fun AnalyticsTracker.trackViewAllSuggestions(noOfResources: Int)</ID>
    <ID>UndocumentedPublicFunction:OutcomesAnalytics.kt$fun AnalyticsTracker.viewOutcomesScreen()</ID>
    <ID>UndocumentedPublicFunction:OutcomesAnalytics.kt$fun AnalyticsTracker.viewOutcomesScreenError()</ID>
    <ID>UndocumentedPublicFunction:OutcomesRepository.kt$OutcomesRepository$fun getOutcomeSuggestions(assessmentId: String): Flow&lt;Outcome&lt;OutcomesSuggestions>></ID>
    <ID>UndocumentedPublicFunction:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$fun getTotalSuggestions(): Int</ID>
    <ID>UndocumentedPublicFunction:OutcomesSuggestionsViewModel.kt$ResourceIdentity.Companion$fun getResourceIdentity(activityId: String, campaignId: String): ResourceIdentity</ID>
    <ID>UndocumentedPublicFunction:PCHMapleChatViewModel.kt$PCHMapleChatViewModel$fun getMapleUser()</ID>
    <ID>UndocumentedPublicFunction:PCHMapleChatViewModel.kt$PCHMapleChatViewModel$fun unlinkMapleUser()</ID>
    <ID>UndocumentedPublicFunction:PCHealthAuthenticator.kt$PCHealthAuthenticator$fun signIn(sessionId: String?, jwt: String?, deviceToken: String?)</ID>
    <ID>UndocumentedPublicFunction:PCHealthAuthenticator_RefreshAndAuthenticateJWT.kt$// refreshAndAuthenticateJwt can only have one request in session, however it's likely that multiple threads // and context will discover the JwtToken is expired and try to call this. We resolve this by calling it once // and queuing all subsequent requests. Then when the first request returns, we call all of the queued callbacks. fun PCHealthAuthenticator.refreshAndAuthenticateJwt( api: API, sessionId: String, deviceToken: String, callback: RequestCallback&lt;AuthInfo>? = null )</ID>
    <ID>UndocumentedPublicFunction:PCHealthColors.kt$fun createPCHealthColors(context: Context): GenesisColors</ID>
    <ID>UndocumentedPublicFunction:PCHealthReadingsController.kt$PCHealthReadingsController$fun updateState(cards: List&lt;InsightCard>)</ID>
    <ID>UndocumentedPublicFunction:PCHealthReadingsController.kt$PCHealthReadingsController.Listener$fun handleInsightCardClick(insightCard: InsightCard)</ID>
    <ID>UndocumentedPublicFunction:PCHealthReadingsController.kt$PCHealthReadingsController.Listener$fun onCareTeamClick()</ID>
    <ID>UndocumentedPublicFunction:PCHealthReadingsController.kt$PCHealthReadingsController.Listener$fun showEmptyStateInfoScreen()</ID>
    <ID>UndocumentedPublicFunction:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$@Composable @Preview fun PCHealthStationMoreInfoPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$@Composable fun AddNewReadingsContent( onClickListener: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:PCHealthStationReadingViewModel.kt$PCHealthStationReadingViewModel$// used to fetch insight cards fun getInsightCards(accessToken: String)</ID>
    <ID>UndocumentedPublicFunction:PCHealthStationReadingsFragmentDirections.kt$PCHealthStationReadingsFragmentDirections.Companion$public fun actionPCHealthStationReadingsFragmentToConsentFragment(claimCode: String?, navigateTo: Int = -1): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PCHealthStationReadingsFragmentDirections.kt$PCHealthStationReadingsFragmentDirections.Companion$public fun actionPCHealthStationReadingsFragmentToGraphDetailsNavGraph(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PCHealthStationReadingsFragmentDirections.kt$PCHealthStationReadingsFragmentDirections.Companion$public fun actionPCHealthStationReadingsFragmentToPCHealthStationMoreInfoFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PageFooter.kt$@Composable fun PageFooter( titleText: String, subtitleText: String, modifier: Modifier = Modifier, backgroundColor: Color = GenesisTheme.colors.surfaceBackgroundSecondary, titleTextColor: Color = GenesisTheme.colors.onSurfaceTextPrimary, subtitleTextColor: Color = GenesisTheme.colors.onSurfaceTextPrimary, titleTextStyle: TextStyle = GenesisTheme.typography.h4, subtitleTextStyle: TextStyle = GenesisTheme.typography.caption, )</ID>
    <ID>UndocumentedPublicFunction:PageFooter.kt$@Preview(name = "Page Footer", group = "Footer") @Composable fun PageFooterPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$@Composable fun PageHeader( modifier: Modifier = Modifier, titleText: String, overlineText: String? = null, underlineText: String? = null, backgroundColor: Color = GenesisTheme.colors.backgroundInfoLight, titleTextColor: Color = GenesisTheme.colors.textPrimary, overlineTextAllCaps: Boolean = true, overlineTextColor: Color = GenesisTheme.colors.textPrimary, underlineTextColor: Color = GenesisTheme.colors.textHint, badgeIconBackgroundColor: Color = GenesisTheme.colors.surfaceBackgroundPrimary, badgeIcon: @Composable (BoxScope.() -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$@Composable fun PageHeader( modifier: Modifier = Modifier, titleText: String, overlineText: String? = null, underlineText: String? = null, badgeIconUrl: String, backgroundColor: Color = GenesisTheme.colors.backgroundInfoLight, titleTextColor: Color = GenesisTheme.colors.primaryTextDefault, overlineTextAllCaps: Boolean = true, overlineTextColor: Color = GenesisTheme.colors.primaryTextDefault, underlineTextColor: Color = GenesisTheme.colors.textHint, )</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$@Preview(name = "Page Header", group = "Header") @Composable fun PageHeaderPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @CallbackProp fun setOnActionClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp fun setActionIconRes(@DrawableRes iconRes: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp fun setDescriptionStyle(@Header.DescriptionStyle style: Int = DESCRIPTION_STYLE_BODY2)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp fun setHeaderColorAttr(@AttrRes colorAttrResId: Int = R.attr.color_text_primary)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp fun setHeaderStyle(@Header.HeaderStyle style: Int = HEADER_STYLE_H2)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp fun setPaddingRes( spacingAttrRes: SpacingAttrRes = SpacingAttrRes( leftSpacingResId = R.attr.spacing_one_and_half, rightSpacingResId = R.attr.spacing_one_and_half, topSpacingResId = R.attr.spacing_half ) )</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp(group = "badge", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBadgeImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setHeaderImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp(group = "images") fun setImageContentIds(contentIds: List&lt;String> = listOf())</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @ModelProp(group = "swoop_color") fun setSwoopColorAttrRes(@AttrRes colorAttrResId: Int = R.attr.color_background_page_swoop_primary)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@JvmOverloads @TextProp fun setOverline(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "badge") fun setBadgeImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "badge") fun setBadgeImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "badge") fun setBadgeImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "badge") fun setSquareBadgeResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "image") fun setHeaderImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "image") fun setHeaderImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "images") fun setImageResources(/*@DrawableRes*/ imageResIds: List&lt;Int>)</ID>
    <ID>UndocumentedPublicFunction:PageHeader.kt$PageHeader$@ModelProp(group = "swoop_color") fun setSwoopColor(@ColorInt color: Int)</ID>
    <ID>UndocumentedPublicFunction:PagerControls.kt$@Composable fun PagerControls( modifier: Modifier = Modifier, onPreviousClick: () -> Unit, onNextClick: () -> Unit, onDoneClick: () -> Unit, doneButtonText: String, showDoneButton: Boolean, atLastPage: Boolean, atFirstPage: Boolean )</ID>
    <ID>UndocumentedPublicFunction:PagerControls.kt$@Preview(name = "Pager Controls", group = "Pager") @Composable fun PagerControlsPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PcoAPI.kt$PcoAPI$@GET("v1/households/{householdId}/points") suspend fun getPoints(@Path("householdId") householdId: String): Outcome&lt;HouseholdPoints></ID>
    <ID>UndocumentedPublicFunction:PcoAPI.kt$PcoAPI$@GET("v1/members/{memberId}/identities") suspend fun getIdentities(@Path("memberId") memberId: String): Outcome&lt;IdentityList></ID>
    <ID>UndocumentedPublicFunction:PcoAPI.kt$PcoAPI$@GET("v2/members") suspend fun getMembers(@Query("identifier") pcid: String): Outcome&lt;Member></ID>
    <ID>UndocumentedPublicFunction:PcoAPI.kt$PcoAPI$@PUT("v1/members/{memberId}/identities") suspend fun putIdentities(@Path("memberId") memberId: String, @Body identity: Identity): Outcome&lt;Identity></ID>
    <ID>UndocumentedPublicFunction:PcoAPIInterceptor.kt$PcoAPIInterceptor$fun getHttpClient(apikey: String, pcoAccountUtils: PcoAccountUtils): OkHttpClient</ID>
    <ID>UndocumentedPublicFunction:PcoAccountUtils.kt$PcoAccountUtils$fun PcidWebServiceError.getRemoteCause()</ID>
    <ID>UndocumentedPublicFunction:PcoAccountUtils.kt$PcoAccountUtils$fun clear()</ID>
    <ID>UndocumentedPublicFunction:PcoAccountUtils.kt$PcoAccountUtils$fun clearAuthDataForBiometrics()</ID>
    <ID>UndocumentedPublicFunction:PcoAccountUtils.kt$PcoAccountUtils$fun saveAuthDataForBiometrics()</ID>
    <ID>UndocumentedPublicFunction:PcoAccountUtils.kt$PcoAccountUtils$fun signInWithBiometrics()</ID>
    <ID>UndocumentedPublicFunction:PcoInfoFragmentDirections.kt$PcoInfoFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PcoInfoFragmentDirections.kt$PcoInfoFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PcoSignUpPromptFragmentDirections.kt$PcoSignUpPromptFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PcoSignUpPromptFragmentDirections.kt$PcoSignUpPromptFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PermissionFragment.kt$PermissionFragment.Companion$fun getBundle( @DrawableRes image: Int?, title: String, description: String, acceptButtonText: String, declineButtonText: String ): Bundle</ID>
    <ID>UndocumentedPublicFunction:PermissionFragmentDirections.kt$PermissionFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PermissionFragmentDirections.kt$PermissionFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoFragmentDirections.kt$PersonalInfoFragmentDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoFragmentDirections.kt$PersonalInfoFragmentDirections.Companion$public fun navigateToSelectGenderIdentity(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoFragmentDirections.kt$PersonalInfoFragmentDirections.Companion$public fun navigateToSelectPronoun(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$// If any of the below checks are false, the isNotModified will return false, // indicating that it is modified fun isModified(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$@Suppress("Deprecation") fun validateInfo()</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun fetchPersonalInfo()</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun isDataValid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun saveData()</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setAddress1(address1: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setAddress2(address2: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setCity(city: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setCountry(country: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setDateOfBirth(dateOfBirth: Date?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setFirstName(firstName: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setGenderIdentities(genderIdentities: List&lt;GenderIdentity>)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setLastName(lastName: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setPostalCode(postalCode: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setPostalCode(postalCode: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setPostalCodeIE(postalCode: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setPreferredName(preferredName: String)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setPronouns(pronouns: List&lt;Pronoun>)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setProvince(province: Province?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setProvince(province: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setProvinceIE(provinceIE: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setSexAtBirth(sexAtBirth: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setState(states: String?)</ID>
    <ID>UndocumentedPublicFunction:PersonalInfoViewModel.kt$PersonalInfoViewModel$fun setZipCode(zipCode: String?)</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$@JvmOverloads @TextProp fun setPhoneNumber(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$@ModelProp fun setCountryCode(code: Int)</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$fun isInvalid(isInvalid: Boolean)</ID>
    <ID>UndocumentedPublicFunction:PhoneNumberInputRow.kt$PhoneNumberInputRow$fun setInvalidText(errorText: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$@Composable @OptIn(ExperimentalMaterialApi::class) fun PillButton( modifier: Modifier = Modifier, backgroundColor: Color, onClick: () -> Unit = {}, horizontalPadding: Dp = GenesisTheme.spacing.half, verticalPadding: Dp = GenesisTheme.spacing.quarter, iconPadding: Dp = GenesisTheme.spacing.quarter, icon: @Composable (RowScope.() -> Unit)?, text: @Composable (RowScope.() -> Unit), )</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$@Composable fun PillButton( modifier: Modifier = Modifier, textColor: Color = GenesisTheme.colors.textButtonPill, onClick: () -> Unit = {}, imageContentDescription: String? = null, imageSize: Dp = 12.dp, text: String, backgroundColor: Color, imageUrl: String? )</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun PillButton( modifier: Modifier = Modifier, textColor: Color = GenesisTheme.colors.textButtonPill, onClick: () -> Unit = {}, text: String, backgroundColor: Color, icon: @Composable (RowScope.() -> Unit)? )</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$@Preview(name = "Pill Button", group = "Button") @Composable fun PillButtonPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @ModelProp fun setLoadingState(isLoading: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @ModelProp(group = "background_color") fun setBackgroundColorAttr(@AttrRes color: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @ModelProp(group = "background_color") fun setBackgroundColorRes(@ColorRes color: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@JvmOverloads @TextProp fun setText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@ModelProp(group = "text_color") @JvmOverloads fun setTextColorAttr(@AttrRes color: Int = R.attr.color_text_button_pill)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$@ModelProp(group = "text_color") fun setTextColorRes(@ColorRes color: Int)</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$fun disableAccessibilityInteraction()</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$fun setLoadingStateOff()</ID>
    <ID>UndocumentedPublicFunction:PillButton.kt$PillButton$fun setLoadingStateOn()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun ExpiredTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun LogOnHoldTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun PartialQuantityRemainingTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun ReadyForPickupTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun ReadyForRefillNoDispenseTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun ReadyForRefillTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun ReadyForRenewalTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun RefillRequestedTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun RenewalRequestedTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun RenewalRequiredTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun UnableToRefillOnlineTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Composable fun UnableToRenewOnlineTag()</ID>
    <ID>UndocumentedPublicFunction:PillTag.kt$@Preview @Composable fun PillTagPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PointsIndicator.kt$PointsIndicator$fun setPoints(points: Int)</ID>
    <ID>UndocumentedPublicFunction:PointsIndicator.kt$PointsIndicator$fun setShowPoints(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:PointsIndicator.kt$PointsIndicator$fun setStatus(status: Status)</ID>
    <ID>UndocumentedPublicFunction:PoweredByLeagueFragmentDirections.kt$PoweredByLeagueFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): PractitionerDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): PractitionerDetailsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerDetailsFragmentDirections.kt$PractitionerDetailsFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): PractitionerSelectionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): PractitionerSelectionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToPractitionerDetails(serviceBookingSelections: ServiceBookingSelections, practitionerId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PractitionerSelectionFragmentDirections.kt$PractitionerSelectionFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PreChatFormFragment.kt$PreChatFormFragment$fun startChat(detail: String, isCovidChat: Boolean?)</ID>
    <ID>UndocumentedPublicFunction:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): PreChatFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): PreChatFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:PreChatFormFragmentDirections.kt$PreChatFormFragmentDirections.Companion$public fun navigateToLiveAgent( agentTypeDescription: String = "", agentType: String = "", chatAgentConfig: ChatAgentConfig? = null, isCovidChat: Boolean = false, covidDetail: String = "" ): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PreChatFormViewModel.kt$PreChatFormViewModel$fun validateFormDetails(details: String, isCovidChat: Boolean?)</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetail.kt$fun PrescriptionInfo.getPrescriptionQuantity()</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetailsFragmentDirections.kt$PrescriptionDetailsFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetailsFragmentDirections.kt$PrescriptionDetailsFragmentDirections.Companion$public fun actionPrescriptionToEnableNotification(arEnabled: Boolean = false): NavDirections</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetailsScreen.kt$@Composable fun PrescriptionDetailsContent(prescriptionDetail: PrescriptionDetail)</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetailsScreen.kt$@Composable fun PrescriptionDetailsRouter( prescriptionDetailsInterface: PrescriptionDetailsInterface, onNavigationToNotification: (Boolean) -> Unit, onNavigationBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetailsScreen.kt$@Composable fun PrescriptionInfoHeader(prescriptionInfo: PrescriptionInfo)</ID>
    <ID>UndocumentedPublicFunction:PrescriptionDetailsScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun PrescriptionDetailsScreen( data: PrescriptionDetailsStateData, onNavigationToNotification: (Boolean) -> Unit, onNavigationBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:PrescriptionTile.kt$@Preview(name = "Prescription tile") @Composable fun PrescriptionTilePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:PrescriptionType.kt$@Composable fun PrescriptionType.Tag()</ID>
    <ID>UndocumentedPublicFunction:PrescriptionType.kt$fun PrescriptionType.isRefillable(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PresenterDatabase.kt$PresenterDatabase$abstract fun getLeagueChatMessageDao(): LeagueChatMessageDao</ID>
    <ID>UndocumentedPublicFunction:PresenterDatabase.kt$PresenterDatabase.Companion$fun getDatabase(context: Context): PresenterDatabase</ID>
    <ID>UndocumentedPublicFunction:PriceUtil.kt$PriceUtil$fun getPriceText(productType: String, value: String, currency: String, getAccessText: String = ""): String</ID>
    <ID>UndocumentedPublicFunction:Pricing.kt$Pricing$fun formatPrice(isCurrencyShown: Boolean, stringProvider: StringProvider): String</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockActivityLifecycleObserver.kt$PrivacyLockActivityLifecycleObserver$@androidx.lifecycle.OnLifecycleEvent(Lifecycle.Event.ON_DESTROY) fun removeObserver()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockActivityLifecycleObserver.kt$PrivacyLockActivityLifecycleObserver$@androidx.lifecycle.OnLifecycleEvent(Lifecycle.Event.ON_RESUME) fun checkIfShouldSignOut()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockApplicationLifecycleObserver.kt$PrivacyLockApplicationLifecycleObserver$@androidx.lifecycle.OnLifecycleEvent(Lifecycle.Event.ON_DESTROY) fun onExit()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockApplicationLifecycleObserver.kt$PrivacyLockApplicationLifecycleObserver$@androidx.lifecycle.OnLifecycleEvent(Lifecycle.Event.ON_START) fun onEnterForeground()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockApplicationLifecycleObserver.kt$PrivacyLockApplicationLifecycleObserver$@androidx.lifecycle.OnLifecycleEvent(Lifecycle.Event.ON_STOP) fun onEnterBackground()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockLoginPrompt.kt$PrivacyLockLoginPrompt$fun promptForBiometrics()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun checkIfAppTimedOutWhileBackgrounded()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun getActivationPromptStatus(userId: String): ActivationPromptStatus</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun getHasUserEnabledPrivacyLock(userId: String)</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun getTimesActivationPromptShown(userId: String): Int</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun incrementTimesActivationPromptShown(userId: String)</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun restorePrivacyLockPrompt()</ID>
    <ID>UndocumentedPublicFunction:PrivacyLockUtils.kt$PrivacyLockUtils$fun setHasUserEnabledPrivacyLock(userId: String, isEnabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ProfileVerificationFragmentDirections.kt$ProfileVerificationFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ProfileVerificationScreen.kt$@Composable fun ProfileVerificationContent( data: ProfileVerificationState, onVerifyClick: () -> Unit, onContactClick: () -> Unit, onBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ProfileVerificationScreen.kt$@Composable fun ProfileVerificationScreenRouter( uiState: ProfileVerificationInterface, onContactClick: () -> Unit, onBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @ModelProp fun setProgress( progressConfig: GenesisProgressBar.ProgressConfig = GenesisProgressBar.ProgressConfig(0, 1, R.string.genesis_empty) )</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @ModelProp fun setShowProgress(show: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @TextProp fun setOverlineText(overline: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@JvmOverloads @TextProp fun setTitleText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ProgressCard.kt$ProgressCard$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@JvmOverloads @ModelProp fun setProgressBars(progressBars: List&lt;ProgressBarConfiguration> = emptyList())</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@ModelProp @JvmOverloads fun setActive(active: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@ModelProp(group = "image") @JvmOverloads fun setImage(@DrawableRes drawable: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@ModelProp(group = "image") fun setImageUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@TextProp @JvmOverloads fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@TextProp @JvmOverloads fun setStatusText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressHeader.kt$ProgressHeader$@TextProp @JvmOverloads fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$@Composable fun ProgressRow( modifier: Modifier = Modifier, imageUrl: String, placeholder: Painter? = null, title: String, body: String, animationDuration: Int = 0, progressBarBackgroundColor: Color = GenesisTheme.colors.surfaceCardDisable, progressBarBackgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, onClick: (() -> Unit)? = null, progressBars: List&lt;ProgressBarConfiguration>, )</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$@Composable fun ProgressRow( modifier: Modifier = Modifier, title: String, body: String, animationDuration: Int = 0, progressBarBackgroundColor: Color = GenesisTheme.colors.surfaceCardDisable, progressBarBackgroundShape: Shape = GenesisTheme.shapes.largeRoundedCorner, onClick: (() -> Unit)? = null, progressBars: List&lt;ProgressBarConfiguration>, imageContent: @Composable BoxScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$@Preview(name = "Progress Row", group = "Row") @Composable fun ProgressRowPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @ModelProp fun setProgress( progress: GenesisProgressBar.ProgressConfig = GenesisProgressBar.ProgressConfig( progress = 0, total = 100, unitsString = "", progressTextType = PROGRESS_TEXT_TYPE_NONE ) )</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @ModelProp fun setShowChevron(showChevron: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @ModelProp fun setShowDivider(showDivider: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @TextProp fun setBodyText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$fun getBodyText(): String</ID>
    <ID>UndocumentedPublicFunction:ProgressRow.kt$ProgressRow$fun getTitleText(): String</ID>
    <ID>UndocumentedPublicFunction:Province.kt$Province.Companion$fun getAll(sortType: SortType = SortType.TYPE): List&lt;Province></ID>
    <ID>UndocumentedPublicFunction:ProvinceIE.kt$ProvinceIE.Companion$fun getAll(): List&lt;ProvinceIE></ID>
    <ID>UndocumentedPublicFunction:PulseAnimation.kt$@Composable fun PulseAnimation( modifier: Modifier = Modifier, pulseDuration: Int = 1000, animationDelay: Int = 0, isInfinitePulse: Boolean = false, pulseLength: Float = 1.2f, startAnimating: Boolean = true, content: @Composable BoxScope.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:PulseAnimation.kt$@Composable fun rememberPulseAnimation( pulseDuration: Int = 1000, animationDelay: Int = 0, isInfinitePulse: Boolean = false, pulseLength: Float = 1.2f, startAnimating: Boolean = true, ): State&lt;Float></ID>
    <ID>UndocumentedPublicFunction:PulseAnimation.kt$@Preview(name = "Finite Pulse Animation", group = "Animations") @Composable fun FinitePulsePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@Composable fun ExpiredView(onCtaClicked: () -> Unit, onCancelCLicked: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@Composable fun LoadedView(time: Int, bitmap: Bitmap?, onCtaClicked: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@Composable fun LoadingView()</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@Preview(showBackground = true) @Composable fun ExpiredPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@Preview(showBackground = true) @Composable fun LoadedPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@Preview(showBackground = true) @Composable fun LoadingPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:QRCodeGenerationFragment.kt$@SuppressLint("UnusedCrossfadeTargetStateParameter") @Composable fun QRCodeGenerationView( viewModel: QRCodeViewModel, onCrossClick: () -> Unit, onScanClicked: () -> Unit, onCancelCLicked: () -> Unit, onRegenerateBarcodeClicked: () -> Unit, tag: String = "", analyticsTracker: AnalyticsTracker? = null )</ID>
    <ID>UndocumentedPublicFunction:QRCodeScanner.kt$QRCodeScanner$fun setAnalyzer(codeAnalyzer: CodeAnalyzerListener)</ID>
    <ID>UndocumentedPublicFunction:QRCodeScannerFragmentDirections.kt$QRCodeScannerFragmentDirections.Companion$public fun actionQRCodeScannerFragmentToReadingsImportFragment(claimCode: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:QRCodeViewModel.kt$QRCodeViewModel$// used to fetch insight cards fun getQRCode(accessToken: String)</ID>
    <ID>UndocumentedPublicFunction:QRCodeViewModel.kt$QRCodeViewModel$fun regenerateQRCode()</ID>
    <ID>UndocumentedPublicFunction:Question.kt$Question$fun isQuestionAnswerValid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:QuestionController.kt$ViewControllerInterface$fun prefetchImage(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:QuestionController.kt$ViewControllerInterface$fun showInfoDialog(title: String, subtitle: String, message: String)</ID>
    <ID>UndocumentedPublicFunction:QuestionController.kt$ViewControllerInterface$fun updateAnswer(question: Question, answers: Answers, module: Module)</ID>
    <ID>UndocumentedPublicFunction:QuickActionButton.kt$QuickActionButton$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:QuickActionButton.kt$QuickActionButton$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:QuickActionButton.kt$QuickActionButton$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:QuickActionButton.kt$QuickActionButton$@JvmOverloads @TextProp fun setImageContentDescription(text: CharSequence? = null)</ID>
    <ID>UndocumentedPublicFunction:QuickActionButton.kt$QuickActionButton$@ModelProp(group = "image") fun setImageResourceId(@DrawableRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:RatingUtils.kt$RatingUtils$fun getConditionFulfilledToPromptForRating(context: Context): String?</ID>
    <ID>UndocumentedPublicFunction:RatingUtils.kt$RatingUtils$fun incrementNumHealthJourneyActivitiesCompleted(context: Context)</ID>
    <ID>UndocumentedPublicFunction:RatingUtils.kt$RatingUtils$fun setNumHealthJourneyActivitiesCompleted(context: Context, numHealthGoal: Int)</ID>
    <ID>UndocumentedPublicFunction:RatingUtils.kt$RatingUtils$fun setRatingPromptViewed(context: Context, hasUserViewedPrompt: Boolean)</ID>
    <ID>UndocumentedPublicFunction:RatingUtils.kt$RatingUtils$fun setUserHasSubmittedAClaim(context: Context)</ID>
    <ID>UndocumentedPublicFunction:RatingUtils.kt$RatingUtils$fun shouldShowRatingPrompt(context: Context): Boolean</ID>
    <ID>UndocumentedPublicFunction:ReadingsController.kt$ReadingsController$fun discardChanges()</ID>
    <ID>UndocumentedPublicFunction:ReadingsController.kt$ReadingsController$fun initializeReadings(userReading: UserReading)</ID>
    <ID>UndocumentedPublicFunction:ReadingsController.kt$ReadingsController.Listener$fun deleteReadings(readings: List&lt;Reading>)</ID>
    <ID>UndocumentedPublicFunction:ReadingsController.kt$ReadingsController.Listener$fun updateEditingState(editing: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ReadingsImportFragmentArgs.kt$ReadingsImportFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ReadingsImportFragmentArgs.kt$ReadingsImportFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ReadingsImportFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ReadingsImportFragmentArgs.kt$ReadingsImportFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ReadingsImportFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ReadingsUseCase.kt$ReadingsUseCase$operator fun invoke(readingCode: String, accessToken: String): Flow&lt;Outcome&lt;GraphData>></ID>
    <ID>UndocumentedPublicFunction:RealmStringMap.kt$RealmStringMap$fun keySet(): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:RealmStringMap.kt$RealmStringMap$fun removeKey(key: String)</ID>
    <ID>UndocumentedPublicFunction:RealmStringMap.kt$RealmStringMap$fun setKey(key: String?, value: String)</ID>
    <ID>UndocumentedPublicFunction:RealmStringMap.kt$RealmStringMap$operator fun get(key: String?): String?</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun appearance(@StyleRes id: Int)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun click(action: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun color(@ColorRes id: Int)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun custom(span: Any)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun icon(@DrawableRes id: Int, size: Int)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun sansSerifMedium()</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun sansSerifRegular()</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun size(@DimenRes id: Int)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun typeface(family: String)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$ResSpans$fun typeface(style: Int)</ID>
    <ID>UndocumentedPublicFunction:RecSpans.kt$fun clickableSpan(action: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:RecentAchievementUseCase.kt$RecentAchievementUseCase$fun fetchRecentlyEarnedAchievements()</ID>
    <ID>UndocumentedPublicFunction:RecentlyEarnedAchievements.kt$@Composable fun RecentlyEarnedAchievements( modifier: Modifier = Modifier, viewModel: RecentAchievementsViewModel = getViewModel(), navController: NavController? = rememberNavController() )</ID>
    <ID>UndocumentedPublicFunction:Refreshable.kt$@Suppress("FunctionNaming") fun SharingStartedLazilyUntil( flow: Flow&lt;Unit> )</ID>
    <ID>UndocumentedPublicFunction:Refreshable.kt$@Suppress("FunctionNaming") fun SharingStartedWhileSubscribedUntil( flow: Flow&lt;Unit>, stopTimeoutMillis: Long = 0, replayExpirationMillis: Long = Long.MAX_VALUE )</ID>
    <ID>UndocumentedPublicFunction:Refreshable.kt$Refreshable$fun refresh()</ID>
    <ID>UndocumentedPublicFunction:Refreshable.kt$fun &lt;T> Flow&lt;Outcome&lt;T>>.refreshStateIn( scope: CoroutineScope, refreshWhen: Flow&lt;Unit>, sharingStarted: SharingStarted = SharingStartedLazilyUntil(refreshWhen) ): StateFlow&lt;State&lt;T>></ID>
    <ID>UndocumentedPublicFunction:RefreshableViewModel.kt$@Suppress("FunctionNaming") fun SharingStartedLazilyUntil( flow: Flow&lt;Unit> )</ID>
    <ID>UndocumentedPublicFunction:RefreshableViewModel.kt$@Suppress("FunctionNaming") fun SharingStartedWhileSubscribedUntil( flow: Flow&lt;Unit>, stopTimeoutMillis: Long = 0, replayExpirationMillis: Long = Long.MAX_VALUE )</ID>
    <ID>UndocumentedPublicFunction:RefreshableViewModel.kt$fun &lt;T> Flow&lt;Outcome&lt;T>>.refreshStateIn( scope: CoroutineScope, refreshWhen: Flow&lt;Unit>, sharingStarted: SharingStarted = SharingStartedLazilyUntil(refreshWhen) ): StateFlow&lt;State&lt;T>></ID>
    <ID>UndocumentedPublicFunction:RefreshableViewModel.kt$fun ViewModel.refresh()</ID>
    <ID>UndocumentedPublicFunction:RelationshipSelectionUseCase.kt$RelationshipSelectionUseCase$operator fun invoke(): Flow&lt;RelationshipSelectionState></ID>
    <ID>UndocumentedPublicFunction:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi$fun contains(key: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi$fun getBoolean(key: String): RemoteFeatureFlagValue&lt;Boolean></ID>
    <ID>UndocumentedPublicFunction:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi$fun getDouble(key: String): RemoteFeatureFlagValue&lt;Double></ID>
    <ID>UndocumentedPublicFunction:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi$fun getLong(key: String): RemoteFeatureFlagValue&lt;Long></ID>
    <ID>UndocumentedPublicFunction:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi$fun getString(key: String): RemoteFeatureFlagValue&lt;String></ID>
    <ID>UndocumentedPublicFunction:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagsApi$suspend fun fetchValues(): Outcome&lt;Empty></ID>
    <ID>UndocumentedPublicFunction:RemoteImage.kt$@Composable fun RemoteImage( url: String, contentDescription: String?, modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, alpha: Float = DefaultAlpha, colorFilter: ColorFilter? = null, imageViewLoader: GenesisImageViewLoader? = null, placeHolder: Painter? = null )</ID>
    <ID>UndocumentedPublicFunction:RemoteImage.kt$@Composable fun RemoteImageContent( imageContentId: String, contentDescription: String?, modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, contentScale: ContentScale = ContentScale.Fit, alpha: Float = DefaultAlpha, colorFilter: ColorFilter? = null, imageViewLoader: GenesisImageViewLoader? = null, placeHolder: Painter? = null )</ID>
    <ID>UndocumentedPublicFunction:RemoteImage.kt$@Preview(name = "RemoteImage (by Url)", group = "Remote Image") @Composable fun RemoteImagePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:RemoteImage.kt$@Preview(name = "RemoteImageContent (by content id)", group = "Remote Image") @Composable fun RemoteImageContentPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:RemoveDependentDialog.kt$OnRemoveDependentListener$fun onRemove(removeFieldValues: HashMap&lt;String, String>?)</ID>
    <ID>UndocumentedPublicFunction:RemoveDependentDialog.kt$RemoveDependentDialog$fun setOnRemoveDependentListener(listener: OnRemoveDependentListener?)</ID>
    <ID>UndocumentedPublicFunction:RemoveDependentDialog.kt$RemoveDependentDialog$fun setSchema(removeDependentSchema: DependentRelationshipSchemaField?)</ID>
    <ID>UndocumentedPublicFunction:RemoveReadingUseCase.kt$RemoveReadingUseCase$operator fun invoke(readingIds: List&lt;String>, accessToken: String): Flow&lt;Outcome&lt;DeletedReadingResponse>></ID>
    <ID>UndocumentedPublicFunction:RemoveReadingsController.kt$RemoveReadingsController$fun updateState(readingsToBeDeleted: List&lt;ReadingsToBeDeleted>)</ID>
    <ID>UndocumentedPublicFunction:Repository.kt$Repository$fun clearAllData()</ID>
    <ID>UndocumentedPublicFunction:Repository_Auth.kt$suspend fun UserRepository.authenticateLegacyConnection( api: API, sessionId: String?, deviceToken: String?, pushToken: String? = null ): Outcome&lt;UserFlags></ID>
    <ID>UndocumentedPublicFunction:Repository_Authenticate.kt$suspend fun UserRepository.authenticateAuth0Connection( api: API, jwt: String?, pushNotificationToken: String?, buildInfoUtils: BuildInfoUtils ): Outcome&lt;UserFlags></ID>
    <ID>UndocumentedPublicFunction:Repository_Banking.kt$// userRepository is needed to get the payment types, ideally paymentTypes should be a parameter // and not rely on being read from the user repository. The combination logic should live in a // view model fun Repository.getPaymentCredentials( userRepository: UserRepository, callback: RequestCallback&lt;MutableList&lt;PaymentCredential>> ): MutableList&lt;PaymentCredential>?</ID>
    <ID>UndocumentedPublicFunction:Repository_Banking.kt$fun Repository.getCachedPaymentCredential(accountId: String): PaymentCredential?</ID>
    <ID>UndocumentedPublicFunction:Repository_ChatMessages.kt$fun Repository.clearChatCache()</ID>
    <ID>UndocumentedPublicFunction:Repository_ChatMessages.kt$fun Repository.setImagePreview(file: File?)</ID>
    <ID>UndocumentedPublicFunction:Repository_ChatMessages.kt$fun Repository.setPreviousChatTime(date: Date)</ID>
    <ID>UndocumentedPublicFunction:Repository_Claim.kt$fun Repository.getCachedClaim(claimId: String): ClaimDetail?</ID>
    <ID>UndocumentedPublicFunction:Repository_Claim.kt$fun Repository.getClaims( status: String?, callback: RequestCallback&lt;MutableList&lt;ClaimDetail>> ): MutableList&lt;ClaimDetail>?</ID>
    <ID>UndocumentedPublicFunction:Repository_Dependents.kt$fun Repository.getDependentData( userId: String, groupId: String, callback: RequestCallback&lt;DependentsList> ): List&lt;Dependent>?</ID>
    <ID>UndocumentedPublicFunction:Repository_Document.kt$fun Repository.deleteUserDocument(document: UserDocument, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:Repository_Document.kt$fun Repository.getCachedUserDocument(documentId: String): UserDocument?</ID>
    <ID>UndocumentedPublicFunction:Repository_Document.kt$fun Repository.getForms(callback: RequestCallback&lt;List&lt;Form>>): List&lt;Form></ID>
    <ID>UndocumentedPublicFunction:Repository_Document.kt$fun Repository.getUserDocuments( callback: RequestCallback&lt;List&lt;UserDocument>> ): List&lt;UserDocument></ID>
    <ID>UndocumentedPublicFunction:Repository_Enrollment.kt$fun Repository.cacheEnrolmentData(enrollmentData: EnrollmentData)</ID>
    <ID>UndocumentedPublicFunction:Repository_Enrollment.kt$fun Repository.getCachedEnrolmentData(callback: RequestCallback&lt;EnrollmentData>)</ID>
    <ID>UndocumentedPublicFunction:Repository_Enrollment.kt$fun Repository.getEnrollmentData(callback: RequestCallback&lt;EnrollmentData>)</ID>
    <ID>UndocumentedPublicFunction:Repository_HealthProfile.kt$fun Repository.completeHealthProfileQuestion( questionId: String, moduleId: String? = null, answers: Answers, campaignId: String, activityId: String, callback: RequestCallback&lt;CompleteQuestionResponse> )</ID>
    <ID>UndocumentedPublicFunction:Repository_HealthProfile.kt$fun Repository.deleteHealthProfile()</ID>
    <ID>UndocumentedPublicFunction:Repository_HealthProfile.kt$fun Repository.getHealthProfile()</ID>
    <ID>UndocumentedPublicFunction:Repository_Home.kt$fun Repository.getHomeArticles(id: String?, location: Location?): ArticleList?</ID>
    <ID>UndocumentedPublicFunction:Repository_Home.kt$fun Repository.getHomeBanner(id: String?, location: Location?): HomeBanner?</ID>
    <ID>UndocumentedPublicFunction:Repository_Home.kt$fun Repository.getHomeLayoutConfig()</ID>
    <ID>UndocumentedPublicFunction:Repository_Lifemarket.kt$fun Repository.getLifemarketMerchList(id: String, maxImageHeightInPx: Int, maxListSize: Int?, callback: RequestCallback&lt;LifemarketMerchList>): LifemarketMerchList?</ID>
    <ID>UndocumentedPublicFunction:Repository_Lifemarket.kt$fun Repository.getLifemarketUrl(callback: RequestCallback&lt;MarketplaceConfig>)</ID>
    <ID>UndocumentedPublicFunction:Repository_Pco.kt$fun Repository.createIdentity(memberId: String, leagueUserId: String)</ID>
    <ID>UndocumentedPublicFunction:Repository_Pco.kt$fun Repository.getIdentityList(memberId: String)</ID>
    <ID>UndocumentedPublicFunction:Repository_Pco.kt$fun Repository.getMembers(pcid: String)</ID>
    <ID>UndocumentedPublicFunction:Repository_Pco.kt$fun Repository.getPoints(householdId: String)</ID>
    <ID>UndocumentedPublicFunction:Repository_Qle.kt$fun Repository.getDependentsRelationshipSchema( groupId: String, isQle: Boolean?, callback: RequestCallback&lt;DependentRelationshipSchema> ): DependentRelationshipSchema?</ID>
    <ID>UndocumentedPublicFunction:Repository_Rewards.kt$fun Repository.getRewardsTransactionsHistory(callback: RequestCallback&lt;RewardsTransactions>): List&lt;Unit>?</ID>
    <ID>UndocumentedPublicFunction:RequestCallback.kt$Outcome$fun fold(onSuccess: (T) -> Unit, onFailure: (String) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:RequestCallback.kt$RequestCallback$abstract fun onFailure(errorResponse: String?)</ID>
    <ID>UndocumentedPublicFunction:RequestCallback.kt$RequestCallback$abstract fun onSuccess(response: T)</ID>
    <ID>UndocumentedPublicFunction:RequestCallback.kt$RequestCallback$fun postError(logger: Logger, errorMessage: String, ex: Throwable? = null)</ID>
    <ID>UndocumentedPublicFunction:RequestCallback.kt$Success$operator fun invoke(): T</ID>
    <ID>UndocumentedPublicFunction:RequestCallbackFlow.kt$inline fun &lt;reified T> requestCallbackFlow( crossinline api: ((RequestCallback&lt;T>) -> Unit) )</ID>
    <ID>UndocumentedPublicFunction:ResourcesExtension.kt$// How to use this extension method to easily make spans: https://medium.com/@programmerr47/working-with-spans-in-android-ca4ab1327bc4 fun Resources.getSpannable(@StringRes id: Int, vararg spanParts: Pair&lt;Any, Iterable&lt;Any>>): CharSequence</ID>
    <ID>UndocumentedPublicFunction:ResourcesExtension.kt$fun Resources.getText(@StringRes id: Int, vararg formatArgs: Any?)</ID>
    <ID>UndocumentedPublicFunction:RestAPIUtils.kt$RestAPIUtils$inline fun &lt;reified RestAPI> createJsonApiRestInstance( baseUrl: String, client: OkHttpClient, errorBodyClass: Class&lt;*>? = Array&lt;JsonApiError>::class.java, noinline requestErrorConverter: ((Moshi, ResponseBody) -> RequestError?)? = null ): RestAPI</ID>
    <ID>UndocumentedPublicFunction:RestAPIUtils.kt$RestAPIUtils$inline fun &lt;reified RestAPI> createRestInstance( baseUrl: String, errorBodyClass: Class&lt;*>? = null, client: OkHttpClient? = null, noinline requestErrorConverter: ((Moshi, ResponseBody) -> RequestError?)? = null ): RestAPI</ID>
    <ID>UndocumentedPublicFunction:RevolvingCarousel.kt$RevolvingCarousel$fun setItems(captionedImages: List&lt;CaptionedImage>)</ID>
    <ID>UndocumentedPublicFunction:RewardBanner.kt$RewardBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:RewardBanner.kt$RewardBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:RewardBanner.kt$RewardBanner$@JvmOverloads @ModelProp fun setRewardPoints(points: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:RewardBanner.kt$RewardBanner$@JvmOverloads @TextProp fun setTitleText(titleText: CharSequence = resources.getString(R.string.genesis_reward_banner_title))</ID>
    <ID>UndocumentedPublicFunction:RewardDirections.kt$RewardDirections$fun navigateToViewAllAchievements()</ID>
    <ID>UndocumentedPublicFunction:RewardExtensions.kt$@Composable fun String.changeTextColor(index: String, color: Color): AnnotatedString</ID>
    <ID>UndocumentedPublicFunction:RewardExtensions.kt$@Composable fun pluralResource( @PluralsRes resId: Int, quantity: Int ): String</ID>
    <ID>UndocumentedPublicFunction:RewardRepository.kt$RewardRepository$fun fetchRewardLevels(): Flow&lt;Outcome&lt;RewardLevelsResponse>></ID>
    <ID>UndocumentedPublicFunction:RewardRepository.kt$RewardRepository$fun getLeagueBalance(): Flow&lt;Outcome&lt;LeagueBalanceResponse>></ID>
    <ID>UndocumentedPublicFunction:RewardRepository.kt$RewardRepository$fun redeemRewards(redeemablePoints: Long): Flow&lt;Outcome&lt;LeagueBalanceResponse>></ID>
    <ID>UndocumentedPublicFunction:RewardsBalanceController.kt$RewardsBalanceController.Navigation$fun onViewHealthPrograms(ctaLabel: String)</ID>
    <ID>UndocumentedPublicFunction:RewardsBalanceController.kt$RewardsBalanceController.Navigation$fun onViewMarketplace()</ID>
    <ID>UndocumentedPublicFunction:RewardsBalanceController.kt$RewardsBalanceController.Navigation$fun onViewPcoApp()</ID>
    <ID>UndocumentedPublicFunction:RewardsBalanceViewModel.kt$RewardsBalanceViewModel$fun fetchPoints()</ID>
    <ID>UndocumentedPublicFunction:RewardsFragmentDirections.kt$RewardsFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:RewardsFragmentDirections.kt$RewardsFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:RewardsFragmentDirections.kt$RewardsFragmentDirections.Companion$public fun actionRewardsFragmentToPcoInfoFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:RewardsFragmentDirections.kt$RewardsFragmentDirections.Companion$public fun actionRewardsFragmentToPcoSignUpPromptFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:RewardsModule.kt$RewardsModule$fun initialize( api: API, placeHolderImageForBadges: Int? = null, celebrationModalCloseImage: Int = -1, activityStreakSwoopImage: Int = -1 )</ID>
    <ID>UndocumentedPublicFunction:RewardsTransactionsViewModel.kt$RewardsTransactionsViewModel$fun getRewardsHistory()</ID>
    <ID>UndocumentedPublicFunction:RichText.kt$@Composable fun RichText( modifier: Modifier = Modifier, htmlText: String, imageGetter: Html.ImageGetter, tagHandler: Html.TagHandler = GenesisTagHandler() )</ID>
    <ID>UndocumentedPublicFunction:RichText.kt$RichText$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:RichText.kt$RichText$@JvmOverloads @ModelProp fun setPaddingRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:RichText.kt$RichText$@JvmOverloads @ModelProp fun setTextFromHtml(html: String = "")</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase$abstract fun getHealthProfileDao(): HealthProfileDao</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase$abstract fun getHouseholdPointsDao(): HouseholdPointsDao</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase$abstract fun getIdentityDao(): IdentityDao</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase$abstract fun getLeagueChatMessageDao(): LeagueChatMessageDao</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase$abstract fun getMarketplaceMerchListDao(): LifemarketMerchListDao</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase$abstract fun getMemberDao(): MemberDao</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerDatabase.kt$RoadRunnerDatabase.Companion$fun getDatabase(context: Context): RoadRunnerDatabase</ID>
    <ID>UndocumentedPublicFunction:RoadRunnerFirebaseMessagingService.kt$RoadRunnerFirebaseMessagingService.Companion$fun clearNotifications(context: Context, conversationId: String)</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$// region deeplink navigation // TODO: put this in extension methods, need to deal with MainActivity overrides first though @JvmOverloads fun navigateToDeeplink( url: String, openBrowserIfUnsupported: Boolean, setRootNavigation: Boolean, enterAnim: Int? = null, exitAnim: Int? = null, navController: NavController? = null, navOptions: NavOptions? = null ): Boolean</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$@JvmOverloads @Synchronized open fun displayOfflineScreen( onDismissOfflineDialog: OnDismissOfflineDialog? = null, onTryAgain: OnTryAgain? = null )</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$@JvmOverloads fun onImageActivityResult( requestCode: Int, resultCode: Int, data: Intent?, handler: ImageHandler = this ): Boolean</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$@JvmOverloads fun promptForImage( allowMultiple: Boolean, onCancel: (() -> Unit)? = null, handler: ImageHandler = this )</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$fun photoLibraryBottomSheetAction( allowMultiple: Boolean, imageHandler: ImageHandler, thumbnail: Int = R.drawable.ic_picture )</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$fun promptUserForStoreRating(): Boolean</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$fun removeOnBackPressedListener()</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$fun requestPermissions( permissions: Array&lt;String>, callback: RequestPermissionCallback )</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$fun setOnBackPressedListener(listener: OnBackPressedListener?)</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$fun takePhotoBottomSheetAction(imageHandler: ImageHandler)</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$open fun handleNavigation( navigationTarget: NavigationTarget, setRootNavigation: Boolean ): Boolean</ID>
    <ID>UndocumentedPublicFunction:RootActivity.kt$RootActivity$open fun handleNavigation( navigationTarget: NavigationTarget, setRootNavigation: Boolean, enterAnim: Int?, exitAnim: Int? ): Boolean</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$@Delete fun delete(obj: Collection&lt;T>)</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$@Delete fun delete(obj: T)</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$@Insert(onConflict = REPLACE) fun insert(obj: List&lt;T>)</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$@Insert(onConflict = REPLACE) fun insert(obj: T)</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$@Insert(onConflict = REPLACE) fun insert(vararg obj: T)</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$@Update fun update(obj: T)</ID>
    <ID>UndocumentedPublicFunction:RootDao.kt$RootDao$fun deleteAll()</ID>
    <ID>UndocumentedPublicFunction:RootFragment.kt$RootFragment$@JvmOverloads fun promptForImage(allowMultiple: Boolean, onCancel: (() -> Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:SalesforceProvinceState.kt$SalesforceProvinceState.Companion$fun getAll(): List&lt;SalesforceProvinceState></ID>
    <ID>UndocumentedPublicFunction:SalesforceProvinceState.kt$SalesforceProvinceState.Companion$fun getProvinceLongForm(province: String): String</ID>
    <ID>UndocumentedPublicFunction:SalesforceUtils.kt$SalesforceUtils$fun handleMessage(message: RemoteMessage): Boolean</ID>
    <ID>UndocumentedPublicFunction:SalesforceUtils.kt$SalesforceUtils$fun registerUser(userId: String)</ID>
    <ID>UndocumentedPublicFunction:SalesforceUtils.kt$SalesforceUtils$fun setToken(token: String)</ID>
    <ID>UndocumentedPublicFunction:SampleJsonApi.kt$SampleJsonApi$@GET("/v1/test/appointments/{userId}") suspend fun testAppointment(@Path("userId") userId: String): Outcome&lt;TestAppointmentsResponse></ID>
    <ID>UndocumentedPublicFunction:ScreenLoader.kt$@Composable fun LoadingScreen()</ID>
    <ID>UndocumentedPublicFunction:SearchInputUseCase.kt$SearchInputUseCase$operator fun invoke(): Flow&lt;SearchInputState></ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getLclApiKey(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getLclClientId(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getLclClientSecret(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getMcAccessToken(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getMcAppId(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getMcMID(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getMcSenderId(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getMcServerUrl(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getSegmentWriteKey(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:Secrets.kt$Secrets$external fun getValidicOrganizationId(packageName: String): String</ID>
    <ID>UndocumentedPublicFunction:SecurityQuestionBottomSheet.kt$@Composable fun QuestionRow( question: String, selected: Boolean, onItemClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SecurityQuestionBottomSheet.kt$@Composable fun SecurityQuestionBottomSheet( onSaveClick: (String) -> Unit, onClose: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SegmentAnalyticsTracker.kt$SegmentAnalyticsTracker.Companion$fun build(context: Context, writeKey: String): SegmentAnalytics</ID>
    <ID>UndocumentedPublicFunction:SelectGenderIdentityDialogFragmentDirections.kt$SelectGenderIdentityDialogFragmentDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectGenderIdentityDialogFragmentDirections.kt$SelectGenderIdentityDialogFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectGenderIdentityViewModel.kt$SelectGenderIdentityViewModel$// TODO: Refactor; this method breaks MVVM by accessing the state directly instead of via an observer // we're also passing a pointer to the view via StringProvider, it should probably be a utility function // within Pronoun instead fun getGenderIdentityString(stringProvider: StringProvider): String</ID>
    <ID>UndocumentedPublicFunction:SelectGenderIdentityViewModel.kt$SelectGenderIdentityViewModel$fun getCustomGenderIdentity(): GenderIdentity?</ID>
    <ID>UndocumentedPublicFunction:SelectGenderIdentityViewModel.kt$SelectGenderIdentityViewModel$fun setGenderIdentities(genderIdentities: List&lt;GenderIdentity>)</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragment.kt$@Composable fun PatientRatioButtonList( modifier: Modifier = Modifier, patients: List&lt;SelectablePatientModel>, header: @Composable () -> Unit, footer: @Composable () -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragment.kt$@Preview(showBackground = true) @Composable fun SelectPatientLoadingPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragment.kt$@Preview(showBackground = true) @Composable fun SelectPatientPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragment.kt$fun selectablePatientPreviewModel(name: String = "Human", selected: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectPatientFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SelectPatientFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun addPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPatientFragmentDirections.kt$SelectPatientFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyFragmentArgs.kt$SelectPharmacyFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyFragmentArgs.kt$SelectPharmacyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectPharmacyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyFragmentArgs.kt$SelectPharmacyFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SelectPharmacyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyFragmentDirections.kt$SelectPharmacyFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillFragmentArgs.kt$SelectPharmacyRefillFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillFragmentArgs.kt$SelectPharmacyRefillFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectPharmacyRefillFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillFragmentArgs.kt$SelectPharmacyRefillFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SelectPharmacyRefillFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillFragmentDirections.kt$SelectPharmacyRefillFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillFragmentDirections.kt$SelectPharmacyRefillFragmentDirections.Companion$public fun actionSelectPharmacyRefillFragmentToSelectPrescriptionsFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillScreen.kt$@Composable fun DisplayList( modifier: Modifier, items: List&lt;Pharmacy>, selectedId: String?, onRadioClick: (String) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillScreen.kt$@Composable fun SelectPharmacyScreen( onSelectYourPharmacyClick: (id: String) -> Unit, onBackClick: () -> Unit, listItems: List&lt;Pharmacy> = listOf() )</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyRefillScreen.kt$@Preview @Composable fun PreviewSelectPharmacyScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyScreen.kt$@Composable fun DisplayPharmacyList( modifier: Modifier = Modifier, items: List&lt;Pharmacy>, selectedId: String?, onRadioClick: (String) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyScreen.kt$@Composable fun SelectPharmacyScreen( viewModel: SelectPharmacyViewModel = SelectPharmacyViewModel(), onSelectYourPharmacyClick: (id: String) -> Unit, onBackClick: () -> Unit, listItems: List&lt;Pharmacy> = listOf() )</ID>
    <ID>UndocumentedPublicFunction:SelectPharmacyScreen.kt$@Preview @Composable fun PreviewSelectPharmacyScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsFragmentDirections.kt$SelectPrescriptionsFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsScreen.kt$@Composable fun SelectPrescriptionsAdapterScreen( viewModel: SelectPrescriptionsViewModel, onContinueClick: (id: List&lt;String>) -> Unit, onDetailClick: (id: String) -> Unit, onBackClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsScreen.kt$@Composable fun SelectPrescriptionsScreen( refillListItems: List&lt;Prescription> = listOf(), renewalListItems: List&lt;Prescription> = listOf(), unavailableListItems: List&lt;Prescription> = listOf(), isPrescriptionSelected: (prescriptionId: String, prescriptions: List&lt;String>) -> Boolean, isContinueButtonEnabled: (prescriptions: List&lt;String>) -> Boolean, onBackClick: () -> Unit, onContinueClick: (id: List&lt;String>) -> Unit, onDetailClick: (id: String) -> Unit, onSelectUnselectClick: (prescriptionId: String, prescriptions: List&lt;String>) -> List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsScreen.kt$@Preview @Composable fun PreviewSelectPrescriptionsScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsViewModel.kt$@Composable fun PrescriptionType.DisplayImageByTag()</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel$fun isContinueButtonEnabled(prescriptions: List&lt;String>): Boolean</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel$fun isPrescriptionSelected(prescriptionId: String, prescriptions: List&lt;String>): Boolean</ID>
    <ID>UndocumentedPublicFunction:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel$fun onSelectUnselectClick(prescriptionId: String, prescriptions: List&lt;String>): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:SelectPronounDialogFragmentDirections.kt$SelectPronounDialogFragmentDirections.Companion$public fun navigateToAccountDetails(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPronounDialogFragmentDirections.kt$SelectPronounDialogFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectPronounViewModel.kt$SelectPronounViewModel$// TODO: Refactor; this method breaks MVVM by accessing the state directly instead of via an observer, // we're also passing a pointer to the view via StringProvider, it should probably be a utility function // within Pronoun instead fun getPronounString(stringProvider: StringProvider): String</ID>
    <ID>UndocumentedPublicFunction:SelectPronounViewModel.kt$SelectPronounViewModel$fun getCustomPronoun(): Pronoun?</ID>
    <ID>UndocumentedPublicFunction:SelectPronounViewModel.kt$SelectPronounViewModel$fun setPronouns(pronouns: List&lt;Pronoun>)</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragment.kt$@Composable fun OfflineServiceRadioButtonNextAvailability( modifier: Modifier = Modifier, nextAvailabilityTime: UserText, )</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragment.kt$@Composable fun OfflineServiceRadioButtonPill(modifier: Modifier = Modifier)</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragment.kt$@Preview(heightDp = 900) @Composable fun SelectServiceScreenPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectServiceFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SelectServiceFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectServiceFragmentDirections.kt$SelectServiceFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotComposable.kt$@Composable @OptIn(ExperimentalGenesisCalendarApi::class) fun SelectAvailableDateCalendarView( state: SelectAvailableDateState, pagerState: PagerState = rememberPagerState(), )</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotComposable.kt$@Composable fun SelectTimeslotRadioMenu( state: SelectableTimeslotState, )</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotComposable.kt$@Preview @Composable fun SelectTimeslotComposablePreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SelectTimeslotFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SelectTimeslotFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotFragmentDirections.kt$SelectTimeslotFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SelectTimeslotUseCase.kt$SelectTimeslotUseCase$operator fun invoke(availableTimeslots: AvailableTimeslotDate?): Flow&lt;SelectableTimeslotState?></ID>
    <ID>UndocumentedPublicFunction:SelectionRow.kt$SelectionRow$@JvmOverloads @CallbackProp fun setOnSelectionStatusChangedListener(listener: OnSelectionStatusChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:SelectionRow.kt$SelectionRow$@JvmOverloads @ModelProp fun setIsSelected(isSelected: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:SelectionRow.kt$SelectionRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:SelectionRow.kt$SelectionRow$@JvmOverloads @TextProp fun setLabelText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:SelectionRow.kt$SelectionRow$fun getLabelText(): CharSequence</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingDefaults.kt$ServiceBookingDefaults$@Composable fun capitalizedOverline()</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingDefaults.kt$ServiceBookingDefaults$@Composable fun ctaPadding()</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingDefaults.kt$ServiceBookingDefaults$@Composable fun thinNeutralStroke()</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingExitDialogDirections.kt$ServiceBookingExitDialogDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentArgs.kt$ServiceBookingLandingDialogFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentArgs.kt$ServiceBookingLandingDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ServiceBookingLandingDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentArgs.kt$ServiceBookingLandingDialogFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ServiceBookingLandingDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingLandingDialogFragmentDirections.kt$ServiceBookingLandingDialogFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceBookingNavGraphDirections.kt$ServiceBookingNavGraphDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): ServiceIntakeFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): ServiceIntakeFormFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormFragmentDirections.kt$ServiceIntakeFormFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormScreen.kt$@Composable fun &lt;T> CheckBoxLineItem( item: T, checked: Boolean, checkChanged: (T, Boolean) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:ServiceIntakeFormScreen.kt$@Composable fun &lt;T> MultiSelectCheckBoxList( title: String, description: String? = null, multiSelectState: MultiSelectState&lt;T>, )</ID>
    <ID>UndocumentedPublicFunction:Session.kt$Session$fun getDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:SessionUtils.kt$SessionUtils$// This needs to run on the main thread cause of realm suspend fun clearState(localContext: Context?, signOutReason: SignOutReason? = null)</ID>
    <ID>UndocumentedPublicFunction:SessionUtils.kt$SessionUtils$fun clearSessionId()</ID>
    <ID>UndocumentedPublicFunction:SessionUtils.kt$SessionUtils$fun clearUserSignOutReason()</ID>
    <ID>UndocumentedPublicFunction:SessionUtils.kt$SessionUtils$suspend fun signOutBlocking( localContext: Context?, reason: SignOutReason, deeplink: Uri? = null, navigateToLogin: Boolean = true )</ID>
    <ID>UndocumentedPublicFunction:SettingsActivity.kt$SettingsActivity.Companion$fun getNavigationTargetIntent(context: Context, navigationTarget: Int): Intent</ID>
    <ID>UndocumentedPublicFunction:SettingsActivityDirections.kt$SettingsActivityDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsActivityDirections.kt$SettingsActivityDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentArgs.kt$SettingsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentArgs.kt$SettingsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SettingsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentArgs.kt$SettingsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SettingsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun navigateToAboutPCHealth(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun navigateToChatWithUs(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun navigateToFeatureFlags(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun navigateToLinkedAccounts(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun navigateToNotificationSettings(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsFragmentDirections.kt$SettingsFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsNavGraphDirections.kt$SettingsNavGraphDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsPersonalInfoFragmentDirections.kt$SettingsPersonalInfoFragmentDirections.Companion$public fun navigateToChangeNumber(isRequestingChange: Boolean = true, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsPersonalInfoFragmentDirections.kt$SettingsPersonalInfoFragmentDirections.Companion$public fun navigateToSelectGenderIdentity(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsPersonalInfoFragmentDirections.kt$SettingsPersonalInfoFragmentDirections.Companion$public fun navigateToSelectPronoun(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsPersonalInfoFragmentDirections.kt$SettingsPersonalInfoFragmentDirections.Companion$public fun navigateToSettingsPersonalInfo(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SettingsScreen.kt$@Composable fun InputTextField( state: TextInputState, label: String, error: String, readOnly: Boolean = false, keyboardOptions: KeyboardOptions = KeyboardOptions.Default )</ID>
    <ID>UndocumentedPublicFunction:SettingsScreen.kt$@Composable fun SettingsScreen( viewModel: SettingsScreenViewModel, screenTitle: String, navigationOnClick: () -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SettingsScreen.kt$@Composable fun SettingsScreenContent( formState: SettingsData, screenTitle: String, navigationOnClick: () -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit, onSecurityQuestionClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SettingsScreen.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun SettingsScreenContentParent( formState: SettingsData, screenTitle: String, navigationOnClick: () -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:SettingsScreen.kt$@Preview @Composable fun PreviewSettingsScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SettingsViewModel.kt$SettingsViewModel$fun fetchPrivacyLockAuthMethod()</ID>
    <ID>UndocumentedPublicFunction:SettingsViewModel.kt$SettingsViewModel$fun setUserEnabledPrivacyLock(enable: Boolean)</ID>
    <ID>UndocumentedPublicFunction:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod$fun hasAccepted(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Sex.kt$Sex.Companion$fun getAll(): List&lt;Sex></ID>
    <ID>UndocumentedPublicFunction:SexSelectionUseCase.kt$SexSelectionUseCase$operator fun invoke(): Flow&lt;SexSelectionState></ID>
    <ID>UndocumentedPublicFunction:ShareScreenshotViewModel.kt$ShareScreenshotViewModel$fun onClickShare(context: Context, bitmap: Bitmap)</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$@Suppress("UNCHECKED_CAST") fun &lt;T> getJsonable( clazz: Class&lt;T>, jsonAdapter: JsonAdapter, key: String, defaultValue: T? = null, useCache: Boolean = true, shouldDecrypt: Boolean = false ): T?</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$@SuppressLint("ApplySharedPref") fun clear()</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$@SuppressLint("ApplySharedPref") fun remove(key: String)</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun &lt;T> putJsonable( clazz: Class&lt;T>, jsonAdapter: JsonAdapter, key: String, value: T?, useCache: Boolean = true, shouldEncrypt: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun contains(key: String)</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getBoolean( key: String, defaultValue: Boolean = false, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Boolean</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getBooleanOrNull( key: String, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Boolean?</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getFloat( key: String, defaultValue: Float = 0f, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Float</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getFloatOrNull( key: String, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Float?</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getInt( key: String, defaultValue: Int = 0, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Int</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getIntOrNull(key: String, useCache: Boolean = true, shouldDecrypt: Boolean = false): Int?</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getLong( key: String, defaultValue: Long = 0, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Long</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getLongOrNull( key: String, useCache: Boolean = true, shouldDecrypt: Boolean = false ): Long?</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun getString( key: String, defaultValue: String? = "", useCache: Boolean = true, shouldDecrypt: Boolean = false ): String?</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun putBoolean( key: String, value: Boolean, useCache: Boolean = true, shouldEncrypt: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun putFloat( key: String, value: Float, useCache: Boolean = true, shouldEncrypt: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun putInt(key: String, value: Int, useCache: Boolean = true, shouldEncrypt: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource$fun putLong( key: String, value: Long, useCache: Boolean = true, shouldEncrypt: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:SharedPreferencesDataSource.kt$SharedPreferencesDataSource.Companion$// this function exists so that we can mock it to return a mocked EncryptedSharedPreferences. // because mockk can't mock EncryptedSharedPreferences.create directly fun getEncryptedSharedPreferences(context: Context, filename: String)</ID>
    <ID>UndocumentedPublicFunction:ShortDateToStringConverter.kt$ShortDateToStringConverter$@TypeConverter fun dateToTimestamp(date: ShortDate?): String?</ID>
    <ID>UndocumentedPublicFunction:ShortDateToStringConverter.kt$ShortDateToStringConverter$@TypeConverter fun fromTimestamp(value: String?): ShortDate?</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Action Row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "ActionRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ActionRowPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Asset Banner", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "AssetBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun AssetBannerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Avatar Header", showkaseGroup = "Header", packageName = "life.league.genesis.compose.component.header", packageSimpleName = "header", showkaseElementName = "AvatarHeaderPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun AvatarHeaderPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Basic Icon Banner", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "BasicIconBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun BasicIconBannerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "body1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body1_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "body1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body1_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "body2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body2_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "body2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun body2_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Bottom To Top Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "BottomToTopAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun BottomToTopAnimationPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "button1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button1_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "button1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button1_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "button2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button2_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "button2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun button2_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "caption_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun caption_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "caption_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun caption_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Circle Button", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "CircleButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun CircleButtonPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Circular Progress Bar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "CircularProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun CircularProgressBarPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Date Field", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisDateFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisDateFieldPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Drop Down", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisDropDownPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisDropDownPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Expandable Text", showkaseGroup = "Text", packageName = "life.league.genesis.compose.component.text", packageSimpleName = "text", showkaseElementName = "ExpandableTextPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ExpandableTextPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Fade In Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FadeInAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FadeInAnimationPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Fade Out Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FadeOutAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FadeOutAnimationPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "FadingText Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FadingTextPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FadingTextPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Finite Pulse Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "FinitePulsePreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun FinitePulsePreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Bordered Radio Field", showkaseGroup = "Radio Input", packageName = "life.league.genesis.compose.component.input.radio", packageSimpleName = "radio", showkaseElementName = "GenesisBorderedRadioFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", showkaseWidthDp = 350, previewParameterClass = [ThemeProvider::class] ) public fun GenesisBorderedRadioFieldPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Button", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "GenesisButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisButtonPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Buttons Footer", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "GenesisButtonsFooterPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisButtonsFooterPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Checkbox", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input.checkbox", packageSimpleName = "checkbox", showkaseElementName = "GenesisCheckboxPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisCheckboxPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Empty Section View", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewGenesisEmptySectionView", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewGenesisEmptySectionView(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Empty State Widget", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewGenesisEmptyStateWidget", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewGenesisEmptyStateWidget(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Horizontal Pager", showkaseGroup = "Pager", packageName = "life.league.genesis.compose.component.pager", packageSimpleName = "pager", showkaseElementName = "GenesisHorizontalPagerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisHorizontalPagerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Radio Button", showkaseGroup = "Radio Input", packageName = "life.league.genesis.compose.component.input.radio", packageSimpleName = "radio", showkaseElementName = "GenesisRadioButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisRadioButtonPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Radio Field", showkaseGroup = "Radio Input", packageName = "life.league.genesis.compose.component.input.radio", packageSimpleName = "radio", showkaseElementName = "GenesisRadioFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", showkaseWidthDp = 350, previewParameterClass = [ThemeProvider::class] ) public fun GenesisRadioFieldPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Genesis Switch", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisSwithPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisSwithPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "GenesisErrorView", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "ErrorScreenPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ErrorScreenPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "GenesisGridView", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "GridViewSample", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GridViewSample(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "GenesisNoScrollGridView", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "NoScrollGridViewSample", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun NoScrollGridViewSample(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h1_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h1_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h2_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h2_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h3_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h3_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h3_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h3_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "h4_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h4_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "h4_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun h4_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Horizontal Divider", showkaseGroup = "Divider", packageName = "life.league.genesis.compose.component.divider", packageSimpleName = "divider", showkaseElementName = "HorizontalDividerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun HorizontalDividerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Horizontal Progress Bar with Delay", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "HorizontalProgressBarWithDelayPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun HorizontalProgressBarWithDelayPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Horizontal Progress Bar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "HorizontalProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun HorizontalProgressBarPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Image Prompt", showkaseGroup = "Widget", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewImagePromptWidget", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewImagePromptWidget(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Indeterminate Circular Progress Bar", showkaseGroup = "Progress Bars", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "GenesisIntermittentProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisIntermittentProgressBarPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Key Value row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "KeyValueRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun KeyValueRowPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "label_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun label_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "label_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun label_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "LargeImageRow", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "LargeImageBannerRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun LargeImageBannerRowPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Left To Right Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "LeftToRightAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun LeftToRightAnimationPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Multi Select Calendar", showkaseGroup = "Calendar", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "MultiSelectGenesisCalendarViewPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun MultiSelectGenesisCalendarViewPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "MultiHorizontalProgressBar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "MultiHorizontalProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun MultiHorizontalProgressBarPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Navigation Buttons", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "NavigationButtonsPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun NavigationButtonsPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "overline_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun overline_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "overline_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun overline_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Page Footer", showkaseGroup = "Footer", packageName = "life.league.genesis.compose.component.footer", packageSimpleName = "footer", showkaseElementName = "PageFooterPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PageFooterPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Page Header", showkaseGroup = "Header", packageName = "life.league.genesis.compose.component.header", packageSimpleName = "header", showkaseElementName = "PageHeaderPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PageHeaderPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Pager Controls", showkaseGroup = "Pager", packageName = "life.league.genesis.compose.component.pager", packageSimpleName = "pager", showkaseElementName = "PagerControlsPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PagerControlsPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Pill Button", showkaseGroup = "Button", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "PillButtonPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PillButtonPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "PreviewInformationalSlide", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "PreviewInformationalSlide", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewInformationalSlide(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "PreviewLinkButton", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.button", packageSimpleName = "button", showkaseElementName = "PreviewLinkButton", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun PreviewLinkButton(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Progress Bar", showkaseGroup = "Progress", packageName = "life.league.genesis.compose.component.progress", packageSimpleName = "progress", showkaseElementName = "GenesisProgressBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisProgressBarPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Progress Row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "ProgressRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun ProgressRowPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "RemoteImage (by Url)", showkaseGroup = "Remote Image", packageName = "life.league.genesis.compose.accompanist", packageSimpleName = "accompanist", showkaseElementName = "RemoteImagePreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun RemoteImagePreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "RemoteImageContent (by content id)", showkaseGroup = "Remote Image", packageName = "life.league.genesis.compose.accompanist", packageSimpleName = "accompanist", showkaseElementName = "RemoteImageContentPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun RemoteImageContentPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Right To Left Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "RightToLeftAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun RightToLeftAnimationPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Single Select Calendar", showkaseGroup = "Calendar", packageName = "life.league.genesis.compose.component.widget", packageSimpleName = "widget", showkaseElementName = "SingleSelectGenesisCalendarViewPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun SingleSelectGenesisCalendarViewPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "SmallImageRow", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "SmallImageBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun SmallImageBannerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Static TextField", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisStaticDropdownPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisStaticDropdownPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "subtitle1_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle1_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "subtitle1_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle1_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "subtitle2_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle2_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "subtitle2_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun subtitle2_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "Default", packageName = "life.league.genesis.theme", packageSimpleName = "theme", showkaseElementName = "tab_default", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun tab_default(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "Fusion", packageName = "life.league.genesis.compose.theme.fusion", packageSimpleName = "fusion", showkaseElementName = "tab_fusion", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) public fun tab_fusion(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tag Banner", showkaseGroup = "Banner", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "TagBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun TagBannerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Text Field", showkaseGroup = "Input", packageName = "life.league.genesis.compose.component.input", packageSimpleName = "input", showkaseElementName = "GenesisTextFieldPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisTextFieldPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Tooltip Header Row", showkaseGroup = "Row", packageName = "life.league.genesis.compose.component.row", packageSimpleName = "row", showkaseElementName = "TooltipHeaderRowPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun TooltipHeaderRowPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Top App Bar", showkaseGroup = "App Bar", packageName = "life.league.genesis.compose.component.appbar", packageSimpleName = "appbar", showkaseElementName = "GenesisTopAppBarPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun GenesisTopAppBarPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Top To Bottom Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "TopToBottomAnimationPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun TopToBottomAnimationPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Vertical FadingText Animation", showkaseGroup = "Animations", packageName = "life.league.genesis.compose.animations", packageSimpleName = "animations", showkaseElementName = "VerticalFadingTextPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun VerticalFadingTextPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Warning Banner with link", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "WarningBannerPreviewWithLink", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun WarningBannerPreviewWithLink(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataAccompanist.kt$ShowkaseMetadataAccompanist$@ShowkaseCodegenMetadata( showkaseName = "Warning Banner", showkaseGroup = "Default Group", packageName = "life.league.genesis.compose.component.banner", packageSimpleName = "banner", showkaseElementName = "WarningBannerPreview", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "COMPONENT", previewParameterClass = [ThemeProvider::class] ) public fun WarningBannerPreview(): Unit</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "body1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body1_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "body2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body2_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "button1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button1_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "button2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button2_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "caption_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun caption_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h1_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h2_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h3_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h3_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "h4_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h4_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "label_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun label_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "overline_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun overline_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "subtitle1_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle1_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "subtitle2_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle2_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataLeague.kt$ShowkaseMetadataLeague$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "League", packageName = "life.league.genesis.theme.league", packageSimpleName = "league", showkaseElementName = "tab_league", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun tab_league()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Body 1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "body1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body1_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Body 2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "body2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun body2_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Button 1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "button1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button1_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Button 2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "button2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun button2_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Caption", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "caption_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun caption_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h1_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h2_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H3", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h3_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h3_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "H4", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "h4_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun h4_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Label", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "label_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun label_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Overline", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "overline_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun overline_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 1", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "subtitle1_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle1_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Subtitle 2", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "subtitle2_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun subtitle2_pchealth()</ID>
    <ID>UndocumentedPublicFunction:ShowkaseMetadataPchealth.kt$ShowkaseMetadataPchealth$@ShowkaseCodegenMetadata( showkaseName = "Tab", showkaseGroup = "PC Health", packageName = "life.league.genesis.theme.pchealth", packageSimpleName = "pchealth", showkaseElementName = "tab_pchealth", insideObject = false, insideWrapperClass = false, showkaseKDoc = "", showkaseMetadataType = "TYPOGRAPHY" ) fun tab_pchealth()</ID>
    <ID>UndocumentedPublicFunction:SignOutReason.kt$SignOutReason.Companion$fun getReason(id: String?): SignOutReason?</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@JvmOverloads @CallbackProp fun setSettingsOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@JvmOverloads @ModelProp fun setShowSettings(show: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@JvmOverloads @TextProp fun setNameText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@ModelProp(group = "image") fun setImageContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@ModelProp(group = "image") fun setImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:SimpleAvatarHeader.kt$SimpleAvatarHeader$@ModelProp(group = "image") fun setImageResourceAttr(@AttrRes attrResId: Int)</ID>
    <ID>UndocumentedPublicFunction:SimpleCard.kt$SimpleCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:SimpleCard.kt$SimpleCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:SimpleCard.kt$SimpleCard$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setAlert(text: String): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setButtonText(buttonText: CharSequence): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setDescription(description: String): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setImage(image: Drawable?): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setOnActionClickListener(actionListener: View.OnClickListener): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setOnCancelledListener(onCancelledListener: View.OnClickListener): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setTitle(title: String): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun setTitleMaxLines(lineCount: Int): Builder</ID>
    <ID>UndocumentedPublicFunction:SingleActionBottomSheetDialog.kt$SingleActionBottomSheetDialog.Builder$fun show(fragmentManager: FragmentManager, tag: String? = null)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun append(newText: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun append(newText: CharSequence, spans: Iterable&lt;Any>)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun appendLn(newText: CharSequence, spans: Iterable&lt;Any>)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun appendLnNotBlank(newText: CharSequence, spans: Iterable&lt;Any>)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun appendSpace(newText: CharSequence)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun appendSpace(newText: CharSequence, spans: Iterable&lt;Any>)</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$fun toSpannableString()</ID>
    <ID>UndocumentedPublicFunction:SpannableStringCreator.kt$SpannableStringCreator$inline fun applyIf(predicate: () -> Boolean, action: SpannableStringCreator.() -> SpannableStringCreator)</ID>
    <ID>UndocumentedPublicFunction:Spanner.kt$Spanner$fun boldStartingString(string: String, boldString: String, currency: String = ""): SpannedString</ID>
    <ID>UndocumentedPublicFunction:Spanner.kt$Spanner$fun boldTrailingString(string: String, boldString: String, currency: String = ""): SpannedString</ID>
    <ID>UndocumentedPublicFunction:Spanner.kt$Spanner$fun boldTrailingStringWithIndex( string: String, boldString: String, additionalTrailingText: String = "", additionalStartingText: String = "", currency: String = "" ): SpannedString</ID>
    <ID>UndocumentedPublicFunction:Speciality.kt$AppointmentType.Companion$fun fromJson(jsonName: String): AppointmentType</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragment.kt$@Preview(showBackground = true) @Composable fun SpecialityDetailViewLifemarkPreview()</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragment.kt$@Preview(showBackground = true) @Composable fun SpecialityDetailViewMaplePreview()</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SpecialtyLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SpecialtyLandingFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLandingFragmentDirections.kt$SpecialtyLandingFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyLocation.kt$fun Timeframe.format( locale: Locale, timeZone: DateTimeZone = DateTimeZone.forTimeZone(TimeZone.getDefault()) ): String</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentArgs.kt$SpecialtySelectionFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentArgs.kt$SpecialtySelectionFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SpecialtySelectionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentArgs.kt$SpecialtySelectionFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SpecialtySelectionFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToLocationSelector(currentProvince: Province): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtySelectionFragmentDirections.kt$SpecialtySelectionFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): SpecialtyUrgencyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): SpecialtyUrgencyFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyFragmentDirections.kt$SpecialtyUrgencyFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyOptions.kt$@Composable fun SpecialtyUrgencyOptions( urgencies: List&lt;UrgencyModel>, onSelect: (AppointmentType) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyOptions.kt$@Preview(showBackground = true, widthDp = 716) @Composable fun SpecialtyUrgencyOptionsPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyScreen.kt$@Preview(showBackground = true, widthDp = 375) @Composable fun SpecialtyUrgencyLoadingViewPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SpecialtyUrgencyScreen.kt$@Preview(showBackground = true, widthDp = 375) @Composable fun SpecialtyUrgencyViewPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setDefaultDate(date: Calendar): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setMaxDate(date: Calendar): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setMessage(@StringRes messageId: Int): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setMessage(text: CharSequence): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setMinDate(date: Calendar): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setNegativeButton(@StringRes textId: Int, onClick: DialogInterface.OnClickListener): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setNegativeButton(text: CharSequence, onClick: DialogInterface.OnClickListener): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setPositiveButton(@StringRes textId: Int, onClick: (Int, Int, Int) -> Unit): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setPositiveButton(text: CharSequence, onClick: (Int, Int, Int) -> Unit): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setTitle(@StringRes titleId: Int): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun setTitle(text: CharSequence): Builder</ID>
    <ID>UndocumentedPublicFunction:SpinnerDatePickerDialog.kt$SpinnerDatePickerDialog.Builder$fun show()</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToAccountSetup(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToAuthentication(isPhoneSet: Boolean = false, title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToDirectorPageFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToHome(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToLiveAgent(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToLoginFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToLoginIntro(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToWelcomeBackFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashFragmentDirections.kt$SplashFragmentDirections.Companion$public fun navigateToWelcomeback(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:SplashViewModel.kt$SplashViewModel$fun fetchAppLaunchState()</ID>
    <ID>UndocumentedPublicFunction:SplashViewModel.kt$SplashViewModel$fun loadFeatureFlagsAndFetchLoginState()</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @CallbackProp fun setOnSelectionChanged(selectionListener: OnStackSelectionChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @ModelProp fun setOptions(options: List&lt;Option> = listOf())</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @ModelProp fun setSelectionMode(@SelectionMode selectionMode: Int = SELECTION_MODE_SINGLE_SELECT)</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:StackSelectQuestion.kt$StackSelectQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroudResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@JvmOverloads @TextProp fun setTitleText(titleText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:StackedActionBanner.kt$StackedActionBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:State.kt$Failed$fun getErrorMessage(context: Context)</ID>
    <ID>UndocumentedPublicFunction:State.kt$Loaded$operator fun invoke(): T</ID>
    <ID>UndocumentedPublicFunction:State.kt$State$@Deprecated(message = "This method encourages ignoring the observer pattern by making it easy for the view to query the data in the view model directly. In a view, state should be observed and cast into the correct state using a switch statement. This should only ever be used from within a view model.") fun getLoadedData(): T?</ID>
    <ID>UndocumentedPublicFunction:States.kt$States.Companion$fun getAll(): List&lt;States></ID>
    <ID>UndocumentedPublicFunction:StatusBanner.kt$StatusBanner$@JvmOverloads @ModelProp fun setDescriptionTextStyle(@Header.DescriptionStyle style: Int = Header.DESCRIPTION_STYLE_BODY1)</ID>
    <ID>UndocumentedPublicFunction:StatusBanner.kt$StatusBanner$@JvmOverloads @ModelProp fun setIcon(@DrawableRes resId: Int = R.drawable.ic_alert_exclamation)</ID>
    <ID>UndocumentedPublicFunction:StatusBanner.kt$StatusBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:StatusBanner.kt$StatusBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @CallbackProp fun setActionRowClick(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @CallbackProp fun setButtonOnClick(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @ModelProp fun setBadgeStatus(status: DependentInviteStatus? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @ModelProp fun setBadgeVisibility(isVisible: Boolean? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @ModelProp fun setButtonVisibility(isVisible: Boolean? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @TextProp fun setActionRowBodySubtitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @TextProp fun setActionRowBodyText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @TextProp fun setActionRowTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@JvmOverloads @TextProp fun setButtonText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusButtonActionRow.kt$StatusButtonActionRow$@ModelProp fun setActionRowIcon(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @CallbackProp fun setOnActionClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @ModelProp fun setButtonAction(action: ButtonAction? = null)</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @ModelProp fun setStatus(status: Status = Status.GRAY)</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @TextProp fun setActionText(actionText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @TextProp fun setCardTitleText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @TextProp fun setDescriptionText(description: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @TextProp fun setOverlineText(overline: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @TextProp fun setSubTitleText(subtitle: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StatusPageHeader.kt$StatusPageHeader$@JvmOverloads @TextProp fun setTitleText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StickyButtonFooter.kt$StickyButtonFooter$fun animateAndHide(animatorListener: AnimatorListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StickyButtonFooter.kt$StickyButtonFooter$fun animateAndShow(animatorListener: AnimatorListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StickyButtonFooter.kt$StickyButtonFooter$fun setButtonOnClickListener(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StickyButtonFooter.kt$StickyButtonFooter$fun setButtonText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StickyButtonFooter.kt$StickyButtonFooter$fun setDescriptionOnCLickListener(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StickyButtonFooter.kt$StickyButtonFooter$fun setDescriptionText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StickyRoundedFooter.kt$StickyRoundedFooter$fun setButtonOnClickListener(onClickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:StickyRoundedFooter.kt$StickyRoundedFooter$fun setButtonText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StickyRoundedFooter.kt$StickyRoundedFooter$fun setDescriptionText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StickyRoundedFooter.kt$StickyRoundedFooter$fun setTitleText(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.capitalizeFirstLetter(locale: Locale)</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.fromHtml(): Spanned</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.hasSpecialCharacters(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.isOnlyLetters(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.isOnlyNumbersAndLetters(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.isPostalCodeValid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.isValidEmail(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.isZipCodeValid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.italicize(substring: String, ignoreCase: Boolean = true): SpannableStringBuilder</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.italicizeAnnotatedString(substring: String, ignoreCase: Boolean = true): AnnotatedString</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.removeWhitespaces(): String</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.toColor(@ColorInt default: Int = Color.TRANSPARENT)</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String.toPriceDisplayFormat()</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String?.ifNullOrEmpty(defaultValue: String): String</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String?.indexesOf(pat: String, ignoreCase: Boolean = true): List&lt;Int></ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String?.isNotNullOrEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringExtension.kt$fun String?.startsWithHttpOrHttps(): Boolean</ID>
    <ID>UndocumentedPublicFunction:StringMap.kt$StringMap$fun keySet(): MutableSet&lt;String></ID>
    <ID>UndocumentedPublicFunction:StringMap.kt$StringMap$fun removeKey(key: String)</ID>
    <ID>UndocumentedPublicFunction:StringMap.kt$StringMap$fun setKey(key: String, value: String)</ID>
    <ID>UndocumentedPublicFunction:StringMap.kt$StringMap$operator fun get(key: String): String?</ID>
    <ID>UndocumentedPublicFunction:StringProvider.kt$StringProvider$fun getQuantityString( @PluralsRes resId: Int, quantity: Int )</ID>
    <ID>UndocumentedPublicFunction:StringProvider.kt$StringProvider$fun getString(@StringRes resId: Int, vararg formatArgs: Any)</ID>
    <ID>UndocumentedPublicFunction:StringProvider.kt$StringProvider$fun getStringFromHtml(@StringRes resId: Int, vararg formatArgs: Any): Spanned</ID>
    <ID>UndocumentedPublicFunction:SystemChatMessage.kt$SystemChatMessage$@JvmOverloads @TextProp fun setMessage(message: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:Table.kt$Table$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:Table.kt$Table$@ModelProp fun setData(data: Data)</ID>
    <ID>UndocumentedPublicFunction:TableRow.kt$TableRow$@JvmOverloads @CallbackProp fun setOnActionClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TableRow.kt$TableRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:TableRow.kt$TableRow$@JvmOverloads @ModelProp fun setValueColumnGravity(gravity: Int = Gravity.START)</ID>
    <ID>UndocumentedPublicFunction:TableRow.kt$TableRow$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TableRow.kt$TableRow$@JvmOverloads @TextProp fun setLabelText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TableRow.kt$TableRow$@JvmOverloads @TextProp fun setValueText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$@Preview(name = "Tag Banner", group = "Banner") @Composable fun TagBannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @ModelProp fun setStyle(style: Style = Style.ACTIVE)</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @TextProp fun setCaption(caption: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @TextProp fun setFooter(footer: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @TextProp fun setTagline(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@JvmOverloads @TextProp fun setTitle(title: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:TagBanner.kt$TagBanner$@ModelProp(group = "image") fun setIconUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TermsConditionsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): TermsConditionsFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToClinicDetails(serviceBookingSelections: ServiceBookingSelections, clinicId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TermsConditionsFragmentDirections.kt$TermsConditionsFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @CallbackProp fun setOnClickTooltip(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @CallbackProp fun setOnTextChanged(listener: OnTextChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun isInvalid(isInvalid: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun setCaptionTextColor(@AttrRes colorAttrRes: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun setInputType(inputType: Int = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun setIsPassword(isPassword: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun setTextEnabled(isEnabled: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @ModelProp fun setTooltipIcon(showTooltip: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @TextProp fun setAccessibilityText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @TextProp fun setInvalidText(errorText: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$@JvmOverloads @TextProp fun setTextValue(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$fun getTextValue(): String</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$fun hasError()</ID>
    <ID>UndocumentedPublicFunction:TextInputRow.kt$TextInputRow$fun setOnFocusChanged(focusChangeListener: OnFocusChangeListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$TextInputUseCase$operator fun invoke(): Flow&lt;TextErrorState></ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$Transformation$operator fun invoke(text: String): String</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$Validation$operator fun invoke(text: String): ErrorResult</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$fun createBannedCharacterValidation(filter: Regex, errorMessage: UserText? = null): Validation</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$fun getErrorResult(text: String?, validations: List&lt;Validation>, focused: Boolean): ErrorResult?</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$fun isEmptyValidation(errorMessage: UserText? = null)</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$fun maxLengthCharacterValidation(maxLength: Int = 255, errorMessage: UserText? = null): Validation</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$fun maxLengthTransformation(maxSize: Int = 255)</ID>
    <ID>UndocumentedPublicFunction:TextInputUseCases.kt$fun minLengthCharacterValidation(minLength: Int = 25, errorMessage: UserText? = null)</ID>
    <ID>UndocumentedPublicFunction:TextOnlyCard.kt$TextOnlyCard$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextOnlyCard.kt$TextOnlyCard$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:TextOnlyCard.kt$TextOnlyCard$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @CallbackProp fun setOnTextChanged(listener: OnTextChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@JvmOverloads @TextProp fun setTextValue(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroudResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:TextQuestion.kt$TextQuestion$fun getTextValue(): String</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun List&lt;TextView>.setTextColorAttr(@AttrRes colorAttrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.fadeTextColorAttr( @AttrRes fadeInColorAttr: Int, durationTime: Long )</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.fadeTextColorInt( @ColorInt fadeInColor: Int, durationTime: Long )</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.fadeTextColorRes( @ColorRes fadeInColorRes: Int, durationTime: Long )</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.setTextAndVisibility(text: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.setTextAppearanceFromAttr(@AttrRes resId: Int)</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.setTextColorAttr(@AttrRes colorAttrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:TextViewExtension.kt$fun TextView.setTextIfNotSame(text: CharSequence?)</ID>
    <ID>UndocumentedPublicFunction:ThreadUtils.kt$fun runOnBackgroundThread(block: (() -> Unit))</ID>
    <ID>UndocumentedPublicFunction:ThreadUtils.kt$fun runOnUiThread(block: (() -> Unit))</ID>
    <ID>UndocumentedPublicFunction:ThreadUtils.kt$fun runOnUiThread(delay: Long, block: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:TimeUtil.kt$TimeUtil$fun customerSupportHoursOfOperationTime( openingHour: Int, openingMinute: Int, closingHour: Int, closingMinute: Int, targetZoneId: DateTimeZone = DateTimeZone.getDefault() ): String</ID>
    <ID>UndocumentedPublicFunction:TintedBackgroundResource.kt$TintedBackgroundResource$fun applyToBackground(view: View)</ID>
    <ID>UndocumentedPublicFunction:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TooltipBottomSheetDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): TooltipBottomSheetDialogFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TooltipHeaderRow.kt$@Composable fun TooltipHeaderRow( modifier: Modifier = Modifier, headerText: String, tooltipText: String? = null, onTooltipClick: (() -> Unit)? = null, )</ID>
    <ID>UndocumentedPublicFunction:TooltipHeaderRow.kt$@Preview(name = "Tooltip Header Row", group = "Row") @Composable fun TooltipHeaderRowPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@Deprecated( message = "Use attributes for colors instead of resources setCardBackgroundColorAttr()", replaceWith = ReplaceWith("setCardBackgroundColorAttr()") ) @ModelProp(group = "card_color") fun setCardBackgroundColorRes(@ColorRes colorRes: Int)</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @ModelProp(group = "card_color") fun setCardBackgroundColor(@ColorInt color: Int = Color.WHITE)</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @ModelProp(group = "images") fun setImageContentIds(contentIds: List&lt;String> = listOf())</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @TextProp fun setOverlineText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@ModelProp fun setChevronVisibility(visible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@ModelProp(group = "card_color") fun setCardBackgroundColorAttr(@AttrRes attrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:TopicBanner.kt$TopicBanner$@ModelProp(group = "images") fun setImageResources(imageResIds: List&lt;/*@DrawableRes*/ Int>)</ID>
    <ID>UndocumentedPublicFunction:TransactionHistoryController.kt$TransactionHistoryController$fun updateTransactionData(transactions: List&lt;Transaction>)</ID>
    <ID>UndocumentedPublicFunction:TransactionHistoryViewModel.kt$TransactionHistoryViewModel$fun fetchTransactionHistory(accountType: String)</ID>
    <ID>UndocumentedPublicFunction:TransactionHistoryViewModel.kt$TransactionHistoryViewModel$fun loadMore(transactionIndex: Int, accountType: String)</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@CallbackProp @JvmOverloads fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@ModelProp @JvmOverloads fun setType(type: TransactionType = TransactionType())</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@ModelProp fun setAmountColour(@AttrRes attr: Int)</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@TextProp @JvmOverloads fun setAmount(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@TextProp @JvmOverloads fun setDate(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@TextProp @JvmOverloads fun setTitle(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TransactionRow.kt$TransactionRow$@TextProp @JvmOverloads fun setTransactionId(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:TriageConfiguration.kt$Triage$// TODO: Split TriageConfiguration into sub modules https://everlong.atlassian.net/browse/HCE-1682 @Suppress("LongMethod", "LongParameterList") fun initialize( applicationContext: Context, api: API, okHttpClient: OkHttpClient, analytics: AnalyticsTracker, featureFlagsRepository: FeatureFlagsRepository, userRepository: UserRepository, tenantIdToken: () -> String? = { null }, // Temporary until I can figure out how to test a manifest file mapsApiKey: () -> String = { applicationContext.packageManager .getApplicationInfo(applicationContext.packageName, PackageManager.GET_META_DATA) .run { metaData.getString("com.google.android.geo.API_KEY") ?: "" } }, paymentsCoordinator: PaymentsCoordinator? = null, )</ID>
    <ID>UndocumentedPublicFunction:TriageConfiguration.kt$Triage$fun initialize( leagueCommonServices: LeagueCommonServices, )</ID>
    <ID>UndocumentedPublicFunction:TriageLandingFragmentDirections.kt$TriageLandingFragmentDirections.Companion$public fun launchMenu(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLandingFragmentDirections.kt$TriageLandingFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLandingFragmentDirections.kt$TriageLandingFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelector.kt$@Composable fun TriageLocationSelector( currentProvince: Province, onDismiss: () -> Unit, onSave: (Province) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TriageLocationSelectorFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): TriageLocationSelectorFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSpecialtySelection(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageLocationSelectorFragmentDirections.kt$TriageLocationSelectorFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageMenuController.kt$TriageMenuController.Listener$fun navigateToAppointmentList()</ID>
    <ID>UndocumentedPublicFunction:TriageMenuController.kt$TriageMenuController.Listener$fun navigateToDeeplink(url: String)</ID>
    <ID>UndocumentedPublicFunction:TriageMenuController.kt$TriageMenuController.Listener$fun navigateToSubMenu(quickActionDetail: QuickActionDetailItem)</ID>
    <ID>UndocumentedPublicFunction:TriageMenuController.kt$TriageMenuController.Listener$fun toggleShowAllProviders()</ID>
    <ID>UndocumentedPublicFunction:TriageMenuFragment.kt$@Composable fun UpcomingAppointmentsState.triageHeaderString(provider: StringProvider): String</ID>
    <ID>UndocumentedPublicFunction:TriageMenuFragment.kt$TriageMenuFragment$fun setLoadingState(loading: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TriageMenuFragmentDirections.kt$TriageMenuFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageMenuFragmentDirections.kt$TriageMenuFragmentDirections.Companion$public fun navigateToAppointments(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageMenuFragmentDirections.kt$TriageMenuFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageMenuFragmentDirections.kt$TriageMenuFragmentDirections.Companion$public fun onSubMenu(subMenu: QuickActionDetailItem, step: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageNavGraphDirections.kt$TriageNavGraphDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageNavGraphDirections.kt$TriageNavGraphDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageService.kt$GetConsentRequest$operator fun invoke(orgId: OrgId): Flow&lt;Outcome&lt;Consent>></ID>
    <ID>UndocumentedPublicFunction:TriageService.kt$GetTimeslotsRequest$operator fun invoke( specialtyId: SpecialtyId, serviceId: ServiceId, orgId: OrgId, appointmentType: AppointmentType, effectiveStartDate: LocalDate, province: Province, practitionerId: PractitionerId?, locationId: LocationId?, ): Flow&lt;Outcome&lt;List&lt;AvailableTimeslotDate>>></ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuController.kt$TriageSubMenuController.Listener$fun navigateToDeeplink(url: String)</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuController.kt$TriageSubMenuController.Listener$fun navigateToSubMenu(quickActionDetail: QuickActionDetailItem)</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): TriageSubMenuFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): TriageSubMenuFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuFragmentDirections.kt$TriageSubMenuFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuFragmentDirections.kt$TriageSubMenuFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageSubMenuFragmentDirections.kt$TriageSubMenuFragmentDirections.Companion$public fun onSubMenu(subMenu: QuickActionDetailItem, step: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:TriageTopAppBar.kt$@Composable fun ServiceBookingTopAppBar( title: String, navController: NavController?, isModal: Boolean = false, backgroundColor: Color = GenesisTheme.colors.backgroundPrimary, showClose: Boolean = false, confirmClose: Boolean = true, )</ID>
    <ID>UndocumentedPublicFunction:TriageTopAppBar.kt$@Composable fun TriageTopAppBar( title: String, onNavigationClick: (() -> Unit)? = null, isModal: Boolean = false, backgroundColor: Color = GenesisTheme.colors.backgroundPrimary, actions: @Composable RowScope.() -> Unit = {}, )</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @ModelProp fun setBodyBackground(@DrawableRes resId: Int = R.drawable.background_card_primary_highlight)</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @ModelProp fun setTitleDrawableStart(@DrawableRes resId: Int = 0)</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @TextProp fun setActionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:UrgentBanner.kt$UrgentBanner$@JvmOverloads @TextProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:UriExtension.kt$fun Iterable&lt;Uri>.downloadContentToFiles(context: Context, completion: RequestCallback&lt;ArrayList&lt;File>>)</ID>
    <ID>UndocumentedPublicFunction:UriExtension.kt$fun Uri.downloadContentToFile(context: Context, completion: RequestCallback&lt;File>)</ID>
    <ID>UndocumentedPublicFunction:User.kt$User$fun preferredFirstName()</ID>
    <ID>UndocumentedPublicFunction:UserAchievement.kt$UserAchievement$fun getAllCategoryAchievements()</ID>
    <ID>UndocumentedPublicFunction:UserAchievement.kt$UserAchievement$fun getAllCompletedAchievements()</ID>
    <ID>UndocumentedPublicFunction:UserAchievement.kt$UserAchievement$fun getAllInProgressAchievements()</ID>
    <ID>UndocumentedPublicFunction:UserConfigDao.kt$UserConfigDao$@Query("SELECT * FROM userconfig LIMIT 1") fun getTable(): UserConfigTable?</ID>
    <ID>UndocumentedPublicFunction:UserDao.kt$UserDao$@Query("SELECT * FROM user LIMIT 1") fun getTable(): UserTable?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun getDependentId(): String?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun getFirstName(): String?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun getKeyToValue(): HashMap&lt;String, String?>?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun getLastName(): String?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun getPlanMemberNumber(): String?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun getRelationshipType(): String?</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun keyToValueNonNull(): HashMap&lt;String, String></ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setAddQualifyingLifeEventDate(addQualifyingLifeEventDate: String)</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setDependentId(dependentId: String)</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setFirstName(firstName: String)</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setLastName(lastName: String)</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setPlanMemberNumber(planMemberNumber: String)</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setRelationshipType(relationshipType: String)</ID>
    <ID>UndocumentedPublicFunction:UserDependent.kt$UserDependent$fun setRemoveQualifyingLifeEventDate(date: Date)</ID>
    <ID>UndocumentedPublicFunction:UserDocument.kt$UserDocument$fun getFormattedDocumentType(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:UserDocument.kt$UserDocument.Companion$@JvmStatic fun getTypeToValue(context: Context): MutableList&lt;Map.Entry&lt;String, String>>?</ID>
    <ID>UndocumentedPublicFunction:UserDocumentDao.kt$UserDocumentDao$@Insert(onConflict = REPLACE) fun insertAll(userDocuments: List&lt;UserDocumentTable>)</ID>
    <ID>UndocumentedPublicFunction:UserDocumentDao.kt$UserDocumentDao$@Query("SELECT * FROM userdocument WHERE id = :id LIMIT 1") fun getUserDocumentWithId(id: String): UserDocumentTable?</ID>
    <ID>UndocumentedPublicFunction:UserDocumentDao.kt$UserDocumentDao$@Query("SELECT * FROM userdocument") fun getTable(): List&lt;UserDocumentTable>?</ID>
    <ID>UndocumentedPublicFunction:UserFlagsDao.kt$UserFlagsDao$@Query("SELECT * FROM userFlags LIMIT 1") fun getTable(): UserFlagsTable?</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is LCL verified fun UserInfo.isLclUnverified()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is LCL verified fun UserInfo.isLclVerified()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is LCL verified new (not returned) fun UserInfo.isLclVerifiedNew()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is LCL verified returned fun UserInfo.isLclVerifiedReturned()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM &amp; LCL verified fun UserInfo.isSdmLclVerified()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM &amp; LCL verified new (not returned) fun UserInfo.isSdmLclVerifiedNew()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM &amp; LCL verified returned fun UserInfo.isSdmLclVerifiedReturned()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM unverified fun UserInfo.isSdmUnverified()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM verified fun UserInfo.isSdmVerified()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM verified new (not returned) fun UserInfo.isSdmVerifiedNew()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is SDM verified returned fun UserInfo.isSdmVerifiedReturned()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is new (not returned) and (LCL verified or SDM verified or both verified) user fun UserInfo.isNewVerifiedUser()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is new user fun UserInfo.isNewUser()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is returned and (LCL verified or SDM verified or both verified) user fun UserInfo.isReturnedVerifiedUser()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is returned user fun UserInfo.isReturnedUser()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Is user from Newfoundland / Labrador fun UserInfo.isNewfoundlandLabrador()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Not LCL user fun UserInfo.isNotLclCustomer()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$// Not SDM user fun UserInfo.isNotSdmCustomer()</ID>
    <ID>UndocumentedPublicFunction:UserInfo.kt$fun UserInfo.bannerResource(): Int</ID>
    <ID>UndocumentedPublicFunction:UserInfoUseCase.kt$UserInfoUseCase$fun getUserInfo()</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$// push notification settings fun updatePushNotificationSettings(isHealthAtWorkEnabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$// user flags // TODO: these flags are application specific, find a way to make flags more generic fun setFtuxViewed(ftuxViewed: Boolean, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$// user fun getUserConfig(): Flow&lt;Outcome&lt;UserConfig>></ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$@Deprecated(message = "Use getUser(): Flow&lt;Outcome&lt;UserProfile>> instead") fun getUser(callback: RequestCallback&lt;UserProfile>?): User?</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$@Deprecated(message = "Use getUserConfig(): Flow&lt;Outcome&lt;UserConfig>> instead") fun getUserConfig(callback: RequestCallback&lt;UserConfig>?): UserConfig?</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$@Deprecated(message = "Use setUserProfile(user: User): Flow&lt;Outcome&lt;UserProfile>> instead") fun setUserProfile(user: User, callback: RequestCallback&lt;UserProfile>?)</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun getUser(): Flow&lt;Outcome&lt;UserProfile>></ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun getUserFeatureFlag(key: String): Flow&lt;Outcome&lt;Boolean>></ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun markAccountSetupFtuxCompleted()</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun setClaimsAssistantFtuxViewed(ftuxViewed: Boolean)</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$fun updateEmailNotificationSettings(isHealthAtWorkEnabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$suspend fun getUserFlags(): UserFlags?</ID>
    <ID>UndocumentedPublicFunction:UserRepository.kt$UserRepository$suspend fun setUserProfile(user: User): Outcome&lt;UserProfile></ID>
    <ID>UndocumentedPublicFunction:UserSettings.kt$fun UserSettings.isNotificationEnabled()</ID>
    <ID>UndocumentedPublicFunction:UserText.kt$@Composable fun UserText.Translatable.translate(): String</ID>
    <ID>UndocumentedPublicFunction:UserText.kt$@Composable fun UserText.translate(): String</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$// Mapping from api objects to our UI objects fun VaccinationWorkflow.toVaccinationDetails( userProfile: UserProfile, userPcid: UserPcid, locale: LocaleAccessor, stringProvider: StringProvider ): VaccinationDetails</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$fun AddressResponse.formatForUi(): String?</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$fun AppointmentResponse.toAppointment( locale: LocaleAccessor, stringProvider: StringProvider ): Appointment</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$fun List&lt;StatusDetailResponse>.findRegistrationFormData(currentUserState: VaccineState)</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$fun VaccinationWorkflow.formatStoreName(stringProvider: StringProvider): String</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$fun VaccinationWorkflow.formatStorePhone(locale: LocaleAccessor): String?</ID>
    <ID>UndocumentedPublicFunction:VaccinationDetails.kt$fun VaccinationWorkflow.toAppointmentDetails( locale: LocaleAccessor, stringProvider: StringProvider ): AppointmentDetails?</ID>
    <ID>UndocumentedPublicFunction:VaccinationForm.kt$fun Cta.toBookingFormData()</ID>
    <ID>UndocumentedPublicFunction:VaccinationForm.kt$fun Cta.toFormHeroFormData(formDetails: FormDetails)</ID>
    <ID>UndocumentedPublicFunction:VaccinationStatusDetail.kt$fun StatusDetailResponse.toStatusDetail(): StatusDetail</ID>
    <ID>UndocumentedPublicFunction:VaccineFormInterface.kt$VaccineFormInterface$abstract fun onFormSubmit()</ID>
    <ID>UndocumentedPublicFunction:VaccineFormLayout.kt$VaccineFormLayout$// FormHero forms will show a banner indicating the browser is unsupported if the user agent // contains webview characteristics. Since the app only supports versions of Android that use // Chrome as the rendering engine, the rendering should be identical to mobile Chrome. // We remove the webview characteristics in the UA so that the banner does not show. This can // be deleted when FormHero ends up removing the banner on their side. fun removeWebViewValuesFromUserAgent()</ID>
    <ID>UndocumentedPublicFunction:VaccineFormLayout.kt$VaccineFormLayout$@SuppressLint("JavascriptInterface") fun setFormInterface(formInterface: VaccineFormInterface)</ID>
    <ID>UndocumentedPublicFunction:VaccineFormLayout.kt$VaccineFormLayout$fun clearWebViewState()</ID>
    <ID>UndocumentedPublicFunction:VaccineFormLayout.kt$VaccineFormLayout$fun loadUrl(url: String)</ID>
    <ID>UndocumentedPublicFunction:VaccineFormLayout.kt$VaccineFormLayout$fun setNavigationOnClickListener(navigationOnClickListener: OnClickListener)</ID>
    <ID>UndocumentedPublicFunction:VaccineFormLayout.kt$VaccineFormLayout$fun setWebViewClient(webViewClient: VaccineWebViewClient)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun chatWithUsClicked()</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onAddressClick(address: String)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onAssessment( formData: FormHeroFormData, preFilledFields: VaccineAssessmentPreFilledFields )</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onBook(formData: BookingFormData)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onCancelAppointment(phone: String)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onEnroll(formData: FormHeroFormData)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onInfoHubClick(@StringRes ctaResId: Int)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onPhoneClick(phoneNumber: String)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingController.kt$VaccineLandingController.Listener$fun onRescheduleAppointment(phone: String)</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingViewModel.kt$VaccineLandingViewModel$fun refresh()</ID>
    <ID>UndocumentedPublicFunction:VaccineLandingViewModel.kt$VaccineLandingViewModel$fun setVaccineFormSubmitted(formId: String)</ID>
    <ID>UndocumentedPublicFunction:VaccineRepository.kt$VaccineRepository$fun getUserPcid(): Flow&lt;Outcome&lt;UserPcid>></ID>
    <ID>UndocumentedPublicFunction:VaccineRepository.kt$VaccineRepository$fun getUserVaccinationWorkflow(provinceCode: String): Flow&lt;Outcome&lt;VaccinationWorkflow>></ID>
    <ID>UndocumentedPublicFunction:VaccineRepository.kt$VaccineRepository$fun setVaccineFormSubmitted(formId: String, callback: RequestCallback&lt;Empty>)</ID>
    <ID>UndocumentedPublicFunction:VaccineWebViewClient.kt$VaccineWebViewClient$fun addOnPageFinishedCallback(callback: OnPageFinishedCallback)</ID>
    <ID>UndocumentedPublicFunction:VaccineWebViewClient.kt$VaccineWebViewClient$fun addOnPageFinishedCallback(urlPattern: Regex, callback: OnPageFinishedCallback)</ID>
    <ID>UndocumentedPublicFunction:ValidateDependentFormFieldsUseCase.kt$ValidateDependentFormFieldsUseCase$operator fun invoke( uploadMap: MutableMap&lt;String, String>, currentFields: List&lt;DependentFormField>, errorMap: SnapshotStateMap&lt;Int, Boolean> ): Boolean</ID>
    <ID>UndocumentedPublicFunction:ValidicDataUtil.kt$ValidicDataUtil$@StringRes fun getDataPointStringRes(dataType: DataType): Int?</ID>
    <ID>UndocumentedPublicFunction:ValidicDataUtil.kt$ValidicDataUtil$fun getLeagueSupportedDataTypes(): HashSet&lt;DataType></ID>
    <ID>UndocumentedPublicFunction:ValidicDataUtil.kt$ValidicDataUtil$fun getValidicDataTypeString(dataType: DataType): ValidicDataType?</ID>
    <ID>UndocumentedPublicFunction:ValidicDataUtil.kt$ValidicDataUtil$fun hasGoogleFitAccess(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$@DrawableRes fun getDevicePrimerIcon(deviceType: DeviceType): Int</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$@StringRes fun getDeviceDisplayNameStringRes(deviceType: DeviceType): Int</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$@StringRes fun getDevicePrimerDescription(deviceType: DeviceType): Int?</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$@StringRes fun getDevicePrimerRequiredDataPoints(deviceType: DeviceType): Int?</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$fun WearableDevice.isConnected(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$fun getDeviceDisplayImageRes(deviceType: DeviceType): Int</ID>
    <ID>UndocumentedPublicFunction:ValidicUser.kt$fun getDevicePath(deviceType: DeviceType): String</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$MeasureUnit.Companion$fun getTalkBackText(shortForm: String): Int?</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @CallbackProp fun setOnLinkClick(listener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @CallbackProp fun setOnValueChanged(listener: OnValueChangedListener? = null)</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @ModelProp fun setValueAndUnits(valueAndUnits: ValueAndUnits = ValueAndUnits())</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundImageSrc(image: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @TextProp fun setCaptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @TextProp fun setDescriptionText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @TextProp fun setHeaderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @TextProp fun setHelpText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @TextProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@JvmOverloads @TextProp fun setPlaceholderText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setBackgroundResId(@DrawableRes imageRes: Int)</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$@ModelProp(group = "background_image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setTintedBackgroudResource(tintedResource: TintedBackgroundResource?)</ID>
    <ID>UndocumentedPublicFunction:ValueQuestion.kt$ValueQuestion$fun getValue(): Int?</ID>
    <ID>UndocumentedPublicFunction:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail$fun getGoalUnit(): String</ID>
    <ID>UndocumentedPublicFunction:VerticalTranslationAnimation.kt$@Composable fun VerticalTranslateAnimation( modifier: Modifier = Modifier, animationDuration: Int = 1000, animationDelay: Int = 0, animateFromBelow: Boolean = true, distance: Float = 500f, startAnimating: Boolean = true, content: @Composable () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:VerticalTranslationAnimation.kt$@Preview(name = "Bottom To Top Animation", group = "Animations") @Composable fun BottomToTopAnimationPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:VerticalTranslationAnimation.kt$@Preview(name = "Top To Bottom Animation", group = "Animations") @Composable fun TopToBottomAnimationPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:ViewAllAchievementsViewModel.kt$ViewAllAchievementsViewModel$fun getUserAchievements()</ID>
    <ID>UndocumentedPublicFunction:ViewBindingProperty.kt$fun &lt;T : ViewBinding> viewBinding(createBinding: () -> T): ReadOnlyProperty&lt;Fragment, T></ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.animateBackgroundColorValue(@ColorInt color: Int, duration: Int = context.getIntegerFromAttr(R.attr.duration_base))</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.fadeAlpha(alpha: Float, duration: Long, delay: Long = 0, onFinished: (() -> Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.fadeInToVisible()</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.fadeOutToGone()</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.getBackgroundColor(): Int?</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.setBackgroundAttr(@AttrRes attrRes: Int)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.setHeight(height: Int)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.setOnClickListenerAndVisibility(clickListener: View.OnClickListener?)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.showSnackbar(message: String)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.showSnackbar(message: String, actionTitle: String, action: (() -> Unit))</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.toggleGoneVisibility(isVisible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.toggleInvisibleVisibility(isVisible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.updateMargins(spacingAttrRes: SpacingAttrRes)</ID>
    <ID>UndocumentedPublicFunction:ViewExtension.kt$fun View.updatePaddings(spacingAttrRes: SpacingAttrRes)</ID>
    <ID>UndocumentedPublicFunction:WaitingScreenMenuController.kt$WaitingScreenMenuController.Listener$fun navigateToDeeplink(url: String)</ID>
    <ID>UndocumentedPublicFunction:Wallet.kt$Wallet$fun getEnrolmentEndDate(): Date?</ID>
    <ID>UndocumentedPublicFunction:WalletCardAddCreditViewModel.kt$WalletCardAddCreditViewModel$fun addCredit(code: String)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletCardDetailController$fun requestRebuildCollection()</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletCardDetailController$fun setFeedbackWidgetData(feedbackWidgetData: FeedbackWidgetData)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletCardDetailController$fun setLiveBalancesErrorCode(error: String)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletCardDetailController$fun updateHtmlCard(walletCardData: WalletCardView.WalletCardData)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletCardDetailController$fun updateLiveBalancesData(liveBalancesViewData: LiveBalancesViewData)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletCardDetailController$fun updateShouldShowMemberIdFlow(shouldShowMemberIdFlow: Boolean)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletDetailClickListener$fun feedbackWidgetClicked(formattedUrl: String)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletDetailClickListener$fun individualSpendClicked(liveBalancesData: LiveBalancesViewData)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletDetailClickListener$fun onActionClicked(action: WalletCardAction)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletDetailClickListener$fun onShareCardClicked(walletCardView: WalletCardView)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletDetailClickListener$fun openDeductibleTooltip()</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailController.kt$WalletDetailClickListener$fun openOutOfPocketTooltip()</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$fun getCachedUserPhysicalCardFlag()</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$fun getCard(walletCardId: String = "", cardId: String = "")</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$fun getLiveBalanceData(cardId: String, cardName: String)</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$fun getMemberAndGroupIds()</ID>
    <ID>UndocumentedPublicFunction:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$fun onClickShare(context: Context, bitmap: Bitmap)</ID>
    <ID>UndocumentedPublicFunction:WalletCardItemView.kt$WalletCardItemView$@ModelProp fun setWalletCardData(cardData: WalletCardView.WalletCardData)</ID>
    <ID>UndocumentedPublicFunction:WalletCardItemView.kt$WalletCardItemView$@ModelProp fun showShareButton(isButtonVisible: Boolean)</ID>
    <ID>UndocumentedPublicFunction:WalletCardItemView.kt$WalletCardItemView$@ModelProp(options = [ModelProp.Option.IgnoreRequireHashCode]) fun setOnClickShareButton( onClickShareButtonListener: (walletCardView: WalletCardView) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WalletCardUtils.kt$fun getBrowserNavigationTarget(name: String, body: String): NavigationTarget</ID>
    <ID>UndocumentedPublicFunction:WalletCardUtils.kt$fun openActionInOtherApp( activity: Activity, url: String, logTag: String = activity::class.java.simpleName )</ID>
    <ID>UndocumentedPublicFunction:WalletCardUtils.kt$fun shareBitmapFileUri(context: Context, uri: Uri)</ID>
    <ID>UndocumentedPublicFunction:WalletCardView.kt$WalletCardView$@JvmOverloads @ModelProp fun setMarginRes(spacingAttrRes: SpacingAttrRes = SpacingAttrRes())</ID>
    <ID>UndocumentedPublicFunction:WalletCardView.kt$WalletCardView$@ModelProp fun setWalletCardData(cardData: WalletCardData)</ID>
    <ID>UndocumentedPublicFunction:WalletCardView.kt$WalletCardView$fun getScreenshot(): Bitmap?</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$WalletCard$abstract fun cardIcon(): String</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$WalletCard$abstract fun cardId(): String</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$WalletCard$abstract fun cardName(): String</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$WalletCard$abstract fun cardStatus(): String</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$WalletCard$abstract fun cardVendorName(): String</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$WalletCard$abstract fun id(): String</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$fun String.walletCardStatus()</ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$fun WalletCategoriesItemSectioned.getWalletCategories(): List&lt;WalletCategory></ID>
    <ID>UndocumentedPublicFunction:WalletCategories.kt$fun WalletResponseItem.toWalletCard(): WalletCard</ID>
    <ID>UndocumentedPublicFunction:WalletCategoriesController.kt$WalletCardClickListener$fun onCardClicked(cardClickData: WalletCardClickData)</ID>
    <ID>UndocumentedPublicFunction:WalletCategoriesController.kt$WalletCategoriesController$fun updateCategoriesData(data: WalletCategoriesPageData)</ID>
    <ID>UndocumentedPublicFunction:WalletCategoriesViewModel.kt$WalletCategoriesViewModel$fun getCategories()</ID>
    <ID>UndocumentedPublicFunction:WalletCategoriesViewModel.kt$fun List&lt;WalletCategory>.getPageDataFromResponse(): WalletCategoriesPageData</ID>
    <ID>UndocumentedPublicFunction:WalletCategoriesViewModel.kt$fun WalletCategoriesPageData.hasMultipleStatuses()</ID>
    <ID>UndocumentedPublicFunction:WalletConfiguration.kt$Wallet$fun initialize( featureFlagsRepository: FeatureFlagsRepository, settings: WalletSettings )</ID>
    <ID>UndocumentedPublicFunction:WalletEnrollmentFragmentDirections.kt$WalletEnrollmentFragmentDirections.Companion$public fun actionWalletEnrollmentFragmentToWalletCategoriesFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WalletEnrollmentViewModel.kt$WalletEnrollmentViewModel$fun getEnrollmentData()</ID>
    <ID>UndocumentedPublicFunction:WalletEnrollmentViewModel.kt$WalletEnrollmentViewModel$fun getMobileEnrollmentFlag()</ID>
    <ID>UndocumentedPublicFunction:WalletIndividualLiveBalanceController.kt$WalletIndividualSpendClickListener$fun deductibleTooltipClicked()</ID>
    <ID>UndocumentedPublicFunction:WalletIndividualLiveBalanceController.kt$WalletIndividualSpendClickListener$fun outOfPocketTooltipClicked()</ID>
    <ID>UndocumentedPublicFunction:WalletUseCases.kt$WalletUseCases$fun getWalletCard(walletCardId: String = "", cardId: String = ""): Flow&lt;Outcome&lt;GenericCard>></ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$@Composable fun WarningBanner( modifier: Modifier = Modifier, dataPoint: String, @AttrRes imageAttr: Int, title: String, body: String, link: String? = null, onBannerClick: ((String) -> Unit)? )</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$@Composable fun WarningBanner( modifier: Modifier = Modifier, dataPoint: String, painter: Painter, title: String, body: String, link: String? = null, onBannerClick: ((String) -> Unit)? )</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$@Composable fun WarningBanner( modifier: Modifier = Modifier, dataPoint: String, title: String, body: String, link: String? = null, onBannerClick: ((String) -> Unit)? )</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$@Preview(name = "Warning Banner with link") @Composable fun WarningBannerPreviewWithLink(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$@Preview(name = "Warning Banner") @Composable fun WarningBannerPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@JvmOverloads @CallbackProp fun setOnClick(clickListener: OnClickListener? = null)</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@JvmOverloads @ModelProp fun setBodyText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@JvmOverloads @ModelProp fun setLinkText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@JvmOverloads @ModelProp fun setTitleText(text: CharSequence = "")</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@JvmOverloads @ModelProp(group = "image", options = [ModelProp.Option.IgnoreRequireHashCode]) fun setIconImageSrc(iconImage: Drawable? = null)</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@ModelProp(group = "image") fun setIconContentId(contentId: String)</ID>
    <ID>UndocumentedPublicFunction:WarningBanner.kt$WarningBanner$@ModelProp(group = "image") fun setIconImageResource(@DrawableRes imageResId: Int)</ID>
    <ID>UndocumentedPublicFunction:WearableConfiguration.kt$Wearable$fun wearableService(): WearableService</ID>
    <ID>UndocumentedPublicFunction:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): WearableConsentPrimerFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): WearableConsentPrimerFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WearableConsentPrimerView.kt$@Composable fun DataPointView(dataPoint: String)</ID>
    <ID>UndocumentedPublicFunction:WearableConsentPrimerView.kt$@Preview @Composable fun PreviewWearableConsentPrimerView(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WearableDataType.kt$@Suppress("ComplexMethod") @StringRes fun WearableDataType.getDisplayString(deviceType: DeviceType?): Int</ID>
    <ID>UndocumentedPublicFunction:WearableDataType.kt$fun getWearableDataPointsFromStrings( dataPointString: String?, dataPointsStringList: List&lt;String?> ): List&lt;WearableDataType></ID>
    <ID>UndocumentedPublicFunction:WearableDataType.kt$fun getWearableDataTypeFromString(dataTypeStr: String): WearableDataType?</ID>
    <ID>UndocumentedPublicFunction:WearableDataType.kt$fun getWearableDisplayStringList(context: Context, dataPoints: List&lt;WearableDataType>?): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:WearableDataType.kt$fun getWearableString(dataPoints: List&lt;WearableDataType>?): String</ID>
    <ID>UndocumentedPublicFunction:WearableDataType.kt$fun getWearableStringList(dataPoints: List&lt;WearableDataType>?): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentFragmentDirections.kt$WearableGenericConsentFragmentDirections.Companion$public fun actionWearableGenericConsentFragmentToWearableConsentInfoFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Composable fun DisplayContinueBox( tncUrl: String, ppUrl: String, displayCheckBox: Boolean, checkedFlow: StateFlow&lt;Boolean>, onCheckedChange: (Boolean) -> Unit, onButtonClick: () -> Unit, onTermsClick: (String) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Composable fun WearableConsentErrorView(onTryAgain: () -> Unit)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Composable fun WearableConsentLoadingView()</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Composable fun WearableConsentView( displayCheckBox: Boolean, title: String, tncUrl: String, ppUrl: String, checkedFlow: StateFlow&lt;Boolean>, @DrawableRes imageResource: Int, onCheckedChange: (Boolean) -> Unit, onButtonClick: () -> Unit, onLinkClick: () -> Unit, onTermsClick: (String) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Preview(showSystemUi = true, name = "Wearable Consent Error view") @Composable fun WearableConsentErrorPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Preview(showSystemUi = true, name = "Wearable Consent Loading View") @Composable fun WearableConsentLoadingPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Preview(showSystemUi = true, name = "Wearable Consent View w/ checkbox") @Composable fun WearableConsentPreviewCheckBox(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentView.kt$@Preview(showSystemUi = true, name = "Wearable Consent View w/ out checkbox") @Composable fun WearableConsentPreviewNoCheckBox(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel$fun getValidicUser(dataPoint: WearableDataType?)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel$fun setConsentAgreed(newValue: Boolean)</ID>
    <ID>UndocumentedPublicFunction:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel$fun setWearableConsent()</ID>
    <ID>UndocumentedPublicFunction:WebBrowserActivity.kt$WebBrowserActivity$fun setupToolbar()</ID>
    <ID>UndocumentedPublicFunction:WebBrowserActivity.kt$WebBrowserActivity.Companion$fun fromUrl(context: Context, url: String)</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragment.kt$WebBrowserFragment$// backward the browser navigation fun back()</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragment.kt$WebBrowserFragment$// forward the browser navigation fun forward()</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragment.kt$WebBrowserFragment$fun canGoBack()</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragmentArgs.kt$WebBrowserFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragmentArgs.kt$WebBrowserFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): WebBrowserFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragmentArgs.kt$WebBrowserFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): WebBrowserFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragmentDirections.kt$WebBrowserFragmentDirections.Companion$public fun actionGlobalPrivacyLockPermission(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WebBrowserFragmentDirections.kt$WebBrowserFragmentDirections.Companion$public fun actionGlobalWebBrowserFragment(extraUrl: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WebSettingsExtension.kt$fun WebSettings.removeWebViewValuesFromUserAgent()</ID>
    <ID>UndocumentedPublicFunction:WebUtils.kt$fun showBrowser(activity: Activity, name: String, body: String)</ID>
    <ID>UndocumentedPublicFunction:WebUtils.kt$fun showWebview(activity: Activity, url: String, logTag: String = activity::class.java.simpleName)</ID>
    <ID>UndocumentedPublicFunction:WebviewAuthenticator.kt$WebviewAuthenticator$fun authenticateWebViewWithJavascript(webView: WebView)</ID>
    <ID>UndocumentedPublicFunction:WebviewAuthenticator.kt$WebviewAuthenticator$fun setupAuthCookiesForHostedWebview(url: String, includeDeviceToken: Boolean = true)</ID>
    <ID>UndocumentedPublicFunction:WelcomeFragmentArgs.kt$WelcomeFragmentArgs$@Suppress("CAST_NEVER_SUCCEEDS") public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:WelcomeFragmentArgs.kt$WelcomeFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): WelcomeFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WelcomeFragmentArgs.kt$WelcomeFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): WelcomeFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WelcomeFragmentDirections.kt$WelcomeFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WelcomeFragmentDirections.kt$WelcomeFragmentDirections.Companion$public fun actionWelcomeFragmentToDashboardFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserFragmentDirections.kt$WelcomeNewUserFragmentDirections.Companion$public fun actionNavigateToContactUsFragment(demo: Int = 0): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserFragmentDirections.kt$WelcomeNewUserFragmentDirections.Companion$public fun actionWelcomeNewUserFragmentToCreateProfileFragment(): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserFragmentDirections.kt$WelcomeNewUserFragmentDirections.Companion$public fun actionWelcomeNewUserFragmentToFindLocationFragment(banner: Banner = Banner.LCL): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserScreen.kt$@Composable fun RadioGroup(selectedBanner: Banner?, isNewfoundlandLabrador: Boolean, onRadioClick: (Banner) -> Unit)</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserScreen.kt$@ExperimentalMaterialApi @Composable fun WelcomeNewUserAdapter( viewModel: WelcomeNewUserViewModel = WelcomeNewUserViewModel(), onProfileClick: () -> Unit = {}, onPharmacyClick: () -> Unit = {} )</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserScreen.kt$@ExperimentalMaterialApi @Composable fun WelcomeNewUserScreen( userInfo: UserInfo, isNewfoundlandLabrador: Boolean, onProfileClick: () -> Unit, onPharmacyClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserScreen.kt$@ExperimentalMaterialApi @Composable fun WelcomeNewUserScreenContent( coroutineScope: CoroutineScope, bottomSheetScaffoldState: ModalBottomSheetState, userInfo: UserInfo, isNewfoundlandLabrador: Boolean, onProfileClick: () -> Unit, onPharmacyClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserScreen.kt$@ExperimentalMaterialApi @Composable fun WelcomeNewUserSwitch( stateFlow: StateFlow&lt;State&lt;UserInfo>>, onProfileClick: () -> Unit, onPharmacyClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WelcomeNewUserScreen.kt$@ExperimentalMaterialApi @Preview @Composable fun PreviewWelcomeNewUserScreen(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WelcomeScreen.kt$@Composable fun WelcomeScreen( banner: Banner, stateFlow: StateFlow&lt;State&lt;UserInfo>>, onContinueClick: () -> Unit, onCancelClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WelcomeScreen.kt$@Composable fun WelcomeScreenContent( userInfo: UserInfo, banner: Banner, onContinueClick: () -> Unit, onCancelClick: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WelcomeScreen.kt$@Preview @Composable fun WelcomeScreenLCLPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WelcomeScreen.kt$@Preview @Composable fun WelcomeScreenSDMPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WelcomeScreen.kt$@Preview @Composable fun WelcomeScreenSDM_LCLPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationConfig.kt$WellnessStation$fun initialize( accessToken: () -> String )</ID>
    <ID>UndocumentedPublicFunction:WellnessStationDeepLinker.kt$WellnessStationDeepLinker.Paths.ImportReading$fun getClaimCode(link: String): String?</ID>
    <ID>UndocumentedPublicFunction:WellnessStationPolicy.kt$WellnessStationPolicy$fun getClaimCodePolicy(): PCHPolicy</ID>
    <ID>UndocumentedPublicFunction:WellnessStationPolicy.kt$WellnessStationPolicy$fun getQrCodePolicy(): PCHPolicy</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackAddReadingsButton()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackAddReadingsHighlights()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackCancelRemoval(highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackChatWithCare()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackCompleteRemoval(highlightCode: String, noOfReadingsRemoved: Int)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackCompleteRemoval(highlightCode: String, tabName: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackConfirmedConsent(label: String, connectionMode: WellnessStationsAnalytics.User, stepNo: Int, noOfSteps: Int)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackConnectionClick(label: String, connectionMode: WellnessStationsAnalytics.User)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackConnectionClose()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackEditReadings(highlightCode: String, tabName: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackImportSuccessFulClose(connectionMode: WellnessStationsAnalytics.User)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackInfoGuidelinesClick(highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackInfoGuidelinesCloseGuidelines(highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackLearnMoreButtonLink()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackQRCodeClose(connectionMode: WellnessStationsAnalytics.User, stepNo: Int, noOfSteps: Int)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackQRCodeConfirm(connectionMode: WellnessStationsAnalytics.User, stepNo: Int, noOfSteps: Int)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackQrCodeExpiredCancel(connectionMode: WellnessStationsAnalytics.User)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackQrCodeExpiredNewCode(connectionMode: WellnessStationsAnalytics.User)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackRemoveReadings(highlightCode: String, tabName: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackSelectHighlight(label: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.trackTabChange(label: String, highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewConfirmRemoveReading(highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewConsentScreen(connectionMode: WellnessStationsAnalytics.User, stepNo: Int, noOfSteps: Int)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewHealthConnection()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewHighlights()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewLearnMore()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewMetric(highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewMetricMoreInfo(highlightCode: String)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewQrCodeExpired()</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewScanQRCode(connectionMode: WellnessStationsAnalytics.User, stepNo: Int, noOfSteps: Int)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsAnalytics.kt$fun AnalyticsTracker.viewSuccessfulImport(connectionMode: WellnessStationsAnalytics.User)</ID>
    <ID>UndocumentedPublicFunction:WellnessStationsRepository.kt$WellnessStationsRepository$fun getClaimCode(accessToken: String): Flow&lt;Outcome&lt;ClaimCodeData>></ID>
    <ID>UndocumentedPublicFunction:WellnessStationsRepository.kt$WellnessStationsRepository$fun getInsightCards(accessToken: String): Flow&lt;Outcome&lt;WellnessStationHighlightResponse>></ID>
    <ID>UndocumentedPublicFunction:WellnessStationsRepository.kt$WellnessStationsRepository$fun getReadings(readingCode: String, accessToken: String): Flow&lt;Outcome&lt;GraphData>></ID>
    <ID>UndocumentedPublicFunction:WellnessStationsRepository.kt$WellnessStationsRepository$fun getWellnessStationAddedReadings(claimCode: String, accessToken: String): Flow&lt;Outcome&lt;QRCodeAddedReading>></ID>
    <ID>UndocumentedPublicFunction:WellnessStationsRepository.kt$WellnessStationsRepository$fun removeWellnessStationReadings(readingsToDelete: List&lt;String>, accessToken: String): Flow&lt;Outcome&lt;DeletedReadingResponse>></ID>
    <ID>UndocumentedPublicFunction:WipFragment.kt$@Composable fun WorkInProgressComposable( title: String, backPressed: () -> Unit, closePressed: () -> Unit )</ID>
    <ID>UndocumentedPublicFunction:WipFragment.kt$@Preview @Composable fun WorkInProgressPreview(@PreviewParameter(ThemeProvider::class) theme: Theme)</ID>
    <ID>UndocumentedPublicFunction:WipFragmentArgs.kt$WipFragmentArgs$public fun toBundle(): Bundle</ID>
    <ID>UndocumentedPublicFunction:WipFragmentArgs.kt$WipFragmentArgs.Companion$@JvmStatic public fun fromBundle(bundle: Bundle): WipFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WipFragmentArgs.kt$WipFragmentArgs.Companion$@JvmStatic public fun fromSavedStateHandle(savedStateHandle: SavedStateHandle): WipFragmentArgs</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToAppointmentDetails(appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToAppointmentSuccess(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToAppointmentSummary(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToIntakeForm(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToLocationSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToMapleWebView(intent: String? = null, appointmentId: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToPractitionerSelection(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToSelectPatient(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToSelectService(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToSelectSpecialty(selectedProvince: Province? = null): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToSelectTimeslot(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToSpecialtyLanding(specialtyId: String, selectedProvince: SelectedProvince): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToSpecialtyUrgency(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToTermsCondition(serviceBookingSelections: ServiceBookingSelections): NavDirections</ID>
    <ID>UndocumentedPublicFunction:WipFragmentDirections.kt$WipFragmentDirections.Companion$public fun navigateToWip(title: String): NavDirections</ID>
    <ID>UndocumentedPublicFunction:YAxisConfig.kt$YAxisConfig$fun noOfIntervals(): Int</ID>
    <ID>UndocumentedPublicFunction:settings.gradle.kts$fun setup(configuration: Configuration, vararg modules: Module)</ID>
    <ID>UndocumentedPublicFunction:settings.gradle.kts$fun setupProject(project: Project, module: Module, configuration: Configuration)</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$// This needs to be public because it's used in an inline method: sendAndReceiveCachedAndSockentData val encryptedSharedPrefs: SharedPreferences = getEncryptedSharedPreferences(context, "life.league.networking.socket.API.cache")</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$// region request caching val memoryCache = mutableMapOf&lt;String, Any>()</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$val expiredSessionListeners: MutableSet&lt;(ExpiredSession) -> Unit> = mutableSetOf()</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$val jsonAdapter: JsonAdapter</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$val log = Logger(logDelegate)</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$val remoteTraceFactory: RemoteTraceFactory? = null</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$var apiScope = CoroutineScope(Dispatchers.IO + SupervisorJob())</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$var appVersion: String</ID>
    <ID>UndocumentedPublicProperty:API.kt$API$var authenticator: LeagueSocketAPIAuthenticator</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.DependentSchemaRequest$@Json(name = "action") val action: String</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.DependentSchemaRequest$@Json(name = "dependent_id") val dependentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.DependentSchemaRequest$@Json(name = "qle_request_id") val qleRequestId: String = ""</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.DependentSchemaRequest$@Json(name = "relationship_type") val relationshipType: String</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.GetDependentsRequest$@Json(name = "group_id") val groupId: String</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.GetDependentsRequest$@Json(name = "user_id") val userId: String</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.ManageDependentsActionsRequest$@Json(name = "qle_request_id") val qleRequestId: String = ""</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.SendDependentInviteRequest$@Json(name = "dependent_id") val dependentId: String</ID>
    <ID>UndocumentedPublicProperty:API_Dependents.kt$ManageDependentsAPI.SendDependentInviteRequest$@Json(name = "email") val dependentEmail: String</ID>
    <ID>UndocumentedPublicProperty:API_Maple.kt$MapleUserIntent$abstract val value: String</ID>
    <ID>UndocumentedPublicProperty:API_Maple.kt$MapleUserIntent.Consult$val serviceId: String</ID>
    <ID>UndocumentedPublicProperty:API_Maple.kt$MapleUserIntent.CreateConsult$val serviceId: String</ID>
    <ID>UndocumentedPublicProperty:AccountController.kt$AccountController$var user: User? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionConfiguration.kt$AccountDeletionConfiguration$val accountDeletionDrawables: AccountDeletionDrawables</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionConfiguration.kt$AccountDeletionConfiguration$val accountDeletionStrings: AccountDeletionStrings</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionConfiguration.kt$AccountDeletionConfiguration$val koinApplication: KoinApplication</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionDrawables.kt$AccountDeletionDrawables$@DrawableRes val deletionConfirmationIllustration: Int</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionDrawables.kt$AccountDeletionDrawables$@DrawableRes val signOutIllustration: Int</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionResponse.kt$AccountDeletionResponse$@Json(name = "success") val success: Boolean</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionStrings.kt$AccountDeletionStrings$@StringRes val deletionConfirmationDescription: Int</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionStrings.kt$AccountDeletionStrings$@StringRes val deletionConfirmationTitle: Int</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionStrings.kt$AccountDeletionStrings$@StringRes val signOutDescription: Int</ID>
    <ID>UndocumentedPublicProperty:AccountDeletionStrings.kt$AccountDeletionStrings$@StringRes val signOutTitle: Int</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs$public val isRequestingChange: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsFragmentArgs.kt$AccountDetailsFragmentArgs$public val title: String</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsViewModel.kt$AccountDetailsViewModel$val authMethod: LiveData&lt;State&lt;AuthMethod>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsViewModel.kt$AccountDetailsViewModel$val commPreferences: LiveData&lt;State&lt;String>> get() = mutableCommPreferences</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsViewModel.kt$AccountDetailsViewModel$val email: LiveData&lt;State&lt;String>> get() = mutableEmail</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsViewModel.kt$AccountDetailsViewModel$val isUserProfileSet: SingleLiveEvent&lt;State&lt;Empty>> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsViewModel.kt$AccountDetailsViewModel$val passwordChange: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountDetailsViewModel.kt$AccountDetailsViewModel$val phoneNumber: LiveData&lt;State&lt;String>> get() = mutablePhoneNumber</ID>
    <ID>UndocumentedPublicProperty:AccountSetupGenderFragment.kt$AccountSetupGenderFragment.Companion$const val TAG = "AccountSetupGenderFragment"</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$// Gender Info val sex: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$// Location Info val address1: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$// Personal Info val firstName: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val accountSetupComplete: LiveData&lt;Empty> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val address2: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val city: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val dateOfBirth: LiveData&lt;State&lt;Date>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val isGenderValid: LiveData&lt;Boolean> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val isLocationValid: LiveData&lt;Boolean> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val isPersonalInfoValid: LiveData&lt;Boolean> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val isUserProfileSet = SingleLiveEvent&lt;State&lt;Empty>>()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val lastName: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val optedIntoMarketingCommunications: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val postalCode: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountSetupViewModel.kt$AccountSetupViewModel$val province: LiveData&lt;State&lt;Province>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val avatarContentId: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val avatarLoading: LiveData&lt;Boolean> = MutableLiveData&lt;Boolean>().apply { value = true }</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val avatarUploadErrorMessage: LiveData&lt;String> = SingleLiveEvent&lt;String>()</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val user: LiveData&lt;User> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val userConfig: LiveData&lt;UserConfig> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val userConfigFetchErrorMessage: LiveData&lt;String> = SingleLiveEvent&lt;String>()</ID>
    <ID>UndocumentedPublicProperty:AccountViewModel.kt$AccountViewModel$val userFetchErrorMessage: LiveData&lt;String> = SingleLiveEvent&lt;String>()</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementCompletionResponse$@Json(name = "achievements_info") val categories: List&lt;Category></ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementCriteria$@Json(name = "current") val activitiesCompleted: Int</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementCriteria$@Json(name = "threshold") val totalActivitiesToBeCompleted: Int</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "celebration_subtitle") val celebrationSubTitle: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "celebration_title") val celebrationTitle: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "completions") val completions: Int</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "description") val description: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "description_earned") val descriptionEarned: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "display_progress") val showProgressbar: Boolean?</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "id") val id: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "image") val achievementImage: AchievementImage</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "last_completed_at") val lastCompletedAt: Date? = null</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "name") val name: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "program_points") val programPoints: Int? = null</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$@Json(name = "progress") val progress: AchievementProgress?</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$val isCompleted get() = !isNotCompleted</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$val isNotCompleted get() = progress?.overallProgressPercentage != null &amp;&amp; progress.overallProgressPercentage &lt; 100</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementDetail$val shouldGreyOut get() = completions == 0 &amp;&amp; isNotCompleted</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementImage$@Json(name = "large") val large: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementImage$@Json(name = "medium") val medium: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementImage$@Json(name = "small") val small: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementProgress$@Json(name = "criteria") val criteria: AchievementCriteria</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementProgress$@Json(name = "overall") val overallProgressPercentage: Int</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$AchievementProgress$@Json(name = "title") val progressTitle: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$@Json(name = "category_group") val group: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$@Json(name = "category_title") val name: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$@Json(name = "completed") val completed: List&lt;AchievementDetail>?</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$@Json(name = "empty") val emptyState: EmptyState?</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$@Json(name = "in_progress") val inProgress: List&lt;AchievementDetail>?</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$@Json(name = "tooltip") val toolTip: ToolTip?</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$val allAchievements = completed.orEmpty() + inProgress.orEmpty()</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Category$val shouldShowEmptyState = allAchievements.isEmpty() &amp;&amp; emptyState?.title.isNotNullOrEmpty()</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Cta$@Json(name = "title") val title: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$Cta$@Json(name = "url") val url: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$EmptyState$@Json(name = "cta") val cta: Cta</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$EmptyState$@Json(name = "description") val description: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$EmptyState$@Json(name = "title") val title: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$ToolTip$@Json(name = "description") val description: String</ID>
    <ID>UndocumentedPublicProperty:AchievementCompletionResponse.kt$ToolTip$@Json(name = "title") val title: String</ID>
    <ID>UndocumentedPublicProperty:AchievementProgressViewModel.kt$AchievementProgressViewModel$var progress by mutableStateOf&lt;State&lt;MilestoneTrackerResult>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$AchievementsConfig$val achievementsFeatureFlagKey: String = "achievements_enabled"</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$AchievementsConfig$val coordinators: AchievementsCoordinators = AchievementsCoordinators()</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$AchievementsConfig$val featureFlags: AchievementsFeatureFlags = AchievementsFeatureFlags()</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$AchievementsConfig$val progressComposables: HealthProgramsProgressComposables = HealthProgramsProgressComposables()</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$AchievementsCoordinators$val activityCompletion: ActivityCompletion? = null</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$AchievementsFeatureFlags$var isAchievementsEnabled: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$HealthProgramsProgressComposables$val milestoneTracker: @Composable () -> Unit = {}</ID>
    <ID>UndocumentedPublicProperty:AchievementsConfig.kt$HealthProgramsProgressComposables$val recentlyEarnedAchievements: @Composable (NavController) -> Unit = {}</ID>
    <ID>UndocumentedPublicProperty:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Action$var actionListener: () -> Unit</ID>
    <ID>UndocumentedPublicProperty:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Action$var name: String</ID>
    <ID>UndocumentedPublicProperty:ActionBottomSheetDialog.kt$ActionBottomSheetDialog.Action$var thumbnail: Drawable? = null</ID>
    <ID>UndocumentedPublicProperty:ActionButton.kt$ActionButton$lateinit var binding: WidgetActionButtonBinding</ID>
    <ID>UndocumentedPublicProperty:ActivityCompletion.kt$ActivityCompletion$var rewardPointsObtained: LiveData&lt;State&lt;Int>> = mutableRewardPointsObtained</ID>
    <ID>UndocumentedPublicProperty:ActivityCompletionViewModel.kt$ActivityCompletionViewModel$var userAchievement: MutableLiveData&lt;State&lt;UserAchievement>> = MutableLiveData(Uninitialized())</ID>
    <ID>UndocumentedPublicProperty:AddDependentFormFragmentArgs.kt$AddDependentFormFragmentArgs$public val relationshipType: String</ID>
    <ID>UndocumentedPublicProperty:AddPatientFragmentArgs.kt$AddPatientFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientEvent.PatientCreated$val patientId: String</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientFormData$val dateOfBirth: DateSelectionState</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientFormData$val firstName: TextErrorState</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientFormData$val lastName: TextErrorState</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientFormData$val relationship: RelationshipSelectionState</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientFormData$val sex: SexSelectionState</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientModel$val addPatientError: AddPatientError? = null</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientModel$val formData: AddPatientFormData</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$AddPatientModel$val isAddPatientLoading: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$const val MAX_DEPENDENTS_ERROR = "USER_CANNOT_CREATE_ANY_MORE_PATIENTS"</ID>
    <ID>UndocumentedPublicProperty:AddPatientModels.kt$val bannedCharactersFilter = "[*\\\\\";&lt;&gt;]".toRegex()</ID>
    <ID>UndocumentedPublicProperty:AddedReading.kt$AddedReading$@Json(name = "reading_date_time") val readingDateTime: Date?</ID>
    <ID>UndocumentedPublicProperty:AddedReading.kt$AddedReading$@Json(name = "reading_id") val readingId: String = ""</ID>
    <ID>UndocumentedPublicProperty:AddedReading.kt$AddedReading$val value: String = ""</ID>
    <ID>UndocumentedPublicProperty:AdditionalInfo.kt$AdditionalInfo$val content: List&lt;Content> = listOf()</ID>
    <ID>UndocumentedPublicProperty:AdditionalInfo.kt$AdditionalInfo$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:AdditionalInfo.kt$AdditionalInfo.Content$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:AdditionalInfo.kt$AdditionalInfo.Content$val iconRes: Int</ID>
    <ID>UndocumentedPublicProperty:AdditionalInfo.kt$AdditionalInfo.Content$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$@Json(name = "postal_code") val postalCode: String</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$@Json(name = "street_address") val streetAddress: String</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$val city: String</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$val province: String</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var address1: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var address2: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var city: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var country: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var name: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var postalZip: String = ""</ID>
    <ID>UndocumentedPublicProperty:Address.kt$Address$var provinceState: String = ""</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragment.kt$AgentAvailabilityFragment$val args: AgentAvailabilityFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragment.kt$AgentAvailabilityFragment$var chatAvailabilities: List&lt;ChatAvailability>? = null</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragment.kt$AgentAvailabilityFragment$var onHelpCenterClickListener: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragment.kt$AgentAvailabilityFragment.Companion$const val AGENT_TYPE_DESCRIPTION = "agent_type_description"</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragment.kt$const val FRENCH_LANG = "fr"</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs$public val agentTypeDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:AgentAvailabilityFragmentArgs.kt$AgentAvailabilityFragmentArgs$public val chatAvailabilities: Array&lt;ChatAvailability></ID>
    <ID>UndocumentedPublicProperty:AgentChatFragment.kt$AgentChatFragment$var attachmentButtonVisibility: Int get() = binding?.inputMessageView?.attachmentButtonVisibility ?: View.GONE set(value) { binding?.inputMessageView?.imageFile = null binding?.inputMessageView?.attachmentButtonVisibility = value }</ID>
    <ID>UndocumentedPublicProperty:AgentChatFragment.kt$AgentChatFragment$var onSendClickListener: ((file: File?, message: String) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:AgentLoadingFragment.kt$AgentLoadingFragment$var estimatedWaitTime: Int? = null set(value) { field = value if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) { binding?.apply { approxTime.isVisible = field.greaterThan(-1, ifNull = false) approxTime.text = getStringIfAdded(R.string.approx_time, field.toString()) getWaitingScreenMenu() } } }</ID>
    <ID>UndocumentedPublicProperty:AgentLoadingFragment.kt$AgentLoadingFragment$var queuePosition: Int? = null set(value) { field = value if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) { binding?.apply { if (field == null) { queuePosition.visibility = View.INVISIBLE } else { queuePosition.visibility = View.VISIBLE queuePosition.text = getStringIfAdded(R.string.your_place_in_queue, field.toString()) } } } }</ID>
    <ID>UndocumentedPublicProperty:AgentLoadingFragment.kt$AgentLoadingFragment.Companion$const val EXTRA_AGENT_TYPE = "agent_type"</ID>
    <ID>UndocumentedPublicProperty:AgentLoadingViewModel.kt$AgentLoadingViewModel$val waitingLinkOuts: LiveData&lt;State&lt;WaitingRoomLinkOuts>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AgentSendEmailActivity.kt$AgentSendEmailActivity$val agentType: String by lazy { intent.getStringExtra(EXTRA_AGENT_TYPE) ?: "" }</ID>
    <ID>UndocumentedPublicProperty:AgentSendEmailActivity.kt$AgentSendEmailActivity.Companion$const val EXTRA_AGENT_TYPE = "agent_type"</ID>
    <ID>UndocumentedPublicProperty:AgentSendEmailFragment.kt$AgentSendEmailFragment$val args: AgentSendEmailFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:AgentSendEmailFragment.kt$AgentSendEmailFragment$var onSendMessageListener: ((message: String) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:AgentSendEmailFragment.kt$AgentSendEmailFragment.Companion$const val EXTRA_AGENT_TYPE = "agent_type"</ID>
    <ID>UndocumentedPublicProperty:AgentSendEmailFragmentArgs.kt$AgentSendEmailFragmentArgs$public val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val actions: List&lt;Action> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val caption: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val content: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val heading: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val tagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert.Action$@Json(name = "action_type") val actionType: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert.Action$@Json(name = "primary") val isPrimary: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert.Action$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert.Action$val link: String = ""</ID>
    <ID>UndocumentedPublicProperty:Alert.kt$Alert.Action$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.Actions$const val APP_LINK_OPENED = "App Link Opened"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.Actions$const val CLICKED_URL = "Clicked URL"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.Categories$const val CONVERSATION_OPTION = "Conversation Option"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.Categories$const val DEEP_LINK = "Deep Link"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val BRAND = "brand"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val CURRENCY = "currency"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val ITEM_CATEGORY = "itemCategory"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val LABEL = "label"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val MESSAGE_ID = "message_id"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val POSITION = "position"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val PRICE = "price"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val TRANSACTION_ID = "transaction_id"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.PropertyName$const val VARIANT = "variant"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.User$const val EMPLOYER_GROUP_ID = "employer_group_id"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsConstants.kt$AnalyticsConstants.User$const val TENANT_ID = "tenant_id"</ID>
    <ID>UndocumentedPublicProperty:AnalyticsTracker_Home.kt$VaccineType$val analyticsValue: String</ID>
    <ID>UndocumentedPublicProperty:AnalyticsTracker_Home.kt$VaccineType$val type: String</ID>
    <ID>UndocumentedPublicProperty:AnalyticsTracker_MissingProfile.kt$MissingField$val label: String</ID>
    <ID>UndocumentedPublicProperty:AnalyticsTracker_Navigation.kt$BottomNavItem$val itemName: String</ID>
    <ID>UndocumentedPublicProperty:AnalyticsTracker_PrivacyLock.kt$TimeoutReason$val description: String</ID>
    <ID>UndocumentedPublicProperty:Answers.kt$Answers$@Json(name = "current_answer") var currentAnswer: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:Answers.kt$Answers$@Json(name = "drop_down_answers") val dropDownAnswers: List&lt;DropDownAnswer> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Answers.kt$Answers$@Json(name = "input_answer") var inputAnswer: InputAnswer? = null</ID>
    <ID>UndocumentedPublicProperty:Answers.kt$Answers$@Json(name = "multiple_choice_answers") val multipleChoiceAnswers: List&lt;MultipleChoiceAnswer> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Answers.kt$Answers$@Json(name = "multiple_selection_answers") val multipleSelectionAnswers: MutableList&lt;MultipleSelectionAnswer> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:Answers.kt$Answers$var pendingSubmission = false</ID>
    <ID>UndocumentedPublicProperty:AppAlertsResponse.kt$AppAlertsResponse$val alerts: List&lt;Alert> = listOf()</ID>
    <ID>UndocumentedPublicProperty:AppCompatActivityExtension.kt$// If isStateSaved is true "Any operations that would change saved state should not be // performed if this method returns true." For example, any popBackStack() method, such as // popBackStackImmediate() or any FragmentTransaction using commit() instead of // commitAllowingStateLoss() will change the state and will result in an error. val AppCompatActivity.isSafeForFragmentTransaction: Boolean get() = !supportFragmentManager.isStateSaved &amp;&amp; !isFinishing</ID>
    <ID>UndocumentedPublicProperty:AppFeatureFlags.kt$AppFeatureFlags$val directorPage = FeatureFlag.BooleanFeatureFlag( id = "np_rel_mm_directorPage", name = "Director Page Feature", description = "Show Director Page for user login", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:AppFeatureFlags.kt$AppFeatureFlags$val remoteSeverityLevel = FeatureFlag.StringFeatureFlag( id = "rel_mps_debugLevelSeverity", name = "Remote Logging Severity Filter", description = "Filters out remote logs based on severity. Possible values are DEFAULT,DEBUG,INFO,NOTICE,WARNING,ERROR,CRITICAL,ALERT,EMERGENCY ", defaultValue = "" )</ID>
    <ID>UndocumentedPublicProperty:AppFeatureFlags.kt$AppFeatureFlags$val remoteUrl = FeatureFlag.StringFeatureFlag( id = "rel_mps_appLoggingUrl", name = "Remote Logging URL", description = "Endpoint to post remote logs to", defaultValue = "" )</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "app_component") val appComponent: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "app_version") val appVersion: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "build_version") val buildVersion: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "device_model") val deviceModel: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "entry_id") val entryId: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "message_type") val messageType: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "mobile_platform") val mobilePlatform: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "os_version") val osVersion: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "session_id") val sessionId: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "tenant_id") val applicationName: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$@Json(name = "user_id") val userId: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$val message: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$val severity: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLog$val time: String</ID>
    <ID>UndocumentedPublicProperty:AppLog.kt$AppLogBundle$@Json(name = "log_bundle") val logBundle: List&lt;AppLog></ID>
    <ID>UndocumentedPublicProperty:AppLoggingConfigFlags.kt$AppLoggingConfigFlags$val debugLevelSeverity = FeatureFlag.StringFeatureFlag( id = "rel_mps_debugLevelSeverity", name = "Debug level Severity", description = "Get Debug level Severity key ", defaultValue = "" )</ID>
    <ID>UndocumentedPublicProperty:AppLoggingConfigFlags.kt$AppLoggingConfigFlags$val maxCacheSize = FeatureFlag.LongFeatureFlag( id = "rel_mps_maxCacheSize", name = "Maximum Cache Size", description = "Maximum number of logs caches locally", defaultValue = 0 )</ID>
    <ID>UndocumentedPublicProperty:AppLoggingConfigFlags.kt$AppLoggingConfigFlags$val remoteUrl = FeatureFlag.StringFeatureFlag( id = "rel_mps_appLoggingUrl", name = "App Logging Remote URL", description = "Get configurable logging remote URL ", defaultValue = "" )</ID>
    <ID>UndocumentedPublicProperty:AppLogsTable.kt$AppLogsTable$@PrimaryKey val id: String</ID>
    <ID>UndocumentedPublicProperty:AppLogsTable.kt$AppLogsTable$val applicationName: String</ID>
    <ID>UndocumentedPublicProperty:AppLogsTable.kt$AppLogsTable$var log: AppLog</ID>
    <ID>UndocumentedPublicProperty:AppSettingsViewModel.kt$AppSettingsViewModel$val healthAtWorkEmailsEnabled: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AppSettingsViewModel.kt$AppSettingsViewModel$val healthAtWorkPushNotificationsEnabled: MediatorLiveData&lt;Boolean> = MediatorLiveData&lt;Boolean>().apply { addSource(pushNotificationsEnabled) { if (!it &amp;&amp; (value == true)) value = false else if (it &amp;&amp; (value != true)) value = true } }</ID>
    <ID>UndocumentedPublicProperty:AppSettingsViewModel.kt$AppSettingsViewModel$val isDependent: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AppSettingsViewModel.kt$AppSettingsViewModel$val notifFetchErrorMessage: SingleLiveEvent&lt;String> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:AppSettingsViewModel.kt$AppSettingsViewModel$val pushNotificationsEnabled: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:AppUseCaseModule.kt$AppUseCaseModule$val module = module { single { RewardUseCase(repository = get()) } }</ID>
    <ID>UndocumentedPublicProperty:AppVersionFooter.kt$AppVersionFooter$val binding = WidgetAppVersionFooterBinding.inflate(layoutInflator, this)</ID>
    <ID>UndocumentedPublicProperty:AppVersionFooter.kt$AppVersionFooter.AppVersionData$val applicationName: String</ID>
    <ID>UndocumentedPublicProperty:AppVersionFooter.kt$AppVersionFooter.AppVersionData$val buildNumber: Int</ID>
    <ID>UndocumentedPublicProperty:AppVersionFooter.kt$AppVersionFooter.AppVersionData$val environmentName: String</ID>
    <ID>UndocumentedPublicProperty:AppVersionFooter.kt$AppVersionFooter.AppVersionData$val versionName: String</ID>
    <ID>UndocumentedPublicProperty:ApplicationModule.kt$ApplicationModule$@SuppressLint("ConstantLocale") val module = module { single&lt;MarketplaceAuthenticator> { get&lt;CompositeLeagueAuthenticator>() } single&lt;WebviewAuthenticator> { get&lt;CompositeLeagueAuthenticator>() } single&lt;ContentAPIAuthenticator> { get&lt;CompositeLeagueAuthenticator>() } single&lt;LeagueSocketAPIAuthenticator> { get&lt;CompositeLeagueAuthenticator>() } single&lt;LeagueRestAPIAuthenticator> { get&lt;CompositeLeagueAuthenticator>() } single&lt;BuildInfoUtils> { BuildInfoUtils(androidContext()) } single { CompositeLeagueAuthenticator( auth0Authenticator = get(), legacyAuthenticator = get(), context = androidContext(), buildInfoUtils = get() ) } single { LeagueRestAPI.getHttpClient( context = androidContext(), authenticator = get(), environmentProvider = get(), localeProvider = LocaleUtils, socketApi = get(), logDelegate = Log.logDelegate ) } single { LegacyLeagueAuthenticator( context = androidContext(), sessionUtils = get(), environmentUtils = get(), privacyLockUtils = get(), jsonAdapter = get() ) } single { Auth0LeagueAuthenticator( sessionUtils = get(), environmentUtils = get(), context = androidContext(), privacyLockUtils = get() ) } single&lt;LeagueSocketAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;LeagueRestAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;ContentAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;CrashReportingLogger> { FirebaseCrashReportingLogger(context = androidContext()) } single { EnvironmentUtils( context = androidContext(), defaultEnvironment = EnvironmentConfiguration.environments[0], jsonAdapter = get() ) } single&lt;CoreNavigation> { get&lt;LeagueNavigation>() } single { LeagueNavigation( analyticsTracker = get(), environmentUtils = get(), repo = get(), contentAPI = get(), api = get(), deepLinker = get(), featureFlagsRepository = get() ) } single&lt;API.MessageListener> { LeagueAPIMessageListener(jsonUtils = get()) } single&lt;JsonAdapter> { get&lt;BaseJsonUtils>() } single&lt;BaseJsonUtils> { get&lt;LeagueJsonUtils>() } single { LeagueJsonUtils(ApplyHealthJourneyAdapters, ApplyWearableAdapter) } single { val loginIntent = Intent(androidContext(), LaunchActivity::class.java) loginIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK) SessionUtils( androidContext(), loginIntent, finishActivityOnLogout = true ) } // LeagueAPI single { API( tenantId = "league", appVersion = BuildConfig.VERSION_NAME, authenticator = get(), environmentProvidor = get(), locale = Locale.getDefault(), messageListener = get(), context = androidContext(), logDelegate = Log.logDelegate, jsonAdapter = get(), remoteTraceFactory = FirebaseRemoteTraceFactory() ) } // ContentAPI single { // Set the UriProvider ContentAPI.uriProvider = object : UriProvider { override fun getUriForFile(context: Context, file: File): Uri { return try { context.getUriForFile(BuildConfig.APPLICATION_ID + ".fileprovider", file) } catch (e: Exception) { Log.e("ContentAPI", e.toString()) Uri.EMPTY } } } ContentAPI( authenticator = get(), environmentProvider = get(), logDelegate = Log.logDelegate, api = get() ) } single&lt;ImageLoader> { CoreImageLoader(androidContext(), contentAPI = get(), contentAPIAuthenticator = get()) } single&lt;GenesisImageViewLoader> { get&lt;ImageLoader>() } single&lt;Repository> { Realm.init(androidContext()) LeagueRepository( leagueAPI = get(), cache = get() ) } single&lt;AssessmentRepository> { AssessmentRepositoryImpl( api = get(), cache = get() ) } single&lt;Cache> { CompositeCache( RoomCache(AppDatabase.getDatabase(androidContext())), RealmCache( Realm.getInstance( RealmConfiguration.Builder() .name("league.realm") .schemaVersion(REALM_VERSION) .deleteRealmIfMigrationNeeded() .build() ) ) ) } single&lt;AnalyticsTracker> { val secret = Secrets().getSegmentWriteKey(androidContext().getPackageNameForSecrets()) // setup the analytics tool, To enable debug logging use: adb shell setprop log.tag.GAv4 DEBUG CompositeAnalyticsTracker( LeagueAnalyticsTracker(androidApplication(), leagueAPI = get()), FirebaseAnalyticsTracker( Firebase.analytics, BundleUtils ), SegmentAnalyticsTracker( SegmentAnalyticsTracker.build( context = androidContext(), writeKey = secret ) ) ) } single&lt;DeepLinker> { CompositeDeepLinker( LeagueDeepLinker(), HealthDeepLinker(), HealthJourneyDeepLinker(), WalletDeepLinker(featureFlags = get()) ) } single { FeatureFlagsRepository( context = androidContext(), prefFileName = "life.league.preferences.local.flags", remoteFeatureFlagsApi = FirebaseRemoteFeatureFlagsApi(), HealthFeatureFlags, MarketplaceFeatureFlags, AppFeatureFlags, ChatFeatureFlags, WearableFeatureFlag, ChallengesFeatureFlags ) } single&lt;PointsRepository> { StaticPointsRepository(isEligibleForPoints = true) } single { StringProvider(androidContext().resources) } single { PrivacyLockUtils( androidContext(), enabled = true ) } // Repositories single { RewardRepository(api = get()) } single { ActivityCompletion() } }</ID>
    <ID>UndocumentedPublicProperty:ApplicationModule.kt$ApplicationModule$@SuppressLint("ConstantLocale") val module = module { single&lt;MarketplaceAuthenticator> { get&lt;PCHealthAuthenticator>() } single&lt;ContentAPIAuthenticator> { get&lt;PCHealthAuthenticator>() } single&lt;LeagueSocketAPIAuthenticator> { get&lt;PCHealthAuthenticator>() } single&lt;LeagueRestAPIAuthenticator> { get&lt;PCHealthAuthenticator>() } single&lt;OptimumTokenAuthenticator> { get&lt;PCHealthAuthenticator>() } single { OnboardingUtils(context = get()) } single { PCHealthAuthenticator( context = androidContext(), sessionUtils = get(), privacyLockUtils = get(), jsonAdapter = get(), pcoAccountUtils = get() ) } single { LeagueRestAPI.getHttpClient( context = androidContext(), localeProvider = LocaleUtils, authenticator = get(), environmentProvider = get(), socketApi = get(), logDelegate = Log.logDelegate ) } single&lt;LeagueSocketAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;ContentAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;LeagueRestAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single { EnvironmentUtils( context = androidContext(), jsonAdapter = get(), defaultEnvironment = EnvironmentConfiguration.environments[0] ) } single&lt;JsonAdapter> { get&lt;BaseJsonUtils>() } single&lt;BaseJsonUtils> { get&lt;PCHealthJsonUtils>() } single { BuildInfoUtils(androidContext()) } single { PCHealthJsonUtils(ApplyHealthJourneyAdapters, ApplyWearableAdapter) } single { val loginIntent = MainActivity.getLoginIntent(androidContext()) SessionUtils( context = androidContext(), loginIntent = loginIntent ) } // LeagueAPI single { API( "pchealth", BuildConfig.VERSION_NAME, authenticator = get(), environmentProvidor = get(), locale = Locale.getDefault(), messageListener = null, context = androidContext(), logDelegate = Log.logDelegate, jsonAdapter = get(), remoteTraceFactory = FirebaseRemoteTraceFactory() ) } // ContentAPI single { // Set the UriProvider ContentAPI.uriProvider = object : UriProvider { override fun getUriForFile(context: Context, file: File): Uri { return try { context.getUriForFile(BuildConfig.APPLICATION_ID + ".fileprovider", file) } catch (e: Exception) { Log.e("ContentAPI", e.toString()) Uri.EMPTY } } } ContentAPI( environmentProvider = get(), authenticator = get(), logDelegate = Log.logDelegate, api = get() ) } single&lt;ImageLoader> { CoreImageLoader( context = androidContext(), contentAPI = get(), contentAPIAuthenticator = get() ) } single&lt;GenesisImageViewLoader> { get&lt;ImageLoader>() } single&lt;AnalyticsTracker> { val secret = Secrets().getSegmentWriteKey(androidContext().getPackageNameForSecrets()) CompositeAnalyticsTracker( LeagueAnalyticsTracker(androidApplication(), leagueAPI = get()), FirebaseAnalyticsTracker( Firebase.analytics, BundleUtils ), SegmentAnalyticsTracker( SegmentAnalyticsTracker.build( context = androidContext(), writeKey = secret ) ) ) } // Repository single&lt;Repository> { RoadrunnerRepository( leagueAPI = get(), cache = get() ) } single&lt;AssessmentRepository> { AssessmentRepositoryImpl( api = get(), cache = get() ) } single { FeatureFlagsRepository( context = androidContext(), prefFileName = "life.roadrunner.preferences.local.flags", remoteFeatureFlagsApi = FirebaseRemoteFeatureFlagsApi(), HealthFeatureFlags, MarketplaceFeatureFlags, ChatFeatureFlags, WearableFeatureFlag, PCHHealthFeatureFlags ) } single&lt;Cache> { RoomCache(database = RoadRunnerDatabase.getDatabase(androidContext())) } single { StringProvider(androidContext().resources) } single { PrivacyLockUtils( androidContext(), enabled = true ) } single { val packageName = androidContext().getPackageNameForSecrets() val secret = Secrets().getLclClientSecret(packageName) val clientId = Secrets().getLclClientId(packageName) PcoAccountUtils( context = androidContext(), jsonAdapter = get(), environmentUtils = get(), lclClientId = clientId, lclClientSecret = secret ) } single&lt;PcoAPI> { val packageName = androidContext().getPackageNameForSecrets() val client = PcoAPIInterceptor.getHttpClient(Secrets().getLclApiKey(packageName), get()) RestAPIUtils.createRestInstance( EnvironmentConfiguration.pcoApiEndpoint, RequestError::class.java, client ) } single&lt;DeepLinker> { CompositeDeepLinker( RoadrunnerDeepLinker(), HealthDeepLinker(), HealthJourneyDeepLinker(), ChatDeepLinker(api = get(), featureFlagsRepository = get()), TriageDeepLinker() ) } single&lt;CoreNavigation> { get&lt;RoadrunnerNavigation>() } single { RoadrunnerNavigation(deepLinker = get(), analyticsTracker = get()) } single&lt;PointsRepository> { RoadrunnerPointsRepo( authenticator = get(), pcoAccountUtils = get(), analyticsTracker = get(), repository = get() ) } single { BannerProvider() } }</ID>
    <ID>UndocumentedPublicProperty:ApplicationModule.kt$ApplicationModule$val module = module { single { Auth0Authenticator( sessionUtils = get(), environmentUtils = get(), context = androidContext(), privacyLockUtils = get() ) } single&lt;ContentAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;LeagueSocketAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;LeagueRestAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;CoreNavigation> { NullCoreNavigation() } single { PrivacyLockUtils( androidContext(), // don't time out sessions in presenter apps enabled = false ) } single { EnvironmentUtils( context = androidContext(), defaultEnvironment = CoreEnvironmentConfiguration().getEnvironmentList( CoreEnvironmentConfiguration.STAGE )[0], jsonAdapter = get() ) } single&lt;LeagueSocketAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;ContentAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;LeagueRestAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single { val loginIntent = Intent(androidContext(), MainActivity::class.java) loginIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK) SessionUtils( androidContext(), loginIntent, finishActivityOnLogout = true ) } single&lt;JsonAdapter> { BaseJsonUtils() } // LeagueAPI single { API( tenantId = "league", appVersion = BuildConfig.VERSION_NAME, authenticator = get(), environmentProvidor = get(), locale = Locale.getDefault(), messageListener = null, context = androidContext(), logDelegate = Log.logDelegate, jsonAdapter = get() ) } single { LeagueRestAPI.getHttpClient( context = androidContext(), authenticator = get(), environmentProvider = get(), localeProvider = LocaleUtils, socketApi = get(), logDelegate = Log.logDelegate ) } // ContentAPI single { // Set the UriProvider ContentAPI.uriProvider = object : UriProvider { override fun getUriForFile(context: Context, file: File): Uri { return try { context.getUriForFile( BuildConfig.APPLICATION_ID + ".fileprovider", file ) } catch (e: Exception) { Log.e("ContentAPI", e.toString()) Uri.EMPTY } } } ContentAPI( authenticator = get(), environmentProvider = get(), logDelegate = Log.logDelegate, api = get() ) } single&lt;ImageLoader> { CoreImageLoader( androidContext(), contentAPI = get(), contentAPIAuthenticator = get() ) } single&lt;GenesisImageViewLoader> { get&lt;ImageLoader>() } single&lt;AnalyticsTracker> { LeagueAnalyticsTracker(applicationContext = androidApplication(), leagueAPI = get()) } single { FeatureFlagsRepository( context = androidContext(), prefFileName = "life.league.preferences.local.flags", remoteFeatureFlagsApi = NoOpRemoteFeatureFlagsApi() ) } }</ID>
    <ID>UndocumentedPublicProperty:ApplicationModule.kt$ApplicationModule$val module = module { single { Auth0Authenticator( sessionUtils = get(), environmentUtils = get(), context = androidContext(), privacyLockUtils = get() ) } single&lt;ContentAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;LeagueSocketAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;LeagueRestAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;DeepLinker> { CompositeDeepLinker( ChatDeepLinker(api = get(), featureFlagsRepository = get()), TriageDeepLinker() ) } single&lt;CoreNavigation> { CareNavigation(get()) } single { PrivacyLockUtils( androidContext(), // don't time out sessions in presenter apps enabled = false ) } single { EnvironmentUtils( context = androidContext(), defaultEnvironment = CoreEnvironmentConfiguration().getEnvironmentList( CoreEnvironmentConfiguration.STAGE )[0], jsonAdapter = get() ) } single&lt;LeagueSocketAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;ContentAPIEnvironmentProvider> { get&lt;EnvironmentUtils&gt;() } single&lt;LeagueRestAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single { val loginIntent = Intent(androidContext(), MainActivity::class.java) loginIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK) SessionUtils( androidContext(), loginIntent, finishActivityOnLogout = true ) } single&lt;JsonAdapter> { BaseJsonUtils() } // LeagueAPI single { API( tenantId = "league", appVersion = BuildConfig.VERSION_NAME, authenticator = get(), environmentProvidor = get(), locale = Locale.getDefault(), messageListener = null, context = androidContext(), logDelegate = Log.logDelegate, jsonAdapter = get() ) } single { LeagueRestAPI.getHttpClient( authenticator = get(), environmentProvider = get(), socketApi = get(), logDelegate = Log.logDelegate, context = androidContext(), localeProvider = LocaleUtils ) } // ContentAPI single { // Set the UriProvider ContentAPI.uriProvider = object : UriProvider { override fun getUriForFile(context: Context, file: File): Uri { return try { context.getUriForFile( BuildConfig.APPLICATION_ID + ".fileprovider", file ) } catch (e: Exception) { Log.e("ContentAPI", e.toString()) Uri.EMPTY } } } ContentAPI( authenticator = get(), environmentProvider = get(), logDelegate = Log.logDelegate, api = get() ) } single&lt;ImageLoader> { CoreImageLoader( androidContext(), contentAPI = get(), contentAPIAuthenticator = get() ) } single&lt;GenesisImageViewLoader> { get&lt;ImageLoader>() } single&lt;AnalyticsTracker> { LeagueAnalyticsTracker(applicationContext = androidApplication(), leagueAPI = get()) } single { FeatureFlagsRepository( context = androidContext(), prefFileName = "life.league.preferences.local.flags", remoteFeatureFlagsApi = NoOpRemoteFeatureFlagsApi() ) } }</ID>
    <ID>UndocumentedPublicProperty:ApplicationModule.kt$ApplicationModule$val module = module { single { Auth0Authenticator( sessionUtils = get(), environmentUtils = get(), privacyLockUtils = get(), context = androidContext() ) } single&lt;ContentAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;LeagueSocketAPIAuthenticator> { get&lt;Auth0Authenticator>() } single&lt;LeagueRestAPIAuthenticator> { get&lt;Auth0Authenticator>() } single { PrivacyLockUtils( androidContext(), // enable privacy lock so we can test it enabled = true ) } single&lt;CoreNavigation> { NullCoreNavigation() } single { EnvironmentUtils( context = androidContext(), defaultEnvironment = CoreEnvironmentConfiguration().getEnvironmentList( CoreEnvironmentConfiguration.STAGE )[0], jsonAdapter = get() ) } single&lt;LeagueRestAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;LeagueSocketAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single&lt;ContentAPIEnvironmentProvider> { get&lt;EnvironmentUtils>() } single { val loginIntent = Intent(androidContext(), MainActivity::class.java) loginIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK) SessionUtils( context = androidContext(), loginIntent = loginIntent, finishActivityOnLogout = true ) } single&lt;JsonAdapter> { BaseJsonUtils() } // LeagueAPI single { API( tenantId = "league", appVersion = BuildConfig.VERSION_NAME, authenticator = get(), environmentProvidor = get(), locale = Locale.getDefault(), messageListener = null, context = androidContext(), logDelegate = Log.logDelegate, jsonAdapter = get() ) } // League OkHTTPClient (each app should only have one for the league api), you'll want to use // a separate client for any non-league apis. Otherwise you'll send league authentication // headers to 3rd parties which is a big security no-no single { LeagueRestAPI.getHttpClient( context = androidContext(), localeProvider = LocaleUtils, authenticator = get(), environmentProvider = get(), socketApi = get(), logDelegate = Log.logDelegate ) } // RestAPI single { RestAPIUtils.createJsonApiRestInstance&lt;SampleJsonApi>( baseUrl = "https://api.staging.league.dev/", client = get(), ) } // ContentAPI single { // Set the UriProvider ContentAPI.uriProvider = object : UriProvider { override fun getUriForFile(context: Context, file: File): Uri { return try { context.getUriForFile( BuildConfig.APPLICATION_ID + ".fileprovider", file ) } catch (e: Exception) { Log.e("ContentAPI", e.toString()) Uri.EMPTY } } } ContentAPI( authenticator = get(), environmentProvider = get(), logDelegate = Log.logDelegate, api = get() ) } single&lt;ImageLoader> { CoreImageLoader( androidContext(), contentAPI = get(), contentAPIAuthenticator = get() ) } single&lt;GenesisImageViewLoader> { get&lt;ImageLoader>() } single&lt;AnalyticsTracker> { LeagueAnalyticsTracker(applicationContext = androidApplication(), leagueAPI = get()) } single { FeatureFlagsRepository( context = androidContext(), prefFileName = "life.league.preferences.local.flags", remoteFeatureFlagsApi = NoOpRemoteFeatureFlagsApi() ) } }</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val address: Address?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val appointmentType: AppointmentType</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val endsAt: DateTime</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val id: String</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val locationName: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val locationPhone: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val orgId: AppointmentOrgId</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val patientFirstName: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val patientLastName: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val paymentDate: DateTime?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val paymentMethod: PaymentMethod?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val paymentRefundApprovedPercentage: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val paymentVoided: Boolean</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val practitionerAvatarUrl: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val practitionerName: String?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val price: Pricing?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val requiredDocs: List&lt;RequiredDocuments>?</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val serviceName: String</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val specialtyName: String</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val startsAt: DateTime</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$Appointment$val status: AppointmentStatus</ID>
    <ID>UndocumentedPublicProperty:Appointment.kt$val PaymentMode.jsonName: String get() = when (this) { PaymentMode.ONLINE -> "online" PaymentMode.IN_PERSON -> "inPerson" PaymentMode.ANY -> "any" }</ID>
    <ID>UndocumentedPublicProperty:AppointmentDetailsFragmentArgs.kt$AppointmentDetailsFragmentArgs$public val appointmentId: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents.ConsultWithIntent$val appointmentId: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents.ConsultWithIntent$val intent: PageIntent</ID>
    <ID>UndocumentedPublicProperty:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents.ShowCancelBottomSheet$val orgId: AppointmentOrgId</ID>
    <ID>UndocumentedPublicProperty:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents.ShowCancelBottomSheet$val phone: Phone</ID>
    <ID>UndocumentedPublicProperty:AppointmentDetailsViewModel.kt$AppointmentDetailsEvents.ShowSupportBottomSheet$val orgId: AppointmentOrgId</ID>
    <ID>UndocumentedPublicProperty:AppointmentIdExtensions.kt$val AppointmentOrgId.cancellationPolicy get() = when (this) { AppointmentOrgId.LIFEMARK -> R.string.triage_lifemark_appointment_summary_cancellation_policy_url AppointmentOrgId.MAPLE -> R.string.triage_maple_appointment_summary_cancellation_policy_url AppointmentOrgId.SALESFORCE -> 0 }</ID>
    <ID>UndocumentedPublicProperty:AppointmentIdExtensions.kt$val AppointmentOrgId.termsConditionBody get() = when (this) { AppointmentOrgId.LIFEMARK -> R.string.triage_terms_conditions_lifemark_body AppointmentOrgId.MAPLE -> R.string.triage_terms_conditions_maple_body AppointmentOrgId.SALESFORCE -> 0 }</ID>
    <ID>UndocumentedPublicProperty:AppointmentIdExtensions.kt$val AppointmentOrgId.termsUseUrl get() = when (this) { AppointmentOrgId.LIFEMARK -> R.string.triage_lifemark_terms_of_use_url AppointmentOrgId.MAPLE -> R.string.triage_maple_terms_of_use_url AppointmentOrgId.SALESFORCE -> 0 }</ID>
    <ID>UndocumentedPublicProperty:AppointmentListViewModel.kt$AppointmentsEvents.AppointmentClicked$val appointmentId: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentListViewModel.kt$AppointmentsEvents.SalesforceChatClicked$val chatId: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentListViewModel.kt$AppointmentsState$val pastAppointmentClicked: (AppointmentOrgId, String) -> Unit</ID>
    <ID>UndocumentedPublicProperty:AppointmentListViewModel.kt$AppointmentsState$val pastAppointments: List&lt;SimpleAppointment></ID>
    <ID>UndocumentedPublicProperty:AppointmentListViewModel.kt$AppointmentsState$val upcomingAppointmentClicked: (AppointmentOrgId, String) -> Unit</ID>
    <ID>UndocumentedPublicProperty:AppointmentListViewModel.kt$AppointmentsState$val upcomingAppointments: List&lt;DetailedAppointment></ID>
    <ID>UndocumentedPublicProperty:AppointmentOrgIdExtensions.kt$val AppointmentOrgId.supportNumber get() = when (this) { AppointmentOrgId.LIFEMARK -> "+1 866-829-6169" AppointmentOrgId.MAPLE, AppointmentOrgId.SALESFORCE -> null }</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$@Json(name = "geo_code") val geoCode: GeoCode?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$val address: Address?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$val email: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$val name: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$val phone: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentLocationResponse$val url: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPatientResponse$@Json(name = "first_name") val firstName: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPatientResponse$@Json(name = "last_name") val lastName: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPaymentInfoResponse$@Json(name = "payment_voided") val paymentVoided: Boolean?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPaymentInfoResponse$@Json(name = "refund_approved_percentage") val refundApprovedPercentage: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPaymentInfoResponse$val date: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPaymentInfoResponse$val method: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPractitionerInfoResponse$@Json(name = "avatar_url") val avatarUrl: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPractitionerInfoResponse$@Json(name = "practitioner_id") val practitionerId: String?</ID>
    <ID>UndocumentedPublicProperty:AppointmentResponse.kt$AppointmentPractitionerInfoResponse$val name: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentSuccessFragmentArgs.kt$AppointmentSuccessFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents.CheckCancellationPolicy$val url: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents.CheckTermsAndConditions$val url: String</ID>
    <ID>UndocumentedPublicProperty:AppointmentSummaryAnalyticsEvents.kt$AppointmentSummaryAnalyticsEvents.ViewConfirmation$val isPaymentSuccessful: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:AppointmentSummaryFragmentArgs.kt$AppointmentSummaryFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:AppointmentTypeAnalyticsExt.kt$val AppointmentType.analyticsKey: Pair&lt;String, String> get() = "appt_type" to when (this) { AppointmentType.VIRTUAL_SCHEDULED -> "virtual scheduled" AppointmentType.VIRTUAL_ON_DEMAND -> "virtual on-demand" AppointmentType.INPERSON_SCHEDULED -> "in person scheduled" }</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs$public val device: DeviceType</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesConnectionDialogFragmentArgs.kt$AppsAndDevicesConnectionDialogFragmentArgs$public val moduleIdentifier: String? = null</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogViewModel$val stateFlow: StateFlow&lt;AppsAndDevicesConnectionDialogState> get() = mutableState</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragment.kt$AppsAndDevicesFragment.Companion$const val PERMISSION_REQUEST_CODE = 101</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragment.kt$AppsAndDevicesFragment.Companion$const val REFRESH_KEY = "shouldRefresh"</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public val dataPoints: String? = null</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public val dataPointsString: String? = null</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public val device: String? = null</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public val fromJourney: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public val moduleIdentifier: String? = null</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesFragmentArgs.kt$AppsAndDevicesFragmentArgs$public val selectedDevice: String? = null</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$val dataPoints: List&lt;WearableDataType> = getWearableDataPointsFromStrings(dataPoints, listOf(dataPointsString))</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$val expectingCloudDevice: StateFlow&lt;DeviceType?> get() = mutableExpectingCloudDevice</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$val isGenericConsentGiven: StateFlow&lt;Boolean?> get() = mutableIsGenericConsentGiven</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$val validicUserFlow: StateFlow&lt;ValidicUser?> get() = mutableValidicUserFlow</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$val wearableDevice: StateFlow&lt;State&lt;List&lt;WearableDevice>?>> get() = mutableWearableDevice</ID>
    <ID>UndocumentedPublicProperty:AppsAndDevicesViewModel.kt$AppsAndDevicesViewModel$val wearableDeviceAndWearableConsent: StateFlow&lt;State&lt;List&lt;WearableDevice>?>> get() = mutableWearableDeviceWithDeviceInfo</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$val formattedTags: String get() { if (tags.isEmpty()) return "" var formattedTags = "" for (i in tags.indices) { val tag = tags[i] formattedTags += tag.substring(0, 1) .uppercase(Locale.getDefault()) + tag.substring(1) if (i != tags.size - 1) { formattedTags += ", " } } return formattedTags }</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var action: String = ""</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var actionParams: Map&lt;String, String> = mapOf()</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var contentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var readTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var tags: MutableList&lt;String> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:Article.kt$Article$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:ArticleList.kt$ArticleList$@PrimaryKey var id: String = ""</ID>
    <ID>UndocumentedPublicProperty:ArticleList.kt$ArticleList$var articles: MutableList&lt;Article> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:ArticleList.kt$ArticleList$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:ArticleList.kt$ArticleList$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:ArticleListData.kt$ArticleListData$val articleList = ArticleList(json)</ID>
    <ID>UndocumentedPublicProperty:ArticleListTable.kt$ArticleListTable$@PrimaryKey var id: String = articleList.id</ID>
    <ID>UndocumentedPublicProperty:ArticleListTable.kt$ArticleListTable$val articleList: ArticleList</ID>
    <ID>UndocumentedPublicProperty:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$public val isRetake: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$public val navigationTarget: Int = 38</ID>
    <ID>UndocumentedPublicProperty:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$public val points: Int = 0</ID>
    <ID>UndocumentedPublicProperty:AssessmentCompleteFragmentArgs.kt$AssessmentCompleteFragmentArgs$public val successScreen: SuccessScreen</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionStatus.Loaded$val forwardButtonState: ForwardButtonState</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val completionPoints: Int</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val exitScreen: ExitScreen?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val questionId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val questionNumber: Int</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val redirectUrl: String?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.CloseFragment$val totalQuestions: Int</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.NavigateTo$val url: String?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowError$@androidx.annotation.StringRes val error: Int</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowError$val currentIndex: Int</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowError$val currentQuestion: Question?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowError$val module: Module?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowOutcomes$val activityId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowOutcomes$val campaignId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowOutcomes$val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowSubmitScreen$val answers: Answers</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowSubmitScreen$val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowSubmitScreen$val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowSubmitScreen$val points: Int</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowSubmitScreen$val questionId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEffect.ShowSubmitScreen$val successScreen: SuccessScreen?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEvent.UpdateAnswer$val answers: Answers</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEvent.UpdateAnswer$val question: Question</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$QuestionViewEvent.UpdateCurrentQuestion$val question: Question?</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$ViewState$val questionStatus: QuestionStatus</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$ViewState$var currentIndex: Int? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentContract.kt$ViewState$var module: Module? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentExitViewModel.kt$AssessmentExitViewModel$val exitAssessment = SingleLiveEvent&lt;Boolean>()</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragment.kt$AssessmentFrictionFragment.Companion$// amount of time to show the loading screen; artificially made longer to increase trust const val LOADING_DELAY = 2000L</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val answers: Answers?</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val frictionScreen: FrictionScreen? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val isRetake: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val points: Int = 0</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val questionId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentFrictionFragmentArgs.kt$AssessmentFrictionFragmentArgs$public val successScreen: SuccessScreen? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentLoadingFragment.kt$AssessmentLoadingFragment.Companion$const val EXTRA_ACTIVITY_ID = "activityId"</ID>
    <ID>UndocumentedPublicProperty:AssessmentLoadingFragment.kt$AssessmentLoadingFragment.Companion$const val EXTRA_CAMPAIGN_ID = "campaignId"</ID>
    <ID>UndocumentedPublicProperty:AssessmentLoadingFragment.kt$AssessmentLoadingFragment.Companion$const val EXTRA_MODULE_ID = "moduleId"</ID>
    <ID>UndocumentedPublicProperty:AssessmentLoadingFragment.kt$AssessmentLoadingFragment.Companion$const val EXTRA_RETAKE = "retakeAssessment"</ID>
    <ID>UndocumentedPublicProperty:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentLoadingFragmentArgs.kt$AssessmentLoadingFragmentArgs$public val retakeAssessment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs$public val additionalInfo: OnboardingPage.AdditionalInfo</ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingAdditionalInfoFragmentArgs.kt$AssessmentOnboardingAdditionalInfoFragmentArgs$public val retakeAssessment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs$public val isCovidCheckin: Boolean</ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs$public val onboardingPages: Array&lt;OnboardingPage></ID>
    <ID>UndocumentedPublicProperty:AssessmentOnboardingFragmentArgs.kt$AssessmentOnboardingFragmentArgs$public val retakeAssessment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentQuestionFragmentArgs.kt$AssessmentQuestionFragmentArgs$public val retakeAssessment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$// It will be accessed by the view to observe view effects updates val viewEffect: SingleLiveEvent&lt;QuestionViewEffect> = mutableViewEffect</ID>
    <ID>UndocumentedPublicProperty:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PRIVATE) var currentQuestion: Question? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$lateinit var getIndexOfQuestion: ((String) -> Int)</ID>
    <ID>UndocumentedPublicProperty:AssessmentQuestionsViewModel.kt$AssessmentQuestionsViewModel$val currentViewState: LiveData&lt;ViewState> = mutableViewState</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$val assessmentFlow: LiveData&lt;State&lt;AssessmentFlowsResponse>> get() = mutableAssessmentFlow</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$val module: LiveData&lt;State&lt;Module>> get() = mutableModule</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$var activityId: String = "" private set</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$var campaignId: String = "" private set</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$var currentIndex: Int = 0</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$var moduleId: String? = null private set</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel$var retakeAssessment: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel.AssessmentFlowsResponse$val assessmentFlows: AssessmentFlows?</ID>
    <ID>UndocumentedPublicProperty:AssessmentViewModel.kt$AssessmentViewModel.AssessmentFlowsResponse$val module: Module</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragment.kt$AssessmentsExitFragment$lateinit var binding: ActivityBuilderExitBinding</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val answers: Answers? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val currentQuestion: Int = 0</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val exitScreen: ExitScreen? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val moduleId: String = "\"\""</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val moduleType: String = "\"\""</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val points: Int = 0</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val questionId: String = "\"\""</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val redirectUrl: String? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val retake: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val successScreen: SuccessScreen? = null</ID>
    <ID>UndocumentedPublicProperty:AssessmentsExitFragmentArgs.kt$AssessmentsExitFragmentArgs$public val totalQuestions: Int = 0</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$Auth0Authenticator$val sessionUtils: SessionUtils</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$Auth0Authenticator$var jwt: String? get() = sharedPrefs.getString( Auth0Authenticator::jwt.name, defaultValue = null, useCache = true, shouldDecrypt = true ) set(value) { sharedPrefs.putString( Auth0Authenticator::jwt.name, value, useCache = true, shouldEncrypt = true ) }</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$Auth0Authenticator.Companion$const val AUTHORIZATION_HEADER_NAME = "Authorization"</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$Auth0Authenticator.Companion$const val RC_UNLOCK_AUTHENTICATION = 123</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$Auth0Authenticator.Companion$const val TAG = "Auth0Authenticator"</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$UserCredentials$val jwt: String</ID>
    <ID>UndocumentedPublicProperty:Auth0Authenticator.kt$UserCredentials$val userId: String?</ID>
    <ID>UndocumentedPublicProperty:Auth0BrowserSdkAuthenticatorImpl.kt$Auth0BrowserSdkAuthenticatorImpl$// function which will authenticate the socket session. Returns true if successful, false otherwise // this needs to be set after initialization because it relies on UserRepository.authenticateAuth0Connection // which needs a reference to this authenticator. Eventually we'll need to find a better architecture // This will all be handled by the init code and hidden to the SDK user however var authenticateSocketSession: (suspend (jwt: String) -> Boolean)? = null</ID>
    <ID>UndocumentedPublicProperty:AuthInfo.kt$AuthInfo$@Json(name = "user_id") val userId: String? = null</ID>
    <ID>UndocumentedPublicProperty:AuthMethod.kt$AuthMethod$@Json(name = "auth_method") var authMethod: String = ""</ID>
    <ID>UndocumentedPublicProperty:AuthMethod.kt$AuthMethod.Companion$const val appleAuth = "apple_id"</ID>
    <ID>UndocumentedPublicProperty:AuthMethod.kt$AuthMethod.Companion$const val googleAuth = "google"</ID>
    <ID>UndocumentedPublicProperty:AuthMethod.kt$AuthMethod.Companion$const val passwordAuth = "password"</ID>
    <ID>UndocumentedPublicProperty:AuthMethod.kt$AuthMethod.Companion$const val pcIdTokenExchangeAuth = "pc_id_token_exchange"</ID>
    <ID>UndocumentedPublicProperty:AuthMethod.kt$AuthMethod.Companion$const val unknownAuth = "unknown"</ID>
    <ID>UndocumentedPublicProperty:AuthNavGraphArgs.kt$AuthNavGraphArgs$public val isPhoneSet: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AuthNavGraphArgs.kt$AuthNavGraphArgs$public val isRequestingChange: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:AuthNavGraphArgs.kt$AuthNavGraphArgs$public val title: String</ID>
    <ID>UndocumentedPublicProperty:AuthenticationViewModel.kt$AuthenticationViewModel$// TODO: refactor this callback out of a view model where it doesn't belong, it's causing a // memory leak // Used to tell parent navigation when device has been authorized var onDeviceAuthorized: ((authInfo: AuthInfo) -> Unit) = { }</ID>
    <ID>UndocumentedPublicProperty:AuthenticationViewModel.kt$AuthenticationViewModel$val isDeviceAuthSent: LiveData&lt;State&lt;Empty>> = SingleLiveEvent&lt;State&lt;Empty>>()</ID>
    <ID>UndocumentedPublicProperty:AuthenticationViewModel.kt$AuthenticationViewModel$val isDeviceAuthorized: LiveData&lt;State&lt;Empty>> = SingleLiveEvent&lt;State&lt;Empty>>()</ID>
    <ID>UndocumentedPublicProperty:AuthenticationViewModel.kt$AuthenticationViewModel$val isPhoneNumberChanged: LiveData&lt;State&lt;Empty>> = SingleLiveEvent&lt;State&lt;Empty>>()</ID>
    <ID>UndocumentedPublicProperty:Availability.kt$Availability$val agentIsAvailable: Boolean</ID>
    <ID>UndocumentedPublicProperty:Availability.kt$Availability$val agentType: String</ID>
    <ID>UndocumentedPublicProperty:Availability.kt$Availability$val chatAgentConfig: ChatAgentConfig</ID>
    <ID>UndocumentedPublicProperty:Availability.kt$Availability$val chatAvailability: MutableList&lt;ChatAvailability></ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$AvailableTimeslotsResponse$val attributes: TimeslotsAttributes</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$AvailableTimeslotsResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$TimeslotResponse$@Json(name = "partner_id") val partnerId: String?</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$TimeslotResponse$@Json(name = "timeslot_end_date_time") val timeslotEndDateTime: String</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$TimeslotResponse$@Json(name = "timeslot_id") val timeslotId: String?</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$TimeslotResponse$@Json(name = "timeslot_start_date_time") val timeslotStartDateTime: String</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$TimeslotsAttributes$val date: String</ID>
    <ID>UndocumentedPublicProperty:AvailableTimeslotsResponse.kt$TimeslotsAttributes$val timeslots: List&lt;TimeslotResponse></ID>
    <ID>UndocumentedPublicProperty:BannerController.kt$BannerController$val sampleImages: Array&lt;Drawable?></ID>
    <ID>UndocumentedPublicProperty:BannerController.kt$BannerController$var brandedPointsBannerLoading = false set(value) { field = value this.requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:BannerProvider.kt$BannerProvider$var isChatBannerActive = false</ID>
    <ID>UndocumentedPublicProperty:BarcodeView.kt$BarcodeView.Companion$const val BARCODE_PX_HEIGHT = 800</ID>
    <ID>UndocumentedPublicProperty:BarcodeView.kt$BarcodeView.Companion$const val BARCODE_PX_WIDTH = 800</ID>
    <ID>UndocumentedPublicProperty:BaseRadioSelectionBottomSheetDialog.kt$BaseRadioSelectionBottomSheetDialog.Companion$const val EXTRA_CURRENT_SELECTION = "current_selection"</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage$var benefitType: String = ""</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage$var coverageType: Int = 0</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage$var shortName: String = ""</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage.Companion$const val COVERAGE_TYPE_CHECK_COVERAGE = 4</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage.Companion$const val COVERAGE_TYPE_COVERED = 1</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage.Companion$const val COVERAGE_TYPE_NOT_COVERED = 2</ID>
    <ID>UndocumentedPublicProperty:BenefitCoverage.kt$BenefitCoverage.Companion$const val COVERAGE_TYPE_PARTIAL = 3</ID>
    <ID>UndocumentedPublicProperty:BenefitSticker.kt$BenefitSticker.Companion$const val STATUS_GRACE_PERIOD = 2</ID>
    <ID>UndocumentedPublicProperty:BenefitSticker.kt$BenefitSticker.Companion$const val STATUS_PENDING = 1</ID>
    <ID>UndocumentedPublicProperty:BottomPageTab.kt$BottomPageTab$@DrawableRes var imageResourceId: Int = 0 set(value) { field = value binding.image.setImageResourceAndVisibility(value) }</ID>
    <ID>UndocumentedPublicProperty:BottomPageTab.kt$BottomPageTab$var descriptionText: CharSequence get() = binding.description.text set(value) { binding.description.setTextAndVisibility(value) }</ID>
    <ID>UndocumentedPublicProperty:BottomPageTab.kt$BottomPageTab$var imageContentId: String = "" set(value) { field = value binding.image.loadContentAndSetVisibility(value) }</ID>
    <ID>UndocumentedPublicProperty:BottomPageTab.kt$BottomPageTab$var imageDrawable: Drawable? get() = binding.image.drawable set(value) { binding.image.setImageDrawableAndVisibility(value) }</ID>
    <ID>UndocumentedPublicProperty:BottomPageTab.kt$BottomPageTab$var titleText: CharSequence get() = binding.title.text set(value) { binding.title.setTextAndVisibility(value) }</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment$var onHandleNavigationListener: ((target: NavigationTarget, isRootNavigation: Boolean) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment$var onInvalidateOptionsMenuListener: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val EXTRA_ATTACH_COOKIES = "extra_attach_cookies" // authenticates the webview</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val EXTRA_HTML = "extra_html"</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val EXTRA_TITLE = "extra_title"</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val EXTRA_TYPEFORM_URL = "typeform_url"</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val EXTRA_URL = "extra_url"</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val URL_COVERAGE_SUMMARY = "/app/member/coverage-summary"</ID>
    <ID>UndocumentedPublicProperty:BrowserFragment.kt$BrowserFragment.Companion$const val URL_ENROLLMENT = "/app/enroll"</ID>
    <ID>UndocumentedPublicProperty:BuildInfoUtils.kt$BuildInfoUtils$@Suppress("DEPRECATION") // this is here so we can access versionCode on API 21 below devices val buildVersion: Long get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) { packageInfo.longVersionCode } else { packageInfo.versionCode.toLong() }</ID>
    <ID>UndocumentedPublicProperty:BuildInfoUtils.kt$BuildInfoUtils$val appVersion: String get() = packageInfo.versionName</ID>
    <ID>UndocumentedPublicProperty:BuildInfoUtils.kt$BuildInfoUtils$val deviceType: String get() = Build.MODEL</ID>
    <ID>UndocumentedPublicProperty:BuildInfoUtils.kt$BuildInfoUtils$val osVersion: Int get() = Build.VERSION.SDK_INT</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerDataSharingViewModel.kt$BuilderDailyScreenerDataSharingViewModel$val dailyScreenerResults: LiveData&lt;State&lt;CovidHealthAssessmentInformation>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerDataSharingViewModel.kt$BuilderDailyScreenerDataSharingViewModel$val dataSharingPrefs: SingleLiveEvent&lt;State&lt;Boolean>> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerFragment.kt$BuilderDailyScreenerFragment$val args: BuilderDailyScreenerFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs$public val previousResponse: PreviousResponse? = null</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerFragmentArgs.kt$BuilderDailyScreenerFragmentArgs$public val retakeAssessment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs$public val previousResponse: PreviousResponse? = null</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerResponsesFragmentArgs.kt$BuilderDailyScreenerResponsesFragmentArgs$public val retakeAssesment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerReturnToWorkDateFragment.kt$BuilderDailyScreenerReturnToWorkDateFragment$val args: BuilderDailyScreenerReturnToWorkDateFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs$public val canNavigateBack: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs$public val retakeAssessment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:BuilderDailyScreenerReturnToWorkDateFragmentArgs.kt$BuilderDailyScreenerReturnToWorkDateFragmentArgs$public val returnToWorkDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:BuilderOnboardingViewPagerController.kt$BuilderOnboardingViewPagerController$var onLinkClickedListener: ((OnboardingPage.AdditionalInfo) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button$@Json(name = "contentful_icon_asset") val imageAsset: ImageAsset = ImageAsset()</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_DANGER = 5 // CRITICAL SECONDARY</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_DANGER_PRIMARY = 6 // CRITICAL PRIMARY</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_DISABLED = 3 // PRIMARY DISABLED</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_MINIMAL = 2 // SECONDARY QUIET</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_MINIMAL_GRAY = 4 // TERTIARY</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_MINIMAL_SECONDARY = 7 // TERTIARY QUIET</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_PRIMARY = 0 // PRIMARY</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val BUTTON_STYLE_SECONDARY = 1 // SECONDARY</ID>
    <ID>UndocumentedPublicProperty:Button.kt$Button.Companion$const val DEFAULT_BUTTON_HEIGHT_DP = 48</ID>
    <ID>UndocumentedPublicProperty:CampaignContentConfig.kt$CampaignContentConfig$@Json(name = "ctaUrl") val ctaUrl: String</ID>
    <ID>UndocumentedPublicProperty:CampaignContentConfig.kt$CampaignContentConfig$@Json(name = "dataFields") val dataFields: List&lt;WearableDataType>?</ID>
    <ID>UndocumentedPublicProperty:CampaignContentConfig.kt$CampaignContentConfig$@Json(name = "pulse_checks") val pulseChecks: List&lt;PulseCheck>?</ID>
    <ID>UndocumentedPublicProperty:CampaignMode.kt$CampaignMode$val string: String</ID>
    <ID>UndocumentedPublicProperty:CampaignsResponse.kt$CampaignsResponse$val campaigns: List&lt;CampaignInfo> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:Card.kt$Card.Companion$const val CARD_SIZE_LARGE = 2</ID>
    <ID>UndocumentedPublicProperty:Card.kt$Card.Companion$const val CARD_SIZE_MEDIUM = 1</ID>
    <ID>UndocumentedPublicProperty:Card.kt$Card.ImageShape$val ratioText: String</ID>
    <ID>UndocumentedPublicProperty:CardController.kt$CardController$val icons: Array&lt;Drawable?></ID>
    <ID>UndocumentedPublicProperty:CardController.kt$CardController$val sampleImages: Array&lt;Drawable?></ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$val agentType: String</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$val agentTypeDescription: String</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$val chatState: ChatState</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$val chatStateFlow: Flow&lt;ChatState></ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$val fileRequested: Boolean</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$var chatToken: String?</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$var chatViewListener: ChatViewListener?</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$var newMessagesListener: ChatUpdatesListener?</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$CareChatClient$var typeformUrl: String</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$ChatState.Ended$val messages: List&lt;LeagueChatMessage></ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$ChatState.Queued$val position: Int?</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$ChatState.Queued$val waitTime: Int?</ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$StartChatResponse.AgentOffline$val chatAvailabilities: List&lt;ChatAvailability></ID>
    <ID>UndocumentedPublicProperty:CareChatClient.kt$StartChatResponse.AgentUnavailable$val errorMessage: String</ID>
    <ID>UndocumentedPublicProperty:CarePresenterViewModelModule.kt$CarePresenterViewModelModule$val module = module { viewModel { LaunchViewModel( authenticator = get(), api = get(), environmentUtils = get(), userRepository = get(), buildInfoUtils = get() ) } viewModel { EnvironmentViewModel() } }</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$CareProviderHistory$@Json(name = "care_provider_history") val chatHistoryRows: List&lt;ChatHistoryRow> = listOf()</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$CareProviderHistory.ChatHistoryRow$@Json(name = "maple_post_consults") val maplePostConsults: MaplePostConsultsRow? = null</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$CareProviderHistory.ChatHistoryRow$@Json(name = "provider_type") val providerType: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$CareProviderHistory.ChatHistoryRow$@Json(name = "sf_chat_transcript") val sfChatTranscript: SfChatTranscript? = null</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsults$@Json(name = "completed_at") val completedAt: Date?</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsults$@Json(name = "consult_id") val consultId: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsults$@Json(name = "maple_user_id") val mapleUserId: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsults$@Json(name = "service_provider_id") val serviceProvider: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsults$@Json(name = "user_id") val userId: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsults$@Json(name = "version") val version: Int</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsultsRow$@Json(name = "is_user_linked") val isUserLinked: Boolean</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsultsRow$@Json(name = "maple_post_consults") val maplePostConsults: MaplePostConsults</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsultsRow$@Json(name = "provider_title") val providerTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$MaplePostConsultsRow$@Json(name = "user_type") val userType: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$SfChatTranscript$@Json(name = "chat_id") val chatId: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$SfChatTranscript$@Json(name = "end_time") val endTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$SfChatTranscript$@Json(name = "owner_name") val ownerName: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$SfChatTranscript$@Json(name = "owner_role") val ownerRole: String = ""</ID>
    <ID>UndocumentedPublicProperty:CareProviderHistory.kt$SfChatTranscript$@Json(name = "start_time") val startTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.CategoryData$val categoryName: String</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.CategoryData$val iconSize: ActionRow.IconSize = ActionRow.IconSize.SMALL</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.CategoryData$val rowsData: List&lt;RowData&lt;T>></ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.CategoryData$val showChevrons: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.CategoryData$val showDividers: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.PageData$val categories: List&lt;CategoryData&lt;T>></ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.PageData$val rowClickedCallback: (T: Any) -> Unit</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.RowData$val bodyText: String = ""</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.RowData$val iconRes: Int = 0</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.RowData$val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.RowData$val onClickReturnValue: T</ID>
    <ID>UndocumentedPublicProperty:CategorizedActionRowsList.kt$CategorizedActionRowsList.RowData$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val description: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val descriptionRichText: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val details: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val detailsRichText: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val endDate: Date</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val endEnroll: Date</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val headerImageAlt: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val headerImageUrl: String</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val id: String</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val prize: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val prizeRichText: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val rules: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val rulesRichText: String?</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val startDate: Date</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val startEnroll: Date</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val status: Status</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$Challenge$val title: String</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$UserChallenge$val challenge: Challenge</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$UserChallenge$val enrollmentStatus: EnrollmentStatus</ID>
    <ID>UndocumentedPublicProperty:Challenge.kt$UserChallenge$val id: String</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ActivityVerificationProgress$@Json(name = "count_progress") val countProgress: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CTA$@Json(name = "completion_method") val completionMethod: CompletionMethod? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CTA$@Json(name = "mark_as_complete") val markAsComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CTA$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CTA$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CampaignInfo$@Json(name = "campaign_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CampaignInfo$@Json(name = "name") val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CampaignInfo$@Json(name = "start_date") val startDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "activity_points") val activityPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "activity_verification_progress") val avProgress: ActivityVerificationProgress? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "campaign_info") val campaignInfo: CampaignInfo? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "can_expire") val canExpire: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "card_tagline") val cardTagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "end_date") val endDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "front_of_the_line_activity") val isFotlActivity: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "goal_id") val goalId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "sort_order") val sortOrder: Int? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$@Json(name = "start_date") val startDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$val cta: CTA? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$val suggested: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$ChallengeHealthActivityItemResponse.Status$val text: String</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CompletionMethod$val counter: Counter? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CompletionMethod$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$CompletionMethod$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$Counter$val goal: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$Counter$val input: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivity.kt$Counter$val unit: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeHealthActivityResponse.kt$ChallengeHealthActivityResponse$@Json(name = "user_health_activities") val items: List&lt;ChallengeHealthActivityItemResponse> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "achievement_image_url") val achievementImageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "activity_status_counts") val activityStatusCounts: StatusCounts? = null</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "available_points") val availablePoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "completed_activity_progress_percentage") val completedActivityProgressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "image_url") val imageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "missed_activity_progress_percentage") val missedActivityProgressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "program_id") val programId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "progress_percentage") val progressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "remaining_days") val remainingDays: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "start_date") val startDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "total_activities_count") val totalActivitiesCount: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$@Json(name = "total_days") val totalDays: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeItemResponse.kt$ChallengeItemResponse$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChallengeLandingFragmentArgs.kt$ChallengeLandingFragmentArgs$public val challengeId: String</ID>
    <ID>UndocumentedPublicProperty:ChallengeModule.kt$ChallengeModule$val modules = arrayOf( ChallengeViewModelModule.module, ChallengeRepositoryModule.module, ChallengeUseCaseModule.module )</ID>
    <ID>UndocumentedPublicProperty:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs$public val showLeaveButton: Boolean</ID>
    <ID>UndocumentedPublicProperty:ChallengeSettingsBottomSheetDialogFragmentArgs.kt$ChallengeSettingsBottomSheetDialogFragmentArgs$public val userChallengeId: String</ID>
    <ID>UndocumentedPublicProperty:ChallengeSignUpChooseAvatarScreen.kt$const val COLUMN_SIZE = 4</ID>
    <ID>UndocumentedPublicProperty:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs$public val challengeId: String</ID>
    <ID>UndocumentedPublicProperty:ChallengeSignUpPrivacyPolicyFragmentArgs.kt$ChallengeSignUpPrivacyPolicyFragmentArgs$public val userChallengeId: String</ID>
    <ID>UndocumentedPublicProperty:ChallengesConfiguration.kt$ChallengesDrawables$@DrawableRes val challengesLeft: Int</ID>
    <ID>UndocumentedPublicProperty:ChallengesConfiguration.kt$ChallengesDrawables$@DrawableRes val checkmark: Int</ID>
    <ID>UndocumentedPublicProperty:ChallengesConfiguration.kt$ChallengesDrawables$@DrawableRes val connectDevice: Int</ID>
    <ID>UndocumentedPublicProperty:ChallengesConfiguration.kt$ChallengesDrawables$@DrawableRes val deviceConnected: Int</ID>
    <ID>UndocumentedPublicProperty:ChallengesConfiguration.kt$ChallengesDrawables$@DrawableRes val signUpComplete: Int</ID>
    <ID>UndocumentedPublicProperty:ChallengesFeatureFlags.kt$ChallengesFeatureFlags$val challenges = FeatureFlag.BooleanFeatureFlag( id = "np_rel_chal_challenges", name = "Challenges", description = "Enable Challenges", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:ChallengesResponse.kt$ChallengesResponse$val programs: List&lt;ChallengeItemResponse> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:ChartConfig.kt$ChartConfig$@Json(name = "legend_enabled") val legendEnabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ChartConfig.kt$ChartConfig$@Json(name = "line_config") val lineConfig: List&lt;LineConfig> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:ChartConfig.kt$ChartConfig$@Json(name = "y_axis_config") val yAxisConfig: YAxisConfig = YAxisConfig()</ID>
    <ID>UndocumentedPublicProperty:ChatAgent.kt$ChatAgent$val agentType: String</ID>
    <ID>UndocumentedPublicProperty:ChatAgent.kt$ChatAgent$val buttonId: String</ID>
    <ID>UndocumentedPublicProperty:ChatAgent.kt$ChatAgent$val deploymentId: String</ID>
    <ID>UndocumentedPublicProperty:ChatAgent.kt$ChatAgent$val language: String</ID>
    <ID>UndocumentedPublicProperty:ChatAgentConfig.kt$ChatAgentConfig$val buttonId: String</ID>
    <ID>UndocumentedPublicProperty:ChatAgentConfig.kt$ChatAgentConfig$val deploymentId: String</ID>
    <ID>UndocumentedPublicProperty:ChatAvailability.kt$ChatAvailability$val availabilityHour: String</ID>
    <ID>UndocumentedPublicProperty:ChatAvailability.kt$ChatAvailability$val label: String</ID>
    <ID>UndocumentedPublicProperty:ChatAvailabilityResponse.kt$ChatAvailabilityResponse$val availabilities: MutableList&lt;Availability> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:ChatClientUser.kt$ChatClientUser$val firstName: String</ID>
    <ID>UndocumentedPublicProperty:ChatClientUser.kt$ChatClientUser$val lastName: String</ID>
    <ID>UndocumentedPublicProperty:ChatClientUser.kt$ChatClientUser$val preferredFirstName: String</ID>
    <ID>UndocumentedPublicProperty:ChatClientUser.kt$ChatClientUser$val province: String</ID>
    <ID>UndocumentedPublicProperty:ChatClientUser.kt$ChatClientUser$val userId: String</ID>
    <ID>UndocumentedPublicProperty:ChatConfig.kt$ChatConfig$val chatAgents: List&lt;ChatAgent></ID>
    <ID>UndocumentedPublicProperty:ChatConfig.kt$ChatConfig$val deploymentScriptUrl: String</ID>
    <ID>UndocumentedPublicProperty:ChatConfig.kt$ChatConfig$val liveAgentEndpoint: String</ID>
    <ID>UndocumentedPublicProperty:ChatConfig.kt$ChatConfig$val liveAgentPod: String</ID>
    <ID>UndocumentedPublicProperty:ChatConfig.kt$ChatConfig$val orgId: String</ID>
    <ID>UndocumentedPublicProperty:ChatConfiguration.kt$Chat$@JvmStatic val liveChatBannerViewModel: LiveChatBannerViewModel get() = configuration.koinApplication.koin.get()</ID>
    <ID>UndocumentedPublicProperty:ChatController.kt$ChatController$val sampleImages: Array&lt;Drawable?></ID>
    <ID>UndocumentedPublicProperty:ChatDeepLinker.kt$ChatDeepLinker$val api: API</ID>
    <ID>UndocumentedPublicProperty:ChatDetailsFragment.kt$ChatDetailsFragment$val args: ChatDetailsFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:ChatDetailsFragmentArgs.kt$ChatDetailsFragmentArgs$public val chatId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatFeatureFlags.kt$ChatFeatureFlags$val enableMaplePhaseOne = FeatureFlag.BooleanFeatureFlag( id = "rel_hce_maplePhase1", name = "Maple Phase1 Access", description = "Enables Maple Phase 1", defaultValue = true )</ID>
    <ID>UndocumentedPublicProperty:ChatFeatureFlags.kt$ChatFeatureFlags$val navigateAwayFromChat = FeatureFlag.BooleanFeatureFlag( id = "navigate_away_from_chat", name = "Navigate away from chat", description = "When a user navigates away from chat, their session is saved and resumed, rather than ended.", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:ChatFeatureFlags.kt$ChatFeatureFlags$val prechatForm = FeatureFlag.BooleanFeatureFlag( id = "np_bus_care_covidPreChat", name = "Covid Pre-chat forms", description = "Enabling covid pre-chat forms.", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:ChatHistoryActivity.kt$ChatHistoryActivity$var actionBar: GenesisToolbar? = null</ID>
    <ID>UndocumentedPublicProperty:ChatHistoryController.kt$ChatHistoryController$var isEmpty = false set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:ChatHistoryController.kt$ChatHistoryController$var isShowMoreButtonLoading = false set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:ChatHistoryController.kt$ChatHistoryController$var isShowMoreButtonVisible = true set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$@StringRes var hint: Int? = null set(value) { field = value if (value != null) binding.inputMessage.setHint(value) else binding.inputMessage.hint = null }</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var attachmentButtonVisibility: Int get() = binding.attachmentButton.visibility set(value) { binding.attachmentButton.visibility = value val inputMarginStart: Int = if (value == View.VISIBLE) { 0 } else { context.getDimensionPixelSizeFromAttr(R.attr.spacing_three_quarters) } val layoutParams = binding.inputContainer.layoutParams as MarginLayoutParams layoutParams.marginStart = inputMarginStart binding.inputContainer.layoutParams = layoutParams }</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var fragmentManager: FragmentManager? = null</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var imageFile: File? = null set(value) { field = value if (value == null) { binding.imagePreviewContainer.visibility = View.GONE } else { binding.imagePreview.loadFile(value, skipCache = true) binding.imagePreviewContainer.visibility = View.VISIBLE } updateSendButton() }</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var isChatboxVisible: Boolean get() = binding.chatbox.visibility == View.VISIBLE set(value) { binding.chatbox.visibility = if (value) View.VISIBLE else View.GONE }</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var onImageRemoveListener: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var onSendClickListener: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var persistentMenuVisibility: Int get() = binding.persistentMenu.visibility set(value) { binding.persistentMenu.visibility = value }</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var text: String get() = binding.inputMessage.text.trim().toString() set(value) = binding.inputMessage.setText(value)</ID>
    <ID>UndocumentedPublicProperty:ChatInput.kt$ChatInput$var textChangedListener: TextWatcher? = null set(value) { // If null is passed in, remove the previous set text changed listener if (value == null) { binding.inputMessage.removeTextChangedListener(field) } field = value if (value != null) { binding.inputMessage.addTextChangedListener(value) } }</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity$val agentType: String by lazy { intent.getStringExtra(EXTRA_AGENT_TYPE) ?: "" }</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity$val agentTypeDescription: String by lazy { intent.getStringExtra(EXTRA_AGENT_TYPE_DESCRIPTION) ?: "" }</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity$val args: ChatLandingFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity$var actionBar: GenesisToolbar? = null</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity.Companion$const val EXTRA_AGENT_TYPE = "agent_type"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity.Companion$const val EXTRA_AGENT_TYPE_DESCRIPTION = "agent_description"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity.Companion$const val EXTRA_CHAT_TYPE = "chat_type"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity.Companion$const val EXTRA_SURVEY_TITLE = "extra_title"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity.Companion$const val EXTRA_TYPEFORM_URL = "typeform_url"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingActivity.kt$ChatLandingActivity.Companion$val agentDescriptionMap = hashMapOf( "pharmacist" to R.string.pharmacist, "customer-care" to R.string.customer_care, "dietitian" to R.string.dietitian_quick_consultation, "health-concierge" to R.string.registered_nurse, "care-navigator" to R.string.care_navigator )</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment$val args: ChatLandingFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val CARE_NAVIGATOR_AGENT_TYPE = "care_navigator"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val CARE_NAVIGATOR_CHAT_TYPE = "care-navigator"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val CUSTOMER_CARE_AGENT_TYPE = "customer_care"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val CUSTOMER_CARE_CHAT_TYPE = "customer-care"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val DIETITIAN_CHAT_TYPE = "dietitian"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val HEALTH_CONCIERGE_AGENT_TYPE = "health_concierge"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val HEALTH_CONCIERGE_CHAT_TYPE = "health-concierge"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val PHARMACIST_CHAT_TYPE = "pharmacist"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val REGISTERED_NURSE_CHAT_TYPE = "registered-nurse"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val SALESFORCE_CHAT_PRICE_VALUE = "free"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragment.kt$ChatLandingFragment.Companion$const val TAG = "ChatLandingFragment"</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs$public val agentTypeDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatLandingFragmentArgs.kt$ChatLandingFragmentArgs$public val chatType: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatLandingViewModel.kt$ChatLandingViewModel$var availabilityResponse: LiveData&lt;Availability> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:ChatLandingViewModel.kt$ChatLandingViewModel$var chatAvailabilities: LiveData&lt;List&lt;ChatAvailability>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:ChatLandingViewModel.kt$ChatLandingViewModel$var offlineMsgSent: LiveData&lt;State&lt;Empty>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:ChatMessage.kt$ChatMessage.MessageInfo$val message: String</ID>
    <ID>UndocumentedPublicProperty:ChatMessage.kt$ChatMessage.MessageInfo$val senderName: String</ID>
    <ID>UndocumentedPublicProperty:ChatNavGraphArgs.kt$ChatNavGraphArgs$public val chatType: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "availability") val availability: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "description") val chatIntroDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "hours_with_pricing") val hoursWithPricing: List&lt;HoursPricing> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "service_provider_id") val serviceProviderId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "third_party_intro_details") val thirdPartyIntroDetails: ThirdPartyDetails</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ChatProviderResponse$@Json(name = "title") val chatIntroTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$HoursPricing$@Json(name = "label") val label: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$HoursPricing$@Json(name = "pricing") val pricing: Pricing</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$HoursPricing$@Json(name = "time_range") val timeRange: TimeRange</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ThirdPartyDetails$@Json(name = "app_icon_url") val appIconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ThirdPartyDetails$@Json(name = "app_text") val appText: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ThirdPartyDetails$@Json(name = "coverage_text") val coverage: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ThirdPartyDetails$@Json(name = "current_pricing_text") val currentPricingText: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$ThirdPartyDetails$@Json(name = "pricing") val pricing: Pricing = Pricing()</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$TimeRange$@Json(name = "end_time") val endTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviderResponse.kt$TimeRange$@Json(name = "start_time") val startTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "agent_type") val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "availability") val availability: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "chat_provider_description") val chatProviderDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "chat_provider_title") val chatProviderTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "has_provincial_coverage") val hasProvincialCoverage: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "pricing") val pricing: Pricing</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "provider_type") val providerType: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviderDetailItems$@Json(name = "url") val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatProviders.kt$ChatProviders$@Json(name = "chat_provider_detail_items") var chatProviderDetailItems: List&lt;ChatProviderDetailItems> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse$@Json(name = "end_time") val endTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse$@Json(name = "messages") val messages: List&lt;Message> = listOf()</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse$@Json(name = "owner_name") val ownerName: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse$@Json(name = "owner_role") val ownerRole: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse$@Json(name = "start_time") val startTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse.Message$@Json(name = "body") val body: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse.Message$@Json(name = "from") val from: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptMessagesResponse.kt$ChatTranscriptMessagesResponse.Message$@Json(name = "time") val time: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptResponse.kt$ChatTranscriptResponse$@Json(name = "transcripts") val transcripts: List&lt;Transcript> = listOf()</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptResponse.kt$ChatTranscriptResponse.Transcript$@Json(name = "chat_id") val chatId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptResponse.kt$ChatTranscriptResponse.Transcript$@Json(name = "end_time") val endTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptResponse.kt$ChatTranscriptResponse.Transcript$@Json(name = "owner_name") val ownerName: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptResponse.kt$ChatTranscriptResponse.Transcript$@Json(name = "owner_role") val ownerRole: String = ""</ID>
    <ID>UndocumentedPublicProperty:ChatTranscriptResponse.kt$ChatTranscriptResponse.Transcript$@Json(name = "start_time") val startTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:CheckBoxInputState.kt$CheckBoxInputState$var checked by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:CheckBoxInputState.kt$CheckBoxInputState$var onUpdate: (Boolean) -> Unit = { checked = it }</ID>
    <ID>UndocumentedPublicProperty:CheckUserInfoCompleteUseCase.kt$CompleteUserProfileResult$val invalidFields: List&lt;MissingField></ID>
    <ID>UndocumentedPublicProperty:CheckUserInfoCompleteUseCase.kt$CompleteUserProfileResult$val isValidProfile: Boolean</ID>
    <ID>UndocumentedPublicProperty:CheckUserInfoCompleteUseCase.kt$const val MINIMUM_AGE = 16</ID>
    <ID>UndocumentedPublicProperty:CircleButton.kt$CircleButton.Companion$const val BUTTON_STYLE_DISABLED = 4</ID>
    <ID>UndocumentedPublicProperty:CircleButton.kt$CircleButton.Companion$const val BUTTON_STYLE_MINIMAL = 2</ID>
    <ID>UndocumentedPublicProperty:CircleButton.kt$CircleButton.Companion$const val BUTTON_STYLE_MINIMAL_SECONDARY = 3</ID>
    <ID>UndocumentedPublicProperty:CircleButton.kt$CircleButton.Companion$const val BUTTON_STYLE_PRIMARY = 0</ID>
    <ID>UndocumentedPublicProperty:CircleButton.kt$CircleButton.Companion$const val BUTTON_STYLE_SECONDARY = 1</ID>
    <ID>UndocumentedPublicProperty:ClaimCodeData.kt$ClaimCodeData$val token: String = ""</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField @PrimaryKey var claimId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var amountApproved = 0.0</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var claimDocuments = RealmList&lt;Document>()</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var dateCreated: Date? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var description: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var lastEventTimestamp: Date? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var numUnreadMessages = 0</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var referenceId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var status: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var thumbnailContentId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$@JvmField var vendor: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$var expenseDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail$var groupId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$@JvmStatic val allStatus: List&lt;String> get() { val statuses = ArrayList&lt;String>() statuses.add(STATUS_APPROVED) statuses.add(STATUS_CANCELLED) statuses.add(STATUS_MORE_INFO_NEEDED) statuses.add(STATUS_PAID) statuses.add(STATUS_PENDING) statuses.add(STATUS_REJECTED) statuses.add(STATUS_SUBMITTED) return statuses }</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_APPROVED = "approved"</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_CANCELLED = "cancelled"</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_MORE_INFO_NEEDED = "more_information_needed"</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_PAID = "paid"</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_PENDING = "pending_external_review"</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_REJECTED = "rejected"</ID>
    <ID>UndocumentedPublicProperty:ClaimDetail.kt$ClaimDetail.Companion$const val STATUS_SUBMITTED = "submitted"</ID>
    <ID>UndocumentedPublicProperty:ClaimDocumentFragment.kt$ClaimDocumentFragment.Companion$const val EXTRA_CLAIM_ID = "claim_id"</ID>
    <ID>UndocumentedPublicProperty:ClassExtension.kt$val Any.TAG: String get() = this::class.java.simpleName</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsEvents.kt$ClinicDetailsEvents.EmailClicked$val email: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsEvents.kt$ClinicDetailsEvents.LocationSelected$val locationId: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsEvents.kt$ClinicDetailsEvents.PhoneClicked$val phone: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsEvents.kt$ClinicDetailsEvents.UrlClicked$val url: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs$public val clinicId: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsFragmentArgs.kt$ClinicDetailsFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val address: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val email: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val hoursOfOperation: Map&lt;DayOfWeek, UserText></ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val id: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val isFreeParkingAvailable: Boolean</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val isPaidParkingAvailable: Boolean</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val isTransitNearby: Boolean</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val isWheelchairAccessible: Boolean</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val latLng: LatLng</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val name: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val phone: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetails$val url: String</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetailsModel$val clinic: ClinicDetails</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetailsModel$val onEmailClick: (EmailAddress) -> Unit</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetailsModel$val onPhoneClick: (PhoneNumber) -> Unit</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetailsModel$val onSelectLocation: (LocationId) -> Unit</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetailsModel$val onUrlClick: (UrlAddress) -> Unit</ID>
    <ID>UndocumentedPublicProperty:ClinicDetailsModels.kt$ClinicDetailsModel$val title: String</ID>
    <ID>UndocumentedPublicProperty:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs$public val device: String</ID>
    <ID>UndocumentedPublicProperty:CloudRedirectFragmentArgs.kt$CloudRedirectFragmentArgs$public val moduleIdentifier: String? = null</ID>
    <ID>UndocumentedPublicProperty:CloudRedirectViewModel.kt$CloudRedirectViewModel$val connectionStateFlow: StateFlow&lt;CloudConsentSuccessState> get() = connectionState</ID>
    <ID>UndocumentedPublicProperty:CloudRedirectViewModel.kt$CloudRedirectViewModel$val deviceStateFlow: StateFlow&lt;DeviceType?> get() = deviceState</ID>
    <ID>UndocumentedPublicProperty:CodeAnalyzerContract.kt$CodeAnalyzer$val codeAnalyzerListener: CodeAnalyzerListener</ID>
    <ID>UndocumentedPublicProperty:Color.kt$Color$@ColorRes val color: Int = -1</ID>
    <ID>UndocumentedPublicProperty:Color.kt$Color$@ColorRes val fontColor: Int = R.color.league_blurple</ID>
    <ID>UndocumentedPublicProperty:Color.kt$Color$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController$var colorAttrGroups: List&lt;ColorAttrGroup> = listOf() set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController$var colorGroups: List&lt;ColorGroup> = listOf() set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController$var fontColorAttrGroups: List&lt;FontColorAttrGroup> = listOf() set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController.ColorAttrGroup$val colorAttrList: List&lt;Int></ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController.ColorAttrGroup$val name: String</ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController.ColorGroup$val colorResList: List&lt;Int></ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController.ColorGroup$val name: String</ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController.FontColorAttrGroup$val colorAttrList: List&lt;Int></ID>
    <ID>UndocumentedPublicProperty:ColorController.kt$ColorController.FontColorAttrGroup$val name: String</ID>
    <ID>UndocumentedPublicProperty:ColorViewModel.kt$ColorViewModel$@ColorRes var fontColor: Int = R.color.league_blurple_darker</ID>
    <ID>UndocumentedPublicProperty:ColorViewModel.kt$ColorViewModel$@EpoxyAttribute @AttrRes var colorAttrRes: Int = -1</ID>
    <ID>UndocumentedPublicProperty:ColorViewModel.kt$ColorViewModel$@EpoxyAttribute @AttrRes var fontColorAttrRes: Int = -1</ID>
    <ID>UndocumentedPublicProperty:ColorViewModel.kt$ColorViewModel$@EpoxyAttribute @ColorRes var colorRes: Int = -1</ID>
    <ID>UndocumentedPublicProperty:ColorViewModel.kt$ColorViewModel.SimpleDataBindingHolder$var dataBinding: ItemColorBinding? = null private set</ID>
    <ID>UndocumentedPublicProperty:CompleteQuestionResponse.kt$CompleteQuestionResponse$@Json(name = "user_question") val userQuestion: Question</ID>
    <ID>UndocumentedPublicProperty:CompletionMethod.kt$CompletionMethod$val completionMethodType: CompletionMethodType</ID>
    <ID>UndocumentedPublicProperty:CompletionMethod.kt$CompletionMethod.CounterMultiStep$val counter: Counter</ID>
    <ID>UndocumentedPublicProperty:CompletionMethod.kt$CompletionMethod.MultiStep$val steps: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:ComponentBrowserFragment.kt$ComponentBrowserFragment$val viewModel by viewModel&lt;CreateProfileViewModel>()</ID>
    <ID>UndocumentedPublicProperty:CompositeCache.kt$CompositeCache$vararg val caches: Cache</ID>
    <ID>UndocumentedPublicProperty:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator$val authenticator: LeagueAuthenticator get() = when (authenticationMethod) { AuthenticationMethod.Legacy -> legacyAuthenticator AuthenticationMethod.Auth0 -> auth0Authenticator }</ID>
    <ID>UndocumentedPublicProperty:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator$val buildInfoUtils: BuildInfoUtils</ID>
    <ID>UndocumentedPublicProperty:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator$var authenticationMethod: AuthenticationMethod get() = sharedPrefs.getIntOrNull( CompositeLeagueAuthenticator::authenticationMethod.name, )?.let { AuthenticationMethod.values()[it] } ?: AuthenticationMethod.Legacy set(value) { sharedPrefs.putInt( CompositeLeagueAuthenticator::authenticationMethod.name, value.ordinal ) }</ID>
    <ID>UndocumentedPublicProperty:CompositeLeagueAuthenticator.kt$CompositeLeagueAuthenticator.Companion$const val TAG = "CompositeLeagueAuthenticator"</ID>
    <ID>UndocumentedPublicProperty:ConnectionSharedViewModel.kt$ConnectionSharedViewModel$val isConnected: LiveData&lt;Boolean?> get() = mutableIsConnected</ID>
    <ID>UndocumentedPublicProperty:Consent.kt$Consent$val consentTimestamp: DateTime?</ID>
    <ID>UndocumentedPublicProperty:ConsentFragmentArgs.kt$ConsentFragmentArgs$public val claimCode: String?</ID>
    <ID>UndocumentedPublicProperty:ConsentFragmentArgs.kt$ConsentFragmentArgs$public val navigateTo: Int = -1</ID>
    <ID>UndocumentedPublicProperty:ConsentResponse.kt$ConsentAttributes$@Json(name = "consent_timestamp") val consentTimestamp: String? = null</ID>
    <ID>UndocumentedPublicProperty:ConsentResponse.kt$ConsentResponse$val attributes: ConsentAttributes</ID>
    <ID>UndocumentedPublicProperty:ConsentResponse.kt$ConsentResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:ConsentResponse.kt$ConsentResponse$val type: String</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val LCL_SUPPORT_CLOSING_HOUR = 19</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val LCL_SUPPORT_CLOSING_MINUTE = 0</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val LCL_SUPPORT_OPENING_HOUR = 8</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val LCL_SUPPORT_OPENING_MINUTE = 0</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val LOBLAW_CUSTOMER_SUPPORT_NUMBER = "1-877-628-5487"</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val SDM_CUSTOMER_SUPPORT_NUMBER = "1-800-746-7737"</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val SDM_SUPPORT_CLOSING_HOUR = 22</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val SDM_SUPPORT_CLOSING_MINUTE = 0</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val SDM_SUPPORT_OPENING_HOUR = 8</ID>
    <ID>UndocumentedPublicProperty:Constants.kt$Constants.Companion$const val SDM_SUPPORT_OPENING_MINUTE = 0</ID>
    <ID>UndocumentedPublicProperty:ContactCustomerSupportViewModel.kt$ContactCustomerSupportViewModelInterface$val isNewfoundlandLabrador: StateFlow&lt;Int></ID>
    <ID>UndocumentedPublicProperty:ContactUsFragmentArgs.kt$ContactUsFragmentArgs$public val demo: Int = 0</ID>
    <ID>UndocumentedPublicProperty:ContentAPI.kt$ContentAPI.ContentType$val value: String</ID>
    <ID>UndocumentedPublicProperty:ContentAPIAuthenticator.kt$ContentAPIAuthenticator$val signOutListeners: MutableSet&lt;(Boolean) -> Unit></ID>
    <ID>UndocumentedPublicProperty:ContentAPIEnvironmentProvider.kt$ContentAPIEnvironmentProvider$val contentReadEndpoint: String</ID>
    <ID>UndocumentedPublicProperty:ContentAPIEnvironmentProvider.kt$ContentAPIEnvironmentProvider$val contentWriteEndpoint: String</ID>
    <ID>UndocumentedPublicProperty:ContentAPI_OpenContent.kt$var ContentAPI.Companion.uriProvider: UriProvider? get() = life.league.core.api.uriProvider set(value) { life.league.core.api.uriProvider = value }</ID>
    <ID>UndocumentedPublicProperty:ContextExtension.kt$val Context.isDeviceLockedOrSuspended: Boolean get() { val powerManager = this.getSystemService(Context.POWER_SERVICE) as? PowerManager val keyguardManager = this.getSystemService(Context.KEYGUARD_SERVICE) as? KeyguardManager return keyguardManager?.isKeyguardLocked == true || powerManager?.isInteractive == false }</ID>
    <ID>UndocumentedPublicProperty:ConversationCard.kt$ConversationCard$val imageView: ImageView? get() = binding.image</ID>
    <ID>UndocumentedPublicProperty:CoreConfiguration.kt$Core$@JvmStatic val userRepository: UserRepository get() = configuration.koinApplication.koin.get()</ID>
    <ID>UndocumentedPublicProperty:CoreEnvironmentConfiguration.kt$CoreEnvironmentConfiguration$val prodEnvironments: Array&lt;Environment> get() = arrayOf( Environment( "prod", "Production", "https://content.league.com/", "https://origin-content.league.com/", "wss://api.league.com/ws", "https://app.league.com/", "league.com", "https://api.league.com/", "https://accounts.league.com", "xjYWnpogh98a9nNTlTr3hsC6oqU74JSY", "league" ) )</ID>
    <ID>UndocumentedPublicProperty:CoreEnvironmentConfiguration.kt$CoreEnvironmentConfiguration$val stageEnvironments: Array&lt;Environment> get() = arrayOf( Environment( "staging", "Staging", "https://content.staging.league.dev/", "https://content.staging.league.dev/", "wss://api.staging.league.dev/ws", "https://app.staging.league.dev/", "league.dev", "https://api.staging.league.dev/", "https://accounts.staging.league.dev", "Dt3JnRO27lqMy9gLrdiXiPCVerss22gt", "leaguestage" ), Environment( "test2", "Test 2", "https://content.test2.league.dev/", "https://content.test2.league.dev/", "wss://api.test2.league.dev/ws", "https://app.test2.league.dev/", "league.dev", "https://api.test2.league.dev/", "https://accounts.staging.league.dev", "Dt3JnRO27lqMy9gLrdiXiPCVerss22gt", "leaguestage" ), Environment( "test3", "Test 3", "https://content.test3.league.dev/", "https://content.test3.league.dev/", "wss://api.test3.league.dev/ws", "https://app.test3.league.dev/", "league.dev", "https://api.test3.league.dev/", "https://accounts.staging.league.dev", "Dt3JnRO27lqMy9gLrdiXiPCVerss22gt", "leaguestage" ), Environment( "test4", "Test 4", "https://content.test4.league.dev/", "https://content.test4.league.dev/", "wss://api.test4.league.dev/ws", "https://app.test4.league.dev/", "league.dev", "https://api.test4.league.dev/", "https://accounts.staging.league.dev", "Dt3JnRO27lqMy9gLrdiXiPCVerss22gt", "leaguestage" ), Environment( name = "test5-ca", friendlyName = "Test 5 CA", contentReadEndpoint = "https://content.test5-ca.league.dev/", contentSaveEndpoint = "https://content.test5-ca.league.dev/", wsEndpoint = "wss://api.test5-ca.league.dev/ws", webEndpoint = "https://app.test5-ca.league.dev/", leagueDomain = "league.dev", restEndpoint = "https://api.test5-ca.league.dev/", auth0Domain = "https://accounts.staging.league.dev", auth0ClientID = "Dt3JnRO27lqMy9gLrdiXiPCVerss22gt", auth0Scheme = "leaguestage" ), Environment( name = "test5-us", friendlyName = "Test 5 US", contentReadEndpoint = "https://content.test5-us.league.dev/", contentSaveEndpoint = "https://content.test5-us.league.dev/", wsEndpoint = "wss://api.test5-us.league.dev/ws", webEndpoint = "https://app.test5-us.league.dev/", leagueDomain = "league.dev", restEndpoint = "https://api.test5-us.league.dev/", auth0Domain = "https://accounts.staging.league.dev", auth0ClientID = "Dt3JnRO27lqMy9gLrdiXiPCVerss22gt", auth0Scheme = "leaguestage" ), Environment( "testprod", "Test Prod", "https://content.testprod.league.com/", "https://content.testprod.league.com/", "wss://api.testprod.league.com/ws", "https://app.testprod.league.com/", "league.com", "https://api.testprod.league.com/", "https://accounts.testprod.league.com", "xo1tSNxI4muCcpkwf7BHye9L438deMuN", "league" ), Environment( "prod", "Production", "https://content.league.com/", "https://origin-content.league.com/", "wss://api.league.com/ws", "https://app.league.com/", "league.com", "https://api.league.com/", "https://accounts.league.com", "xjYWnpogh98a9nNTlTr3hsC6oqU74JSY", "league" ) )</ID>
    <ID>UndocumentedPublicProperty:CoreEnvironmentConfiguration.kt$CoreEnvironmentConfiguration.Companion$const val STAGE = "stage"</ID>
    <ID>UndocumentedPublicProperty:CorePresenterViewModelModule.kt$CorePresenterViewModelModule$val module = module { viewModel { LaunchViewModel( authenticator = get(), api = get(), environmentUtils = get(), userRepository = get(), privacyLockUtils = get(), buildInfoUtils = get() ) } viewModel { HomeViewModel( userRepository = get(), sampleJsonApi = get() ) } viewModel { ShareScreenshotViewModel(fileUtils = FileUtils) } viewModel { EnvironmentViewModel() } }</ID>
    <ID>UndocumentedPublicProperty:Countries.kt$Countries$@StringRes val name: Int</ID>
    <ID>UndocumentedPublicProperty:Countries.kt$Countries$val type: String</ID>
    <ID>UndocumentedPublicProperty:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs$public val exitScreen: ExitScreen? = null</ID>
    <ID>UndocumentedPublicProperty:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs$public val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:CovidDataSharingFragmentArgs.kt$CovidDataSharingFragmentArgs$public val previousResponse: PreviousResponse? = null</ID>
    <ID>UndocumentedPublicProperty:CreateAppointment.kt$CreateAppointment$val appointmentId: String</ID>
    <ID>UndocumentedPublicProperty:CreateAppointment.kt$CreateAppointment$val partnerId: OrgId</ID>
    <ID>UndocumentedPublicProperty:CreateAppointment.kt$CreateAppointment$val practitionerId: String?</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentResponse.kt$CreateAppointmentResponse$val attributes: CreateAppointmentResponseAttributes</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentResponse.kt$CreateAppointmentResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentResponse.kt$CreateAppointmentResponse$val type: String</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentResponse.kt$CreateAppointmentResponseAttributes$@Json(name = "partner_id") val partnerId: String</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentResponse.kt$CreateAppointmentResponseAttributes$@Json(name = "practitioner_id") val practitionerId: String? = null</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentUseCase.kt$const val BOOKING_PRICE_CHANGED_ERROR = "INVALID_PRICE_INFO"</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentUseCase.kt$const val SERVICE_NOT_AVAILABLE_ERROR = "SERVICE_IS_NOT_AVAILABLE_TO_PATIENT"</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentUseCase.kt$const val TIMESLOT_UNAVAILABLE_ERROR = "TIMESLOT_NOT_AVAILABLE"</ID>
    <ID>UndocumentedPublicProperty:CreateAppointmentUseCase.kt$const val USER_DISALLOWED_FROM_CREATING_CONSULT = "USER_DISALLOWED_FROM_CREATING_CONSULT"</ID>
    <ID>UndocumentedPublicProperty:CreateConsentUseCase.kt$CreateConsentModel$val partnerOrgId: OrgId</ID>
    <ID>UndocumentedPublicProperty:CreatePatientRequest.kt$CreatePatientRequest$val attributes: PatientAttributes</ID>
    <ID>UndocumentedPublicProperty:CreatePatientRequest.kt$CreatePatientRequest$val type: String = "patients"</ID>
    <ID>UndocumentedPublicProperty:CreatePatientUseCase.kt$CreatePatientModel$val dob: LocalDate</ID>
    <ID>UndocumentedPublicProperty:CreatePatientUseCase.kt$CreatePatientModel$val firstName: String</ID>
    <ID>UndocumentedPublicProperty:CreatePatientUseCase.kt$CreatePatientModel$val lastName: String</ID>
    <ID>UndocumentedPublicProperty:CreatePatientUseCase.kt$CreatePatientModel$val orgId: OrgId</ID>
    <ID>UndocumentedPublicProperty:CreatePatientUseCase.kt$CreatePatientModel$val relationship: PatientRelationship</ID>
    <ID>UndocumentedPublicProperty:CreatePatientUseCase.kt$CreatePatientModel$val sex: PatientSex</ID>
    <ID>UndocumentedPublicProperty:CreateProfileFragment.kt$CreateProfileFragment$val viewModel by viewModel&lt;CreateProfileViewModel>()</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val dob: DateOfBirthInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val email: TextInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val firstName: TextInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val isValid get() = !lastName.error &amp;&amp; !firstName.error &amp;&amp; termsOfUse.checked &amp;&amp; !dob.error &amp;&amp; !email.error &amp;&amp; !phoneNumber.error &amp;&amp; !securityQuestion.error &amp;&amp; securityQuestion.text.isNotEmpty() &amp;&amp; !securityAnswer.error &amp;&amp; securityAnswer.text.isNotEmpty()</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val lastName: TextInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val phoneNumber: TextInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val securityAnswer: TextInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val securityQuestion: TextInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileData$val termsOfUse: CheckBoxInputState</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileViewModel$val userInfoUseCase: UserInfoUseCase</ID>
    <ID>UndocumentedPublicProperty:CreateProfileViewModel.kt$CreateProfileViewModel$var profileFormState by mutableStateOf&lt;State&lt;CreateProfileData>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlRequest.kt$CreateWebUrlRequest$val attributes: CreateWebUrlRequestAttributes</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlRequest.kt$CreateWebUrlRequest$val type: String = "consultWebUrl"</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlRequest.kt$CreateWebUrlRequestAttributes$@Json(name = "appointment_id") val appointmentId: String? = null</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlRequest.kt$CreateWebUrlRequestAttributes$val intent: String</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlResponse.kt$CreateWebUrlResponse$val attributes: CreateWebUrlResponseAttributes</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlResponse.kt$CreateWebUrlResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlResponse.kt$CreateWebUrlResponse$val type: String</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlResponse.kt$CreateWebUrlResponseAttributes$@Json(name = "expiration_time") val expirationTime: String</ID>
    <ID>UndocumentedPublicProperty:CreateWebUrlResponse.kt$CreateWebUrlResponseAttributes$val url: String</ID>
    <ID>UndocumentedPublicProperty:CurrencyUtil.kt$CurrencyUtil$const val CANADIAN_DOLLAR = "CAD"</ID>
    <ID>UndocumentedPublicProperty:CurrencyUtil.kt$CurrencyUtil$const val EURO_DOLLAR = "EUR"</ID>
    <ID>UndocumentedPublicProperty:CurrencyUtil.kt$CurrencyUtil$const val US_DOLLAR = "USD"</ID>
    <ID>UndocumentedPublicProperty:CurrentGoalCard.kt$CurrentGoalCard.Companion$const val CURRENT_GOAL_STYLE_DARK = 0</ID>
    <ID>UndocumentedPublicProperty:CurrentGoalCard.kt$CurrentGoalCard.Companion$const val CURRENT_GOAL_STYLE_LIGHT = 1</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$AdditionalResource$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$AdditionalResource$@Json(name = "resource_url") val resourceUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$AdditionalResource$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$AdditionalResource$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$AssessmentResponseSummary$@Json(name = "response_status") val responseStatus: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$AssessmentResponseSummary$@Json(name = "response_text") val responseText: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "assessment_complete") val assessmentComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "consent_to_share") val consentToShare: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "last_completed_date") val lastCompletedDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "module_enabled_for_user") val moduleEnabledForUser: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "module_id") val moduleId: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "module_type") val moduleType: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$@Json(name = "return_to_work_date") val returnToWorkDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$val canShowResults = assessmentComplete &amp;&amp; (consentToShare || result.isNotGoingIntoWork())</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentInformation$val result: CovidHealthAssessmentResult = CovidHealthAssessmentResult()</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentResult$@Json(name = "additional_resources") val additionalResources: List&lt;AdditionalResource> = listOf()</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentResult$@Json(name = "assessment_response_summaries") val assessmentResponseSummaries: List&lt;AssessmentResponseSummary> = listOf()</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentResult$@Json(name = "result_status") val resultStatus: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentResult$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$CovidHealthAssessmentResult$val recommendations: List&lt;Recommendation> = listOf()</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$Recommendation$@Json(name = "url_text") val urlText: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$Recommendation$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$Recommendation$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$Recommendation$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$Recommendation$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:DailyScreener.kt$val List&lt;AssessmentResponseSummary>.formattedResponseSummary: Spannable get() { val builder = SpannableStringBuilder() this.forEach { val label = SpannableString("• ${it.responseText}: ") val answer = SpannableString(it.responseStatus) val boldSpan = StyleSpan(Typeface.BOLD) answer.setSpan(boldSpan, 0, answer.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE) builder.append(label) builder.append(answer) builder.append("\n") } return builder }</ID>
    <ID>UndocumentedPublicProperty:DailyScreenerResultsController.kt$DailyScreenerResultsController$var covidHealthAssessmentInformation: CovidHealthAssessmentInformation? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:DailyScreenerResultsViewModel.kt$DailyScreenerResultsViewModel$val dailyScreenerResults: LiveData&lt;State&lt;CovidHealthAssessmentInformation>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DashboardFragmentArgs.kt$DashboardFragmentArgs$public val banner: Banner = Banner.LCL</ID>
    <ID>UndocumentedPublicProperty:DashboardViewModel.kt$DashboardViewModel$val userInfo = fakeUserInfoUseCase().map { userInfo -> when (userInfo) { is life.league.networking.callback.Success -> { life.league.core.observable.Loaded( data = getUserInfo( response = userInfo.response ) ) } is life.league.networking.callback.Failure -> life.league.core.observable.Failed( userInfo.errorResponse ) } } .stateIn( viewModelScope, SharingStarted.WhileSubscribed(), Loading() )</ID>
    <ID>UndocumentedPublicProperty:DatabasePreferencesUtils.kt$DatabasePreferencesUtils$var passphrase: String get() = sharedPrefs.getString( key = DatabasePreferencesUtils::passphrase.name, defaultValue = null, useCache = false, shouldDecrypt = true ) ?: getRandomString(30).also { passphrase = it } private set(value) { sharedPrefs.putString( key = DatabasePreferencesUtils::passphrase.name, value = value, useCache = false, shouldEncrypt = true ) }</ID>
    <ID>UndocumentedPublicProperty:DateExtension.kt$const val MAX_WEEKS_IN_MONTH = 5</ID>
    <ID>UndocumentedPublicProperty:DateOfBirthInputState.kt$DateOfBirthInputState$var date by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:DateOfBirthInputState.kt$DateOfBirthInputState$var error by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:DateOfBirthInputState.kt$DateOfBirthInputState$var onUpdate: (LocalDate) -> Unit = { date = it error = Years.yearsBetween(date, LocalDate.now()).years &lt; 16 }</ID>
    <ID>UndocumentedPublicProperty:DateSelectionUseCase.kt$Date$val dayOfMonth: Int</ID>
    <ID>UndocumentedPublicProperty:DateSelectionUseCase.kt$Date$val month: Int</ID>
    <ID>UndocumentedPublicProperty:DateSelectionUseCase.kt$Date$val year: Int</ID>
    <ID>UndocumentedPublicProperty:DateSelectionUseCase.kt$DateSelectionState$val formattedSelection: String</ID>
    <ID>UndocumentedPublicProperty:DateSelectionUseCase.kt$DateSelectionState$val selectedDate: LocalDate?</ID>
    <ID>UndocumentedPublicProperty:DateSelectionUseCase.kt$DateSelectionState$val selectionChanged: (Date) -> Unit</ID>
    <ID>UndocumentedPublicProperty:DateUtils.kt$DateUtils$@JvmStatic var TIMESTAMP = SimpleDateFormat(TIMESTAMP_FORMAT, Locale.US)</ID>
    <ID>UndocumentedPublicProperty:DateUtils.kt$ShortDate$val dateValue: Date? = null</ID>
    <ID>UndocumentedPublicProperty:DateUtils.kt$ShortDate$val stringValue: String = ""</ID>
    <ID>UndocumentedPublicProperty:DeepLink.kt$DeepLink$abstract val construct: Function&lt;String></ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Body 1", group = "Default") val body1_default = TextStyle( fontFamily = fontFamily, fontSize = 16.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Body 2", group = "Default") val body2_default = TextStyle( fontFamily = fontFamily, fontSize = 14.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Button 1", group = "Default") val button1_default = TextStyle( fontFamily = fontFamily, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Button 2", group = "Default") val button2_default = TextStyle( fontFamily = fontFamily, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Caption", group = "Default") val caption_default = TextStyle( fontFamily = fontFamily, fontSize = 12.sp, fontWeight = FontWeight.W400, lineHeight = 20.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "H1", group = "Default") val h1_default = TextStyle( fontFamily = fontFamily, fontSize = 32.sp, fontWeight = FontWeight.W700, lineHeight = 40.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "H2", group = "Default") val h2_default = TextStyle( fontFamily = fontFamily, fontSize = 24.sp, fontWeight = FontWeight.W700, lineHeight = 32.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "H3", group = "Default") val h3_default = TextStyle( fontFamily = fontFamily, fontSize = 20.sp, fontWeight = FontWeight.W700, lineHeight = 28.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "H4", group = "Default") val h4_default = TextStyle( fontFamily = fontFamily, fontSize = 16.sp, fontWeight = FontWeight.W700, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Label", group = "Default") val label_default = TextStyle( fontFamily = fontFamily, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Overline", group = "Default") val overline_default = TextStyle( fontFamily = fontFamily, fontSize = 12.sp, fontWeight = FontWeight.W700, lineHeight = 20.sp, )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Subtitle 1", group = "Default") val subtitle1_default = TextStyle( fontFamily = fontFamily, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Subtitle 2", group = "Default") val subtitle2_default = TextStyle( fontFamily = fontFamily, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:DefaultTheme.kt$@ShowkaseTypography(name = "Tab", group = "Default") val tab_default = TextStyle( fontFamily = fontFamily, fontSize = 10.sp, fontWeight = FontWeight.W400, lineHeight = 20.sp, )</ID>
    <ID>UndocumentedPublicProperty:DeletedReading.kt$DeletedReading$@Json(name = "error_message") val errorMessage: String = ""</ID>
    <ID>UndocumentedPublicProperty:DeletedReading.kt$DeletedReading$@Json(name = "reading_id") val readingId: String = ""</ID>
    <ID>UndocumentedPublicProperty:DeletedReading.kt$DeletedReading$val success: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:DeletedReadingResponse.kt$DeletedReadingResponse$val result: List&lt;DeletedReading> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Address$@Json(name = "postal_code") var postal: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Address$var address1: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Address$var address2: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Address$var city: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Address$var country: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Address$var province: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Embedded val address: Address?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Ignore var actions: List&lt;WalletCardAction> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Ignore var cardHtml: String = ""</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "add_qualifying_life_event") var addQualifyingLifeEvent: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "add_qualifying_life_event_reason") var addQualifyingLifeEventReason: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "dex_invitation_email") var dexInvitationEmail: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "dex_invitation_status") var dexInviteStatus: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "dex_qualification_status") var dexQualificationStatus: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "drug_plan_member_number") var drugPlanMemberNumber: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "first_name") var firstName: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "is_dex_qualified") var isDexQualified: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "is_registered_spouse") var isRegisteredSpouse: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "last_name") var lastName: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "national_identification_number") var nationalIdentificationNumber: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "omit_national_identification_number") var omitNationalIdentificationNumber: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "over_age_disabled") var isOverAgeDisabled: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "plan_member_number") var planMemberNumber: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "postal_code") var postalCode: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "relationship_type") var relationshipType: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "short_add_qualifying_life_event_date") var addQualifyingLifeEventDate: ShortDate?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "short_date_of_birth") var dateOfBirth: ShortDate?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "short_partnership_effective_date") var partnershipEffectiveDate: ShortDate?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "student") var isStudent: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "tobacco_user") var isTobaccoUser: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$@Json(name = "travel_plan_member_number") var travelPlanMemberNumber: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$val isSuspended: Boolean?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$var email: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$var gender: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$var relationship: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$var removeQualifyingLifeEvent: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$var removeQualifyingLifeEventDate: String?</ID>
    <ID>UndocumentedPublicProperty:Dependent.kt$Dependent$var token: String?</ID>
    <ID>UndocumentedPublicProperty:DependentCardViewModel.kt$DependentCardViewModel$val bitmapFileUriState: LiveData&lt;State&lt;Uri>> get() = mutableBitmapFileUriState</ID>
    <ID>UndocumentedPublicProperty:DependentCardViewModel.kt$DependentCardViewModel$val dependentCard: LiveData&lt;State&lt;WalletCardView.WalletCardData>> get() = mutableDependentCard</ID>
    <ID>UndocumentedPublicProperty:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs$public val canEditDependent: Boolean</ID>
    <ID>UndocumentedPublicProperty:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs$public val dependentId: String</ID>
    <ID>UndocumentedPublicProperty:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs$public val dependentName: String</ID>
    <ID>UndocumentedPublicProperty:DependentDetailsFragmentArgs.kt$DependentDetailsFragmentArgs$public val relationshipType: String</ID>
    <ID>UndocumentedPublicProperty:DependentDetailsRowData.kt$DependentDetailsRowData$val rowDataValue: String</ID>
    <ID>UndocumentedPublicProperty:DependentDetailsRowData.kt$DependentDetailsRowData$val rowInfoTitle: String</ID>
    <ID>UndocumentedPublicProperty:DependentFormAdapter.kt$DependentFormAdapter$// Used to retain the value of each field // Key is the key for the json to be submitted var valuesForFields: HashMap&lt;String, String>? = HashMap() private set</ID>
    <ID>UndocumentedPublicProperty:DependentFormFragment.kt$DependentFormFragment.Companion$const val EXTRA_CAN_REMOVE_DEPENDENTS = "can_remove_dependents"</ID>
    <ID>UndocumentedPublicProperty:DependentFormFragment.kt$DependentFormFragment.Companion$const val EXTRA_FORM_TYPE = "form_type"</ID>
    <ID>UndocumentedPublicProperty:DependentFormFragment.kt$DependentFormFragment.Companion$const val FORM_TYPE_ADD = "type_add"</ID>
    <ID>UndocumentedPublicProperty:DependentFormFragment.kt$DependentFormFragment.Companion$const val FORM_TYPE_EDIT = "type_edit"</ID>
    <ID>UndocumentedPublicProperty:DependentFormFragment.kt$DependentFormFragment.Companion$const val FORM_TYPE_EDIT_V2 = "type_edit_v2"</ID>
    <ID>UndocumentedPublicProperty:DependentFormSuccessFragment.kt$DependentFormSuccessFragment$val args: DependentFormSuccessFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs$public val description: Int</ID>
    <ID>UndocumentedPublicProperty:DependentFormSuccessFragmentArgs.kt$DependentFormSuccessFragmentArgs$public val title: Int</ID>
    <ID>UndocumentedPublicProperty:DependentFormsUtils.kt$DependentFormRelationshipData$val backendKey: String</ID>
    <ID>UndocumentedPublicProperty:DependentFormsUtils.kt$DependentFormRelationshipData$val displayRes: Int</ID>
    <ID>UndocumentedPublicProperty:DependentFormsUtils.kt$DependentTextInputFieldState$var error by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:DependentFormsUtils.kt$DependentTextInputFieldState$var onUpdate: (String) -> Unit = { text = it error = validationPattern.isNotBlank() &amp;&amp; !validation.matcher(it).find() }</ID>
    <ID>UndocumentedPublicProperty:DependentFormsUtils.kt$DependentTextInputFieldState$var text by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:DependentFormsUtils.kt$const val RELATIONSHIP_RES_ERROR = -1</ID>
    <ID>UndocumentedPublicProperty:DependentInviteActivity.kt$DependentInviteActivity.Companion$const val EXTRA_DEPENDENT_ID = "dependent_id"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteActivity.kt$DependentInviteActivity.Companion$const val EXTRA_EMAIL = "email"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteActivity.kt$DependentInviteActivity.Companion$const val EXTRA_FIRST_NAME = "name"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteActivity.kt$DependentInviteActivity.Companion$const val EXTRA_IS_RE_SEND = "is_re_send"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteActivity.kt$DependentInviteActivity.Companion$const val TAG = "DependentInviteActivity"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteEmailFragment.kt$DependentInviteEmailFragment.Companion$const val TAG = "DependentInviteEmailFragment"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs$public val dependentEmail: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs$public val dependentFirstName: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs$public val dependentId: String</ID>
    <ID>UndocumentedPublicProperty:DependentInviteEmailFragmentArgs.kt$DependentInviteEmailFragmentArgs$public val isReSend: Boolean</ID>
    <ID>UndocumentedPublicProperty:DependentInviteSuccessFragment.kt$DependentInviteSuccessFragment.Companion$const val EMAIL_EXTRA = "email"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteSuccessFragment.kt$DependentInviteSuccessFragment.Companion$const val TAG = "DependentInviteSuccessFragment"</ID>
    <ID>UndocumentedPublicProperty:DependentInviteSuccessFragmentArgs.kt$DependentInviteSuccessFragmentArgs$public val email: String</ID>
    <ID>UndocumentedPublicProperty:DependentInviteViewModel.kt$DependentInviteViewModel$val errors: LiveData&lt;DependentInviteError> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentInviteViewModel.kt$DependentInviteViewModel$val invitationSuccess: LiveData&lt;String> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:DependentInviteViewModel.kt$DependentInviteViewModel$val inviteSuccess: LiveData&lt;State&lt;String>> get() = mutableInviteSuccess</ID>
    <ID>UndocumentedPublicProperty:DependentKeyValuePair.kt$DependentKeyValuePair$var key: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentKeyValuePair.kt$DependentKeyValuePair$var value: String? = ""</ID>
    <ID>UndocumentedPublicProperty:DependentWalletCardActivity.kt$DependentWalletCardActivity.Companion$const val EXTRA_CARD_TYPE = "card_type"</ID>
    <ID>UndocumentedPublicProperty:DependentWalletCardActivity.kt$DependentWalletCardActivity.Companion$const val EXTRA_DEPENDENT_ID = "dependent_id"</ID>
    <ID>UndocumentedPublicProperty:DependentsActivity.kt$DependentsActivity.Companion$const val EXTRA_QLE_REQUEST_ID = "qle_request_id"</ID>
    <ID>UndocumentedPublicProperty:DependentsActivity.kt$DependentsActivity.Companion$const val EXTRA_QLE_REQUEST_RESPONSE = "qle_request_response"</ID>
    <ID>UndocumentedPublicProperty:DependentsActivity.kt$DependentsActivity.Companion$const val RESULT_NON_QLE = 3</ID>
    <ID>UndocumentedPublicProperty:DependentsActivity.kt$DependentsActivity.Companion$const val RESULT_QLE = 2</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$ConditionalField$@Json(name = "fields") val field: List&lt;DependentFormField> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$ConditionalField$val value: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormContentOption$val label: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormContentOption$val value: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$@Json(name = "conditional_fields") val conditionalFields: List&lt;ConditionalField> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$@Json(name = "content_options") val contentOptions: List&lt;DependentFormContentOption> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$@Json(name = "data_type") val dataType: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$@Json(name = "display_name") val displayName: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$@Json(name = "input_type") val inputType: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$@Json(name = "place_holder") val placeHolderText: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$val key: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$val required: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$val tooltip: Tooltip? = null</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$val validation: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentFormField$var value: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentsForm$@Json(name = "fields") val fields: List&lt;DependentFormField> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentsFormSchema$@Json(name = "dependent_schema") val schema: DependentsForm</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$DependentsFormSchema$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$Tooltip$val ctaText: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$Tooltip$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsForm.kt$Tooltip$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsFormsUseCases.kt$DependentFormType$val type: String</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentUiEvent$val data: DependentRelationshipSchemaField? = null</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentUiEvent$val dependent: Dependent? = null</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentUiEvent$val extra: Any? = null</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentUiEvent$val type: DependentUiEventType</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$val dependentAlertEvent: LiveData&lt;DependentAlertEventType> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$val dependents: LiveData&lt;List&lt;Dependent>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$val errors: LiveData&lt;DependentsViewModelError> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$val setQleEnrollmentSet: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$val showUiElement: LiveData&lt;DependentUiEvent> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$val userConfig: LiveData&lt;UserConfig> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$var qleRequestDataCache: QleRequestResponse? = null</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModel$var stateType: DependentStateVersion? = null</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModelError$val errorMessage: String = ""</ID>
    <ID>UndocumentedPublicProperty:DependentsViewModel.kt$DependentsViewModelError$val type: DependentsViewModelErrorType</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoFragment.kt$DeviceInfoFragment$val navArgs: DeviceInfoFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoFragment.kt$DeviceInfoFragment$val viewModel: DeviceInfoViewModel by viewModel { parametersOf(navArgs.deviceType) }</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs$public val deviceType: DeviceType</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoFragmentArgs.kt$DeviceInfoFragmentArgs$public val moduleIdentifier: String? = null</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoViewModel.kt$DeviceInfoViewModel$val api: API</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoViewModel.kt$DeviceInfoViewModel$val deviceInfoState: StateFlow&lt;State&lt;Map&lt;WearableDataType, Boolean>>> get() = mutableDeviceInfoState</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoViewModel.kt$DeviceInfoViewModel$val deviceType: DeviceType</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoViewModel.kt$DeviceInfoViewModel$var disconnectActionLoading: Boolean by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:DeviceInfoViewModel.kt$DeviceInfoViewModel$var reconnectActionLoading: Boolean by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:DigitalPharmacyModule.kt$DigitalPharmacyModule$val modules = arrayOf( DigitalPharmacyUseCaseModule.module, DigitalPharmacyViewModelModule.modules, DigitalPharmacyRepositoryModule.module, )</ID>
    <ID>UndocumentedPublicProperty:DigitalPharmacyRepositoryModule.kt$DigitalPharmacyRepositoryModule$val module = module { single { DigitalPharmacyRepository() } }</ID>
    <ID>UndocumentedPublicProperty:DigitalPharmacyUseCaseModule.kt$DigitalPharmacyUseCaseModule$val module = module { single { FakeUserInfoUseCase(repository = get()) } single { UserInfoUseCase(userRepository = get()) } single { FetchPrescriptionDetailUseCase(repository = get()) } single { FetchUserSettingsUseCase(repository = get()) } single { DigitalPharmacyUserInfoUseCase(digitalPharmacyRepository = get()) } single { FetchPharmacyVerificationQuestionUseCase(repo = get()) } }</ID>
    <ID>UndocumentedPublicProperty:DigitalPharmacyViewModelModule.kt$DigitalPharmacyViewModelModule$val modules = module { viewModel { CreateProfileViewModel(userInfoUseCase = get()) } viewModel { LandingViewModel(fakeUserInfoUseCase = get()) } viewModel { WelcomeNewUserViewModel(fakeUserInfoUseCase = get()) } viewModel { WelcomeViewModel(fakeUserInfoUseCase = get()) } viewModel { SelectPharmacyViewModel() } viewModel { FindLocationWithRxAndStoreNumberViewModel() } viewModel { EnableNotificationViewModel() } viewModel { SelectPharmacyRefillViewModel() } viewModel { SelectPrescriptionsViewModel() } viewModel { PrescriptionDetailsViewModel(get(), get()) } viewModel { SettingsScreenViewModel(userInfoUseCase = get()) } viewModel { DashboardViewModel(fakeUserInfoUseCase = get()) } viewModel { ContactCustomerSupportViewModel(userInfoUseCase = get()) } viewModel { ProfileVerificationViewModel(pharmacyVerificationUseCase = get()) } }</ID>
    <ID>UndocumentedPublicProperty:DimensionsOfHealthFragment.kt$DimensionsOfHealthFragment$lateinit var binding: ActivityDimensionsOfHealthBinding</ID>
    <ID>UndocumentedPublicProperty:DimensionsOfHealthFragment.kt$DimensionsOfHealthFragment$lateinit var topics: MutableList&lt;Topic></ID>
    <ID>UndocumentedPublicProperty:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs$public val topicId: String</ID>
    <ID>UndocumentedPublicProperty:DimensionsOfHealthFragmentArgs.kt$DimensionsOfHealthFragmentArgs$public val topicsArray: Array&lt;Topic></ID>
    <ID>UndocumentedPublicProperty:DirectorPageViewModel.kt$DirectorPageViewModel$var emailAddress by mutableStateOf&lt;String>("") private set</ID>
    <ID>UndocumentedPublicProperty:DirectorPageViewModel.kt$DirectorPageViewModel$var isVaildEmailAddress by mutableStateOf&lt;Boolean>(false) private set</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator$var index: Int = 0 private set</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator$var max: Int = 0 set(value) { field = value this.removeAllViews() dotImages.clear() for (i in 1..max) { val frameLayout = FrameLayout(context) frameLayout.foregroundGravity = Gravity.CENTER val size = context.dpToPx(DOT_SIZE_DP).toInt() val frameLayoutParams = LayoutParams(size, size) if (i != 1) { frameLayoutParams.marginStart = context.dpToPx(DOT_SPACING).toInt() } val imageView = ImageView(context) imageView.setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_dot)) val imageLayoutParams = ViewGroup.LayoutParams(size, size) styleImage(i, imageView) frameLayout.addView(imageView, imageLayoutParams) addView(frameLayout, frameLayoutParams) dotImages.add(imageView) } }</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator.Companion$const val DOT_SIZE_DP = 10f</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator.Companion$const val DOT_SPACING = 10f</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator.Companion$const val INDEX_SCALE = 1.0f</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator.Companion$const val NON_INDEX_SCALE = 0.8f</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator.Companion$val INDEX_DOT_COLOR_ATTR = R.attr.color_interactive_focus</ID>
    <ID>UndocumentedPublicProperty:DotsIndexIndicator.kt$DotsIndexIndicator.Companion$val NON_INDEX_DOT_COLOR_ATTR = R.attr.color_surface_card_disable</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown$var listener: OnDropDownSelectionChangedListener? = null</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown$var options = listOf&lt;Option>() set(value) { field = value spinner.adapter = DropDownAdapter(context, value.toMutableList(), placeholderText) }</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown$var placeholderText: String = "" set(value) { field = value (spinner.adapter as? DropDownAdapter)?.placeholder = value }</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown$var selectedOption: Option? = null set(value) { field = value refreshSelections(value) }</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown.Option$@DrawableRes val image: Int? = null</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown.Option$val customTalkBackText: String? = null</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown.Option$val text: String</ID>
    <ID>UndocumentedPublicProperty:DropDown.kt$DropDown.Option$val value: String</ID>
    <ID>UndocumentedPublicProperty:DropDownAnswer.kt$DropDownAnswer$val id: String</ID>
    <ID>UndocumentedPublicProperty:DropDownAnswer.kt$DropDownAnswer$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:DropDownAnswer.kt$DropDownAnswer$val value: String = ""</ID>
    <ID>UndocumentedPublicProperty:DropDownInputRow.kt$DropDownInputRow.Options$val options: List&lt;DropDown.Option> = listOf()</ID>
    <ID>UndocumentedPublicProperty:DropDownInputRow.kt$DropDownInputRow.Options$val selectedOption: DropDown.Option? = null</ID>
    <ID>UndocumentedPublicProperty:EditDate.kt$EditDate$var datePickerDialogMessage: CharSequence? = null</ID>
    <ID>UndocumentedPublicProperty:EditDate.kt$EditDate$var datePickerDialogTitle: CharSequence? = null</ID>
    <ID>UndocumentedPublicProperty:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs$public val dependentId: String</ID>
    <ID>UndocumentedPublicProperty:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs$public val dependentName: String</ID>
    <ID>UndocumentedPublicProperty:EditDependentFormFragmentArgs.kt$EditDependentFormFragmentArgs$public val relationshipType: String</ID>
    <ID>UndocumentedPublicProperty:EditPhoneNumber.kt$EditPhoneNumber$@Suppress("UNUSED_ANONYMOUS_PARAMETER") var onCountryChangedListener = { countryCode: String -> }</ID>
    <ID>UndocumentedPublicProperty:EditPhoneNumber.kt$EditPhoneNumber$val countryCode: String? get() = binding.countryCodePicker.selectedCountryCode ?: ""</ID>
    <ID>UndocumentedPublicProperty:EditPhoneNumber.kt$EditPhoneNumber$val phoneNumber: String? get() = binding.phoneNumber.text.toString()</ID>
    <ID>UndocumentedPublicProperty:EditPhoneNumber.kt$EditPhoneNumber$var onPhoneNumberTouched = {}</ID>
    <ID>UndocumentedPublicProperty:EditorialRow.kt$EditorialRow$val imageView: ImageView? get() = binding.image</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationFragment.kt$EnableNotificationFragment$val viewModel by viewModel&lt;EnableNotificationViewModel>()</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationFragmentArgs.kt$EnableNotificationFragmentArgs$public val arEnabled: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationViewModel.kt$EnableNotificationData$val email: String</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationViewModel.kt$EnableNotificationData$val emailState: SwitchInputState</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationViewModel.kt$EnableNotificationData$val phoneNumber: String</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationViewModel.kt$EnableNotificationData$val phoneNumberState: SwitchInputState</ID>
    <ID>UndocumentedPublicProperty:EnableNotificationViewModel.kt$EnableNotificationViewModel$var uiState by mutableStateOf&lt;State&lt;EnableNotificationData>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:EnrollmentData.kt$EnrollmentData$@Json(name = "enrollment_end_date") val enrollmentEndDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:EnrollmentData.kt$EnrollmentData$@Json(name = "in_enrollment_period") val isEnrollmentPeriod: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:EnrollmentData.kt$EnrollmentData$@Json(name = "is_first_time_enrollment") val isFirstTimeEnrollment: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:EnrollmentData.kt$EnrollmentData$@Json(name = "selection_status") val isSelectionComplete: Boolean</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val auth0ClientID: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val auth0Domain: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val auth0Scheme: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val contentReadEndpoint: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val contentSaveEndpoint: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val friendlyName: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val leagueDomain: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val restEndpoint: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val webEndpoint: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environment$val wsEndpoint: String = ""</ID>
    <ID>UndocumentedPublicProperty:Environment.kt$Environments$val environments: Map&lt;String, Environment> = mapOf()</ID>
    <ID>UndocumentedPublicProperty:EnvironmentConfiguration.kt$EnvironmentConfiguration$@JvmStatic val environments = getEnvironmentList(BuildConfig.FLAVOR)</ID>
    <ID>UndocumentedPublicProperty:EnvironmentConfiguration.kt$EnvironmentConfiguration$var environments = getEnvironmentList(BuildConfig.FLAVOR)</ID>
    <ID>UndocumentedPublicProperty:EnvironmentConfiguration.kt$EnvironmentConfiguration$var pcoApiEndpoint = when (BuildConfig.FLAVOR) { "stage" -> PCO_API_ENDPOINT_LOWER else -> PCO_API_ENDPOINT_PROD }</ID>
    <ID>UndocumentedPublicProperty:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs$public val chosenEnvironment: Environment</ID>
    <ID>UndocumentedPublicProperty:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs$public val environments: Array&lt;Environment></ID>
    <ID>UndocumentedPublicProperty:EnvironmentNavGraphArgs.kt$EnvironmentNavGraphArgs$public val title: String</ID>
    <ID>UndocumentedPublicProperty:EnvironmentSpinnerAdapter.kt$EnvironmentSpinnerAdapter$val context: Context</ID>
    <ID>UndocumentedPublicProperty:EnvironmentSpinnerAdapter.kt$EnvironmentSpinnerAdapter$val environments: List&lt;Environment></ID>
    <ID>UndocumentedPublicProperty:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$val args: EnvironmentSwitcherFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$var chosenEnvironment: Environment? = null</ID>
    <ID>UndocumentedPublicProperty:EnvironmentSwitcherFragment.kt$EnvironmentSwitcherFragment$var environments: Array&lt;Environment>? = null</ID>
    <ID>UndocumentedPublicProperty:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs$public val chosenEnvironment: Environment</ID>
    <ID>UndocumentedPublicProperty:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs$public val environments: Array&lt;Environment></ID>
    <ID>UndocumentedPublicProperty:EnvironmentSwitcherFragmentArgs.kt$EnvironmentSwitcherFragmentArgs$public val title: String</ID>
    <ID>UndocumentedPublicProperty:EnvironmentUtils.kt$EnvironmentUtils$var currentEnvironment: Environment get() = sharedPrefs.getJsonable( clazz = Environment::class.java, jsonAdapter = jsonAdapter, key = EnvironmentUtils::currentEnvironment.name, defaultValue = defaultEnvironment ) ?: defaultEnvironment set(value) { sharedPrefs.putJsonable( clazz = Environment::class.java, jsonAdapter = jsonAdapter, key = EnvironmentUtils::currentEnvironment.name, value = value ) environmentChangedListeners.forEach { it() } }</ID>
    <ID>UndocumentedPublicProperty:ErrorFragment.kt$ErrorFragment.Companion$const val EXTRA_IS_OFFLINE = "is_offline"</ID>
    <ID>UndocumentedPublicProperty:ErrorFragment.kt$ErrorFragment.Companion$const val EXTRA_SHOW_TOOLBAR = "extra_show_toolbar"</ID>
    <ID>UndocumentedPublicProperty:Exhaustive.kt$val &lt;T : Any> T.exhaustive get() = this</ID>
    <ID>UndocumentedPublicProperty:ExitScreen.kt$ExitScreen$@Json(name = "button_no") val buttonNo: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExitScreen.kt$ExitScreen$@Json(name = "button_ok") val buttonOk: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExitScreen.kt$ExitScreen$@Json(name = "friction_screen") val frictionScreen: FrictionScreen? = null</ID>
    <ID>UndocumentedPublicProperty:ExitScreen.kt$ExitScreen$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExitScreen.kt$ExitScreen$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExitScreen.kt$ExitScreen$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExpandableRow.kt$ExpandableRow$var isCollapsed: Boolean = true @ModelProp set(collapsed) { if (field == collapsed) { return } field = collapsed binding.description.toggleGoneVisibility(!collapsed) val rotation = if (collapsed) ROTATION_CHEVRON_DOWN else ROTATION_CHEVRON_UP binding.chevron .animate() .rotation(rotation) .setDuration(context.getIntegerFromAttr(R.attr.duration_base).toLong()) .start() onStateChangedListener?.invoke(collapsed) }</ID>
    <ID>UndocumentedPublicProperty:ExpandableRow.kt$ExpandableRow$var onStateChangedListener: ((isCollapsed: Boolean) -> Unit)? = null @CallbackProp set</ID>
    <ID>UndocumentedPublicProperty:ExpandableStatusRow.kt$ExpandableStatusRow$var onStateChangedListener: ((isCollapsed: Boolean) -> Unit)? = null @CallbackProp set</ID>
    <ID>UndocumentedPublicProperty:ExpandableTextView.kt$ExpandableTextView$var isCollapsed: Boolean = true @ModelProp set(collapsed) { if (field != collapsed) { field = collapsed binding.readMore.isVisible = collapsed binding.text.maxLines = if (collapsed) 3 else Int.MAX_VALUE onStateChangedListener?.invoke(collapsed) } }</ID>
    <ID>UndocumentedPublicProperty:ExpandableTextView.kt$ExpandableTextView$var onStateChangedListener: ((isCollapsed: Boolean) -> Unit)? = null @CallbackProp set</ID>
    <ID>UndocumentedPublicProperty:ExpiredSession.kt$ExpiredSession$val errorMessage: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExpiredSession.kt$ExpiredSession$val function: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExpiredSession.kt$ExpiredSession$val messageType: String = ""</ID>
    <ID>UndocumentedPublicProperty:ExpiredSession.kt$ExpiredSession$val source: String = ""</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlag$val defaultValue: T</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlag$val description: String</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlag$val id: String</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlag$val name: String</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlagValueState$val defaultValue: T</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlagValueState$val isRemote = remoteValue != null</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlagValueState$val localValue: T?</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlagValueState$val remoteValue: T?</ID>
    <ID>UndocumentedPublicProperty:FeatureFlag.kt$FeatureFlagValueState$val value = localValue ?: remoteValue ?: defaultValue</ID>
    <ID>UndocumentedPublicProperty:FeatureFlagDetailFragment.kt$FeatureFlagDetailFragment$val args: FeatureFlagDetailFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:FeatureFlagDetailFragmentArgs.kt$FeatureFlagDetailFragmentArgs$public val featureFlagId: String</ID>
    <ID>UndocumentedPublicProperty:FeatureFlagWithValueState.kt$FeatureFlagWithValueState$val featureFlag: FeatureFlag&lt;T></ID>
    <ID>UndocumentedPublicProperty:FeatureFlagWithValueState.kt$FeatureFlagWithValueState$val valueState: FeatureFlagValueState&lt;*></ID>
    <ID>UndocumentedPublicProperty:FeatureFlagsRepository.kt$FeatureFlagsRepository$val featureFlags: List&lt;FeatureFlag&lt;*>> get() = mutableFeatureFlags</ID>
    <ID>UndocumentedPublicProperty:FeatureFlagsResponse.kt$FeatureFlagsResponse$@Json(name = "user_flags") val featureFlags: Map&lt;String, Boolean></ID>
    <ID>UndocumentedPublicProperty:FeedbackController.kt$FeedbackController$var onRatingClickListener: ((rating: Int) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:FeedbackView.kt$FeedbackView$var onRatingChosenListener: ((rating: Int) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:FetchAppointmentDetailsUseCase.kt$const val MAX_REFUND_PROGRESS_RANGE = 99F</ID>
    <ID>UndocumentedPublicProperty:FetchAppointmentDetailsUseCase.kt$const val MIN_REFUND_PROGRESS_RANGE = 1F</ID>
    <ID>UndocumentedPublicProperty:FetchAppointmentDetailsUseCase.kt$const val REFUND_COMPLETED = 100F</ID>
    <ID>UndocumentedPublicProperty:FetchAppointmentDetailsUseCase.kt$const val REFUND_UNAPPROVED = 0F</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val addressLine1: String?</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val addressLine2: String?</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val date: String</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val id: String</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val orgId: AppointmentOrgId</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val service: String</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val specialty: String</ID>
    <ID>UndocumentedPublicProperty:FetchDetailedAppointmentsUseCase.kt$DetailedAppointment$val time: String</ID>
    <ID>UndocumentedPublicProperty:FetchPharmacyVerificationQuestionUseCase.kt$FetchPharmacyVerificationQuestionModel$val onAnswerSelected: (Int, Int) -> Unit</ID>
    <ID>UndocumentedPublicProperty:FetchPharmacyVerificationQuestionUseCase.kt$FetchPharmacyVerificationQuestionModel$val questions: List&lt;VerificationQuestion></ID>
    <ID>UndocumentedPublicProperty:FetchPlaceAutocompletePredictionsUseCase.kt$FetchPlaceAutocompletePredictionsUseCase$val locale: Locale</ID>
    <ID>UndocumentedPublicProperty:FetchPlaceAutocompletePredictionsUseCase.kt$FetchPlaceAutocompletePredictionsUseCase$val placesClient: PlacesClient</ID>
    <ID>UndocumentedPublicProperty:FetchPlaceAutocompletePredictionsUseCase.kt$PlaceAutocompletePrediction$val placeId: String</ID>
    <ID>UndocumentedPublicProperty:FetchPlaceAutocompletePredictionsUseCase.kt$PlaceAutocompletePrediction$val primaryText: String</ID>
    <ID>UndocumentedPublicProperty:FetchPlaceAutocompletePredictionsUseCase.kt$PlaceAutocompletePrediction$val secondaryText: String</ID>
    <ID>UndocumentedPublicProperty:FetchPlaceCoordinatesUseCase.kt$FetchPlaceCoordinatesUseCase$val placesClient: PlacesClient</ID>
    <ID>UndocumentedPublicProperty:FetchProvidersUseCase.kt$ProviderListModel$val providers: List&lt;Provider></ID>
    <ID>UndocumentedPublicProperty:FetchProvidersUseCase.kt$ProviderListModel$val showAllButton: Boolean</ID>
    <ID>UndocumentedPublicProperty:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment$val date: String</ID>
    <ID>UndocumentedPublicProperty:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment$val id: String</ID>
    <ID>UndocumentedPublicProperty:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment$val orgId: AppointmentOrgId</ID>
    <ID>UndocumentedPublicProperty:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment$val status: AppointmentStatus</ID>
    <ID>UndocumentedPublicProperty:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment$val time: String</ID>
    <ID>UndocumentedPublicProperty:FetchSimpleAppointmentsUseCase.kt$SimpleAppointment$val title: String</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val appointmentTypes: Set&lt;SpecialtyLandingAppointmentType></ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val availabilityOptions: Set&lt;SpecialtyLandingAvailabilityOption></ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val description: String</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val imageUrl: String</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val name: String</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val orgId: OrgId</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$SpecialityLandingModel$val price: String</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$val SpecialtyLandingAppointmentType.resourceId get() = when (this) { SpecialtyLandingAppointmentType.VIRTUAL -> R.string.triage_virtual_appointment_type SpecialtyLandingAppointmentType.IN_PERSON -> R.string.triage_in_person_appointment_type }</ID>
    <ID>UndocumentedPublicProperty:FetchSpecialtyLandingUseCase.kt$val SpecialtyLandingAvailabilityOption.resourceId get() = when (this) { SpecialtyLandingAvailabilityOption.ON_DEMAND -> R.string.triage_on_demand_availability_option SpecialtyLandingAvailabilityOption.SCHEDULED -> R.string.triage_scheduled_availability_option }</ID>
    <ID>UndocumentedPublicProperty:FetchUserAddressRowUseCase.kt$AddressRow$val line1: String</ID>
    <ID>UndocumentedPublicProperty:FetchUserAddressRowUseCase.kt$AddressRow$val line2: String</ID>
    <ID>UndocumentedPublicProperty:FetchUserAddressRowUseCase.kt$FetchUserAddressRowUseCase$val userRepository: UserRepository</ID>
    <ID>UndocumentedPublicProperty:FetchUserCoordinatesUseCase.kt$val Location.fullAddress get() = "$address1, $city, $province, $postalCode, $country"</ID>
    <ID>UndocumentedPublicProperty:FileUtils.kt$BitmapFileConfig$val compressFormat: Bitmap.CompressFormat = Bitmap.CompressFormat.PNG</ID>
    <ID>UndocumentedPublicProperty:FileUtils.kt$BitmapFileConfig$val compressQuality: Int = 100</ID>
    <ID>UndocumentedPublicProperty:FileUtils.kt$BitmapFileConfig$val directory: String</ID>
    <ID>UndocumentedPublicProperty:FileUtils.kt$BitmapFileConfig$val name: String</ID>
    <ID>UndocumentedPublicProperty:FindLocationWithRxAndStoreNumberFragment.kt$FindLocationWithRxAndStoreNumberFragment$val viewModel by viewModel&lt;FindLocationWithRxAndStoreNumberViewModel>()</ID>
    <ID>UndocumentedPublicProperty:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreData$val isValid get() = !rxNumber.error &amp;&amp; rxNumber.text.isNotEmpty() &amp;&amp; !storeNumber.error &amp;&amp; storeNumber.text.isNotEmpty()</ID>
    <ID>UndocumentedPublicProperty:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreData$val rxNumber: TextInputRxNumberFieldState</ID>
    <ID>UndocumentedPublicProperty:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreData$val storeNumber: TextInputStoreNumberFieldState</ID>
    <ID>UndocumentedPublicProperty:FindLocationWithRxAndStoreNumberViewModel.kt$FindLocationWithRxAndStoreNumberViewModel$var findLocationFieldsState by mutableStateOf( FindLocationWithRxAndStoreData( TextInputRxNumberFieldState(), TextInputStoreNumberFieldState() ) ) private set</ID>
    <ID>UndocumentedPublicProperty:FindPharmacyFragmentArgs.kt$FindPharmacyFragmentArgs$public val banner: Banner = Banner.LCL</ID>
    <ID>UndocumentedPublicProperty:FirebaseRemoteTraceFactory.kt$FirebaseRemoteTrace$val name: String</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form$@Json(name = "document_type") val documentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form$@Json(name = "prefill_form") val prefilledForm: PrefilledForm = PrefilledForm()</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form$@Json(name = "tooltip_text") val tooltipText: String = ""</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form$@Json(name = "tooltip_title") val tooltipTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form.PrefilledForm$@Json(name = "benefit_id") val benefitId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Form.kt$Form.PrefilledForm$@Json(name = "form_type") val formType: String = ""</ID>
    <ID>UndocumentedPublicProperty:FormTable.kt$FormTable$@PrimaryKey var id = form.prefilledForm.benefitId</ID>
    <ID>UndocumentedPublicProperty:FormTable.kt$FormTable$val form: Form = Form()</ID>
    <ID>UndocumentedPublicProperty:FrictionScreen.kt$FrictionScreen$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:FrictionScreen.kt$FrictionScreen$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog$val actions = mutableListOf&lt;Action>()</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog$val caption: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog$val tagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog$var imageContentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog.Action$val isPrimary: Boolean</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog.Action$val onActionClickListener: View.OnClickListener</ID>
    <ID>UndocumentedPublicProperty:FullScreenAlertDialog.kt$FullScreenAlertDialog.Action$val text: String</ID>
    <ID>UndocumentedPublicProperty:FullScreenContent.kt$FullScreenContent$@Json(name = "contentful_image_asset") val contentfulImageAsset: ImageAsset</ID>
    <ID>UndocumentedPublicProperty:FullScreenContent.kt$FullScreenContent$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenContent.kt$FullScreenContent$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenContent.kt$FullScreenContent$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:FullScreenContentFragmentArgs.kt$FullScreenContentFragmentArgs$public val content: FullScreenContent</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundBottomNav by mutableStateOf(backgroundBottomNav) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonCircularSelected by mutableStateOf(backgroundButtonCircularSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonCircularSelectedPressed by mutableStateOf( backgroundButtonCircularSelectedPressed ) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonCircularUnselectedPressed by mutableStateOf( backgroundButtonCircularUnselectedPressed ) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonDanger by mutableStateOf(backgroundButtonDanger) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonDangerPressed by mutableStateOf(backgroundButtonDangerPressed) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonDisabled by mutableStateOf(backgroundButtonDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonPill by mutableStateOf(backgroundButtonPill) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonPillPressed by mutableStateOf(backgroundButtonPillPressed) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonPrimary by mutableStateOf(backgroundButtonPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonPrimaryPressed by mutableStateOf(backgroundButtonPrimaryPressed) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonSecondary by mutableStateOf(backgroundButtonSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonSecondaryPressed by mutableStateOf(backgroundButtonSecondaryPressed) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonSubtle by mutableStateOf(backgroundButtonSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundButtonSubtlePressed by mutableStateOf(backgroundButtonSubtlePressed) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundCheckedInputDefault by mutableStateOf(backgroundCheckedInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundCheckedInputDisabled by mutableStateOf(backgroundCheckedInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundDanger by mutableStateOf(backgroundDanger) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundDangerHighlight by mutableStateOf(backgroundDangerHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundDark by mutableStateOf(backgroundDark) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundDisabled by mutableStateOf(backgroundDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundEmergency by mutableStateOf(backgroundEmergency) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundFeedback by mutableStateOf(backgroundFeedback) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundGoalActive by mutableStateOf(backgroundGoalActive) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundInfo by mutableStateOf(backgroundInfo) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundInfoHighlight by mutableStateOf(backgroundInfoHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundInfoLight by mutableStateOf(backgroundInfoLight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundInputDefault by mutableStateOf(backgroundInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundInputDisabled by mutableStateOf(backgroundInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundOptionSelected by mutableStateOf(backgroundOptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundOptionUnselected by mutableStateOf(backgroundOptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundPageSwoopPrimary by mutableStateOf(backgroundPageSwoopPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundPageSwoopSecondary by mutableStateOf(backgroundPageSwoopSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundPageSwoopTertiary by mutableStateOf(backgroundPageSwoopTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundPointsDark by mutableStateOf(backgroundPointsDark) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundPrimary by mutableStateOf(backgroundPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundPrimaryHighlight by mutableStateOf(backgroundPrimaryHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundProgressBar by mutableStateOf(backgroundProgressBar) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundSecondary by mutableStateOf(backgroundSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundSecondaryHighlight by mutableStateOf(backgroundSecondaryHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundSuccess by mutableStateOf(backgroundSuccess) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundSuccessHighlight by mutableStateOf(backgroundSuccessHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundTabSelected by mutableStateOf(backgroundTabSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundTabUnselected by mutableStateOf(backgroundTabUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundToolbar by mutableStateOf(backgroundToolbar) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundTopicOverline by mutableStateOf(backgroundTopicOverline) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundWarning by mutableStateOf(backgroundWarning) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var backgroundWarningHighlight by mutableStateOf(backgroundWarningHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderButtonCircular by mutableStateOf(borderButtonCircular) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderButtonSecondary by mutableStateOf(borderButtonSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderButtonSubtle by mutableStateOf(borderButtonSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderDefault by mutableStateOf(borderDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderInputDanger by mutableStateOf(borderInputDanger) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderInputDefault by mutableStateOf(borderInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderInputDisabled by mutableStateOf(borderInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderInputFocused by mutableStateOf(borderInputFocused) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderNeutralLighter by mutableStateOf(borderNeutralLighter) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderOptionSelected by mutableStateOf(borderOptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderOptionUnselected by mutableStateOf(borderOptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var borderPrimary by mutableStateOf(borderPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var dividerPrimary by mutableStateOf(dividerPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillDisabled by mutableStateOf(fillDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillGoalActiveContrast by mutableStateOf(fillGoalActiveContrast) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillIndicator by mutableStateOf(fillIndicator) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillLight by mutableStateOf(fillLight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillMultiProgressBarPrimary by mutableStateOf(fillMultiProgressBarPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillMultiProgressBarQuaternary by mutableStateOf(fillMultiProgressBarQuaternary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillMultiProgressBarQuinary by mutableStateOf(fillMultiProgressBarQuinary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillMultiProgressBarSecondary by mutableStateOf(fillMultiProgressBarSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillMultiProgressBarSenary by mutableStateOf(fillMultiProgressBarSenary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillMultiProgressBarTertiary by mutableStateOf(fillMultiProgressBarTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillNeutralDark by mutableStateOf(fillNeutralDark) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillNeutralLight by mutableStateOf(fillNeutralLight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillPrimary by mutableStateOf(fillPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillProgressBarPrimary by mutableStateOf(fillProgressBarPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillProgressBarSecondary by mutableStateOf(fillProgressBarSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillQuaternary by mutableStateOf(fillQuaternary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillSecondary by mutableStateOf(fillSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var fillTertiary by mutableStateOf(fillTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textActionBarButton by mutableStateOf(textActionBarButton) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonCircularSelected by mutableStateOf(textButtonCircularSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonCircularUnselected by mutableStateOf(textButtonCircularUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonDanger by mutableStateOf(textButtonDanger) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonDisabled by mutableStateOf(textButtonDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonPill by mutableStateOf(textButtonPill) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonPrimary by mutableStateOf(textButtonPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonSecondary by mutableStateOf(textButtonSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonSubtle by mutableStateOf(textButtonSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textButtonSubtleSecondary by mutableStateOf(textButtonSubtleSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textCardCaption by mutableStateOf(textCardCaption) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textCardDescription by mutableStateOf(textCardDescription) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textChoiceDefault by mutableStateOf(textChoiceDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textChoiceDisabled by mutableStateOf(textChoiceDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textDanger by mutableStateOf(textDanger) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textDark by mutableStateOf(textDark) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textGoalActiveContrast by mutableStateOf(textGoalActiveContrast) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textGoalActiveContrastSubtle by mutableStateOf(textGoalActiveContrastSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textGoalDisabled by mutableStateOf(textGoalDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textGoalOverline by mutableStateOf(textGoalOverline) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textHint by mutableStateOf(textHint) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textInputDefault by mutableStateOf(textInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textInputDisabled by mutableStateOf(textInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textInputPlaceholder by mutableStateOf(textInputPlaceholder) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLabel by mutableStateOf(textLabel) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLight by mutableStateOf(textLight) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLightSecondary by mutableStateOf(textLightSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLightTertiary by mutableStateOf(textLightTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLinkDefault by mutableStateOf(textLinkDefault) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLinkDisabled by mutableStateOf(textLinkDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textLinkPressed by mutableStateOf(textLinkPressed) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textOptionDescriptionSelected by mutableStateOf(textOptionDescriptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textOptionDescriptionUnselected by mutableStateOf(textOptionDescriptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textOptionSelected by mutableStateOf(textOptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textOptionUnselected by mutableStateOf(textOptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textPointsEarned by mutableStateOf(textPointsEarned) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textPrimary by mutableStateOf(textPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionColors.kt$GenesisColors$var textSecondary by mutableStateOf(textSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:FusionShapes.kt$val fusionShapes = GenesisShapes()</ID>
    <ID>UndocumentedPublicProperty:FusionSpacing.kt$val fusionSpacing = GenesisSpacing()</ID>
    <ID>UndocumentedPublicProperty:FusionStrokes.kt$val fusionStrokes = GenesisStrokes()</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Body 1", group = "Fusion") val body1_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Body 2", group = "Fusion") val body2_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 14.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Button 1", group = "Fusion") val button1_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Button 2", group = "Fusion") val button2_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Caption", group = "Fusion") val caption_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 12.sp, fontWeight = FontWeight.W400, lineHeight = 20.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "H1", group = "Fusion") val h1_fusion = TextStyle( fontFamily = FS_Humana, fontSize = 32.sp, fontWeight = FontWeight.W700, lineHeight = 40.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "H2", group = "Fusion") val h2_fusion = TextStyle( fontFamily = FS_Humana, fontSize = 24.sp, fontWeight = FontWeight.W700, lineHeight = 32.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "H3", group = "Fusion") val h3_fusion = TextStyle( fontFamily = FS_Humana, fontSize = 20.sp, fontWeight = FontWeight.W700, lineHeight = 28.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "H4", group = "Fusion") val h4_fusion = TextStyle( fontFamily = FS_Humana, fontSize = 18.sp, fontWeight = FontWeight.W700, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Label", group = "Fusion") val label_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Overline", group = "Fusion") val overline_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 12.sp, fontWeight = FontWeight.W700, lineHeight = 20.sp, )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Subtitle 1", group = "Fusion") val subtitle1_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Subtitle 2", group = "Fusion") val subtitle2_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:FusionTypography.kt$@ShowkaseTypography(name = "Tab", group = "Fusion") val tab_fusion = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 10.sp, fontWeight = FontWeight.W400, lineHeight = 16.sp, )</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$CardDetailsViewType$val viewTypeString: String</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "actions") var actions: List&lt;WalletCardAction> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "dependent_id") var dependentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "dependents") var dependents: List&lt;Dependent> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "description") var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "end_date") var policyLegacyEndDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "full_name") var fullName: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "id") var id: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "inactive_date") var finalLegacyDeactivationDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "insurance") var insuranceData: Insurance = Insurance()</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "product_type") var productType: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "provider_name") var providerName: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "rendered_template") var renderedTemplate: RenderedTemplate = RenderedTemplate()</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "short_end_date") var policyShortEndDate: ShortDate? = null</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "short_inactive_date") var finalShortDeactivationDate: ShortDate? = null</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "short_start_date") var policyShortStartDate: ShortDate? = null</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "show_user_benefit_live_balances") var shouldShowUserLiveBalances: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "start_date") var policyLegacyStartDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "status") var status: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "type") var type: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "view_type") var viewType: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$GenericCard$@Json(name = "wallet_item_id") var walletItemId: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "carrier_code") var carrierCode: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "issue_number") var issueNumber: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "member_policy_number") var memberNumber: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "plan_name") var planName: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "provider_policy_number") var policyNumber: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "rx_bin") var rxBin: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "rx_carrier") var rxCarrier: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "rx_group") var rxGroup: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "rx_id") var rxId: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$Insurance$@Json(name = "rx_pcn") var rxPcn: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$const val STATUS_ACTIVE = "active"</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$const val STATUS_CREATED = "created"</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$const val STATUS_INACTIVE = "inactive"</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$const val STATUS_INACTIVE_GRACE_PERIOD = "inactive_grace_period"</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$const val STATUS_IN_WAITING_PERIOD = "in_waiting_period"</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$const val STATUS_READY = "ready"</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$val CARD_ACTIVE_STATUSES = arrayOf(STATUS_ACTIVE)</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$val CARD_PAST_STATUSES = arrayOf(STATUS_INACTIVE_GRACE_PERIOD)</ID>
    <ID>UndocumentedPublicProperty:GenericCard.kt$val CARD_PENDING_STATUES = arrayOf( STATUS_CREATED, STATUS_IN_WAITING_PERIOD, STATUS_READY )</ID>
    <ID>UndocumentedPublicProperty:GenericPagesWithTabs.kt$GenericPagesWithTabs.PageWithTab$val pageData: EpoxyModel&lt;*></ID>
    <ID>UndocumentedPublicProperty:GenericPagesWithTabs.kt$GenericPagesWithTabs.PageWithTab$val title: String</ID>
    <ID>UndocumentedPublicProperty:GenesisCarousel.kt$GenesisCarousel.PaddingAttr$@AttrRes val bottomRes: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisCarousel.kt$GenesisCarousel.PaddingAttr$@AttrRes val itemSpacingRes: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisCarousel.kt$GenesisCarousel.PaddingAttr$@AttrRes val leftRes: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisCarousel.kt$GenesisCarousel.PaddingAttr$@AttrRes val rightRes: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisCarousel.kt$GenesisCarousel.PaddingAttr$@AttrRes val topRes: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundBottomNav: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonCircularSelected: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonCircularSelectedPressed: Color = Color(0xFF3E16A3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonCircularUnselectedPressed: Color = Color(0xFF3E16A3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonDanger: Color = Color(0xFFDA2045)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonDangerPressed: Color = Color(0xFFBA1B3B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonDisabled: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonPill: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonPillPressed: Color = Color(0xFFDCD2F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonPrimary: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonPrimaryPressed: Color = Color(0xFF3E16A3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonSecondary: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonSecondaryPressed: Color = Color(0xFFDCD2F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonSubtle: Color = Color(0xFFFFFFFF).copy(alpha = 0f)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundButtonSubtlePressed: Color = Color(0xFFF8F8F8)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundCheckedInputDefault: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundCheckedInputDisabled: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundDanger: Color = Color(0xFFF9DEE3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundDangerHighlight: Color = Color(0xFFDA2045)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundDark: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundDisabled: Color = Color(0xFFF0F0F0)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundEmergency: Color = Color(0xFFF9DEE3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundFeedback: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundGoalActive: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundInfo: Color = Color(0xFFEAEEFB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundInfoHighlight: Color = Color(0xFF2E5CDF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundInfoLight: Color = Color(0xFF2E5CDF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundInputDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundInputDisabled: Color = Color(0xFFF0F0F0)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundOptionSelected: Color = Color(0xFFDCD2F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundOptionUnselected: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPageControls: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPageSwoopPrimary: Color = Color(0xFFEAEEFB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPageSwoopSecondary: Color = Color(0xFFE5F6F1)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPageSwoopTertiary: Color = Color(0xFFE0F6F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPointsDark: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPrimary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundPrimaryHighlight: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundProgressBar: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSecondary: Color = Color(0xFFF8F8F8)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSecondaryHighlight: Color = Color(0xFFEAEEFB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSubduedHighlight: Color = Color(0xFFEAEEFB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSuccess: Color = Color(0xFFE5F6F1)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSuccessHighlight: Color = Color(0xFF00A876)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSuggested: Color = Color(0xFFE5CF73)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundSuggestedDark: Color = Color(0xFFE5CF73)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundTabSelected: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundTabUnselected: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundToolbar: Color = debugColor</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundTopicOverline: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundWarning: Color = Color(0xFFFEF3E6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundWarningHighlight: Color = Color(0xFFFD9833)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBackgroundColors$val backgroundWarningSubdued: Color = debugColor</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderButtonCircular: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderButtonSecondary: Color = Color(0xFFFFFFFF).copy(alpha = 0f)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderButtonSubtle: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderDefault: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderInputDanger: Color = Color(0xFFDA2045)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderInputDefault: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderInputDisabled: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderInputFocused: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderNeutralLighter: Color = Color(0xFFF0F0F0)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderOptionSelected: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderOptionUnselected: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val borderPrimary: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisBorderColors$val dividerPrimary: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundBottomNav by mutableStateOf(backgroundColors.backgroundBottomNav) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonCircularSelected by mutableStateOf(backgroundColors.backgroundButtonCircularSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonCircularSelectedPressed by mutableStateOf( backgroundColors.backgroundButtonCircularSelectedPressed ) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonCircularUnselectedPressed by mutableStateOf( backgroundColors.backgroundButtonCircularUnselectedPressed ) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonDanger by mutableStateOf(backgroundColors.backgroundButtonDanger) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonDangerPressed by mutableStateOf(backgroundColors.backgroundButtonDangerPressed) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonDisabled by mutableStateOf(backgroundColors.backgroundButtonDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonPill by mutableStateOf(backgroundColors.backgroundButtonPill) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonPillPressed by mutableStateOf(backgroundColors.backgroundButtonPillPressed) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonPrimary by mutableStateOf(backgroundColors.backgroundButtonPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonPrimaryPressed by mutableStateOf(backgroundColors.backgroundButtonPrimaryPressed) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonSecondary by mutableStateOf(backgroundColors.backgroundButtonSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonSecondaryPressed by mutableStateOf(backgroundColors.backgroundButtonSecondaryPressed) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonSubtle by mutableStateOf(backgroundColors.backgroundButtonSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundButtonSubtlePressed by mutableStateOf(backgroundColors.backgroundButtonSubtlePressed) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundCheckedInputDefault by mutableStateOf(backgroundColors.backgroundCheckedInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundCheckedInputDisabled by mutableStateOf(backgroundColors.backgroundCheckedInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundDanger by mutableStateOf(backgroundColors.backgroundDanger) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundDangerHighlight by mutableStateOf(backgroundColors.backgroundDangerHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundDark by mutableStateOf(backgroundColors.backgroundDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundDisabled by mutableStateOf(backgroundColors.backgroundDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundEmergency by mutableStateOf(backgroundColors.backgroundEmergency) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundFeedback by mutableStateOf(backgroundColors.backgroundFeedback) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundGoalActive by mutableStateOf(backgroundColors.backgroundGoalActive) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundInfo by mutableStateOf(backgroundColors.backgroundInfo) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundInfoHighlight by mutableStateOf(backgroundColors.backgroundInfoHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundInfoLight by mutableStateOf(backgroundColors.backgroundInfoLight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundInputDefault by mutableStateOf(backgroundColors.backgroundInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundInputDisabled by mutableStateOf(backgroundColors.backgroundInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundOptionSelected by mutableStateOf(backgroundColors.backgroundOptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundOptionUnselected by mutableStateOf(backgroundColors.backgroundOptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPageControls by mutableStateOf(backgroundColors.backgroundPageControls) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPageSwoopPrimary by mutableStateOf(backgroundColors.backgroundPageSwoopPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPageSwoopSecondary by mutableStateOf(backgroundColors.backgroundPageSwoopSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPageSwoopTertiary by mutableStateOf(backgroundColors.backgroundPageSwoopTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPointsDark by mutableStateOf(backgroundColors.backgroundPointsDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPrimary by mutableStateOf(backgroundColors.backgroundPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundPrimaryHighlight by mutableStateOf(backgroundColors.backgroundPrimaryHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundProgressBar by mutableStateOf(backgroundColors.backgroundProgressBar) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSecondary by mutableStateOf(backgroundColors.backgroundSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSecondaryHighlight by mutableStateOf(backgroundColors.backgroundSecondaryHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSubduedHighlight by mutableStateOf(backgroundColors.backgroundSubduedHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSuccess by mutableStateOf(backgroundColors.backgroundSuccess) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSuccessHighlight by mutableStateOf(backgroundColors.backgroundSuccessHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSuggested by mutableStateOf(backgroundColors.backgroundSuggested) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundSuggestedDark by mutableStateOf(backgroundColors.backgroundSuggestedDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundTabSelected by mutableStateOf(backgroundColors.backgroundTabSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundTabUnselected by mutableStateOf(backgroundColors.backgroundTabUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundToolbar by mutableStateOf(backgroundColors.backgroundToolbar) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundTopicOverline by mutableStateOf(backgroundColors.backgroundTopicOverline) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundWarning by mutableStateOf(backgroundColors.backgroundWarning) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundWarningHighlight by mutableStateOf(backgroundColors.backgroundWarningHighlight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var backgroundWarningSubdued by mutableStateOf(backgroundColors.backgroundWarningSubdued) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderButtonCircular by mutableStateOf(borderColors.borderButtonCircular) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderButtonSecondary by mutableStateOf(borderColors.borderButtonSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderButtonSubtle by mutableStateOf(borderColors.borderButtonSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderDefault by mutableStateOf(borderColors.borderDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderInputDanger by mutableStateOf(borderColors.borderInputDanger) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderInputDefault by mutableStateOf(borderColors.borderInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderInputDisabled by mutableStateOf(borderColors.borderInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderInputFocused by mutableStateOf(borderColors.borderInputFocused) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderNeutralLighter by mutableStateOf(borderColors.borderNeutralLighter) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderOptionSelected by mutableStateOf(borderColors.borderOptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderOptionUnselected by mutableStateOf(borderColors.borderOptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var borderPrimary by mutableStateOf(borderColors.borderPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandPrimaryBright by mutableStateOf(genesisDecorativeColors.decorativeBrandPrimaryBright) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandPrimaryBrightest by mutableStateOf(genesisDecorativeColors.decorativeBrandPrimaryBrightest) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandPrimaryDark by mutableStateOf(genesisDecorativeColors.decorativeBrandPrimaryDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandPrimaryDarkest by mutableStateOf(genesisDecorativeColors.decorativeBrandPrimaryDarkest) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandPrimaryDefault by mutableStateOf(genesisDecorativeColors.decorativeBrandPrimaryDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandPrimaryPastel by mutableStateOf(genesisDecorativeColors.decorativeBrandPrimaryPastel) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandSecondaryBright by mutableStateOf(genesisDecorativeColors.decorativeBrandSecondaryBright) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandSecondaryBrightest by mutableStateOf(genesisDecorativeColors.decorativeBrandSecondaryBrightest) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandSecondaryDark by mutableStateOf(genesisDecorativeColors.decorativeBrandSecondaryDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandSecondaryDarkest by mutableStateOf(genesisDecorativeColors.decorativeBrandSecondaryDarkest) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandSecondaryDefault by mutableStateOf(genesisDecorativeColors.decorativeBrandSecondaryDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var decorativeBrandSecondaryPastel by mutableStateOf(genesisDecorativeColors.decorativeBrandSecondaryPastel) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var dividerPrimary by mutableStateOf(borderColors.dividerPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillDisabled by mutableStateOf(fillColors.fillDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillGoalActiveContrast by mutableStateOf(fillColors.fillGoalActiveContrast) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillIndicator by mutableStateOf(fillColors.fillIndicator) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillLight by mutableStateOf(fillColors.fillLight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillMultiProgressBarPrimary by mutableStateOf(fillColors.fillMultiProgressBarPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillMultiProgressBarQuaternary by mutableStateOf(fillColors.fillMultiProgressBarQuaternary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillMultiProgressBarQuinary by mutableStateOf(fillColors.fillMultiProgressBarQuinary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillMultiProgressBarSecondary by mutableStateOf(fillColors.fillMultiProgressBarSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillMultiProgressBarSenary by mutableStateOf(fillColors.fillMultiProgressBarSenary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillMultiProgressBarTertiary by mutableStateOf(fillColors.fillMultiProgressBarTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillNeutralDark by mutableStateOf(fillColors.fillNeutralDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillNeutralLight by mutableStateOf(fillColors.fillNeutralLight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillPrimary by mutableStateOf(fillColors.fillPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillProgressBarPrimary by mutableStateOf(fillColors.fillProgressBarPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillProgressBarSecondary by mutableStateOf(fillColors.fillProgressBarSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillQuaternary by mutableStateOf(fillColors.fillQuaternary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillSecondary by mutableStateOf(fillColors.fillSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var fillTertiary by mutableStateOf(fillColors.fillTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var onSurfaceTextSuccess by mutableStateOf(genesisOnSurfaceColors.onSurfaceTextSuccess) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var surfaceCardTertiary by mutableStateOf(genesisSurfaceColors.surfaceCardTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textActionBarButton by mutableStateOf(textColors.textActionBarButton) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonCircularSelected by mutableStateOf(textColors.textButtonCircularSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonCircularUnselected by mutableStateOf(textColors.textButtonCircularUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonDanger by mutableStateOf(textColors.textButtonDanger) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonDisabled by mutableStateOf(textColors.textButtonDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonPill by mutableStateOf(textColors.textButtonPill) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonPrimary by mutableStateOf(textColors.textButtonPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonSecondary by mutableStateOf(textColors.textButtonSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonSubtle by mutableStateOf(textColors.textButtonSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textButtonSubtleSecondary by mutableStateOf(textColors.textButtonSubtleSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textCardCaption by mutableStateOf(textColors.textCardCaption) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textCardDescription by mutableStateOf(textColors.textCardDescription) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textChoiceDefault by mutableStateOf(textColors.textChoiceDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textChoiceDisabled by mutableStateOf(textColors.textChoiceDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textDanger by mutableStateOf(textColors.textDanger) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textDark by mutableStateOf(textColors.textDark) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textGoalActiveContrast by mutableStateOf(textColors.textGoalActiveContrast) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textGoalActiveContrastSubtle by mutableStateOf(textColors.textGoalActiveContrastSubtle) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textGoalDisabled by mutableStateOf(textColors.textGoalDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textGoalOverline by mutableStateOf(textColors.textGoalOverline) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textHint by mutableStateOf(textColors.textHint) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textInputDefault by mutableStateOf(textColors.textInputDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textInputDisabled by mutableStateOf(textColors.textInputDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textInputPlaceholder by mutableStateOf(textColors.textInputPlaceholder) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLabel by mutableStateOf(textColors.textLabel) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLight by mutableStateOf(textColors.textLight) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLightSecondary by mutableStateOf(textColors.textLightSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLightTertiary by mutableStateOf(textColors.textLightTertiary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLinkDefault by mutableStateOf(textColors.textLinkDefault) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLinkDisabled by mutableStateOf(textColors.textLinkDisabled) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textLinkPressed by mutableStateOf(textColors.textLinkPressed) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textOptionDescriptionSelected by mutableStateOf(textColors.textOptionDescriptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textOptionDescriptionUnselected by mutableStateOf(textColors.textOptionDescriptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textOptionSelected by mutableStateOf(textColors.textOptionSelected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textOptionUnselected by mutableStateOf(textColors.textOptionUnselected) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textPointsEarned by mutableStateOf(textColors.textPointsEarned) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textPrimary by mutableStateOf(textColors.textPrimary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisColors$var textSecondary by mutableStateOf(textColors.textSecondary) private set</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisCriticalColors$val criticalBackgroundSecondary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisCriticalColors$val criticalBackgroundSubdued: Color = Color(0xFFF9DEE3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisCriticalColors$val criticalBorderDefault: Color = Color(0xFFBA1B3B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisCriticalColors$val criticalIcon: Color = Color(0xFFBA1B3B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandPrimaryBright: Color = Color(0xFFB9A4ED)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandPrimaryBrightest: Color = Color(0xFFDCD2F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandPrimaryDark: Color = Color(0xFF3E16A3)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandPrimaryDarkest: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandPrimaryDefault: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandPrimaryPastel: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandSecondaryBright: Color = Color(0xFFE8F8F5)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandSecondaryBrightest: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandSecondaryDark: Color = Color(0xFF15846D)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandSecondaryDarkest: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandSecondaryDefault: Color = Color(0xFF01C3A2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisDecorativeColors$val decorativeBrandSecondaryPastel: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillDisabled: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillGoalActiveContrast: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillIndicator: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillLight: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillMultiProgressBarPrimary: Color = Color(0xFFF1A1B1)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillMultiProgressBarQuaternary: Color = Color(0xFF39C5C2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillMultiProgressBarQuinary: Color = Color(0xFF2E5CDF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillMultiProgressBarSecondary: Color = Color(0xFF01C3A2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillMultiProgressBarSenary: Color = Color(0xFFE5CF73)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillMultiProgressBarTertiary: Color = Color(0xFFFD9833)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillNeutralDark: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillNeutralLight: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillPrimary: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillProgressBarPrimary: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillProgressBarSecondary: Color = Color(0xFFB9A4ED)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillQuaternary: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillSecondary: Color = Color(0xFF00A886)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisFillColors$val fillTertiary: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisHighlightColors$val highlightBackgroundSecondary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisHighlightColors$val highlightBackgroundSubdued: Color = Color(0xFFEAEEFB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisHighlightColors$val highlightBorderDefault: Color = Color(0xFF2E5CDF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisHighlightColors$val highlightIcon: Color = Color(0xFF2E5CDF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveActionDisable: Color = Color(0xFFD6D6D6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveActionHovered: Color = Color(0xFF37209A)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveActionPressed: Color = Color(0xFF251669)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveActionPrimary: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveActionSubdued: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveBackgroundDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveBackgroundDisable: Color = Color(0xFFF0F0F0)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveBorderCriticalDefault: Color = Color(0xFFBA1B3B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveBorderDefault: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveBorderDisable: Color = Color(0xFFD6D6D6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveBorderHovered: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveFocus: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveIconDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisInteractiveColors$val interactiveIconDisable: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceBorderDefault: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceBorderSubdued: Color = Color(0xFFF0F0F0)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceIconPrimary: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceTextCritical: Color = Color(0xFFBA1B3B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceTextPrimary: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceTextReversed: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceTextSubdued: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisOnSurfaceColors$val onSurfaceTextSuccess: Color = Color(0xFF00805A)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryBackgroundCriticalDefault: Color = Color(0xFFBA1B3B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryBackgroundCriticalHovered: Color = Color(0xFFA51834)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryBackgroundCriticalPressed: Color = Color(0xFF711124)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryBackgroundDefault: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryBackgroundHovered: Color = Color(0xFF37209A)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryBackgroundPressed: Color = Color(0xFF251669)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryTextCriticalDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisPrimaryColors$val primaryTextDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryBackgroundCriticalDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryBackgroundDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryBackgroundHovered: Color = Color(0xFF37209A)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryBackgroundPressed: Color = Color(0xFF251669)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryBorderDefault: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryTextDefault: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSecondaryColors$val secondaryTextHovered: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSuccessColors$val successBackgroundSecondary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSuccessColors$val successBackgroundSubdued: Color = Color(0xFFE5F6F1)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSuccessColors$val successBorderDefault: Color = Color(0xFF00A876)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSuccessColors$val successIcon: Color = Color(0xFF00A876)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceBackgroundPrimary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceBackgroundSecondary: Color = Color(0xFFF8F8F8)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceBackgroundTertiary: Color = Color(0xFFEAEEFB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceCardDisable: Color = Color(0xFFD7D7D7)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceCardPrimary: Color = Color(0xFFF8F7F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceCardSecondary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisSurfaceColors$val surfaceCardTertiary: Color = Color(0xFF333333)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTertiaryColors$val tertiaryBackgroundDefault: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTertiaryColors$val tertiaryBackgroundHovered: Color = Color(0xFF37209A)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTertiaryColors$val tertiaryBackgroundPressed: Color = Color(0xFF251669)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTertiaryColors$val tertiaryBorderDefault: Color = Color(0xFF949494)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTertiaryColors$val tertiaryTextDefault: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTertiaryColors$val tertiaryTextHovered: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textActionBarButton: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonCircularSelected: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonCircularUnselected: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonDanger: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonDisabled: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonPill: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonPrimary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonSecondary: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonSubtle: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textButtonSubtleSecondary: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textCardCaption: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textCardDescription: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textChoiceDefault: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textChoiceDisabled: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textDanger: Color = Color(0xFFDA2045)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textDark: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textGoalActiveContrast: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textGoalActiveContrastSubtle: Color = Color(0xFFB9A4ED)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textGoalDisabled: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textGoalOverline: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textHint: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textInputDefault: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textInputDisabled: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textInputPlaceholder: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLabel: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLight: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLightSecondary: Color = Color(0xFFEDE8FA)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLightTertiary: Color = Color(0xFFB9A4ED)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLinkDefault: Color = Color(0xFF501CD2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLinkDisabled: Color = Color(0xFFF8F7F6)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textLinkPressed: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textOptionDescriptionSelected: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textOptionDescriptionUnselected: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textOptionSelected: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textOptionUnselected: Color = Color(0xFF767676)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textPointsEarned: Color = Color(0xFF01C3A2)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textPrimary: Color = Color(0xFF250D53)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisTextColors$val textSecondary: Color = Color(0xFF66686B)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisWarningColors$val warningBackgroundSecondary: Color = Color(0xFFFFFFFF)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisWarningColors$val warningBackgroundSubdued: Color = Color(0xFFFFE4BB)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisWarningColors$val warningBorderDefault: Color = Color(0xFFFD9833)</ID>
    <ID>UndocumentedPublicProperty:GenesisColors.kt$GenesisWarningColors$val warningIcon: Color = Color(0xFFFD9833)</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.Companion$const val PROGRESS_TEXT_TYPE_NONE = 3</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.Companion$const val PROGRESS_TEXT_TYPE_PERCENTAGE = 1</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.Companion$const val PROGRESS_TEXT_TYPE_UNITS = 2</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.ProgressConfig$@ProgressTextType val progressTextType: Int = PROGRESS_TEXT_TYPE_UNITS</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.ProgressConfig$@StringRes val unitResId: Int? = null</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.ProgressConfig$val progress: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.ProgressConfig$val total: Int</ID>
    <ID>UndocumentedPublicProperty:GenesisProgressBar.kt$GenesisProgressBar.ProgressConfig$val unitsString: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val button: RoundedCornerShape = smallRoundedCorner</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val extraLargeRoundedCorner: RoundedCornerShape = RoundedCornerShape(extraLargeSize)</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val extraLargeSize: Dp = 12.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val hugeRoundedCorner: RoundedCornerShape = RoundedCornerShape(hugeSize)</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val hugeSize: Dp = 20.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val inputField: RoundedCornerShape = smallRoundedCorner</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val largeRoundedCorner: RoundedCornerShape = RoundedCornerShape(largeSize)</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val largeSize: Dp = 9.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val mediumRoundedCorner: RoundedCornerShape = RoundedCornerShape(mediumSize)</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val mediumSize: Dp = 6.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val pillRoundedCorner: RoundedCornerShape = RoundedCornerShape(pillSize)</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val pillSize: Int = 50</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val smallRoundedCorner: RoundedCornerShape = RoundedCornerShape(smallSize)</ID>
    <ID>UndocumentedPublicProperty:GenesisShapes.kt$GenesisShapes$val smallSize: Dp = 3.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val five: Dp = 80.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val four: Dp = 64.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val half: Dp = 8.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val none: Dp = 0.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val one: Dp = 16.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val oneAndHalf: Dp = 24.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val quarter: Dp = 4.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val three: Dp = 48.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val threeQuarters: Dp = 12.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val two: Dp = 32.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisSpacing.kt$GenesisSpacing$val twoAndHalf: Dp = 40.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisStaticDropdown.kt$GenesisStaticDropdownContent$val helperBottomText: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenesisStaticDropdown.kt$GenesisStaticDropdownContent$val placeholderText: String</ID>
    <ID>UndocumentedPublicProperty:GenesisStaticDropdown.kt$GenesisStaticDropdownContent$val questionTooltip: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenesisStaticDropdown.kt$GenesisStaticDropdownContent$val titleText: String</ID>
    <ID>UndocumentedPublicProperty:GenesisStaticDropdown.kt$GenesisStaticDropdownContent$val value: String = ""</ID>
    <ID>UndocumentedPublicProperty:GenesisStrokes.kt$GenesisStrokes$val thickBorder: Dp = 2.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisStrokes.kt$GenesisStrokes$val thinBorder: Dp = 1.dp</ID>
    <ID>UndocumentedPublicProperty:GenesisTagHandler.kt$GenesisTagHandler.Companion$const val LI_TAG = "listitem"</ID>
    <ID>UndocumentedPublicProperty:GenesisTagHandler.kt$GenesisTagHandler.Companion$const val OL_TAG = "ordered"</ID>
    <ID>UndocumentedPublicProperty:GenesisTagHandler.kt$GenesisTagHandler.Companion$const val UL_TAG = "unordered"</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val backgroundColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val cursorColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledBackgroundColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledBorderColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledLabelColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledLeadingIconColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledPlaceholderColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledTextColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val disabledTrailingIconColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val errorBorderColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val errorCursorColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val errorLabelColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val errorLeadingIconColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val errorTrailingIconColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val focusedBorderColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val focusedLabelColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val leadingIconColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val placeholderColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val textColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val trailingIconColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val unfocusedBorderColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTextField.kt$GenesisTextFieldColors$val unfocusedLabelColor: Color</ID>
    <ID>UndocumentedPublicProperty:GenesisTheme.kt$GenesisTheme$val colors: GenesisColors @Composable get() = LocalGenesisColors.current</ID>
    <ID>UndocumentedPublicProperty:GenesisTheme.kt$GenesisTheme$val shapes: GenesisShapes @Composable get() = LocalGenesisShapes.current</ID>
    <ID>UndocumentedPublicProperty:GenesisTheme.kt$GenesisTheme$val spacing: GenesisSpacing @Composable get() = LocalGenesisSpacing.current</ID>
    <ID>UndocumentedPublicProperty:GenesisTheme.kt$GenesisTheme$val strokes: GenesisStrokes @Composable get() = LocalGenesisStrokes.current</ID>
    <ID>UndocumentedPublicProperty:GenesisTheme.kt$GenesisTheme$val typography: GenesisTypography @Composable get() = LocalGenesisTypography.current</ID>
    <ID>UndocumentedPublicProperty:GenesisTheme.kt$ThemeProvider.Companion$var themes: List&lt;Theme> = listOf(createDefaultTheme())</ID>
    <ID>UndocumentedPublicProperty:GenesisToolbar.kt$GenesisToolbar$@ColorRes var titleFontColor: Int? = null set(value) { field = value binding?.let { bind -> field?.let { colorRes -> bind.title.setTextColor(ContextCompat.getColor(context, colorRes)) } ?: run { bind.title.setTextColor(accentColor) } } }</ID>
    <ID>UndocumentedPublicProperty:GenesisToolbar.kt$GenesisToolbar$@Suppress("DEPRECATION") @StyleRes var titleFontStyle: Int = context.getStyleFromAttr(R.attr.typography_subtitle2) set(value) { field = value binding?.let { it.title.setTextAppearance(it.root.context, field) } }</ID>
    <ID>UndocumentedPublicProperty:GenesisToolbar.kt$GenesisToolbar.BarButton$val action: () -> Unit</ID>
    <ID>UndocumentedPublicProperty:GenesisToolbar.kt$GenesisToolbar.BarButton$val contentDescription: String? = null</ID>
    <ID>UndocumentedPublicProperty:GenesisToolbar.kt$GenesisToolbar.BarButton$val icon: Drawable? = null</ID>
    <ID>UndocumentedPublicProperty:GenesisToolbar.kt$GenesisToolbar.BarButton$val title: CharSequence</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val body1: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val body2: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val button1: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val button2: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val caption: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val h1: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val h2: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val h3: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val h4: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val label: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val overline: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val subtitle1: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val subtitle2: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GenesisTypography.kt$GenesisTypography$val tab: TextStyle</ID>
    <ID>UndocumentedPublicProperty:GeoCode.kt$GeoCode$val latitude: String</ID>
    <ID>UndocumentedPublicProperty:GeoCode.kt$GeoCode$val longitude: String</ID>
    <ID>UndocumentedPublicProperty:GlobalPaymentsViewModel.kt$GlobalPaymentsConstants$const val GP_USER_ERROR = "GP_USER_ERROR"</ID>
    <ID>UndocumentedPublicProperty:Goal.kt$Goal$@Json(name = "goal_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Goal.kt$Goal$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:Goal.kt$Goal$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:GoalDetails.kt$GoalDetails.State$@AttrRes val headerBackgroundColor: Int</ID>
    <ID>UndocumentedPublicProperty:GoalDetails.kt$GoalDetails.State$@AttrRes val headerTextColor: Int</ID>
    <ID>UndocumentedPublicProperty:GoalDetails.kt$GoalDetails.State$val pointIndicatorState: PointsIndicator.Status</ID>
    <ID>UndocumentedPublicProperty:GraphData.kt$GraphData$@Json(name = "chart_config") val chartConfig: ChartConfig = ChartConfig()</ID>
    <ID>UndocumentedPublicProperty:GraphData.kt$GraphData$@Json(name = "user_reading") val userReading: UserReading</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Group$@Json(name = "country_code") val countryCode: String = ""</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Group$val helpCenterUrl: String = links.firstOrNull { it.type == "help_center" }?.url ?: ""</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Group$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Group$val links: List&lt;Link> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Group$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Link$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:Group.kt$Link$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val DESCRIPTION_STYLE_BODY1 = 0</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val DESCRIPTION_STYLE_BODY2 = 1</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val DESCRIPTION_STYLE_CAPTION = 2</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val HEADER_STYLE_H1 = 0</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val HEADER_STYLE_H2 = 1</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val HEADER_STYLE_H3 = 2</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val HEADER_STYLE_H4 = 3</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val HEADER_STYLE_OVERLINE = 5</ID>
    <ID>UndocumentedPublicProperty:Header.kt$Header.Companion$const val HEADER_STYLE_SUBTITLE1 = 4</ID>
    <ID>UndocumentedPublicProperty:HeaderController.kt$HeaderController$var avatarLoading: Boolean = false set(value) { field = value if (value) { Handler(Looper.getMainLooper()).postDelayed({ this.avatarLoading = false }, 3000) } this.requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HeaderController.kt$HeaderController$var pageStatus = StatusPageHeader.Status.GRAY</ID>
    <ID>UndocumentedPublicProperty:HeaderController.kt$HeaderController.Companion$const val description = R.string.description_lorum</ID>
    <ID>UndocumentedPublicProperty:HealthActivities.kt$HealthActivities$@Json(name = "activity_status_counts") val activityStatusCounts: StatusCounts? = null</ID>
    <ID>UndocumentedPublicProperty:HealthActivities.kt$HealthActivities$@Json(name = "user_health_activities") val activities: List&lt;HealthJourneyItem> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:HealthActivitiesCategory.kt$HealthActivitiesCategory$val activities: List&lt;HealthJourneyItem></ID>
    <ID>UndocumentedPublicProperty:HealthActivitiesCategory.kt$HealthActivitiesCategory$val header: HealthActivitiesCategoryHeader</ID>
    <ID>UndocumentedPublicProperty:HealthActivitiesCategory.kt$HealthActivitiesCategoryHeader$@StringRes val descriptionResId: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthActivitiesCategory.kt$HealthActivitiesCategoryHeader$@StringRes val titleResId: Int</ID>
    <ID>UndocumentedPublicProperty:HealthActivitiesCategory.kt$HealthActivitiesCategoryHeader$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthFeatureFlags.kt$HealthFeatureFlags$val digitalPharmacy = FeatureFlag.BooleanFeatureFlag( id = "rel_hp_digital_pharmacy", name = "Digital Pharmacy", description = "Digital Pharmacy", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthFeatureFlags.kt$HealthFeatureFlags$val healthSolutionCategorySample = FeatureFlag.BooleanFeatureFlag( id = "health_solution_category_sample", name = "Health Solution Category Sample", description = "Shows a sample health solution category on the home screen", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthFeatureFlags.kt$HealthFeatureFlags$val wellnessStations = FeatureFlag.BooleanFeatureFlag( id = "rel_hp_wellnessStations", name = "Wellness Stations", description = "Enable Wellness Station", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthJourney.kt$HealthJourney$@JvmStatic val healthJourneyRepository: HealthJourneyRepository get() = configuration.koinApplication.koin.get()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyAchievementsRepository.kt$HealthJourneyAchievementsRepository$// Points earned by user upon completing an activity var rewardPoints: Int get() = sharedPreferencesDataSource.getInt(KEY_ACTIVITY_REWARD_POINTS, 0) set(value) = sharedPreferencesDataSource.putInt(KEY_ACTIVITY_REWARD_POINTS, value)</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyAchievementsRepository.kt$HealthJourneyAchievementsRepository$val context: Context</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyAchievementsRepository.kt$HealthJourneyAchievementsRepository$val sessionUtils: SessionUtils</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val exitActivityConfirmation: Int = R.drawable.health_journey_il_exit_activity</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyConnectDevice: Int = R.drawable.ic_connect_device</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyCurrentDayEmptyActivitiesAvailable: Int = R.drawable.health_journey_il_add_action_yellow</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyCurrentDayEmptyNoActions: Int = R.drawable.health_journey_il_man_resting</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyCurrentDayEmptyProgramsAvailable: Int = R.drawable.health_journey_il_add_action_blurple</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyDayCompleteCelebration: Int = R.drawable.il_high_five</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyEmptyItems: Int = R.drawable.il_health_journey_empty</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyFutureDayEmpty: Int = R.drawable.health_journey_il_add_action_blurple</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyHighFive: Int = R.drawable.ic_high_five</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyItemComplete: Int = R.drawable.il_high_five</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyItemRemoved: Int = R.drawable.il_trash_can</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyPastDayEmpty: Int = R.drawable.health_journey_il_man_resting</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthJourneyPreview: Int = R.drawable.il_league_view_future_activities</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthProgramsEnrollmentAvailable: Int = R.drawable.il_health_journey_add_programs</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthProgramsEnrollmentLimit: Int = R.drawable.il_health_journey_program_limit</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyDrawables$@DrawableRes val healthProgramsNotEnrolled: Int = R.drawable.il_health_journey_programs_progress_empty</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyConfiguration.kt$HealthJourneyStrings$@StringRes val pointsSystemError: Int = R.string.healthjourney_points_system_error</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyDay.kt$HealthJourneyDay$val activeCampaigns: List&lt;CampaignInfo>? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyDay.kt$HealthJourneyDay$val items: HealthJourneyItemsResponse</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyDay.kt$HealthJourneyDay$val upcomingCampaigns: List&lt;CampaignInfo>? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyDayPagerFragmentArgs.kt$HealthJourneyDayPagerFragmentArgs$public val isEntryPoint: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$val activityCompletionVerification = FeatureFlag.BooleanFeatureFlag( id = "rel_health_journey_activity_completion_verification", name = "Health Journey Activity Completion Verification", description = "Adds in the checks for verifying activity completion", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$val journeyChallengesFeature = FeatureFlag.BooleanFeatureFlag( id = "rel_mht_journeyChallengesFeature", name = "Journey Challenges Feature", description = "Enable journey challenges feature", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$val multiStepActivityFeatureFlag = FeatureFlag.BooleanFeatureFlag( id = "rel_mht_manualMultiStepActivities", // TODO Should we prepend np_ ? name = "Health Journey Multi-Step Activity Feature Flag", description = "Enables the ability to show multi-step activities", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$val verifiableActivityProgress = FeatureFlag.BooleanFeatureFlag( id = "rel_mht_verifiableActivityProgress", name = "Verifiable Activity Progress", description = "Show verifiable activity progress. To be deleted once this feature is ready to be released to all users.", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$val wearableCloudPhaseTwo = FeatureFlag.BooleanFeatureFlag( id = "rel_wb_cloud_phase_two", name = "Wearable Cloud Phase2 Enabled", description = "Enable cloud devices phase 2 features", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFeatureFlags.kt$HealthJourneyFeatureFlags$val wearableProgramManualFlow = FeatureFlag.BooleanFeatureFlag( id = "rel_mht_wearableProgramManualFlow", name = "Health Journey Wearable program manual flow", description = "Enables manual flow for Wearable programs", defaultValue = true )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs$public val healthJourneyEntryPoint: String = "health_journey"</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyFragmentArgs.kt$HealthJourneyFragmentArgs$public val tabIndex: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo$@Json(name = "campaign_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo$@Json(name = "campaign_type") val campaignType: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo$@Json(name = "name") val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo$@Json(name = "start_date") val startDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo.CampaignStatus$val text: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$CampaignInfo.CampaignType$val text: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "activity_points") val activityPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "activity_verification_progress") val activityVerificationProgress: HealthJourneyItemDetail.ActivityVerificationProgress? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "activity_xp") val activityXp: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "campaign_info") val campaignInfo: CampaignInfo? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "can_expire") val canExpire: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "card_tagline") val cardTagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "completed_date") val completeDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "completion_counter") val completionCounter: Counter? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "end_date") val endDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "front_of_the_line_activity") val isFotlActivity: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "points_earned") val pointsEarned: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "sort_order") val sortOrder: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "start_date") val startDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$@Json(name = "xp_earned") val xpEarned: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val suggested: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val tagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItem.kt$HealthJourneyItem.Status$val text: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs$public val healthJourneyItem: HealthJourneyItem?</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompleteBottomSheetDialogArgs.kt$HealthJourneyItemCompleteBottomSheetDialogArgs$public val healthJourneyItemComplete: HealthJourneyItemCompletionScreen</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionResponse$@Json(name = "completion_screen") val completionScreen: HealthJourneyItemCompletionScreen = HealthJourneyItemCompletionScreen()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$@Json(name = "activity_reward_points") val rewardPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$@Json(name = "description_one") val descriptionOne: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$@Json(name = "description_two") val descriptionTwo: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$@Json(name = "eyebrow_headline") val eyebrowHeadline: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$@Json(name = "rewards_message") val rewardsMessage: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$val image: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionScreen.kt$HealthJourneyItemCompletionScreen$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs$public val activityId: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs$public val activityName: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs.kt$HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialogArgs$public val activityType: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ActivityBanner$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ActivityBanner$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ActivityBanner$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$CTA$@Json(name = "completion_method") val completionMethod: CompletionMethod = CompletionMethod.Unsupported</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$CTA$@Json(name = "is_external") val isExternal: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$CTA$@Json(name = "mark_as_complete") val markAsComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$CTA$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$CTA$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ContentType$val sys: Sys? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$CustomFields$@Json(name = "campaign_mode") val campaignMode: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Fields$val file: File? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Fields$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$File$@Json(name = "details") val detail: FileDetail? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$File$@Json(name = "fileName") val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$File$@Json(name = "upload") val uploadURL: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$File$@Json(name = "url") val path: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$File$val contentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$File$val url: String get() = "${if (path.startsWith("https:")) "" else "https:"}$path"</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$FileDetail$val image: FileImage? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$FileDetail$val size: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$FileImage$val height: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$FileImage$val width: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "activity_points") val activityPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "activity_verification_progress") val activityVerificationProgress: ActivityVerificationProgress? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "activity_xp") val activityXp: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "campaign_info") val campaignInfo: CampaignInfo? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "can_expire") val canExpire: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "card_tagline") val cardTagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "complete_date") val completeDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "completion_disabled_timer_ms") val completionDisabledTimerMs: Long? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "completion_message") val completionMessage: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "cta") val cta: CTA = CTA()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "custom_fields") val customFields: CustomFields? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "disclaimer_banner") val disclaimerBanner: ActivityBanner? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "end_date") val endDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "goal_id") val goalId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "helpful_tips") val helpfulTips: List&lt;HelpfulTip> = listOf()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "information_banner") val informationBanner: ActivityBanner? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "points_earned") val pointsEarned: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "rich_text_description") val richTextDescription: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "start_date") val startDate: Date = Date(0)</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "suggestion_banner") val suggestionBanner: ActivityBanner? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$@Json(name = "xp_earned") val xpEarned: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val helpfulTipsComplete: Boolean get() = helpfulTips.all { helpfulTipComplete(it) }</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val isComplete: Boolean get() = status == Status.COMPLETED.text</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val needsVerifying: Boolean get() = cta.completionMethod !is CompletionMethod.MultiStep</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val references: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val suggested: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val tagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail.ActivityVerificationProgress$@Json(name = "helpful_tips_completed_status") var helpfulTipsCompletedStatus: Map&lt;String, Boolean>? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail.ActivityVerificationProgressResponse$@Json(name = "activity_verification_progress") val activityVerificationProgress: ActivityVerificationProgress</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail.Companion$const val MODULE_ACTIVITY = "healthJourney_moduleActivity"</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail.Companion$const val VERIFIABLE_ACTIVITY = "healthJourney_verifiableActivity"</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$HealthJourneyItemDetail.Status$val text: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ImageAsset$val fields: Fields = Fields()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ImageAsset$val file: File? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$ImageAsset$val sys: Sys = Sys()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Space$val sys: Sys? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$@Json(name = "id") val iD: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val contentType: ContentType? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val createdAt: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val linkType: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val revision: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val space: Space? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetail.kt$Sys$val updatedAt: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetailResponse.kt$HealthJourneyChallengeItemDetailResponse$@Json(name = "info") val info: Info = Info()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetailResponse.kt$HealthJourneyChallengeItemDetailResponse.Info$@Json(name = "health_activity") val healthJourneyItemDetail: HealthJourneyItemDetail = HealthJourneyItemDetail()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetailResponse.kt$HealthJourneyItemDetailResponse$@Json(name = "health_activity") val healthJourneyItemDetail: HealthJourneyItemDetail = HealthJourneyItemDetail()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetailResponse.kt$HealthJourneyItemDetailResponse$@Json(name = "message_id") val messageId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetailResponse.kt$HealthJourneyItemDetailResponse$@Json(name = "message_type") val messageType: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemDetailResponse.kt$HealthJourneyItemDetailResponse$@Json(name = "redirect_link") val redirectLink: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs$public val activityId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs$public val campaignId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs$public val campaignType: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemFragmentArgs.kt$HealthJourneyItemFragmentArgs$public val healthJourneyItemId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$@Json(name = "max_programs_limit") val maximumNumberOfPrograms: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$@Json(name = "number_of_enrolled_programs") val numberOfEnrolledPrograms: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$@Json(name = "suggested_activities_available") val suggestedActivitiesAvailable: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsResponse.kt$HealthJourneyItemsResponse$@Json(name = "user_health_activities") val items: List&lt;HealthJourneyItem> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$HealthJourneyItemsSection$@StringRes val headerStringRes: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$HealthJourneyItemsSection$val campaignInfo: CampaignInfo? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$HealthJourneyItemsSection$val header: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$HealthJourneyItemsSection$val items: List&lt;HealthJourneyItem></ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$UpcomingChallengeSection$val header: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$UpcomingChallengeSection$val id: String</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyItemsSection.kt$UpcomingChallengeSection$val startDate: Date</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyModule.kt$HealthJourneyModule$val modules = arrayOf( HealthJourneyRepositoryModule.module, HealthJourneyAPIModule.module, HealthJourneyServices.module, HealthJourneyUseCaseModule.module )</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyRemovalConfirmationBottomSheetDialogArgs.kt$HealthJourneyRemovalConfirmationBottomSheetDialogArgs$public val healthJourneyItem: HealthJourneyItem? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyRemovalConfirmationBottomSheetDialogArgs.kt$HealthJourneyRemovalConfirmationBottomSheetDialogArgs$public val healthProgram: HealthProgramDetails? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyRemovalSuccessBottomSheetDialogArgs.kt$HealthJourneyRemovalSuccessBottomSheetDialogArgs$public val healthJourneyItem: HealthJourneyItem? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneyRemovalSuccessBottomSheetDialogArgs.kt$HealthJourneyRemovalSuccessBottomSheetDialogArgs$public val healthProgram: HealthProgramDetails? = null</ID>
    <ID>UndocumentedPublicProperty:HealthJourneySettings.kt$HealthJourneySettings$var internalBaseUrl: String = "https://app.internal.league.com"</ID>
    <ID>UndocumentedPublicProperty:HealthJourneySettings.kt$HealthJourneySettings$var pointsSystem: PointsSystem = PointsSystem.League</ID>
    <ID>UndocumentedPublicProperty:HealthJourneySuggestedActivityGroupFragmentArgs.kt$HealthJourneySuggestedActivityGroupFragmentArgs$public val group: SuggestedActivityGroup</ID>
    <ID>UndocumentedPublicProperty:HealthJourneySuggestedItemsGroupResponse.kt$HealthJourneySuggestedItemsGroupResponse$@Json(name = "suggested_activity_group") val suggestedActivityGroup: SuggestedActivityGroup</ID>
    <ID>UndocumentedPublicProperty:HealthJourneySuggestedItemsGroupResponse.kt$HealthJourneySuggestedItemsGroupResponse$@Json(name = "user_health_activities") val items: List&lt;HealthJourneyItem> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthModule.kt$HealthModule$val modules = arrayOf( HealthRepositoryModule.module, HealthUseCaseModule.module, HealthViewModelModule.module )</ID>
    <ID>UndocumentedPublicProperty:HealthNeedController.kt$HealthNeedController$@AttrRes var colorAttrRes: Int = R.attr.color_background_page_swoop_primary</ID>
    <ID>UndocumentedPublicProperty:HealthNeedController.kt$HealthNeedController$val listener: Listener</ID>
    <ID>UndocumentedPublicProperty:HealthNeedController.kt$HealthNeedController$var healthNeed: HealthNeed? = null</ID>
    <ID>UndocumentedPublicProperty:HealthNeedController.kt$HealthNeedController$var textViewCollapsed = true</ID>
    <ID>UndocumentedPublicProperty:HealthNeedFragment.kt$HealthNeedFragment.Companion$const val EXTRA_COLOR_ATTR_RESOURCE_ID = "color_attr_resource_id"</ID>
    <ID>UndocumentedPublicProperty:HealthNeedFragment.kt$HealthNeedFragment.Companion$const val EXTRA_HEALTH_URL_SLUG = "health_need_url_slug"</ID>
    <ID>UndocumentedPublicProperty:HealthNeedFragment.kt$HealthNeedFragment.Companion$const val TAG = "HealthNeedFragment"</ID>
    <ID>UndocumentedPublicProperty:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs$public val colorResourceId: Int = -1</ID>
    <ID>UndocumentedPublicProperty:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs$public val healthCategoryUrlSlug: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthNeedFragmentArgs.kt$HealthNeedFragmentArgs$public val healthNeedUrlSlug: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthNeedViewModel.kt$HealthNeedViewModel$val healthNeed: LiveData&lt;State&lt;HealthNeed>> get() = _healthNeed</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Button$@Json(name = "icon_id") val iconId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Button$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$DimensionsOfHealth$val subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$DimensionsOfHealth$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$DimensionsOfHealth$val topics: List&lt;Topic> = listOf()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "action_title") val actionTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "action_url") val actionUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "completion_points") val completionPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "content_two") val contentTwo: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "learn_more_title") val learnMoreTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "learn_more_url") val learnMoreUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$@Json(name = "sub_title") val subTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$val caption: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$val content: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$EmptyState$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Feedback$@Json(name = "feedback_url") val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$@Json(name = "health_concierge_nudge") val healthConciergeNudge: SpeechBubbleBanner? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$@Json(name = "url_slug") val urlSlug: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$val rank: Int = Int.MAX_VALUE</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$val recommendations: List&lt;HealthNeedRecommendation> = listOf()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeed$val topics: List&lt;Topic> = listOf()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val cta: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val image: Image = Image()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val link: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val tagline: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation.Companion$const val BENEFIT_TYPE = "benefit"</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation.Companion$const val HEALTH_PROGRAM_TYPE = "health_program"</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedRecommendation.Companion$const val MARKETPLACE_TYPE = "marketplace_service"</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedSummary$@Json(name = "health_needs") val healthNeeds: MutableList&lt;HealthNeed> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedSummary$@Json(name = "hero_image_id") val heroImageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedSummary$val content: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthNeedSummary$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "content_provider") val contentProvider: Modal? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "dimensions_of_health") val dimensionsOfHealth: DimensionsOfHealth? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "disclaimer_modal") val disclaimerModal: Modal? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "empty_state") val emptyState: EmptyState? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "health_concierge_nudge") val healthConciergeNudge: SpeechBubbleBanner? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "health_need_summary") val healthNeedSummary: HealthNeedSummary? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "last_updated_date") val LastUpdatedDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$@Json(name = "module_id") val moduleId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$val content: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$val disclaimer: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$val feedback: Feedback? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthProfile$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthSolutionCategory$@Json(name = "url_slug") val urlSlug: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthSolutionCategory$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthSolutionCategory$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthSolutionCategory$val resources: List&lt;HealthNeedRecommendation> = listOf()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$HealthSolutionCategory$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Info$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Info$val content: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Info$val heading: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Modal$val button: Button = Button()</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Modal$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProfile.kt$Modal$val info: Info = Info()</ID>
    <ID>UndocumentedPublicProperty:HealthProfileController.kt$HealthProfileController$var healthProfile: HealthProfile? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HealthProfileController.kt$HealthProfileController$var user: User? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HealthProfileController.kt$HealthProfileController.Companion$val SIDE_MARGIN = R.attr.spacing_one_and_half</ID>
    <ID>UndocumentedPublicProperty:HealthProfileFragment.kt$HealthProfileFragment$lateinit var binding: FragmentHealthProfileBinding</ID>
    <ID>UndocumentedPublicProperty:HealthProfileFragment.kt$HealthProfileFragment$lateinit var controller: HealthProfileController</ID>
    <ID>UndocumentedPublicProperty:HealthProfileFragment.kt$HealthProfileFragment$val analyticsTracker: AnalyticsTracker by inject()</ID>
    <ID>UndocumentedPublicProperty:HealthProfileResponse.kt$HealthProfileResponse$@Json(name = "health_profile") val healthProfile: HealthProfile</ID>
    <ID>UndocumentedPublicProperty:HealthProfileTable.kt$HealthProfileTable$val healthProfile: HealthProfile</ID>
    <ID>UndocumentedPublicProperty:HealthProfileViewModel.kt$HealthProfileViewModel$val healthProfile: LiveData&lt;State&lt;HealthProfile>> get() = mutableHealthProfile</ID>
    <ID>UndocumentedPublicProperty:HealthProfileViewModel.kt$HealthProfileViewModel$val user: LiveData&lt;State&lt;User>> get() = mutableUser</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$ChallengeInfo$@Json(name = "end_date") val endDate: String</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$ChallengeInfo$@Json(name = "end_enroll") val endEnroll: String</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$ChallengeInfo$@Json(name = "start_date") val startDate: String</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$ChallengeInfo.Companion$const val serialVersionUID = 1L</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "activity_status_counts") val activityStatusCounts: StatusCounts? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "available_points") val availablePoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "campaign_type") val campaignType: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "challenge_info") val challengeInfo: ChallengeInfo? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "completed_activity_progress_percentage") val completedActivityProgressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "image_url") val imageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "missed_activity_progress_percentage") val missedActivityProgressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "program_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "progress_percentage") val progressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "remaining_days") val remainingDays: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "total_activities_count") val totalActivitiesCount: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$@Json(name = "total_days") val totalDays: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgram.kt$HealthProgram.CampaignType$val text: String</ID>
    <ID>UndocumentedPublicProperty:HealthProgramCategoryFragmentArgs.kt$HealthProgramCategoryFragmentArgs$public val categoryId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramCategoryFragmentArgs.kt$HealthProgramCategoryFragmentArgs$public val healthProgramsCarousel: HealthProgramsCarousel? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "achievement_image_url") val achievementImage: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "activity_status_counts") val activityStatusCounts: StatusCounts? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "available_points") val availablePoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "campaign_content_config") val campaignContentConfig: CampaignContentConfig? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "completed_activity_progress_percentage") val completedActivityProgressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "content_provider_modal") val contentProviderModal: Modal? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "image_url") val imageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "long_description") val longDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "missed_activity_progress_percentage") val missedActivityProgressPercentage: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "program_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "progress_percentage") val progressPercentage: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "remaining_days") val remainingDays: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "total_activities_count") val totalActivitiesCount: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "total_days") val totalDays: Int = 0</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$@Json(name = "user_program_id") val userProgramId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$val goals: List&lt;Goal> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails.Companion$const val ACTIVE = "active"</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails.Companion$const val AVAILABLE = "available"</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetails.kt$HealthProgramDetails.Companion$const val UNAVAILABLE = "unavailable"</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetailsFragmentArgs.kt$HealthProgramDetailsFragmentArgs$public val programId: String</ID>
    <ID>UndocumentedPublicProperty:HealthProgramDetailsResponse.kt$HealthProgramDetailsResponse$@Json(name = "program") val healthProgram: HealthProgramDetails = HealthProgramDetails()</ID>
    <ID>UndocumentedPublicProperty:HealthProgramStart.kt$HealthProgramStart$@Json(name = "content_for_users_state") val contentForUsersState: FullScreenContent? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$@Json(name = "activities_status_counts") val activitiesStatusCounts: StatusCounts? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$@Json(name = "number_of_available_programs") val numberOfAvailablePrograms: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$@Json(name = "program_limit_modal") val programLimitModal: ProgramEnrollmentLimitModal? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$@Json(name = "total_activities_count") val totalActivitiesCount: Int? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val description: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val disclaimer: Modal? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val numOfAvailablePrograms: Int get() = numberOfAvailablePrograms ?: 0</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val programEnrollmentLimit: Int get() = (numberOfAvailablePrograms ?: 0) + programs.size</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val programs: List&lt;HealthProgram> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthPrograms.kt$HealthPrograms$val subheading: String? = null</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCarousel.kt$HealthProgramsCarousel$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCarousel.kt$HealthProgramsCarousel$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCarousel.kt$HealthProgramsCarousel$val programs: List&lt;HealthProgram> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCarousel.kt$HealthProgramsCarousel$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCarousels.kt$HealthProgramsCarousels$val carousels: List&lt;HealthProgramsCarousel> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCategories.kt$HealthProgramsCategories$val categories: List&lt;HealthProgramsCategory> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCategories.kt$HealthProgramsCategories$val subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCategories.kt$HealthProgramsCategories$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCategory.kt$HealthProgramsCategory$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCategory.kt$HealthProgramsCategory$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsCategory.kt$HealthProgramsCategory$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsLimitMessageDialogArgs.kt$HealthProgramsLimitMessageDialogArgs$public val programEnrollmentLimitModal: ProgramEnrollmentLimitModal</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsProgressInfo.kt$HealthProgramsProgressFooter$val content: @Composable (NavController) -> Unit</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsProgressInfo.kt$HealthProgramsProgressHeader$val content: @Composable () -> Unit</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsSections.kt$HealthProgramsSection$@StringRes val headerStringRes: Int</ID>
    <ID>UndocumentedPublicProperty:HealthProgramsSections.kt$HealthProgramsSection$val programs: List&lt;HealthProgram></ID>
    <ID>UndocumentedPublicProperty:HealthRepositoryModule.kt$HealthRepositoryModule$// no repo for now , cause i moved it val module = module { single&lt;OutcomesRepository> { OutcomesRepositoryImpl(api = get()) } }</ID>
    <ID>UndocumentedPublicProperty:HealthSettings.kt$HealthSettings$// this flag is true only for Fusion app var useFragmentRouting = false</ID>
    <ID>UndocumentedPublicProperty:HealthSettings.kt$HealthSettings$// this flag is used to specify if the health profile assessment returns points var earnPointsFromProfileBuilder = true</ID>
    <ID>UndocumentedPublicProperty:HealthSettings.kt$HealthSettings$var digitalPharmacyEnabled = false</ID>
    <ID>UndocumentedPublicProperty:HealthSettings.kt$HealthSettings$var healthProfileShowBackNav = true</ID>
    <ID>UndocumentedPublicProperty:HealthSettings.kt$HealthSettings$var healthProfileShowSettings = false</ID>
    <ID>UndocumentedPublicProperty:HealthSettings.kt$HealthSettings$var wellnessStationEnabled = false</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionCategoryController.kt$HealthSolutionCategoryController$@AttrRes var colorAttrRes: Int = R.attr.color_background_page_swoop_primary set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionCategoryController.kt$HealthSolutionCategoryController$val listener: Listener</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionCategoryController.kt$HealthSolutionCategoryController$var healthSolutionCategory: HealthSolutionCategory? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionCategoryViewModel.kt$HealthSolutionCategoryViewModel$val errorMessage: SingleLiveEvent&lt;String> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionCategoryViewModel.kt$HealthSolutionCategoryViewModel$val healthSolutionCategory: LiveData&lt;HealthSolutionCategory> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs$public val colorResourceId: Int = -1</ID>
    <ID>UndocumentedPublicProperty:HealthSolutionFragmentArgs.kt$HealthSolutionFragmentArgs$public val healthSolutionCategoryUrlSlug: String = ""</ID>
    <ID>UndocumentedPublicProperty:HealthUseCaseModule.kt$HealthUseCaseModule$val module = module { single { OutcomeSuggestionsUseCase(outcomesRepository = get()) } }</ID>
    <ID>UndocumentedPublicProperty:HealthViewModelModule.kt$HealthViewModelModule$val module = module { viewModel { DailyScreenerResultsViewModel(api = get()) } viewModel { HealthSolutionCategoryViewModel(api = get()) } viewModel { BuilderDailyScreenerDataSharingViewModel(api = get()) } viewModel { AssessmentViewModel(api = get(), repo = get()) } viewModel { AssessmentQuestionsViewModel(repo = get(), analyticsTracker = get()) } viewModel { HealthNeedViewModel(api = get()) } viewModel { HealthProfileViewModel(repo = get(), userRepository = get()) } viewModel { AssessmentExitViewModel(repo = get()) } viewModel { OutcomesSuggestionsViewModel(outcomesSuggestionsUseCase = get()) } }</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$@Json(name = "contentful_image_asset") val contentfulImageAsset: ImageAsset = ImageAsset()</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$@Json(name = "image_content_id") var imageContentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$@Json(name = "image_url") var imageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$val assetUrl: String? = contentfulImageAsset.fields.file?.url?.takeUnless { it.isEmpty() } ?: imageUrl.takeUnless { it.isEmpty() }</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$val id: String</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$var type: String = ""</ID>
    <ID>UndocumentedPublicProperty:HelpfulTip.kt$HelpfulTip$var url: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$@PrimaryKey var id: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$val isImportant: Boolean get() = bannerType == "important"</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$val isUrgent: Boolean get() = bannerType == "urgent"</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var action: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var actionParams: Map&lt;String, String> = mapOf()</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var bannerType: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var buttonText: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var color: Int = Color.WHITE</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var imageContentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var isImageBackground: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var isInvalid = false</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBanner.kt$HomeBanner$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:HomeBannerTable.kt$HomeBannerTable$@PrimaryKey var id: String = banner.id</ID>
    <ID>UndocumentedPublicProperty:HomeBannerTable.kt$HomeBannerTable$val banner: HomeBanner</ID>
    <ID>UndocumentedPublicProperty:HomeController.kt$HomeController$var healthActivitiesCategories: List&lt;HealthActivitiesCategory>? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HomeController.kt$HomeController$var healthJourneyItemsSections: List&lt;HealthJourneyItemsSection>? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HomeController.kt$HomeController$var showCovid19Flow: Boolean? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:HomeController.kt$HomeController.Companion$const val RECOMMENDATION_LIST_ID = "recommended_lifemarket_items"</ID>
    <ID>UndocumentedPublicProperty:HomeLayout.kt$HomeLayout$@Json(name = "config") var layoutItems: MutableList&lt;HomeLayoutItem> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:HomeLayoutData.kt$HomeLayoutData$val homeLayout = HomeLayout(json)</ID>
    <ID>UndocumentedPublicProperty:HomeLayoutItem.kt$HomeLayoutItem$// merchant list &amp; health at work only var listId: String? = null</ID>
    <ID>UndocumentedPublicProperty:HomeLayoutItem.kt$HomeLayoutItem$lateinit var type: Type</ID>
    <ID>UndocumentedPublicProperty:HomeLayoutItem.kt$HomeLayoutItem.Companion$const val HEALTH_AT_WORK_LIST_ID = "health_at_work"</ID>
    <ID>UndocumentedPublicProperty:HomeNotification.kt$HomeNotification$val allUnreadNotifications: ArrayList&lt;Notification> = ArrayList()</ID>
    <ID>UndocumentedPublicProperty:HomeNotification.kt$HomeNotification$val mostRecentUnreadNotification: Notification? get() = if (allUnreadNotifications.isEmpty()) null else allUnreadNotifications[0]</ID>
    <ID>UndocumentedPublicProperty:HomeNotification.kt$HomeNotification$val numUnread: Int get() = allUnreadNotifications.size</ID>
    <ID>UndocumentedPublicProperty:HomeNotificationData.kt$HomeNotificationData$var homeNotification: HomeNotification</ID>
    <ID>UndocumentedPublicProperty:HomeSection.kt$HomeSection$val type: Int</ID>
    <ID>UndocumentedPublicProperty:HomeSectionType.kt$HomeSectionType$const val ARTICLE_LIST = 5</ID>
    <ID>UndocumentedPublicProperty:HomeSectionType.kt$HomeSectionType$const val INTERSTITIAL = 2</ID>
    <ID>UndocumentedPublicProperty:HomeSectionType.kt$HomeSectionType$const val NOTIFICATION = 1</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val articleListData: LiveData&lt;State&lt;ArticleList>> get() = _articleListData</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val dailyScreenerTabConfig: LiveData&lt;State&lt;DailyScreenerTabConfig?>> get() = _dailyScreenerTabConfig</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val healthActivitiesCategories: LiveData&lt;State&lt;List&lt;HealthActivitiesCategory>>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val healthActivitiesCategories: LiveData&lt;State&lt;List&lt;HealthActivitiesCategory>>> get() = _healthActivitiesCategories</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val healthActivitiesRevampSections: LiveData&lt;State&lt;List&lt;HealthJourneyItemsSection>>> get() = _healthActivitiesRevampSections</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val healthGoalPoints: LiveData&lt;State&lt;Int?>> get() = _healthGoalPoints</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val homeBanner: LiveData&lt;State&lt;HomeBanner>> get() = _homeBanner</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val homeLayout: LiveData&lt;HomeLayout?> get() = _homeLayout</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val homeNotificationData: LiveData&lt;State&lt;HomeNotification>> get() = _homeNotificationData</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val householdPoints: LiveData&lt;State&lt;HouseholdPoints>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val isPcoPointsEligible: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val lifemarketMerchList: LiveData&lt;State&lt;LifemarketMerchList>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val lifemarketMerchList: LiveData&lt;State&lt;LifemarketMerchList>> get() = _lifemarketMerchList</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val lifemarketUrl: LiveData&lt;State&lt;String?>> get() = _lifemarketUrl</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val name: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val name: LiveData&lt;String> get() = _name</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val sampleJsonApi: SampleJsonApi</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val shouldShowCovid19Flow: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$val userRepository: UserRepository</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$var appointment by mutableStateOf&lt;State&lt;TestAppointment>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel$var user by mutableStateOf&lt;State&lt;User>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel.DailyScreenerTabConfig$val deepLink: String</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel.DailyScreenerTabConfig$val description: String?</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel.DailyScreenerTabConfig$val imageRes: Int</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel.DailyScreenerTabConfig$val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel.DailyScreenerTabConfig$val moduleType: String</ID>
    <ID>UndocumentedPublicProperty:HomeViewModel.kt$HomeViewModel.DailyScreenerTabConfig$val subtitleText: String</ID>
    <ID>UndocumentedPublicProperty:HorizontalProgressBar.kt$HorizontalProgressBar$// TODO: Hard-coded colors, not from generic theme. var backgroundColor: Color by mutableStateOf(Color(0xFFF1F0EF))</ID>
    <ID>UndocumentedPublicProperty:HorizontalProgressBar.kt$HorizontalProgressBar$var animationDuration by mutableStateOf(0)</ID>
    <ID>UndocumentedPublicProperty:HorizontalProgressBar.kt$HorizontalProgressBar$var percentage by mutableStateOf(0F)</ID>
    <ID>UndocumentedPublicProperty:HorizontalProgressBar.kt$HorizontalProgressBar$var progressColor: Color by mutableStateOf(Color(0xFF01C3A2))</ID>
    <ID>UndocumentedPublicProperty:HorizontalProgressBar.kt$HorizontalProgressBar$var roundedCornerShape by mutableStateOf(RoundedCornerShape(9.dp))</ID>
    <ID>UndocumentedPublicProperty:HouseholdPoints.kt$HouseholdPoints$val balance: Int</ID>
    <ID>UndocumentedPublicProperty:HouseholdPoints.kt$HouseholdPoints$val dollarsRedeemable: Int</ID>
    <ID>UndocumentedPublicProperty:HouseholdPoints.kt$HouseholdPoints$val dollarsRedeemedLifetime: Int</ID>
    <ID>UndocumentedPublicProperty:HouseholdPointsTable.kt$HouseholdPointsTable$val householdPoints: HouseholdPoints</ID>
    <ID>UndocumentedPublicProperty:IconFooter.kt$IconFooter$val binding = WidgetIconFooterBinding.inflate(layoutInflator, this, true)</ID>
    <ID>UndocumentedPublicProperty:IconResponse.kt$IconResponse$@Json(name = "compressed_url") val compressedUrl: String</ID>
    <ID>UndocumentedPublicProperty:IconResponse.kt$IconResponse$@Json(name = "regular_url") val regularUrl: String</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val identifier: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val identityType: String = "PCHEALTH"</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val memberId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val nickname: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val permissions: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$Identity$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:Identity.kt$IdentityList$val identites: List&lt;Identity> = listOf()</ID>
    <ID>UndocumentedPublicProperty:IdentityTable.kt$IdentityTable$@PrimaryKey var id: String = identity.id</ID>
    <ID>UndocumentedPublicProperty:IdentityTable.kt$IdentityTable$val identity: Identity</ID>
    <ID>UndocumentedPublicProperty:Image.kt$Image$@Json(name = "content_id") val contentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Image.kt$Image$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:ImageSource.kt$ImageSource.BitmapSource$val image: Bitmap</ID>
    <ID>UndocumentedPublicProperty:ImageSource.kt$ImageSource.ByteArraySource$val bytes: ByteArray</ID>
    <ID>UndocumentedPublicProperty:ImageSource.kt$ImageSource.ContentServerSource$val contentId: String</ID>
    <ID>UndocumentedPublicProperty:ImageSource.kt$ImageSource.DrawableSource$val drawable: Drawable</ID>
    <ID>UndocumentedPublicProperty:ImageSource.kt$ImageSource.UrlSource$val url: String</ID>
    <ID>UndocumentedPublicProperty:ImageViewerActivity.kt$ImageViewerActivity.Companion$const val EXTRA_CONTENT_ID = "content_id"</ID>
    <ID>UndocumentedPublicProperty:ImageViewerActivity.kt$ImageViewerActivity.Companion$const val EXTRA_FILE_PATH = "file_path"</ID>
    <ID>UndocumentedPublicProperty:ImageViewerActivity.kt$ImageViewerActivity.Companion$const val EXTRA_URL = "url"</ID>
    <ID>UndocumentedPublicProperty:ImportReadingViewModel.kt$ImportReadingViewModel$val addedReadings: LiveData&lt;State&lt;QRCodeAddedReading>> = mutableAddedReadings</ID>
    <ID>UndocumentedPublicProperty:ImportedUserReading.kt$ImportedUserReading$val code: String = ""</ID>
    <ID>UndocumentedPublicProperty:ImportedUserReading.kt$ImportedUserReading$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:ImportedUserReading.kt$ImportedUserReading$val readings: List&lt;AddedReading> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:ImportedUserReading.kt$ImportedUserReading$val source: String = ""</ID>
    <ID>UndocumentedPublicProperty:ImportedUserReading.kt$ImportedUserReading$val unit: ValueUnit?</ID>
    <ID>UndocumentedPublicProperty:Info.kt$Info$@Json(name = "contentful_image_asset") val imageAsset: ImageAsset = ImageAsset()</ID>
    <ID>UndocumentedPublicProperty:Info.kt$Info$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:Info.kt$Info$val content: String = ""</ID>
    <ID>UndocumentedPublicProperty:Info.kt$Info$val heading: String = ""</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$@Json(name = "answer_caption") val answerCaption: String = ""</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$@Json(name = "default_unit") val defaultUnit: InputUnit? = null</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$@Json(name = "placeholder_test") val placeholderText: String = ""</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$@Json(name = "unit_options") val unitOptions: List&lt;InputUnit> = listOf()</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$@Json(name = "value_unit_type") var valueUnitType: String? = null</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$val id: String</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$val type: Type</ID>
    <ID>UndocumentedPublicProperty:InputAnswer.kt$InputAnswer$var value: Any? = null</ID>
    <ID>UndocumentedPublicProperty:InputFilterMinMax.kt$InputFilterMinMax$val max: Int</ID>
    <ID>UndocumentedPublicProperty:InputFilterMinMax.kt$InputFilterMinMax$val min: Int</ID>
    <ID>UndocumentedPublicProperty:InputUnit.kt$InputUnit$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:InputUnit.kt$InputUnit$val type: String</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$@Json(name = "icon_id") val iconId: String = ""</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$@Json(name = "last_updated") val lastUpdated: Date? = null</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$@Transient val hasInsight: Boolean = value != "-" &amp;&amp; description != null</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$val code: String = ""</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$val description: String? = null</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$val source: String = ""</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$val unit: ValueUnit? = null</ID>
    <ID>UndocumentedPublicProperty:InsightCard.kt$InsightCard$val value: String? = null</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ChildReadingViewEffect.DiscardReadings$val navigateToIndex: Int</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$Insight$val code: String</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ParentReadingsViewEffect.NavigateToTab$val tab: Int</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ParentReadingsViewEffect.ShowWarningDialog$val backButtonPressed: Boolean</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ReadingsTab$val index: Int</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ReadingsViewEvent.ChangeTab$val tab: Int</ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ReadingsViewEvent.DeleteReadings$val readings: List&lt;Reading></ID>
    <ID>UndocumentedPublicProperty:InsightContract.kt$ReadingsViewEvent.DiscardEditingChanges$val tab: ReadingsTab</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsFragmentArgs.kt$InsightDetailsFragmentArgs$public val insight: InsightCard</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$// use this to communicate between parent to child val viewEffectChildGraph: SingleLiveEvent&lt;ChildReadingViewEffect> = mutableViewEffectChildGraph</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$// use this to communicate between parent to child val viewEffectChildReading: SingleLiveEvent&lt;ChildReadingViewEffect> = mutableViewEffectChildReading</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$val graphData: LiveData&lt;State&lt;GraphData>> = mutableGraphData</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$val removeReadings: SingleLiveEvent&lt;State&lt;DeletedReadingResponse>> = mutableRemoveReadings</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$val viewEffectParent: SingleLiveEvent&lt;ParentReadingsViewEffect> = mutableViewEffectParent</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$var editingEnabled = false</ID>
    <ID>UndocumentedPublicProperty:InsightDetailsViewModel.kt$InsightDetailsViewModel$var readingsToDelete: List&lt;ReadingsToBeDeleted> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:IntroScreen.kt$IntroScreen$@Json(name = "description") val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:IntroScreen.kt$IntroScreen$@Json(name = "time_to_complete_text") val timeToCompleteText: String = ""</ID>
    <ID>UndocumentedPublicProperty:IntroScreen.kt$IntroScreen$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:JobBindingProperty.kt$FragmentJobBindingProperty.JobLifecycleObserver$val lifecycle: Lifecycle.State</ID>
    <ID>UndocumentedPublicProperty:JsonApi.kt$JsonApi$val version: String = "1.0"</ID>
    <ID>UndocumentedPublicProperty:JsonApi.kt$JsonApiData$val data: T</ID>
    <ID>UndocumentedPublicProperty:JsonApi.kt$JsonApiResponse$val data: T</ID>
    <ID>UndocumentedPublicProperty:JsonApiAdapterExceptions.kt$InvalidDataModelException$val dataModel: Any</ID>
    <ID>UndocumentedPublicProperty:JsonApiAdapterExceptions.kt$InvalidJsonApiException$val json: String</ID>
    <ID>UndocumentedPublicProperty:JsonApiAttributes.kt$JsonApiObject$val type: String</ID>
    <ID>UndocumentedPublicProperty:JsonApiAttributes.kt$JsonApiRelationship$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:JsonApiError.kt$JsonApiError$val code: String = ""</ID>
    <ID>UndocumentedPublicProperty:JsonApiError.kt$JsonApiError$val detail: String = ""</ID>
    <ID>UndocumentedPublicProperty:JsonApiError.kt$JsonApiError$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:JsonApiError.kt$JsonApiError$val status: Int = 0</ID>
    <ID>UndocumentedPublicProperty:JsonApiError.kt$JsonApiError$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:JsonApiLinks.kt$JsonApiLinks$val first: JsonApiLink? = null</ID>
    <ID>UndocumentedPublicProperty:JsonApiLinks.kt$JsonApiLinks$val last: JsonApiLink? = null</ID>
    <ID>UndocumentedPublicProperty:JsonApiLinks.kt$JsonApiLinks$val next: JsonApiLink? = null</ID>
    <ID>UndocumentedPublicProperty:JsonApiLinks.kt$JsonApiLinks$val prev: JsonApiLink? = null</ID>
    <ID>UndocumentedPublicProperty:JsonApiLinks.kt$JsonApiLinks$val self: JsonApiLink? = null</ID>
    <ID>UndocumentedPublicProperty:LandingViewModel.kt$LandingViewModel$val userInfo = fakeUserInfoUseCase().map { userInfo -> when (userInfo) { is Success -> Loaded(data = userInfo.response) is Failure -> Failed(userInfo.errorResponse) } }.stateIn( viewModelScope, SharingStarted.WhileSubscribed(), Loading() )</ID>
    <ID>UndocumentedPublicProperty:LanguagePref.kt$LanguagePref$@StringRes val name: Int</ID>
    <ID>UndocumentedPublicProperty:LanguagePref.kt$LanguagePref$val type: String</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val api: API</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val authenticator: Auth0Authenticator</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val authenticator: TokenSdkAuthenticator</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val backgroundDispatcher: CoroutineDispatcher = Dispatchers.IO</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val buildInfoUtils: BuildInfoUtils</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val environmentUtils: EnvironmentUtils</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val privacyLockUtils: PrivacyLockUtils</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$val userRepository: UserRepository</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$var canUseBiometrics by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$var clearSessionState = SingleLiveEvent&lt;Boolean>()</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$var currentEnvironmentName by mutableStateOf("")</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$var isLoading by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$var isLoggedIn by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:LaunchViewModel.kt$LaunchViewModel$var loginSucceeded = SingleLiveEvent&lt;State&lt;Boolean>>()</ID>
    <ID>UndocumentedPublicProperty:LeagueBalanceResponse.kt$LeagueBalanceResponse$@Json(name = "can_redeem") val canRedeem: Boolean</ID>
    <ID>UndocumentedPublicProperty:LeagueBalanceResponse.kt$LeagueBalanceResponse$@Json(name = "league_credit") val leagueCredit: Money</ID>
    <ID>UndocumentedPublicProperty:LeagueBalanceResponse.kt$LeagueBalanceResponse$@Json(name = "league_points") val leaguePoints: Long</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessage.kt$LeagueChatMessage$var imagePath: String? = null</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessage.kt$LeagueChatMessage$var message: String = ""</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessage.kt$LeagueChatMessage$var senderId: String? = null</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessage.kt$LeagueChatMessage$var senderName: String? = null</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessage.kt$LeagueChatMessage$var timestamp: Long = System.currentTimeMillis()</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessage.kt$LeagueChatMessage$var type = if (senderId == null &amp;&amp; senderName == null &amp;&amp; message.isBlank() &amp;&amp; imagePath.isNullOrEmpty()) { // if there is no message, the agent is typing TYPE_AGENT_TYPING } else if (senderId == null &amp;&amp; senderName == null &amp;&amp; imagePath.isNullOrEmpty()) { // System messages dont have sender Id or name, just messages TYPE_SYSTEM } else if (senderId != null &amp;&amp; senderName != null &amp;&amp; imagePath.isNullOrEmpty()) { // Only agent messages have a sender id and name TYPE_AGENT } else { // only user have imagePath TYPE_USER }</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessageTable.kt$LeagueChatMessageTable$@PrimaryKey var timestamp: Long = leagueChatMessage.timestamp</ID>
    <ID>UndocumentedPublicProperty:LeagueChatMessageTable.kt$LeagueChatMessageTable$val leagueChatMessage: LeagueChatMessage = LeagueChatMessage()</ID>
    <ID>UndocumentedPublicProperty:LeagueColorActivity.kt$LeagueColorActivity$val colorGroups: List&lt;ColorController.ColorGroup> get() = listOf( ColorController.ColorGroup( getString(R.string.brand), listOf( R.color.league_blurple_darker, R.color.league_blurple_dark, R.color.league_blurple, R.color.league_blurple_light, R.color.league_blurple_lighter, R.color.league_blurple_lightest, R.color.league_teal_dark, R.color.league_teal, R.color.league_teal_light ) ), ColorController.ColorGroup( getString(R.string.neutral), listOf( R.color.league_gray_dark, R.color.league_gray, R.color.league_gray_light, R.color.league_gray_lighter, R.color.league_gray_lightest ) ), ColorController.ColorGroup( getString(R.string.functional), listOf( R.color.league_blue_functional, R.color.league_blue_light_functional, R.color.league_red_functional, R.color.league_red_light_functional, R.color.league_green_functional, R.color.league_green_light_functional ) ), ColorController.ColorGroup( getString(R.string.status), listOf( R.color.league_mustard_light_status, R.color.league_mustard_status, R.color.league_orange_light_status, R.color.league_orange_status, R.color.league_red_light_status, R.color.league_red_status, R.color.league_rose_light_status, R.color.league_rose_status, R.color.league_green_light_status, R.color.league_green_status, R.color.league_turquoise_light_status, R.color.league_turquoise_status ) ) )</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val analyticsTracker: AnalyticsTracker</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val api: API</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val applicationContext: Context</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val authenticator: TokenSdkAuthenticator</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val buildInfoUtils: BuildInfoUtils</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val contentAPI: ContentAPI</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val coreNavigation: CoreNavigation</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val environmentUtils: EnvironmentUtils</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val featureFlagsRepository: FeatureFlagsRepository</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val httpClient: OkHttpClient</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val imageLoader: ImageLoader</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val jsonAdapter: JsonAdapter</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val privacyLockUtils: PrivacyLockUtils</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val sessionUtils: SessionUtils</ID>
    <ID>UndocumentedPublicProperty:LeagueCommonServices.kt$LeagueCommonServices$val userRepository: UserRepository</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$// TODO: fix the dependancy graph for the user repository lateinit var userRepository: UserRepository</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val analyticsTracker: AnalyticsTracker</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val api: API</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val contentAPI: ContentAPI</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val deepLinker: DeepLinker</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val environmentUtils: EnvironmentUtils</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val featureFlagsRepository: FeatureFlagsRepository</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation$val repo: Repository</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation.Companion$const val CARE_NAVIGATOR_CHAT_TYPE = "care-navigator"</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation.Companion$const val CUSTOMER_CARE_CHAT_TYPE = "customer-care"</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation.Companion$const val HEALTH_CONCIERGE_CHAT_TYPE = "health-concierge"</ID>
    <ID>UndocumentedPublicProperty:LeagueNavigation.kt$LeagueNavigation.Companion$const val TAG = "LeagueNavigation"</ID>
    <ID>UndocumentedPublicProperty:LeagueRestAPIAuthenticator.kt$LeagueRestAPIAuthenticator$val authenticationHeaderNames: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:LeagueRestAPIAuthenticator.kt$LeagueRestAPIAuthenticator$val signOutListeners: MutableSet&lt;(Boolean) -> Unit></ID>
    <ID>UndocumentedPublicProperty:LeagueRestAPIEnvironmentProvider.kt$LeagueRestAPIEnvironmentProvider$val environmentChangedListeners: MutableSet&lt;() -> Unit></ID>
    <ID>UndocumentedPublicProperty:LeagueRestAPIEnvironmentProvider.kt$LeagueRestAPIEnvironmentProvider$val restEndpoint: String</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$// Used for intents launched to get images. const val REQUEST_WEB_FLOW = 3</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val EXTRA_DOCUMENT_ID = "document_id"</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_ACCOUNT = 6</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_ADD_CLAIM_DOCUMENT = 7</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_ADD_CLAIM_NOTE = 8</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_AUTHENTICATE_USER = 12</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_CREDIT_CARD = 4</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_EDIT_CLAIM_DOCUMENT = 11</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_FILE_CHOOSER = 15</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_LOCATION_PERMISSION = 13</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_LOCATION_SERVICES = 10</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_PICKTIME = 5</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_PICK_LOCATION = 9</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val REQUEST_QLE = 14</ID>
    <ID>UndocumentedPublicProperty:LeagueRootActivity.kt$LeagueRootActivity.Companion$const val RESULT_OPEN_CHAT = 100</ID>
    <ID>UndocumentedPublicProperty:LeagueShapes.kt$val leagueShapes = GenesisShapes()</ID>
    <ID>UndocumentedPublicProperty:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$val canAuthenticateWithBiometrics: Boolean</ID>
    <ID>UndocumentedPublicProperty:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$val isLoggedIn: Boolean</ID>
    <ID>UndocumentedPublicProperty:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$val userId: String?</ID>
    <ID>UndocumentedPublicProperty:LeagueSocketAPIAuthenticator.kt$LeagueSocketAPIAuthenticator$var pushNotificationToken: String?</ID>
    <ID>UndocumentedPublicProperty:LeagueSocketAPIEnvironmentProvider.kt$LeagueSocketAPIEnvironmentProvider$val environmentChangedListeners: MutableSet&lt;() -> Unit></ID>
    <ID>UndocumentedPublicProperty:LeagueSocketAPIEnvironmentProvider.kt$LeagueSocketAPIEnvironmentProvider$val socketEndpoint: String</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Body 1", group = "League") val body1_league = TextStyle( fontFamily = LeagueType, fontSize = 16.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Body 2", group = "League") val body2_league = TextStyle( fontFamily = LeagueType, fontSize = 14.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Button 1", group = "League") val button1_league = TextStyle( fontFamily = LeagueType, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Button 2", group = "League") val button2_league = TextStyle( fontFamily = LeagueType, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Caption", group = "League") val caption_league = TextStyle( fontFamily = LeagueType, fontSize = 12.sp, fontWeight = FontWeight.W400, lineHeight = 20.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "H1", group = "League") val h1_league = TextStyle( fontFamily = LeagueType, fontSize = 32.sp, fontWeight = FontWeight.W700, lineHeight = 40.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "H2", group = "League") val h2_league = TextStyle( fontFamily = LeagueType, fontSize = 24.sp, fontWeight = FontWeight.W700, lineHeight = 32.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "H3", group = "League") val h3_league = TextStyle( fontFamily = LeagueType, fontSize = 20.sp, fontWeight = FontWeight.W700, lineHeight = 28.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "H4", group = "League") val h4_league = TextStyle( fontFamily = LeagueType, fontSize = 16.sp, fontWeight = FontWeight.W700, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Label", group = "League") val label_league = TextStyle( fontFamily = LeagueType, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Overline", group = "League") val overline_league = TextStyle( fontFamily = LeagueType, fontSize = 12.sp, fontWeight = FontWeight.W700, lineHeight = 20.sp, )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Subtitle 1", group = "League") val subtitle1_league = TextStyle( fontFamily = LeagueType, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Subtitle 2", group = "League") val subtitle2_league = TextStyle( fontFamily = LeagueType, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:LeagueTypography.kt$@ShowkaseTypography(name = "Tab", group = "League") val tab_league = TextStyle( fontFamily = LeagueType, fontSize = 10.sp, fontWeight = FontWeight.W400, lineHeight = 20.sp, )</ID>
    <ID>UndocumentedPublicProperty:LeaveChallengeConfirmationBottomSheetDialogArgs.kt$LeaveChallengeConfirmationBottomSheetDialogArgs$public val userChallengeId: String</ID>
    <ID>UndocumentedPublicProperty:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs$public val activityId: String</ID>
    <ID>UndocumentedPublicProperty:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs$public val activityName: String</ID>
    <ID>UndocumentedPublicProperty:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs$public val activityType: String</ID>
    <ID>UndocumentedPublicProperty:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs$public val currentStep: Int</ID>
    <ID>UndocumentedPublicProperty:LeaveHealthJourneyActivityConfirmationFragmentArgs.kt$LeaveHealthJourneyActivityConfirmationFragmentArgs$public val totalSteps: Int</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$val jsonAdapter: life.league.networking.json.JsonAdapter</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$val privacyLockUtils: PrivacyLockUtils</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator$var deviceToken: String? get() = sharedPrefs.getString( LegacyLeagueAuthenticator::deviceToken.name, defaultValue = null, useCache = true, shouldDecrypt = true ) private set(value) { sharedPrefs.putString( LegacyLeagueAuthenticator::deviceToken.name, value, useCache = true, shouldEncrypt = true ) }</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator.Companion$const val DEVICE_TOKEN_HEADER_NAME = "x-league-devicetoken"</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator.Companion$const val SESSION_ID_HEADER_NAME = "x-league-sessionid"</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator.LegacyBiometricAuthInfo$val deviceToken: String?</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator.LegacyBiometricAuthInfo$val sessionId: String?</ID>
    <ID>UndocumentedPublicProperty:LegacyLeagueAuthenticator.kt$LegacyLeagueAuthenticator.LegacyBiometricAuthInfo$val userId: String?</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$@Json(name = "shopify_collection_id") val shopifyCollectionId: String = ""</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$val items: List&lt;ShopifyProduct> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$val published: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$val sortOrder: Int = 0</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchList.kt$LifemarketMerchList$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchListTable.kt$LifemarketMerchListTable$@PrimaryKey var id: String = lifemarketMerchList.id</ID>
    <ID>UndocumentedPublicProperty:LifemarketMerchListTable.kt$LifemarketMerchListTable$val lifemarketMerchList: LifemarketMerchList</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val CIRCLE_RADIUS = 5f</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val DASHED_LINE_INTERVAL = 5f</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val DASHED_LINE_LENGTH = 10f</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val INTERVAL_HEIGHT = 48</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val LEGEND_LINE_WIDTH = 2f</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val LEGEND_SIZE = 20f</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.Companion$const val LINE_WIDTH = 2f</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.EntryData$val session: Session</ID>
    <ID>UndocumentedPublicProperty:LineChartView.kt$LineChartView.EntryData$val unit: ValueUnit</ID>
    <ID>UndocumentedPublicProperty:LineConfig.kt$LineConfig$@Json(name = "line_type") val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:LineConfig.kt$LineConfig$val code: String = ""</ID>
    <ID>UndocumentedPublicProperty:LineConfig.kt$LineConfig$val color: String = ""</ID>
    <ID>UndocumentedPublicProperty:LineConfig.kt$LineConfig$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:LineConfig.kt$LineConfig.Companion$const val DASHED = "dashed"</ID>
    <ID>UndocumentedPublicProperty:LineValues.kt$LineValues$val diastolic: Int = -1</ID>
    <ID>UndocumentedPublicProperty:LineValues.kt$LineValues$val systolic: Int = -1</ID>
    <ID>UndocumentedPublicProperty:LinkAnnotation.kt$LinkAnnotation$val name: String</ID>
    <ID>UndocumentedPublicProperty:LinkAnnotation.kt$LinkAnnotation$val url: String</ID>
    <ID>UndocumentedPublicProperty:LinkedAccountsFragment.kt$LinkedAccountsFragment.Companion$const val MAPLE_ACCOUNT_NAME = "maple"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity$val agentType: String by lazy { intent.getStringExtra(EXTRA_AGENT_TYPE) ?: "" }</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity$val agentTypeDescription: String by lazy { intent.getStringExtra(EXTRA_AGENT_TYPE_DESCRIPTION) ?: "" }</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity$var chatAgentConfig: ChatAgentConfig? = null</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity$var covidQuestionDetail: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity$var isCovidChat: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_AGENT_TYPE = "agent_type"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_AGENT_TYPE_DESCRIPTION = "agent_description"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_CHAT_AGENT_CONFIG = "chat_agent_config"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_COVID_DETAIL = "covid_detail"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_COVID_QUESTION = "covid_question"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_GROUP_NAME = "group_name"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatActivity.kt$LiveAgentChatActivity.Companion$const val EXTRA_TYPEFORM_URL = "typeform_url"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatFragment.kt$LiveAgentChatFragment$val args: LiveAgentChatFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatFragment.kt$LiveAgentChatFragment.Companion$const val EXTRA_TYPEFORM_URL = "typeform_url"</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatFragmentArgs.kt$LiveAgentChatFragmentArgs$public val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$val imagePreview: Flow&lt;File?> = repo.imagePreview</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$val input = Input()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatViewModel.kt$LiveAgentChatViewModel$val messages: Flow&lt;List&lt;LeagueChatMessage>> = combine( repo.cachedMessagesFlow, input.showAgentIsTyping, input.showUploadingMessage ) { messages, showTyping, showUploading -> messages + if (showTyping) listOf(agentTypingMessage) else emptyList&lt;LeagueChatMessage>() + if (showUploading) listOf(uploadingMessage) else emptyList&lt;LeagueChatMessage>() }</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatViewModel.kt$LiveAgentChatViewModel.Input$val showAgentIsTyping: StateFlow&lt;Boolean> = MutableStateFlow(false)</ID>
    <ID>UndocumentedPublicProperty:LiveAgentChatViewModel.kt$LiveAgentChatViewModel.Input$val showUploadingMessage: StateFlow&lt;Boolean> = MutableStateFlow(false)</ID>
    <ID>UndocumentedPublicProperty:LiveAgentLoadingFragment.kt$LiveAgentLoadingFragment$val args: LiveAgentLoadingFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs$public val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs$public val agentTypeDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs$public val chatAgentConfig: ChatAgentConfig? = null</ID>
    <ID>UndocumentedPublicProperty:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs$public val covidDetail: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveAgentLoadingFragmentArgs.kt$LiveAgentLoadingFragmentArgs$public val isCovidChat: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentLoadingState.Queued$val position: Int?</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentLoadingState.Queued$val waitTime: Int?</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$val liveAgentChatClient: CareChatClient</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$val loadingState: Flow&lt;LiveAgentLoadingState> get() = liveAgentChatClient.chatStateFlow .map { when (it) { ChatState.Connected -> LiveAgentLoadingState.Connected is ChatState.Ended -> LiveAgentLoadingState.Connected ChatState.Inactive -> LiveAgentLoadingState.Queued(null, null) is ChatState.Queued -> LiveAgentLoadingState.Queued( position = it.position, waitTime = it.waitTime ) } }</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$var errorMessageToLog: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$var isAgentOffline: LiveData&lt;List&lt;ChatAvailability>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$var isAgentUnavailable: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$var messages: LiveData&lt;MutableList&lt;LeagueChatMessage>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:LiveAgentViewModel.kt$LiveAgentViewModel$var typeformUrl: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalanceBeneficiaries$val family: LivesBalancesTiers?</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalanceBeneficiaries$val individual: LivesBalancesTiers?</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalanceTier$val amount: String</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalanceTier$val amountRemaining: String</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalanceTier$val amountSpent: String</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalanceTier$val title: String</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalancesData$val beneficiaries: LiveBalanceBeneficiaries</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LiveBalancesData$val type: String</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LivesBalancesTiers$val deductible: LiveBalanceTier?</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesData.kt$LivesBalancesTiers$val outOfPocketMax: LiveBalanceTier?</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalanceNetworkData$var familyDeductible: LiveBalanceSpendType = LiveBalanceSpendType()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalanceNetworkData$var familyOutOfPocket: LiveBalanceSpendType = LiveBalanceSpendType()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalanceNetworkData$var individualDeductible: LiveBalanceSpendType = LiveBalanceSpendType()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalanceNetworkData$var individualOutOfPocket: LiveBalanceSpendType = LiveBalanceSpendType()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalanceNetworkData$var networkLabel: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalancesViewData$val inNetworkData: LiveBalanceNetworkData = LiveBalanceNetworkData()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalancesViewData$val lastUpdated: Date = Date()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalancesViewData$val networkTypes: LiveBalanceDataNetworkTypes = LiveBalanceDataNetworkTypes.EMPTY_NETWORKS</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalancesViewData$val outOfNetworkData: LiveBalanceNetworkData = LiveBalanceNetworkData()</ID>
    <ID>UndocumentedPublicProperty:LiveBalancesViewData.kt$LiveBalancesViewData$val provider: String = ""</ID>
    <ID>UndocumentedPublicProperty:LiveChatBannerViewModel.kt$LiveChatBannerViewModel$val sessionEndedByAgent: SingleLiveEvent&lt;Boolean> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:LiveChatBannerViewModel.kt$LiveChatBannerViewModel$val showChatBanner: Flow&lt;Boolean> = chatClient.chatStateFlow .map { featureFlagsRepository.getValue(ChatFeatureFlags.navigateAwayFromChat) &amp;&amp; it !is ChatState.Inactive } .distinctUntilChanged()</ID>
    <ID>UndocumentedPublicProperty:LiveChatBannerViewModel.kt$LiveChatBannerViewModel$val unreadMessageCount = combine( repo.cachedMessagesFlow, repo.previousChatReadTime ) { messages, previousReadTime -> messages.count { it.timestamp >= previousReadTime.time } }</ID>
    <ID>UndocumentedPublicProperty:LoblawUrlPatternUtils.kt$LoblawUrlPatternUtils$const val origin = "https://www.loblaw.ca"</ID>
    <ID>UndocumentedPublicProperty:LoblawUrlPatternUtils.kt$LoblawUrlPatternUtils$val bookingBookUrlPattern by lazy { Regex("""$bookingUrlBase/book""") }</ID>
    <ID>UndocumentedPublicProperty:LoblawUrlPatternUtils.kt$LoblawUrlPatternUtils$val bookingTermsUrlPattern by lazy { Regex("""$bookingUrlBase/terms""") }</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$// assume canada if country is empty val isCanada: Boolean get() = // assume canada if country is empty country.isBlank() || country.uppercase(Locale.ROOT).startsWith(Locale.CANADA.country)</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$val isSet: Boolean get() = address1.isNotEmpty() &amp;&amp; city.isNotEmpty() &amp;&amp; country.isNotEmpty() &amp;&amp; postalCode.isNotEmpty()</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var address1: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var address2: String? = null</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var city: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var country: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var name: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var postalCode: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var province: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var state: String = ""</ID>
    <ID>UndocumentedPublicProperty:Location.kt$Location$var type: String = ""</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionEvents.kt$LocationSelectionEvents.LocationSelected$val clinicId: ClinicId</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionFragmentArgs.kt$LocationSelectionFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$Clinic$val address: String</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$Clinic$val distance: Double</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$Clinic$val id: String</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$Clinic$val name: String</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$ClinicSelectionState$val clinics: State&lt;List&lt;Clinic>></ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$ClinicSelectionState$val selectedLocation: SelectedLocation</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSearchState$val predictions: List&lt;PlaceAutocompletePrediction>?</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSearchState$val userAddressRow: AddressRow</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val clinicSelectionState: ClinicSelectionState</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val customLocationInput: SearchInputState</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val customLocationInputText: String</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val isLocationSearchVisible: Boolean</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val locationSearchState: State&lt;LocationSearchState></ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val onClinicClick: (ClinicId) -> Unit</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val selectedLocation: SelectedLocation</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$LocationSelectionState$val specialtyName: Outcome&lt;String></ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$SelectedLocation$abstract val address: String</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$SelectedLocation.Custom$val placeId: String</ID>
    <ID>UndocumentedPublicProperty:LocationSelectionModels.kt$SelectedLocation.Province$val province: life.league.core.model.user.Province</ID>
    <ID>UndocumentedPublicProperty:LockedOutFragmentArgs.kt$LockedOutFragmentArgs$public val demo: Int = 0</ID>
    <ID>UndocumentedPublicProperty:LogCheck.kt$LogCheck.Companion$val ISSUE = Issue.create( "AndroidLog", "Use life.league.core.util.Log", "We use our own Log class to allow embedding applications to customize and override logging.", Category.MESSAGES, 5, Severity.ERROR, Implementation(LogCheck::class.java, EnumSet.of(Scope.JAVA_FILE)) )</ID>
    <ID>UndocumentedPublicProperty:LoginFragment.kt$LoginFragment.Companion$const val APPLE_OAUTH_AUTHORIZE_URL = "appleid.apple.com/appleauth/auth/oauth/authorize"</ID>
    <ID>UndocumentedPublicProperty:LoginFragmentArgs.kt$LoginFragmentArgs$public val isRegistering: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:LoginSuccessResultExtension.kt$val LoginSuccessResult.isValidForLogin: Boolean get() = this.accessToken.isNotNullOrEmpty() &amp;&amp; this.pcid.isNotNullOrEmpty() &amp;&amp; this.idToken.isNotNullOrEmpty()</ID>
    <ID>UndocumentedPublicProperty:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs$public val countryCode: String? = null</ID>
    <ID>UndocumentedPublicProperty:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs$public val isRequestingChange: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:LoginVerificationFragmentArgs.kt$LoginVerificationFragmentArgs$public val phoneNumber: String? = null</ID>
    <ID>UndocumentedPublicProperty:LoginViewModel.kt$LoginViewModel$val loginDestination: LiveData&lt;LoginDestination> = SingleLiveEvent&lt;LoginDestination>()</ID>
    <ID>UndocumentedPublicProperty:LoginViewModel.kt$LoginViewModel$val setUserCredentialsFailed: LiveData&lt;Empty> get() = singleEventSetUserCredentialsFailed</ID>
    <ID>UndocumentedPublicProperty:LoginViewModel.kt$LoginViewModel$val userId: LiveData&lt;String> get() = singleEventUserId</ID>
    <ID>UndocumentedPublicProperty:LoginViewModel.kt$LoginViewModel.LoginDestination.Authentication$val isPhoneNumberSet: Boolean</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity$var deepLinkData: Uri? = null</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity.Companion$const val EXTRA_CONVERSATION_ID = "conversation_id"</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity.Companion$const val EXTRA_NAVIGATION_TARGET_BUNDLE = "navigationTargetBundle"</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity.Companion$const val EXTRA_NAVIGATION_TARGET_PATH = "navigationTargetPath"</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity.Companion$const val EXTRA_NAVIGATION_TARGET_TARGET = "navigationTargetTarget"</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity.Companion$const val EXTRA_NOTIFICATION_ID = "notification_id"</ID>
    <ID>UndocumentedPublicProperty:MainActivity.kt$MainActivity.Companion$const val EXTRA_OPEN_CLAIMS_FLOW = "openClaimsFlow"</ID>
    <ID>UndocumentedPublicProperty:MainMenuHeader.kt$MainMenuHeader$val type = MainMenuItem.TYPE_PROFILE</ID>
    <ID>UndocumentedPublicProperty:MainMenuHeader.kt$MainMenuHeader$var avatarId: String?</ID>
    <ID>UndocumentedPublicProperty:MainMenuHeader.kt$MainMenuHeader$var memberName: String? = null</ID>
    <ID>UndocumentedPublicProperty:MainNavigationHeaderViewModel.kt$MainNavigationHeaderViewModel$@EpoxyAttribute var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:MainNavigationHeaderViewModel.kt$MainNavigationHeaderViewModel.SimpleDataBindingHolder$var dataBinding: ItemMainNavigationHeaderBinding? = null private set</ID>
    <ID>UndocumentedPublicProperty:MainNavigationViewModel.kt$MainNavigationViewModel$@EpoxyAttribute var targetActivity: Class&lt;*>? = null</ID>
    <ID>UndocumentedPublicProperty:MainNavigationViewModel.kt$MainNavigationViewModel$@EpoxyAttribute var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:MainNavigationViewModel.kt$MainNavigationViewModel.SimpleDataBindingHolder$var dataBinding: ItemMainNavigationBinding? = null private set</ID>
    <ID>UndocumentedPublicProperty:MainViewModel.kt$MainViewModel$val identity: LiveData&lt;State&lt;Identity>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MainViewModel.kt$MainViewModel$val member: LiveData&lt;State&lt;Member>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MainViewModel.kt$MainViewModel$val privacyLockPromptStatus = singleLivePrivacyLockPromptStatus as LiveData&lt;PrivacyLockUtils.ActivationPromptStatus></ID>
    <ID>UndocumentedPublicProperty:ManageDependentsActions.kt$ManageDependentsActions$val add: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsActions.kt$ManageDependentsActions$val delete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsActions.kt$ManageDependentsActions$val update: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsActions.kt$ManageDependentsActionsResponse$@Json(name = "actions") val actions: ManageDependentsActions</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsActions.kt$ManageDependentsActionsResponse$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsLandingFragmentArgs.kt$ManageDependentsLandingFragmentArgs$public val qleRequestId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsLandingViewModel.kt$ManageDependentsLandingViewModel$val dependents: LiveData&lt;State&lt;List&lt;Dependent>>> get() = mutableDependents</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsLandingViewModel.kt$ManageDependentsLandingViewModel$val manageDependentsActions: LiveData&lt;State&lt;ManageDependentsActions>> get() = mutableManageDependentsActions</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsLandingViewModel.kt$ManageDependentsLandingViewModel$var helpCenterLink: String = "" private set</ID>
    <ID>UndocumentedPublicProperty:ManageDependentsNavHostActivity.kt$ManageDependentsNavHostActivity.Companion$const val EXTRA_QLE_REQUEST_ID = "qle_request_id"</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleAuthorization$@Json(name = "redirect_url") val redirectUrl: String</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleUser$@Json(name = "consent_timestamp") val consentTimestamp: String? = ""</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleUser$@Json(name = "maple_user_id") val mapleUserId: String</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleUser$@Json(name = "user_type") val userType: String? = ""</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleUserIntent$abstract val value: String</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleUserIntent.Consult$val serviceId: String</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$MapleUserIntent.CreateConsult$val serviceId: String</ID>
    <ID>UndocumentedPublicProperty:Maple.kt$UserType$val value: String</ID>
    <ID>UndocumentedPublicProperty:MapleAvailabilityFragment.kt$MapleAvailabilityFragment$val args: MapleAvailabilityFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:MapleAvailabilityFragment.kt$MapleAvailabilityFragment$var chatAvailabilities: List&lt;HoursPricing>? = null</ID>
    <ID>UndocumentedPublicProperty:MapleAvailabilityFragment.kt$MapleAvailabilityFragment$var onHelpCenterClickListener: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs$public val agentTypeDescription: String</ID>
    <ID>UndocumentedPublicProperty:MapleAvailabilityFragmentArgs.kt$MapleAvailabilityFragmentArgs$public val chatAvailabilities: Array&lt;HoursPricing></ID>
    <ID>UndocumentedPublicProperty:MapleChatDetailsFragment.kt$MapleChatDetailsFragment$val args: MapleChatDetailsFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:MapleChatDetailsFragmentArgs.kt$MapleChatDetailsFragmentArgs$public val consult: MaplePostConsultsRow</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel$var hasLinkedAccount: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel$var mapleConsent: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel$var mapleUrl: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel$var mapleUser: LiveData&lt;State&lt;MapleUser>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel$var providerResponse: LiveData&lt;State&lt;ChatProviderResponse>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel$var unlinkedAccount: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel.Companion$const val ORIGIN_CARE_TEAM = "care-team"</ID>
    <ID>UndocumentedPublicProperty:MapleChatViewModel.kt$MapleChatViewModel.Companion$const val UTM_SOURCE = "utm_source"</ID>
    <ID>UndocumentedPublicProperty:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs$public val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs$public val formattedEventPrice: String = ""</ID>
    <ID>UndocumentedPublicProperty:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs$public val origin: String = ""</ID>
    <ID>UndocumentedPublicProperty:MapleConsentFragmentArgs.kt$MapleConsentFragmentArgs$public val serviceId: String</ID>
    <ID>UndocumentedPublicProperty:MapleHistoryViewModel.kt$MapleHistoryViewModel$var mapleUrl: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MapleHistoryViewModel.kt$MapleHistoryViewModel.Companion$const val ORIGIN_CHAT_HISTORY = "chat-history"</ID>
    <ID>UndocumentedPublicProperty:MapleHistoryViewModel.kt$MapleHistoryViewModel.Companion$const val UTM_SOURCE = "utm_source"</ID>
    <ID>UndocumentedPublicProperty:MapleIntroActivity.kt$MapleIntroActivity$lateinit var actionBar: GenesisToolbar</ID>
    <ID>UndocumentedPublicProperty:MapleIntroActivity.kt$MapleIntroActivity.Companion$const val EXTRA_AGENT_TYPE = "agent_type"</ID>
    <ID>UndocumentedPublicProperty:MapleIntroActivity.kt$MapleIntroActivity.Companion$const val EXTRA_AGENT_TYPE_DESCRIPTION = "agent_description"</ID>
    <ID>UndocumentedPublicProperty:MapleIntroActivity.kt$MapleIntroActivity.Companion$const val EXTRA_ORIGIN = "origin"</ID>
    <ID>UndocumentedPublicProperty:MapleIntroFragment.kt$MapleIntroFragment$val args: MapleIntroFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs$public val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs$public val agentTypeDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:MapleIntroFragmentArgs.kt$MapleIntroFragmentArgs$public val origin: String = ""</ID>
    <ID>UndocumentedPublicProperty:MapleLinkedAccountFragment.kt$MapleLinkedAccountFragment.Companion$const val MAPLE_ACCOUNT_NAME = "maple"</ID>
    <ID>UndocumentedPublicProperty:MapleLinkedAccountFragment.kt$MapleLinkedAccountFragment.Companion$const val TAG = "MapleLinkedAccount"</ID>
    <ID>UndocumentedPublicProperty:MapleUtils.kt$MapleUtils.DeviceSignature$val carrier: String</ID>
    <ID>UndocumentedPublicProperty:MapleUtils.kt$MapleUtils.DeviceSignature$val deviceSignature = ( "$carrier$ipAddress$totalDiskCapacity$userAgent" .removeWhitespaces() .lowercase(Locale.ROOT) ).sha256()</ID>
    <ID>UndocumentedPublicProperty:MapleUtils.kt$MapleUtils.DeviceSignature$val ipAddress: String</ID>
    <ID>UndocumentedPublicProperty:MapleUtils.kt$MapleUtils.DeviceSignature$val totalDiskCapacity: Double</ID>
    <ID>UndocumentedPublicProperty:MapleUtils.kt$MapleUtils.DeviceSignature$val userAgent: String</ID>
    <ID>UndocumentedPublicProperty:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs$public val appointmentId: String</ID>
    <ID>UndocumentedPublicProperty:MapleWebViewFragmentArgs.kt$MapleWebViewFragmentArgs$public val intent: String? = null</ID>
    <ID>UndocumentedPublicProperty:Mark.kt$NumberListItem$val number: Int</ID>
    <ID>UndocumentedPublicProperty:MarketplaceConfig.kt$MarketplaceConfig$@Json(name = "marketplace_url") val marketplaceUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:MarketplaceProductCard.kt$MarketplaceProductCard$val imageView: ImageView? get() = binding.image</ID>
    <ID>UndocumentedPublicProperty:MarketplaceProductCard.kt$MarketplaceProductCard.BottomOverlayContent$val image: Drawable? = null</ID>
    <ID>UndocumentedPublicProperty:MarketplaceProductCard.kt$MarketplaceProductCard.BottomOverlayContent$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragment.kt$MarketplaceWebFragment.Companion$const val EXTRA_CATEGORY = "category"</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragment.kt$MarketplaceWebFragment.Companion$const val EXTRA_PATH = "path"</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragment.kt$MarketplaceWebFragment.Companion$const val MARKETPLACE_HOST_REGEX = "^marketplace(.*)?.league.(dev|com)$"</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragment.kt$MarketplaceWebFragment.Companion$const val MARKETPLACE_STAGE_HOST_REGEX = "^marketplace(.*)?(.*)?.league.(dev|com)$"</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragment.kt$WebAppInterface$val context: Context?</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragmentArgs.kt$MarketplaceWebFragmentArgs$public val category: String = ""</ID>
    <ID>UndocumentedPublicProperty:MarketplaceWebFragmentArgs.kt$MarketplaceWebFragmentArgs$public val path: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val email: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val homeStores: MemberHomeStores = MemberHomeStores()</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val householdId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val languagePreference: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val memberSinceDate: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val pcInsider: PcInsider = PcInsider()</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val preferredName: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val roles: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val segments: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Member.kt$Member$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$MemberHomeStores$val grocery: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$MemberHomeStores$val pharmacy: String = ""</ID>
    <ID>UndocumentedPublicProperty:Member.kt$PcInsider$val active: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:MemberInfoActivity.kt$MemberInfoActivity.Companion$const val EXTRA_WALLET_CARD_ID = "wallet_card_id"</ID>
    <ID>UndocumentedPublicProperty:MemberInfoViewModel.kt$MemberInfoViewModel$val manageDependentsSetting: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MemberInfoViewModel.kt$MemberInfoViewModel$val selectedCard: LiveData&lt;State&lt;GenericCard>> get() = mutableSelectedCard</ID>
    <ID>UndocumentedPublicProperty:MemberInfoViewModel.kt$MemberInfoViewModel$val userName: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:MemberTable.kt$MemberTable$val member: Member</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$@Json(name = "action_params") var actionParams: MutableMap&lt;String, String> = mutableMapOf()</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$@Json(name = "action_title") var actionTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$@Json(name = "content_id") var contentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$@Json(name = "read_time") var readTime: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$var action: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$var image: ImageJson = ImageJson()</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$var subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$var tags: MutableList&lt;String> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ContentJson$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$ImageJson$@Json(name = "image_id") var imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$MerchListItemJson$var content: ContentJson? = null</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$MerchListJson$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$MerchListJson$var id: String = ""</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$MerchListJson$var items: List&lt;MerchListItemJson> = listOf()</ID>
    <ID>UndocumentedPublicProperty:MerchListAdapter.kt$MerchListJson$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:MessageRequest.kt$MessageRequest$val messageType: String</ID>
    <ID>UndocumentedPublicProperty:MilestoneTrackerResult.kt$Milestone$@Json(name = "cumulative_count_stat") val count: Int</ID>
    <ID>UndocumentedPublicProperty:MilestoneTrackerResult.kt$Milestone$@Json(name = "image") val image: AchievementImage</ID>
    <ID>UndocumentedPublicProperty:MilestoneTrackerResult.kt$Milestone$@Json(name = "subtitle") val subtitle: String</ID>
    <ID>UndocumentedPublicProperty:MilestoneTrackerResult.kt$Milestone$@Json(name = "unit") val unit: String</ID>
    <ID>UndocumentedPublicProperty:MilestoneTrackerResult.kt$MilestoneTrackerResult$@Json(name = "achievements_stats") val milestones: List&lt;Milestone></ID>
    <ID>UndocumentedPublicProperty:Modal.kt$Modal$val button: Button = Button()</ID>
    <ID>UndocumentedPublicProperty:Modal.kt$Modal$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Modal.kt$Modal$val info: Info = Info()</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "completion_points") val completionPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "current_question_index") val currentQuestionIndex: Int = 0</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "exit_screen") val exitScreen: ExitScreen? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "hide_intro_screen") val hideIntroScreen: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "hide_topics") val hideTopics: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "intro_screen") val introScreen: IntroScreen? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "onboarding_completion_date") val onboardingCompletionDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "onboarding_pages") val onboardingPages: List&lt;OnboardingPage> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "outcomes_enabled") val outcomeEnabled: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "previous_response") val previousResponse: PreviousResponse? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "redirect_url") val redirectUrl: String? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "sort_order") val sortOrder: Int = Int.MAX_VALUE</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$@Json(name = "success_screen") var successScreen: SuccessScreen? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$val id: String</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$val questions: List&lt;Question> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$val topics: List&lt;Topic> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Module.kt$Module$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:Module.kt$PreviousResponse$@Json(name = "last_completed_date") val lastCompletedDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:Module.kt$PreviousResponse$@Json(name = "response_summary") val assessmentResponseSummaries: List&lt;AssessmentResponseSummary> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Module.kt$PreviousResponse$@Json(name = "result_status") val resultStatus: String = ""</ID>
    <ID>UndocumentedPublicProperty:Module.kt$TopicProgressData$val questionNumber: Int</ID>
    <ID>UndocumentedPublicProperty:Module.kt$TopicProgressData$val totalQuestions: Int</ID>
    <ID>UndocumentedPublicProperty:Money.kt$Money$@Json(name = "C") val currency: String = ""</ID>
    <ID>UndocumentedPublicProperty:Money.kt$Money$@Json(name = "F") val dollarAmount: Int = 0</ID>
    <ID>UndocumentedPublicProperty:Money.kt$Money$@Json(name = "M") val amountWithCoins: Int = 0</ID>
    <ID>UndocumentedPublicProperty:Money.kt$Money$val doubleAmount: Double get() = (amountWithCoins / 100.00)</ID>
    <ID>UndocumentedPublicProperty:MultiBannerSettingsFragmentArgs.kt$MultiBannerSettingsFragmentArgs$public val userType: UserType = UserType.LCL</ID>
    <ID>UndocumentedPublicProperty:MultiHorizontalProgressBar.kt$ProgressBarConfiguration$val color: @Composable () -> Color</ID>
    <ID>UndocumentedPublicProperty:MultiHorizontalProgressBar.kt$ProgressBarConfiguration$val progress: Float</ID>
    <ID>UndocumentedPublicProperty:MultiHorizontalProgressBar.kt$ProgressBarConfiguration$val shape: @Composable () -> RoundedCornerShape</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar$var progressBars: ProgressBars? = null set(value) { val oldBars = field field = value value?.let { progressBars -> if (oldBars?.currentBarIndex != progressBars.currentBarIndex || oldBars.bars.size != progressBars.bars.size) { removeAllViews() progressBars.bars.forEachIndexed { index, progress -> val drawable = ContextCompat.getDrawable(context, R.drawable.multi_determinate_progress_bar) (drawable as? LayerDrawable)?.let { layerDrawable -> (layerDrawable.findDrawableByLayerId(android.R.id.progress) as? ScaleDrawable)?.let { gradientDrawable -> @ColorInt val color = progress.getColor(context) gradientDrawable.setTint(color) } } val progressBar = ProgressBar( context, null, android.R.attr.progressBarStyleHorizontal ).apply { max = progress.max * 100 isIndeterminate = false progressDrawable = drawable } val margin = if (progress === progressBars.bars.last()) 0f else 3f val layoutParams = if (progressBars.fixedWidth) { LayoutParams( if (index == progressBars.currentBarIndex) 0 else context.dpToPx(23f).toInt(), MarginLayoutParams.WRAP_CONTENT ).apply { setMargins(0, 0, context.dpToPx(margin).toInt(), 0) weight = if (index == progressBars.currentBarIndex) 1f else 0f } } else { LayoutParams( 0, MarginLayoutParams.WRAP_CONTENT ).apply { setMargins(0, 0, context.dpToPx(margin).toInt(), 0) weight = progress.max.toFloat() } } addView(progressBar, layoutParams) } } children.forEachIndexed { index, view -> (view as ProgressBar).let { progressBar -> // show a little bit in the progress bar (can make this a parameter if val minProgress = if (progressBars.leadingProgressOnZero &amp;&amp; progressBars.currentBarIndex == index) (progressBar.max * 0.03).toInt() else 0 val progress = kotlin.math.max(minProgress, progressBars.bars[index].progress * 100) ObjectAnimator.ofInt(progressBar, "progress", progress) .setDuration(context.getIntegerFromAttr(R.attr.duration_slow).toLong()) .start() } } } ?: removeAllViews() }</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Companion$const val COLOR_VAL_TYPE_ATTR = 3</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Companion$const val COLOR_VAL_TYPE_INT = 1</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Companion$const val COLOR_VAL_TYPE_RES = 2</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Progress$@ColorValType val colorValType: Int</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Progress$val color: Int</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Progress$val max: Int</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.Progress$val progress: Int</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.ProgressBars$val bars: List&lt;Progress></ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.ProgressBars$val currentBarIndex: Int = 0</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.ProgressBars$val fixedWidth: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:MultiProgressBar.kt$MultiProgressBar.ProgressBars$val leadingProgressOnZero: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:MultiSelectOptionUseCase.kt$MultiSelectState$val options: Map&lt;T, Boolean></ID>
    <ID>UndocumentedPublicProperty:MultiSelectOptionUseCase.kt$MultiSelectState$val selectionChanged: (T, Boolean) -> Unit</ID>
    <ID>UndocumentedPublicProperty:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$public val activityId: String</ID>
    <ID>UndocumentedPublicProperty:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$public val activityName: String</ID>
    <ID>UndocumentedPublicProperty:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$public val activityType: String</ID>
    <ID>UndocumentedPublicProperty:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$public val complete: Boolean</ID>
    <ID>UndocumentedPublicProperty:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$public val doneText: String</ID>
    <ID>UndocumentedPublicProperty:MultiStepHealthJourneyItemCompletionFragmentArgs.kt$MultiStepHealthJourneyItemCompletionFragmentArgs$public val steps: CompletionMethod.MultiStep</ID>
    <ID>UndocumentedPublicProperty:MultipleChoiceAnswer.kt$MultipleChoiceAnswer$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:MultipleChoiceAnswer.kt$MultipleChoiceAnswer$val id: String</ID>
    <ID>UndocumentedPublicProperty:MultipleChoiceAnswer.kt$MultipleChoiceAnswer$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:MultipleChoiceAnswer.kt$MultipleChoiceAnswer$val value: Int = 0</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$@Json(name = "is_user_preference") val isUserPreference: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$@Json(name = "preference_tags") val tags: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$@Transient val doesClearOtherOptions = properties.contains(CLEAR_OTHER_OPTIONS)</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$@Transient val isInputType = properties.contains(INPUT_TYPE)</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$val id: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$val properties: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer$var value: String = ""</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer.Companion$const val CLEAR_OTHER_OPTIONS = "clear_other_options"</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionAnswer.kt$MultipleSelectionAnswer.Companion$const val INPUT_TYPE = "input_type"</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.CustomOption$val accessibilityText: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.CustomOption$val label: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.CustomOption$val textInputLabel: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.CustomOption$var isSelected: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.CustomOption$var value: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.Option$val label: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.Option$val value: String</ID>
    <ID>UndocumentedPublicProperty:MultipleSelectionQuestion.kt$MultipleSelectionQuestion.Option$var isSelected: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:MyRootModuleCodegen.kt$MyRootModuleCodegen$public val colorList: List&lt;ShowkaseBrowserColor> = listOf&lt;ShowkaseBrowserColor>()</ID>
    <ID>UndocumentedPublicProperty:MyRootModuleCodegen.kt$MyRootModuleCodegen$public val componentList: List&lt;ShowkaseBrowserComponent> = mutableListOf&lt;ShowkaseBrowserComponent>().apply { ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Remote Image", componentName = "RemoteImageContent (by content id)", componentKDoc = "", componentKey = """life.league.genesis.compose.accompanist_null_RemoteImage_RemoteImageContent(bycontentid)_$index""", component = @Composable { RemoteImageContentPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Remote Image", componentName = "RemoteImage (by Url)", componentKDoc = "", componentKey = """life.league.genesis.compose.accompanist_null_RemoteImage_RemoteImage(byUrl)_$index""", component = @Composable { RemoteImagePreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Bottom To Top Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_BottomToTopAnimation_$index""", component = @Composable { BottomToTopAnimationPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Fade In Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_FadeInAnimation_$index""", component = @Composable { FadeInAnimationPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Fade Out Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_FadeOutAnimation_$index""", component = @Composable { FadeOutAnimationPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "FadingText Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_FadingTextAnimation_$index""", component = @Composable { FadingTextPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Finite Pulse Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_FinitePulseAnimation_$index""", component = @Composable { FinitePulsePreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Left To Right Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_LeftToRightAnimation_$index""", component = @Composable { LeftToRightAnimationPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Right To Left Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_RightToLeftAnimation_$index""", component = @Composable { RightToLeftAnimationPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Top To Bottom Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_TopToBottomAnimation_$index""", component = @Composable { TopToBottomAnimationPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Animations", componentName = "Vertical FadingText Animation", componentKDoc = "", componentKey = """life.league.genesis.compose.animations_null_Animations_VerticalFadingTextAnimation_$index""", component = @Composable { VerticalFadingTextPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "App Bar", componentName = "Top App Bar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.appbar_null_AppBar_TopAppBar_$index""", component = @Composable { GenesisTopAppBarPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "Asset Banner", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_DefaultGroup_AssetBanner_$index""", component = @Composable { AssetBannerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Banner", componentName = "Basic Icon Banner", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_Banner_BasicIconBanner_$index""", component = @Composable { BasicIconBannerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Banner", componentName = "LargeImageRow", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_Banner_LargeImageRow_$index""", component = @Composable { LargeImageBannerRowPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Banner", componentName = "SmallImageRow", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_Banner_SmallImageRow_$index""", component = @Composable { SmallImageBannerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Banner", componentName = "Tag Banner", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_Banner_TagBanner_$index""", component = @Composable { TagBannerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "Warning Banner", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_DefaultGroup_WarningBanner_$index""", component = @Composable { WarningBannerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "Warning Banner with link", componentKDoc = "", componentKey = """life.league.genesis.compose.component.banner_null_DefaultGroup_WarningBannerwithlink_$index""", component = @Composable { WarningBannerPreviewWithLink(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Button", componentName = "Circle Button", componentKDoc = "", componentKey = """life.league.genesis.compose.component.button_null_Button_CircleButton_$index""", component = @Composable { CircleButtonPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Button", componentName = "Genesis Button", componentKDoc = "", componentKey = """life.league.genesis.compose.component.button_null_Button_GenesisButton_$index""", component = @Composable { GenesisButtonPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Button", componentName = "Genesis Buttons Footer", componentKDoc = "", componentKey = """life.league.genesis.compose.component.button_null_Button_GenesisButtonsFooter_$index""", component = @Composable { GenesisButtonsFooterPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Button", componentName = "Navigation Buttons", componentKDoc = "", componentKey = """life.league.genesis.compose.component.button_null_Button_NavigationButtons_$index""", component = @Composable { NavigationButtonsPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Button", componentName = "Pill Button", componentKDoc = "", componentKey = """life.league.genesis.compose.component.button_null_Button_PillButton_$index""", component = @Composable { PillButtonPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "PreviewLinkButton", componentKDoc = "", componentKey = """life.league.genesis.compose.component.button_null_DefaultGroup_PreviewLinkButton_$index""", component = @Composable { PreviewLinkButton(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Divider", componentName = "Horizontal Divider", componentKDoc = "", componentKey = """life.league.genesis.compose.component.divider_null_Divider_HorizontalDivider_$index""", component = @Composable { HorizontalDividerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Footer", componentName = "Page Footer", componentKDoc = "", componentKey = """life.league.genesis.compose.component.footer_null_Footer_PageFooter_$index""", component = @Composable { PageFooterPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Header", componentName = "Avatar Header", componentKDoc = "", componentKey = """life.league.genesis.compose.component.header_null_Header_AvatarHeader_$index""", component = @Composable { AvatarHeaderPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Header", componentName = "Page Header", componentKDoc = "", componentKey = """life.league.genesis.compose.component.header_null_Header_PageHeader_$index""", component = @Composable { PageHeaderPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Input", componentName = "Genesis Checkbox", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input.checkbox_null_Input_GenesisCheckbox_$index""", component = @Composable { GenesisCheckboxPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Radio Input", componentName = "Genesis Bordered Radio Field", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input.radio_null_RadioInput_GenesisBorderedRadioField_$index""", widthDp = 350, component = @Composable { GenesisBorderedRadioFieldPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Radio Input", componentName = "Genesis Radio Button", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input.radio_null_RadioInput_GenesisRadioButton_$index""", component = @Composable { GenesisRadioButtonPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Radio Input", componentName = "Genesis Radio Field", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input.radio_null_RadioInput_GenesisRadioField_$index""", widthDp = 350, component = @Composable { GenesisRadioFieldPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Input", componentName = "Date Field", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input_null_Input_DateField_$index""", component = @Composable { GenesisDateFieldPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Input", componentName = "Drop Down", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input_null_Input_DropDown_$index""", component = @Composable { GenesisDropDownPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Input", componentName = "Static TextField", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input_null_Input_StaticTextField_$index""", component = @Composable { GenesisStaticDropdownPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Input", componentName = "Genesis Switch", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input_null_Input_GenesisSwitch_$index""", component = @Composable { GenesisSwithPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Input", componentName = "Text Field", componentKDoc = "", componentKey = """life.league.genesis.compose.component.input_null_Input_TextField_$index""", component = @Composable { GenesisTextFieldPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Pager", componentName = "Genesis Horizontal Pager", componentKDoc = "", componentKey = """life.league.genesis.compose.component.pager_null_Pager_GenesisHorizontalPager_$index""", component = @Composable { GenesisHorizontalPagerPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Pager", componentName = "Pager Controls", componentKDoc = "", componentKey = """life.league.genesis.compose.component.pager_null_Pager_PagerControls_$index""", component = @Composable { PagerControlsPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Progress", componentName = "Circular Progress Bar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.progress_null_Progress_CircularProgressBar_$index""", component = @Composable { CircularProgressBarPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Progress Bars", componentName = "Indeterminate Circular Progress Bar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.progress_null_ProgressBars_IndeterminateCircularProgressBar_$index""", component = @Composable { GenesisIntermittentProgressBarPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Progress", componentName = "Progress Bar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.progress_null_Progress_ProgressBar_$index""", component = @Composable { GenesisProgressBarPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Progress", componentName = "Horizontal Progress Bar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.progress_null_Progress_HorizontalProgressBar_$index""", component = @Composable { HorizontalProgressBarPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Progress", componentName = "Horizontal Progress Bar with Delay", componentKDoc = "", componentKey = """life.league.genesis.compose.component.progress_null_Progress_HorizontalProgressBarwithDelay_$index""", component = @Composable { HorizontalProgressBarWithDelayPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Progress", componentName = "MultiHorizontalProgressBar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.progress_null_Progress_MultiHorizontalProgressBar_$index""", component = @Composable { MultiHorizontalProgressBarPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Row", componentName = "Action Row", componentKDoc = "", componentKey = """life.league.genesis.compose.component.row_null_Row_ActionRow_$index""", component = @Composable { ActionRowPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Row", componentName = "Key Value row", componentKDoc = "", componentKey = """life.league.genesis.compose.component.row_null_Row_KeyValuerow_$index""", component = @Composable { KeyValueRowPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Row", componentName = "Progress Row", componentKDoc = "", componentKey = """life.league.genesis.compose.component.row_null_Row_ProgressRow_$index""", component = @Composable { ProgressRowPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Row", componentName = "Tooltip Header Row", componentKDoc = "", componentKey = """life.league.genesis.compose.component.row_null_Row_TooltipHeaderRow_$index""", component = @Composable { TooltipHeaderRowPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Text", componentName = "Expandable Text", componentKDoc = "", componentKey = """life.league.genesis.compose.component.text_null_Text_ExpandableText_$index""", component = @Composable { ExpandableTextPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Widget", componentName = "GenesisErrorView", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_Widget_GenesisErrorView_$index""", component = @Composable { ErrorScreenPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "GenesisGridView", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_DefaultGroup_GenesisGridView_$index""", component = @Composable { GridViewSample(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Calendar", componentName = "Multi Select Calendar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_Calendar_MultiSelectCalendar_$index""", component = @Composable { MultiSelectGenesisCalendarViewPreview(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "GenesisNoScrollGridView", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_DefaultGroup_GenesisNoScrollGridView_$index""", component = @Composable { NoScrollGridViewSample(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Widget", componentName = "Genesis Empty Section View", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_Widget_GenesisEmptySectionView_$index""", component = @Composable { PreviewGenesisEmptySectionView(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Widget", componentName = "Genesis Empty State Widget", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_Widget_GenesisEmptyStateWidget_$index""", component = @Composable { PreviewGenesisEmptyStateWidget(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Widget", componentName = "Image Prompt", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_Widget_ImagePrompt_$index""", component = @Composable { PreviewImagePromptWidget(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Default Group", componentName = "PreviewInformationalSlide", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_DefaultGroup_PreviewInformationalSlide_$index""", component = @Composable { PreviewInformationalSlide(previewParam) } ) ) } ThemeProvider().values.iterator().asSequence().forEachIndexed { index, previewParam -> add( ShowkaseBrowserComponent( group = "Calendar", componentName = "Single Select Calendar", componentKDoc = "", componentKey = """life.league.genesis.compose.component.widget_null_Calendar_SingleSelectCalendar_$index""", component = @Composable { SingleSelectGenesisCalendarViewPreview(previewParam) } ) ) } }</ID>
    <ID>UndocumentedPublicProperty:MyRootModuleCodegen.kt$MyRootModuleCodegen$public val typographyList: List&lt;ShowkaseBrowserTypography> = listOf&lt;ShowkaseBrowserTypography>( ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "H1", typographyKDoc = "", textStyle = h1_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "H2", typographyKDoc = "", textStyle = h2_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "H3", typographyKDoc = "", textStyle = h3_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "H4", typographyKDoc = "", textStyle = h4_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Subtitle 1", typographyKDoc = "", textStyle = subtitle1_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Subtitle 2", typographyKDoc = "", textStyle = subtitle2_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Body 1", typographyKDoc = "", textStyle = body1_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Body 2", typographyKDoc = "", textStyle = body2_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Button 1", typographyKDoc = "", textStyle = button1_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Button 2", typographyKDoc = "", textStyle = button2_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Label", typographyKDoc = "", textStyle = label_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Caption", typographyKDoc = "", textStyle = caption_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Overline", typographyKDoc = "", textStyle = overline_fusion), ShowkaseBrowserTypography( typographyGroup = "Fusion", typographyName = "Tab", typographyKDoc = "", textStyle = tab_fusion), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "H1", typographyKDoc = "", textStyle = h1_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "H2", typographyKDoc = "", textStyle = h2_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "H3", typographyKDoc = "", textStyle = h3_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "H4", typographyKDoc = "", textStyle = h4_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Subtitle 1", typographyKDoc = "", textStyle = subtitle1_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Subtitle 2", typographyKDoc = "", textStyle = subtitle2_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Body 1", typographyKDoc = "", textStyle = body1_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Body 2", typographyKDoc = "", textStyle = body2_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Button 1", typographyKDoc = "", textStyle = button1_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Button 2", typographyKDoc = "", textStyle = button2_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Label", typographyKDoc = "", textStyle = label_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Caption", typographyKDoc = "", textStyle = caption_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Overline", typographyKDoc = "", textStyle = overline_default), ShowkaseBrowserTypography( typographyGroup = "Default", typographyName = "Tab", typographyKDoc = "", textStyle = tab_default), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "H1", typographyKDoc = "", textStyle = h1_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "H2", typographyKDoc = "", textStyle = h2_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "H3", typographyKDoc = "", textStyle = h3_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "H4", typographyKDoc = "", textStyle = h4_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Subtitle 1", typographyKDoc = "", textStyle = subtitle1_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Subtitle 2", typographyKDoc = "", textStyle = subtitle2_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Body 1", typographyKDoc = "", textStyle = body1_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Body 2", typographyKDoc = "", textStyle = body2_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Button 1", typographyKDoc = "", textStyle = button1_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Button 2", typographyKDoc = "", textStyle = button2_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Label", typographyKDoc = "", textStyle = label_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Caption", typographyKDoc = "", textStyle = caption_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Overline", typographyKDoc = "", textStyle = overline_league), ShowkaseBrowserTypography( typographyGroup = "League", typographyName = "Tab", typographyKDoc = "", textStyle = tab_league), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "H1", typographyKDoc = "", textStyle = h1_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "H2", typographyKDoc = "", textStyle = h2_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "H3", typographyKDoc = "", textStyle = h3_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "H4", typographyKDoc = "", textStyle = h4_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Subtitle 1", typographyKDoc = "", textStyle = subtitle1_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Subtitle 2", typographyKDoc = "", textStyle = subtitle2_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Body 1", typographyKDoc = "", textStyle = body1_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Body 2", typographyKDoc = "", textStyle = body2_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Button 1", typographyKDoc = "", textStyle = button1_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Button 2", typographyKDoc = "", textStyle = button2_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Label", typographyKDoc = "", textStyle = label_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Caption", typographyKDoc = "", textStyle = caption_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Overline", typographyKDoc = "", textStyle = overline_pchealth), ShowkaseBrowserTypography( typographyGroup = "PC Health", typographyName = "Tab", typographyKDoc = "", textStyle = tab_pchealth) )</ID>
    <ID>UndocumentedPublicProperty:NavControllerExtensions.kt$const val NAVIGATION_TAG = "Navigation"</ID>
    <ID>UndocumentedPublicProperty:NavViewModel.kt$NavViewModel$val navCommand: SingleLiveEvent&lt;NavigationCommand></ID>
    <ID>UndocumentedPublicProperty:NavigationCommand.kt$NavigationCommand.BackTo$val destinationId: Int</ID>
    <ID>UndocumentedPublicProperty:NavigationCommand.kt$NavigationCommand.DeepLinkTo$val uri: Uri</ID>
    <ID>UndocumentedPublicProperty:NavigationCommand.kt$NavigationCommand.To$val directions: NavDirections</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget$val intentExtras: Bundle = Bundle.EMPTY</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget$val path: String? = null</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget$val target: Int</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$// Use WEB only for the locally hosted html that's included in the app. For external internet urls, use BROWSER const val WEB = 1</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val ACCOUNT_DETAILS = 55</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val ADD_CREDIT = 57</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val ADD_CREDIT_CARD = 13</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val BROWSER = 8</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT = 9</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_HISTORY = 49</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_SURVEY = 51</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_WITH_CARE_NAVIGATOR = 43</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_WITH_CUSTOMER_CARE = 24</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_WITH_DIETITIAN = 50</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_WITH_HEALTH_CONCIERGE = 30</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CHAT_WITH_PHARMACIST = 52</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CLAIM_DETAILS = 26</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CLAIM_HISTORY = 25</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val CONVERSATIONS = 3</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val DAILY_SCREENER_RESULTS = 45</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val DIRECT_DEPOSIT = 28</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val FORMS = 29</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val GET_CARE = 44</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val GET_INSPIRED = 19</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val GET_REWARDED = 18</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_AT_WORK = 4</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_JOURNEY = 20</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_NEED = 39</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_PROFILE = 38</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_PROFILE_BUILDER = 37</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_PROGRAM = 40</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_PROGRAMS = 53</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HEALTH_SOLUTION_CATEGORY = 41</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HELP = 17</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HELP_CENTER = 31</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val HOME = 33</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val LEGACY_MARKETPLACE = 42</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val MANAGE_DEPENDENTS = 34</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val MANAGE_DEPENDENTS_HOME = 58</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val MARKETPLACE = 5</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val MARKETPLACE_WEB = 10</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val MY_DOCUMENTS = 27</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val OPEN_DOCUMENT = 16</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val PERSONAL_INFO = 54</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val POINTS_SYSTEM_SIGN_UP = 48</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val PRIVACY_POLICY = 47</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val PROFILE_SETTINGS = 46</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val QLE = 32</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val REST_API = 35</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val REWARDS = 36</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val SAVE_WALLET_CARD = 21</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val SUBMIT_CLAIM = 7</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val TERMS = 22</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val TRANSACTION_HISTORY = 23</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val VIEW_COVERAGE = 14</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val VIEW_WALLET_CARD_DEPENDANT_INFO = 15</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val WALLET = 6</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val WALLET_CARD_BROWSER = 56</ID>
    <ID>UndocumentedPublicProperty:NavigationTarget.kt$NavigationTarget.Companion$const val WALLET_CARD_SELECT = 11</ID>
    <ID>UndocumentedPublicProperty:NavigationTree.kt$NavigationItem$val targetActivity: Class&lt;*>? = null</ID>
    <ID>UndocumentedPublicProperty:NavigationTree.kt$NavigationItem$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:NavigationTree.kt$NavigationSection$val navigationItems: Array&lt;NavigationItem> = arrayOf()</ID>
    <ID>UndocumentedPublicProperty:NavigationTree.kt$NavigationSection$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:NavigationTree.kt$NavigationTree$val navigationSections: Array&lt;NavigationSection> = arrayOf()</ID>
    <ID>UndocumentedPublicProperty:NoScrollEpoxyRecyclerView.kt$NoScrollEpoxyRecyclerView$var disableInteractions = false</ID>
    <ID>UndocumentedPublicProperty:NoticeBanner.kt$NoticeBanner.Companion$const val NOTICE_BANNER_STYLE_PRIMARY = 0</ID>
    <ID>UndocumentedPublicProperty:NoticeBanner.kt$NoticeBanner.Companion$const val NOTICE_BANNER_STYLE_SECONDARY = 1</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$@PrimaryKey val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var avatarId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var date: Date</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var interacCode: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var notificationType: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var title: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var type: Int</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var unread: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$Notification$var url: String = ""</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$NotificationType.Companion$const val HEADER = 1</ID>
    <ID>UndocumentedPublicProperty:Notification.kt$NotificationType.Companion$const val ITEM = 2</ID>
    <ID>UndocumentedPublicProperty:NotificationController.kt$NotificationController.Companion$const val description = R.string.description_lorum</ID>
    <ID>UndocumentedPublicProperty:NotificationController.kt$NotificationController.Companion$const val title = R.string.notification_title</ID>
    <ID>UndocumentedPublicProperty:NotificationData.kt$NotificationData$var notifications = mutableListOf&lt;Notification>()</ID>
    <ID>UndocumentedPublicProperty:NotificationSettingsViewModel.kt$NotificationSettingsViewModel$val hasOptIntoMarketing: LiveData&lt;State&lt;Boolean>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:NotificationSettingsViewModel.kt$NotificationSettingsViewModel$val updateOptInStatus: LiveData&lt;State&lt;Empty>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:NotificationTable.kt$NotificationTable$val notificationData: NotificationData = NotificationData()</ID>
    <ID>UndocumentedPublicProperty:NumericCircleButton.kt$NumericCircleButton$var rating: Int = 0 set(value) { field = value binding.ratingNumber.setTextAndVisibility(rating.toString()) }</ID>
    <ID>UndocumentedPublicProperty:OfflineCaseResponse.kt$OfflineCaseResponse$val caseId: String = json.optString("case_id")</ID>
    <ID>UndocumentedPublicProperty:OfflineDialog.kt$OfflineDialog.Companion$var onButtonClicked: View.OnClickListener? = null</ID>
    <ID>UndocumentedPublicProperty:OfflineDialog.kt$OfflineDialog.Companion$var onShow: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage$@Json(name = "additional_info") val additionalInfo: AdditionalInfo = AdditionalInfo()</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage$@Json(name = "eyebrow_headline") val headline: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo$@Json(name = "content") val content: List&lt;Content> = listOf()</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo$val cta: CTA? = null</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo$val subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo.CTA$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo.CTA$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo.Content$@Json(name = "icon_id") val iconId: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo.Content$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingPage.kt$OnboardingPage.AdditionalInfo.Content$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:OnboardingUtils.kt$OnboardingUtils$var isAppFirstTimeLaunch: Boolean get() { return sharedPrefs.getBoolean(KEY_FIRST_TIME_LAUNCH, true) } set(value) { sharedPrefs.putBoolean(KEY_FIRST_TIME_LAUNCH, value) }</ID>
    <ID>UndocumentedPublicProperty:OptimumTokenAuthenticator.kt$OptimumTokenAuthenticator$val deviceFingerprint: String?</ID>
    <ID>UndocumentedPublicProperty:OptionFillParent.kt$OptionFillParent$// added the item to the option so that we can reset the descriptions when required var item: StackSelectQuestion.Option? = null</ID>
    <ID>UndocumentedPublicProperty:OptionFillParent.kt$OptionFillParent$var allowTextEntry = false set(value) { field = value binding.textInput.toggleGoneVisibility(value) }</ID>
    <ID>UndocumentedPublicProperty:OptionFillParent.kt$OptionFillParent$var description: CharSequence = "" set(text) { field = text binding.description.text = text updateDescriptionVisibility() }</ID>
    <ID>UndocumentedPublicProperty:OptionFillParent.kt$OptionFillParent$var descriptionAlwaysVisible = true set(value) { field = value updateDescriptionVisibility() }</ID>
    <ID>UndocumentedPublicProperty:OptionFillParent.kt$OptionFillParent$var isExclusive: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:OptionFillParent.kt$OptionFillParent$var optionSelected: Boolean = false set(selected) { field = selected if (selected) { fadeBackground(binding.backgroundSelected, binding.backgroundUnselected) binding.optionText.fadeTextColorAttr(R.attr.color_text_option_selected, context.getIntegerFromAttr(R.attr.duration_slow).toLong()) binding.description.fadeTextColorAttr(R.attr.color_text_option_description_selected, context.getIntegerFromAttr(R.attr.duration_slow).toLong()) } else { fadeBackground(binding.backgroundUnselected, binding.backgroundSelected) binding.optionText.fadeTextColorAttr(R.attr.color_text_option_unselected, context.getIntegerFromAttr(R.attr.duration_slow).toLong()) binding.description.fadeTextColorAttr(R.attr.color_text_option_description_unselected, context.getIntegerFromAttr(R.attr.duration_slow).toLong()) } updateDescriptionVisibility() }</ID>
    <ID>UndocumentedPublicProperty:OptionWrapContent.kt$OptionWrapContent$var isExclusive: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:OptionWrapContent.kt$OptionWrapContent$var optionSelected: Boolean = false set(selected) { field = selected if (selected) { fadeBackground(binding.backgroundSelected, binding.backgroundUnselected) binding.optionText.fadeTextColorAttr(R.attr.color_text_option_selected, context.getIntegerFromAttr(R.attr.duration_slow).toLong()) } else { fadeBackground(binding.backgroundUnselected, binding.backgroundSelected) binding.optionText.fadeTextColorAttr(R.attr.color_text_option_unselected, context.getIntegerFromAttr(R.attr.duration_slow).toLong()) } }</ID>
    <ID>UndocumentedPublicProperty:OrgId.kt$val OrgId.queryParam: String get() = when (this) { OrgId.MAPLE -> MAPLE_ORG_ID OrgId.LIFEMARK -> LIFEMARK_ORG_ID }</ID>
    <ID>UndocumentedPublicProperty:OrgIdAnalyticsExt.kt$val AppointmentOrgId.providerName: Pair&lt;String, String> get() = "prov_name" to when (this) { AppointmentOrgId.LIFEMARK -> "lifemark" AppointmentOrgId.MAPLE -> "maple" AppointmentOrgId.SALESFORCE -> "salesforce" }</ID>
    <ID>UndocumentedPublicProperty:OrgIdAnalyticsExt.kt$val OrgId.providerName: Pair&lt;String, String> get() = "prov_name" to when (this) { OrgId.LIFEMARK -> "lifemark" OrgId.MAPLE -> "maple" }</ID>
    <ID>UndocumentedPublicProperty:OrgIdExtensions.kt$val OrgId.formattedName get() = when (this) { OrgId.LIFEMARK -> R.string.triage_lifemark OrgId.MAPLE -> R.string.triage_maple }</ID>
    <ID>UndocumentedPublicProperty:OrgIdExtensions.kt$val OrgId.icon get() = when (this) { OrgId.LIFEMARK -> R.drawable.triage_ic_lifemark OrgId.MAPLE -> R.drawable.triage_ic_maple }</ID>
    <ID>UndocumentedPublicProperty:OrgIdExtensions.kt$val OrgId.infoModalDescription get() = when (this) { OrgId.LIFEMARK -> R.string.triage_lifemark_info_description OrgId.MAPLE -> R.string.triage_maple_info_description }</ID>
    <ID>UndocumentedPublicProperty:OrgIdExtensions.kt$val OrgId.infoModalIcon get() = when (this) { OrgId.LIFEMARK -> R.drawable.triage_lifemark_pc_health OrgId.MAPLE -> R.drawable.triage_maple_pc_health }</ID>
    <ID>UndocumentedPublicProperty:OrgIdExtensions.kt$val OrgId.infoModalTitle get() = when (this) { OrgId.LIFEMARK -> R.string.triage_lifemark_info_title OrgId.MAPLE -> R.string.triage_maple_info_title }</ID>
    <ID>UndocumentedPublicProperty:OutcomeSuggestionsFragment.kt$OutcomeSuggestionsFragment$// view injects dependencies val viewModel: OutcomesSuggestionsViewModel by viewModel()</ID>
    <ID>UndocumentedPublicProperty:OutcomeSuggestionsFragment.kt$OutcomeSuggestionsFragment$val args: OutcomeSuggestionsFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:OutcomeSuggestionsFragment.kt$OutcomeSuggestionsFragment$val resource: ResourceIdentity by lazy { ResourceIdentity.getResourceIdentity(args.activityId, args.campaignId) }</ID>
    <ID>UndocumentedPublicProperty:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs$public val activityId: String</ID>
    <ID>UndocumentedPublicProperty:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs$public val campaignId: String</ID>
    <ID>UndocumentedPublicProperty:OutcomeSuggestionsFragmentArgs.kt$OutcomeSuggestionsFragmentArgs$public val moduleId: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Actions$const val CLOSE = "Close"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Actions$const val RELOAD = "Reload"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Actions$const val SELECT_RESOURCE = "Select Resource"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Actions$const val VIEW_ALL_SUGGESTIONS = "view all suggestions"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Categories$const val PULSE_CHECK_OUTCOMES = "Pulse Check Outcomes"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Categories$const val PULSE_CHECK_OUTCOMES_ERROR = "Pulse Check Outcomes Error"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Pages$const val PULSE_CHECK_OUTCOMES = "Pulse Check Outcomes"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Pages$const val PULSE_CHECK_OUTCOMES_ERROR = "Pulse Check Outcomes Error"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$OutcomesAnalytics.Pages$const val PULSE_CHECK_OUTCOMES_FRICTION_SCREEN = "Pulse Check Outcomes Friction Screen"</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val carouselName: String?</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val carouselRank: Int?</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val isFOTL: Boolean</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val label: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val totalCarouselResources: Int?</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val totalResources: Int</ID>
    <ID>UndocumentedPublicProperty:OutcomesAnalytics.kt$ResourceCLickDataModel$val url: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesApi.kt$OutcomesApi.GetOutcome$@Json(name = "id") val id: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val loadingFrictionScreen: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val primaryCtaDeeplink: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val primaryCtaText: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val primarySuggestions: List&lt;Suggestion> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val secondaryCtaDeepLink: String? = null</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val secondaryCtaText: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val secondarySuggestionText: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val secondarySuggestions: List&lt;Suggestion> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesScreenDataModel.kt$OutcomesScreenDataModel$val toolbarText: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$@Json(name = "primary_cta") val primaryCta: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$@Json(name = "primary_cta_url") val primaryActionUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$@Json(name = "screen_title") val screenTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$@Json(name = "secondary_cta") val secondaryCta: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$@Json(name = "suggestions_title") val suggestionsTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$val description: String? = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$val subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$val suggestions: List&lt;Suggestion> = listOf()</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestions.kt$OutcomesSuggestions$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$OutcomeEvent.GetOutcome$val assessmentId: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$OutcomeInput.GetOutcomes$val assessmentId: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$OutcomesSuggestionsViewModel$var frictionScreenTimerRunning: MutableState&lt;Boolean> = mutableStateOf(false) private set</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$OutcomesSuggestionsViewModel$var state: MutableState&lt;State&lt;OutcomesScreenDataModel>> = mutableStateOf(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$OutcomesSuggestionsViewModel.Companion$const val MINIMUM_WAIT_TIME = 3000L</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$ResourceIdentity$val id: String</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$ResourceIdentity$val source: Source</ID>
    <ID>UndocumentedPublicProperty:OutcomesSuggestionsViewModel.kt$Source$val type: String</ID>
    <ID>UndocumentedPublicProperty:PCHAppEnvironment.kt$PCHAppEnvironment$val audienceUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:PCHAppEnvironment.kt$PCHAppEnvironment$val baseUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:PCHAppEnvironment.kt$PCHAppEnvironment$val pcoEnvironment: ca.loblaw.pcid.login.internal.Environment</ID>
    <ID>UndocumentedPublicProperty:PCHHealthFeatureFlags.kt$PCHHealthFeatureFlags$val enableMaplePhaseOne = FeatureFlag.BooleanFeatureFlag( id = "rel_hce_maplePhase1", name = "Maple Phase1 Access", description = "Enables Maple Phase 1", defaultValue = true )</ID>
    <ID>UndocumentedPublicProperty:PCHMapleChatViewModel.kt$PCHMapleChatViewModel$var hasLinkedAccount: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PCHMapleChatViewModel.kt$PCHMapleChatViewModel$var mapleUser: LiveData&lt;State&lt;MapleUser>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PCHMapleChatViewModel.kt$PCHMapleChatViewModel$var unlinkedAccount: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PCHMapleChatViewModel.kt$PCHMapleChatViewModel.Companion$const val UTM_SOURCE = "utm_source"</ID>
    <ID>UndocumentedPublicProperty:PCHPolicy.kt$PCHPolicy$@Json(name = "consent_status") val consentStatus: String</ID>
    <ID>UndocumentedPublicProperty:PCHPolicy.kt$PCHPolicy$@Json(name = "consent_time") val consentTime: String</ID>
    <ID>UndocumentedPublicProperty:PCHPolicy.kt$PCHPolicy$@Json(name = "line_of_business") val lineOfBusiness: String</ID>
    <ID>UndocumentedPublicProperty:PCHPolicy.kt$PCHPolicy$@Json(name = "policy_name") val policyName: String</ID>
    <ID>UndocumentedPublicProperty:PCHPolicy.kt$PCHPolicy$@Json(name = "policy_version") val policyVersion: String</ID>
    <ID>UndocumentedPublicProperty:PCHPolicy.kt$PCHPolicyRequest$@Json(name = "policy_consent") val policyConsent: PCHPolicy</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator$val refreshAndAuthenticateJwtRequests = mutableListOf&lt;RequestCallback&lt;AuthInfo>>()</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator$val scope = CoroutineScope(Dispatchers.Main.immediate + SupervisorJob())</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator$var deviceToken: String? get() = sharedPrefs.getString( PCHealthAuthenticator::deviceToken.name, defaultValue = null, useCache = true, shouldDecrypt = true ) private set(value) { sharedPrefs.putString( PCHealthAuthenticator::deviceToken.name, value, useCache = true, shouldEncrypt = true ) }</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator$var jwt: String? get() = sharedPrefs.getString( PCHealthAuthenticator::jwt.name, defaultValue = null, useCache = true, shouldDecrypt = true ) private set(value) { sharedPrefs.putString( PCHealthAuthenticator::jwt.name, value, useCache = true, shouldEncrypt = true ) }</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator$var refreshJwtRequestRunning = false</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator.Companion$const val AUTHORIZATION_HEADER_NAME = "Authorization"</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator.Companion$const val TAG = "PCHealthAuthenticator"</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator.PcHealthBiometricAuthInfo$val deviceToken: String?</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator.PcHealthBiometricAuthInfo$val jwt: String?</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator.PcHealthBiometricAuthInfo$val sessionId: String?</ID>
    <ID>UndocumentedPublicProperty:PCHealthAuthenticator.kt$PCHealthAuthenticator.PcHealthBiometricAuthInfo$val userId: String?</ID>
    <ID>UndocumentedPublicProperty:PCHealthLoggingConfigFlags.kt$PCHealthLoggingConfigFlags$val remoteSeverityLevel = FeatureFlag.StringFeatureFlag( id = "rel_mps_debugLevelSeverity", name = "Remote Logging Severity Filter", description = "Filters out remote logs based on severity. Possible values are DEFAULT,DEBUG,INFO,NOTICE,WARNING,ERROR,CRITICAL,ALERT,EMERGENCY ", defaultValue = "" )</ID>
    <ID>UndocumentedPublicProperty:PCHealthLoggingConfigFlags.kt$PCHealthLoggingConfigFlags$val remoteUrl = FeatureFlag.StringFeatureFlag( id = "rel_mps_appLoggingUrl", name = "Remote Logging URL", description = "Endpoint to post remote logs to", defaultValue = "" )</ID>
    <ID>UndocumentedPublicProperty:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment$val analyticsTracker: AnalyticsTracker by inject()</ID>
    <ID>UndocumentedPublicProperty:PCHealthStationReadingViewModel.kt$PCHealthStationReadingViewModel$val insightCards: LiveData&lt;State&lt;List&lt;InsightCard>>> = mutableInsightCards</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Body 1", group = "PC Health") val body1_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W400, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Body 2", group = "PC Health") val body2_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 14.sp, fontWeight = FontWeight.W400, lineHeight = 20.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Button 1", group = "PC Health") val button1_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Button 2", group = "PC Health") val button2_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 20.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Caption", group = "PC Health") val caption_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 12.sp, fontWeight = FontWeight.W400, lineHeight = 16.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "H1", group = "PC Health") val h1_pchealth = TextStyle( fontFamily = Noir, fontSize = 32.sp, fontWeight = FontWeight.W500, lineHeight = 40.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "H2", group = "PC Health") val h2_pchealth = TextStyle( fontFamily = Noir, fontSize = 24.sp, fontWeight = FontWeight.W500, lineHeight = 32.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "H3", group = "PC Health") val h3_pchealth = TextStyle( fontFamily = Noir, fontSize = 20.sp, fontWeight = FontWeight.W500, lineHeight = 28.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "H4", group = "PC Health") val h4_pchealth = TextStyle( fontFamily = Noir, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Label", group = "PC Health") val label_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Overline", group = "PC Health") val overline_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 12.sp, fontWeight = FontWeight.W700, lineHeight = 16.sp, )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Subtitle 1", group = "PC Health") val subtitle1_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 16.sp, fontWeight = FontWeight.W500, lineHeight = 24.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Subtitle 2", group = "PC Health") val subtitle2_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 14.sp, fontWeight = FontWeight.W500, lineHeight = 22.sp )</ID>
    <ID>UndocumentedPublicProperty:PCHealthTypography.kt$@ShowkaseTypography(name = "Tab", group = "PC Health") val tab_pchealth = TextStyle( fontFamily = FontFamily.SansSerif, fontSize = 10.sp, fontWeight = FontWeight.W400, lineHeight = 16.sp, )</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$Patient$val firstName: String</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$Patient$val id: String</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$Patient$val lastName: String</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$Patient$val relationship: PatientRelationship</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$Patient$val sex: PatientSex</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$val PatientRelationship.resourceId: Int @StringRes get() = when (this) { PatientRelationship.SELF -> R.string.triage_patient_self PatientRelationship.SPOUSE -> R.string.triage_patient_spouse PatientRelationship.CHILD -> R.string.triage_patient_child PatientRelationship.PARENT -> R.string.triage_patient_parent PatientRelationship.GRANDPARENT -> R.string.triage_patient_grand_parent PatientRelationship.SIBLING -> R.string.triage_patient_sibling PatientRelationship.OTHER -> R.string.triage_patient_other }</ID>
    <ID>UndocumentedPublicProperty:Patient.kt$val PatientSex.resourceId @StringRes get() = when (this) { PatientSex.MALE -> R.string.core_male PatientSex.FEMALE -> R.string.core_female }</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$@Json(name = "date_of_birth") val dateOfBirth: String</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$@Json(name = "first_name") val firstName: String</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$@Json(name = "last_name") val lastName: String</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$@Json(name = "partner_org_id") val partnerOrgId: String</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$@Json(name = "partner_user_id") val partnerUserId: String? = null</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$val relationship: String</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientAttributes$val sex: String</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientResponse$val attributes: PatientAttributes</ID>
    <ID>UndocumentedPublicProperty:PatientResponse.kt$PatientResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:PcidWebServiceResponseExtension.kt$val PcidAuthorization.isValidForRefresh: Boolean get() = this.accessToken.isNotNullOrEmpty()</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$val canAuthenticateWithBiometrics: Boolean get() = sharedPrefs.contains(PcoAccountUtils::biometricAuthInfo.name) &amp;&amp; biometricAuthInfo?.isValid == true</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$val environmentUtils: EnvironmentUtils</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$val signOutListeners: MutableSet&lt;() -> Unit> = mutableSetOf()</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$var accessToken: String get() = sharedPrefs.getString(PcoAccountUtils::accessToken.name, shouldDecrypt = true) ?: "" set(value) { sharedPrefs.putString(PcoAccountUtils::accessToken.name, value, shouldEncrypt = true) }</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$var idToken: String get() = sharedPrefs.getString(PcoAccountUtils::idToken.name, shouldDecrypt = true) ?: "" set(value) { sharedPrefs.putString(PcoAccountUtils::idToken.name, value, shouldEncrypt = true) }</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$var pcid: String get() = sharedPrefs.getString(PcoAccountUtils::pcid.name, shouldDecrypt = true) ?: "" set(value) { sharedPrefs.putString(PcoAccountUtils::pcid.name, value, shouldEncrypt = true) }</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils$var refreshToken: String get() = sharedPrefs.getString( PcoAccountUtils::refreshToken.name, useCache = false, shouldDecrypt = true ) ?: "" set(value) { sharedPrefs.putString( PcoAccountUtils::refreshToken.name, value, useCache = false, shouldEncrypt = true ) }</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils.PcHealthBiometricAuthInfo$// guard against an invalid authentication state from being used to restore state val isValid = idToken.isNotEmpty() &amp;&amp; pcid.isNotEmpty() &amp;&amp; accessToken.isNotEmpty() &amp;&amp; refreshToken.isNotEmpty()</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils.PcHealthBiometricAuthInfo$val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils.PcHealthBiometricAuthInfo$val idToken: String</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils.PcHealthBiometricAuthInfo$val pcid: String</ID>
    <ID>UndocumentedPublicProperty:PcoAccountUtils.kt$PcoAccountUtils.PcHealthBiometricAuthInfo$val refreshToken: String</ID>
    <ID>UndocumentedPublicProperty:PcoSignUpActivity.kt$PcoSignUpActivity.Companion$const val LOAD_URL = "https://www.pcoptimum.ca/?utm_source=league&amp;utm_medium=partnerships&amp;utm_campaign=evergreen"</ID>
    <ID>UndocumentedPublicProperty:PermissionViewModel.kt$PermissionViewModel$var onAction = { _: Boolean, _: Boolean -> }</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$// Gender Info val sex: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$// Location Info val address1: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$// Personal Info val firstName: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val address2: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val city: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val country: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val countryCode: LiveData&lt;Int> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val dateOfBirth: LiveData&lt;State&lt;Date>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val genderIdentities: LiveData&lt;List&lt;GenderIdentity>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val isUserProfileSet: LiveData&lt;State&lt;Empty>> = SingleLiveEvent&lt;State&lt;Empty>>()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val lastName: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val optedIntoMarketingCommunications: LiveData&lt;Boolean> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val phoneNumber: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val postalCode: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val postalCodeIE: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val preferredName: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val pronouns: LiveData&lt;List&lt;Pronoun>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val province: LiveData&lt;State&lt;Province>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val province: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val provinceIE: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val state: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalInfoViewModel.kt$PersonalInfoViewModel$val zipCode: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "actions") var options: List&lt;WalletCardAction> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "amount") var amount: Double = 0.0</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "currency") var currency: String = ""</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "next_expiration") var nextExpiration: String = ""</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "rendered_template") var renderedTemplate: RenderedTemplate = RenderedTemplate()</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "total_allocation") var totalAllocation: Double = 0.0</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$PersonalStoreCreditBalance$@Json(name = "wallet_item_id") var walletItemId: String = ""</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$RenderedTemplate$@Json(name = "back") var back: String = ""</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$RenderedTemplate$@Json(name = "front") var front: String = ""</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditBalance.kt$RenderedTemplate$@Json(name = "name") var name: String = ""</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditRedeemed.kt$Amounts$@Json(name = "CAD") var cadAmount: Double = 0.0</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditRedeemed.kt$Amounts$@Json(name = "EUR") var eurAmount: Double = 0.0</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditRedeemed.kt$Amounts$@Json(name = "USD") var usdAmount: Double = 0.0</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditRedeemed.kt$PersonalStoreCreditRedeemed$@Json(name = "amounts") var amounts: Amounts</ID>
    <ID>UndocumentedPublicProperty:PersonalStoreCreditRedeemed.kt$PersonalStoreCreditRedeemed$@Json(name = "used_currency") var currency: String = ""</ID>
    <ID>UndocumentedPublicProperty:Pharmacy.kt$Pharmacy$val address: String</ID>
    <ID>UndocumentedPublicProperty:Pharmacy.kt$Pharmacy$val identificationNumber: String</ID>
    <ID>UndocumentedPublicProperty:Pharmacy.kt$Pharmacy$val imageUrl: String</ID>
    <ID>UndocumentedPublicProperty:Pharmacy.kt$Pharmacy$val name: String</ID>
    <ID>UndocumentedPublicProperty:PhoneNumberInputRow.kt$PhoneNumberInputRow$val countryCode: String? get() = binding.phoneNumberInput.countryCode</ID>
    <ID>UndocumentedPublicProperty:PhoneNumberInputRow.kt$PhoneNumberInputRow$val phoneNumber: String? get() = binding.phoneNumberInput.phoneNumber</ID>
    <ID>UndocumentedPublicProperty:PhoneNumberInputRow.kt$PhoneNumberInputRow$var onCountryChangedListener: (countryCode: String) -> Unit get() = binding.phoneNumberInput.onCountryChangedListener set(value) { binding.phoneNumberInput.onCountryChangedListener = value }</ID>
    <ID>UndocumentedPublicProperty:PhoneNumberInputRow.kt$PhoneNumberInputRow$var onPhoneNumberTouched: () -> Unit get() = binding.phoneNumberInput.onPhoneNumberTouched set(value) { binding.phoneNumberInput.onPhoneNumberTouched = value }</ID>
    <ID>UndocumentedPublicProperty:PointsIndicator.kt$PointsIndicator$lateinit var binding: WidgetPointsIndicatorBinding</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$OptimumTokens$@Json(name = "device_fingerprint") val deviceFingerprint: String</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$OptimumTokens$@Json(name = "member_id") val memberId: String</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$OptimumTokens$val authorization: String</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$PointsSystem$abstract val canEarnPoints: Boolean</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$PointsSystem$abstract val eligibility: PointsEligibility</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$PointsSystem.PCH.PcOptimum$val optimumTokens: OptimumTokens</ID>
    <ID>UndocumentedPublicProperty:PointsSystem.kt$PointsSystem.PointsEligibility$val text: String</ID>
    <ID>UndocumentedPublicProperty:PointsWorthController.kt$PointsWorthController$var currency: String = ""</ID>
    <ID>UndocumentedPublicProperty:PointsWorthController.kt$PointsWorthController$var rewardLevels: List&lt;Reward>? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:PractitionSelectionAnalyticsExt.kt$val PractitionerSelection?.preferredClinicianAnalyticsKey: Pair&lt;String, String> get() = "clin_pref" to when (this?.id) { null -> "no preference" else -> "clinician" }</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val avatarUrl: String?</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val bio: String?</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val consultLanguages: List&lt;String>?</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val id: String</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val name: String</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val nextAvailableStartDate: DateTime?</ID>
    <ID>UndocumentedPublicProperty:Practitioner.kt$Practitioner$val pricing: Pricing?</ID>
    <ID>UndocumentedPublicProperty:PractitionerDetailsEvents.kt$PractitionerDetailsEvents.CtaClicked$val practitionerId: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs$public val practitionerId: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerDetailsFragmentArgs.kt$PractitionerDetailsFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerAttributes$@Json(name = "avatar_url") val avatarUrl: String? = null</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerAttributes$@Json(name = "consult_languages") val consultLanguages: List&lt;String>? = null</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerAttributes$@Json(name = "next_available_start_date") val nextAvailableStartDate: String? = null</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerAttributes$val bio: String? = null</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerAttributes$val name: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerAttributes$val pricing: Pricing? = null</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerResponse$val attributes: PractitionerAttributes</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerResponse.kt$PractitionerResponse$val type: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionEvents.kt$PractitionerSelectionEvents.PractitionerSelected$val practitionerId: String?</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionFragmentArgs.kt$PractitionerSelectionFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$NextAvailability$val stringResource: UserText.Translatable</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$NextAvailability$val timestamp: Long</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val appointmentType: AppointmentType</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val locationId: String?</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val orgId: OrgId</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val patientId: String?</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val province: Province</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val serviceId: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionArgs$val specialtyId: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionModel$val isNextAvailableOptionVisible: Boolean</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionModel$val onPractitionerClick: (PractitionerId?) -> Unit</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionModel$val practitioners: List&lt;SelectablePractitionerModel></ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$PractitionerSelectionModel$val title: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$SelectablePractitionerModel$val id: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$SelectablePractitionerModel$val name: String</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$SelectablePractitionerModel$val nextAvailability: NextAvailability?</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionModels.kt$SelectablePractitionerModel$val pricing: Pricing?</ID>
    <ID>UndocumentedPublicProperty:PractitionerSelectionViewModel.kt$PractitionerSelectionAnalyticsEvents.PractitionerSelected$val practitionerId: String?</ID>
    <ID>UndocumentedPublicProperty:PreChatFormFragment.kt$PreChatFormFragment$val args: PreChatFormFragmentArgs by navArgs()</ID>
    <ID>UndocumentedPublicProperty:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs$public val agentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs$public val agentTypeDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:PreChatFormFragmentArgs.kt$PreChatFormFragmentArgs$public val chatAgentConfig: ChatAgentConfig? = null</ID>
    <ID>UndocumentedPublicProperty:PreChatFormViewModel.kt$PreChatFormViewModel$val chatDetails: LiveData&lt;State&lt;String>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PreChatFormViewModel.kt$PreChatFormViewModel$val isCovidChat: LiveData&lt;State&lt;Boolean>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PreChatFormViewModel.kt$PreChatFormViewModel$val isInfoValid: LiveData&lt;preChatInfo> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:PreChatFormViewModel.kt$PreChatFormViewModel.preChatInfo$val detail: String = ""</ID>
    <ID>UndocumentedPublicProperty:PreChatFormViewModel.kt$PreChatFormViewModel.preChatInfo$val isCovidChat: Boolean?</ID>
    <ID>UndocumentedPublicProperty:PreChatFormViewModel.kt$PreChatFormViewModel.preChatInfo$val isvalid: Boolean</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val info: PrescriptionInfo</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val isAutoFillEligible: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val isRenewable: Boolean</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val lastPickupDate: Date</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val medicationDirection: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val nextRefill: Date</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val pharmacy: Pharmacy</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val prescribedBy: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val refillLeft: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val status: PrescriptionType</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionDetail$val statusHint: String?</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionInfo$val brandName: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionInfo$val chemicalName: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionInfo$val imageUrl: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionInfo$val prescriptionNumber: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionInfo$val quantity: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetail.kt$PrescriptionInfo$val quantityPerUnit: String</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetailsViewModel.kt$PrescriptionDetailsInterface$val prescriptionDetails: StateFlow&lt;State&lt;PrescriptionDetailsStateData>></ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetailsViewModel.kt$PrescriptionDetailsStateData$val prescriptionDetail: PrescriptionDetail</ID>
    <ID>UndocumentedPublicProperty:PrescriptionDetailsViewModel.kt$PrescriptionDetailsStateData$val userSettings: UserSettings</ID>
    <ID>UndocumentedPublicProperty:Pricing.kt$Pricing$@Json(name = "out_of_pocket") val outOfPocket: Money = Money()</ID>
    <ID>UndocumentedPublicProperty:Pricing.kt$Pricing$@Json(name = "total_price") val totalPrice: Money = Money()</ID>
    <ID>UndocumentedPublicProperty:PricingAnalyticsExt.kt$val Pricing.paymentRequiredAnalyticsKey: Pair&lt;String, Boolean> get() = Pair("paym_reqd", totalPrice.amountWithCoins != 0)</ID>
    <ID>UndocumentedPublicProperty:PricingResponse.kt$PricingAttributes$val pricing: Pricing</ID>
    <ID>UndocumentedPublicProperty:PricingResponse.kt$PricingResponse$val attributes: PricingAttributes</ID>
    <ID>UndocumentedPublicProperty:PricingResponse.kt$PricingResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockActivityLifecycleObserver.kt$PrivacyLockActivityLifecycleObserver$var isEnabled = true</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockLoginDialog.kt$PrivacyLockLoginDialog$val privacyLockUtils: PrivacyLockUtils by inject()</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockLoginDialog.kt$PrivacyLockLoginDialog$val userRepository: UserRepository by inject()</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockLoginDialog.kt$PrivacyLockLoginDialog$var onSignInWithBiometrics: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockLoginDialog.kt$PrivacyLockLoginDialog$var onSignInWithUsername: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockLoginDialog.kt$PrivacyLockLoginDialog$var onSignUp: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils$val enabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils$val hasUserEnabledPrivacyLockListeners: MutableSet&lt;(String, Boolean) -> Unit> = mutableSetOf()</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils$val isBioAuthAvailable: Boolean get() = BiometricManager.from(context) .canAuthenticate(Authenticators.BIOMETRIC_WEAK) == BiometricManager.BIOMETRIC_SUCCESS</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils$val isPinAuthAvailable: Boolean get() = isPatternSet || isPassOrPinSet</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils.ActivationPromptStatus.ShouldShow$val hasBiometrics: Boolean</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils.ActivationPromptStatus.ShouldShow$val isDeviceSecurityEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils.ActivationPromptStatus.ShouldShow$val isFinalPrompt: Boolean</ID>
    <ID>UndocumentedPublicProperty:PrivacyLockUtils.kt$PrivacyLockUtils.Companion$const val MAX_TIMES_TO_ASK_FOR_PRIVACY_LOCK = 3</ID>
    <ID>UndocumentedPublicProperty:ProfileVerificationViewModel.kt$ProfileVerificationInterface$val uiState: StateFlow&lt;State&lt;ProfileVerificationState>></ID>
    <ID>UndocumentedPublicProperty:ProfileVerificationViewModel.kt$ProfileVerificationInterface$val verifyUser: () -> Unit</ID>
    <ID>UndocumentedPublicProperty:ProfileVerificationViewModel.kt$ProfileVerificationState$val isValid = { var isValidForm = true questionList.forEach { isValidForm = isValidForm &amp;&amp; it.isAnswered } isValidForm }</ID>
    <ID>UndocumentedPublicProperty:ProfileVerificationViewModel.kt$ProfileVerificationState$val onAnswerSelected: (Int, Int) -> Unit</ID>
    <ID>UndocumentedPublicProperty:ProfileVerificationViewModel.kt$ProfileVerificationState$val questionList: List&lt;VerificationQuestion></ID>
    <ID>UndocumentedPublicProperty:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitDetails$val modal: ProgramEnrollmentLimitModal</ID>
    <ID>UndocumentedPublicProperty:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitDetails$val numberOfActivePrograms: Int</ID>
    <ID>UndocumentedPublicProperty:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitDetails$val programLimit: Int</ID>
    <ID>UndocumentedPublicProperty:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitModal$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:ProgramEnrollmentLimitModal.kt$ProgramEnrollmentLimitModal$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:Progress.kt$Progress$const val PROGRESS_COMPLETE = 1f</ID>
    <ID>UndocumentedPublicProperty:Progress.kt$Progress$const val PROGRESS_ONE_THIRD = 0.33f</ID>
    <ID>UndocumentedPublicProperty:Progress.kt$Progress$const val PROGRESS_TWO_THIRD = 0.66f</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val agentType: String</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val availability: String</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val deeplinkUrl: String</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val description: String</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val hasCoverage: Boolean</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val imageUrl: String</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val isFree: Boolean</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val pricing: Pricing</ID>
    <ID>UndocumentedPublicProperty:Provider.kt$Provider$val title: String</ID>
    <ID>UndocumentedPublicProperty:ProvinceExtensions.kt$val Province.coordinates get() = when (type) { "ON" -> Coordinates(latitude = "50.000000", longitude = "-85.000000") "AB" -> Coordinates(latitude = "55.000000", longitude = "-115.000000") "BC" -> Coordinates(latitude = "53.726669", longitude = "-127.647621") "MB" -> Coordinates(latitude = "56.415211", longitude = "-98.739075") "NL" -> Coordinates(latitude = "53.135509", longitude = "-57.660435") "NB" -> Coordinates(latitude = "46.498390", longitude = "-66.159668") "NS" -> Coordinates(latitude = "45.000000", longitude = "-63.000000") "PE" -> Coordinates(latitude = "46.250000", longitude = "-63.000000") "QC" -> Coordinates(latitude = "53.000000", longitude = "-70.000000") "SK" -> Coordinates(latitude = "55.000000", longitude = "-106.000000") "NT" -> Coordinates(latitude = "64.825500", longitude = "-124.845700") "NU" -> Coordinates(latitude = "70.453262", longitude = "-86.798981") "YT" -> Coordinates(latitude = "64.000000", longitude = "-135.000000") else -> throw IllegalStateException("Invalid province") }</ID>
    <ID>UndocumentedPublicProperty:ProvinceExtensions.kt$val Province.queryParam: String get() = "CA-$type"</ID>
    <ID>UndocumentedPublicProperty:PulseCheck.kt$PulseCheck$@Json(name = "ctaText") val ctaText: String</ID>
    <ID>UndocumentedPublicProperty:PulseCheck.kt$PulseCheck$@Json(name = "ctaUrl") val ctaUrl: String</ID>
    <ID>UndocumentedPublicProperty:PulseCheck.kt$PulseCheck$@Json(name = "name") val dataFields: String</ID>
    <ID>UndocumentedPublicProperty:PulseCheck.kt$PulseCheck$@Json(name = "scenario") val scenario: String</ID>
    <ID>UndocumentedPublicProperty:PulseCheck.kt$PulseCheckScenario$val value: String</ID>
    <ID>UndocumentedPublicProperty:QRCodeAddedReading.kt$QRCodeAddedReading$@Json(name = "screen_info") val screenInfo: ScreenInfo</ID>
    <ID>UndocumentedPublicProperty:QRCodeAddedReading.kt$QRCodeAddedReading$@Json(name = "user_readings")val userReadings: List&lt;ImportedUserReading></ID>
    <ID>UndocumentedPublicProperty:QRCodeGenerationFragment.kt$QRCodeGenerationFragment$val viewModel: QRCodeViewModel by viewModel()</ID>
    <ID>UndocumentedPublicProperty:QRCodeViewModel.kt$QRCodeViewModel$var qrCode by mutableStateOf&lt;State&lt;Bitmap?>>(Loading()) private set</ID>
    <ID>UndocumentedPublicProperty:QRCodeViewModel.kt$QRCodeViewModel$var timerValue by mutableStateOf(TIMER_SECONDS) private set</ID>
    <ID>UndocumentedPublicProperty:QRCodeViewModel.kt$QRCodeViewModel.Companion$const val TIMER_SECONDS = 180</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "additional_info") val additionalInfo: String = ""</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "answer_title") val answerTitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "drop_down_answers") val dropDownAnswers: List&lt;DropDownAnswer> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "input_answer") val inputAnswer: InputAnswer? = null</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "is_skippable") val isSkippable: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "learn_more_content") val learnMoreContent: String = "This is content!"</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "learn_more_title") val learnMoreTitle: String = "Learn more!"</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "multiple_choice_answers") val multipleChoiceAnswers: List&lt;MultipleChoiceAnswer> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "multiple_selection_answers") val multipleSelectionAnswers: List&lt;MultipleSelectionAnswer> = listOf()</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "topic_id") val topicId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Json(name = "user_answers") var userAnswers: Answers? = null</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$@Transient val type: Type = when { multipleChoiceAnswers.isNotEmpty() -> Type.MULTIPLE_CHOICE multipleSelectionAnswers.isNotEmpty() -> Type.MULTIPLE_SELECTION dropDownAnswers.isNotEmpty() -> Type.DROPDOWN inputAnswer?.type == InputAnswer.Type.DATE -> Type.INPUT_DATE inputAnswer?.type == InputAnswer.Type.NUMBER -> Type.INPUT_NUMBER inputAnswer?.type == InputAnswer.Type.STRING -> Type.INPUT_STRING else -> Type.UNKNOWN }</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$val id: String</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:Question.kt$Question$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuestionController.kt$QuestionController$lateinit var module: Module</ID>
    <ID>UndocumentedPublicProperty:QuestionController.kt$QuestionController$val captionedImages: List&lt;RevolvingCarousel.CaptionedImage></ID>
    <ID>UndocumentedPublicProperty:QuestionController.kt$QuestionController$val drawable: Drawable?</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$@Json(name = "disclaimer_icon_id") val disclaimerIconId: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$@Json(name = "footer_action_text") val footerActionText: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$@Json(name = "footer_text") val footerText: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$@Json(name = "footer_url") val footerUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$@Json(name = "menu_items") val items: List&lt;QuickActionMenuItem> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$@Json(name = "second_footer_text") val footerDescriptionText: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$val disclaimer: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionDetailItem$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMainPage$@Json(name = "menu_items") var menuItems: List&lt;QuickActionMenuItem> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$@Json(name = "action_icon_id") val actionIconId: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$@Json(name = "detail_page") val detailItem: QuickActionDetailItem? = null</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$@Json(name = "icon_content_id") val iconContentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$@Json(name = "icon_id") val iconId: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$@Json(name = "should_terminate") val shouldTerminate: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$@Json(name = "url") val targetUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActionMenuItem$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:QuickActions.kt$QuickActions$@Json(name = "quick_actions_main_page") val quickActionMainPage: QuickActionMainPage</ID>
    <ID>UndocumentedPublicProperty:Reading.kt$Reading$@Json(name = "associated_reading") val associateReading: AssociateReading</ID>
    <ID>UndocumentedPublicProperty:Reading.kt$Reading$@Json(name = "line_values") val lineValues: Map&lt;String, String> = emptyMap()</ID>
    <ID>UndocumentedPublicProperty:Reading.kt$ReadingView$@Json(name = "reading_date_time") val readingDateTime: Date?</ID>
    <ID>UndocumentedPublicProperty:Reading.kt$ReadingView$@Json(name = "reading_id") val readingId: String</ID>
    <ID>UndocumentedPublicProperty:Reading.kt$ReadingView$val value: String</ID>
    <ID>UndocumentedPublicProperty:ReadingsController.kt$ReadingsController$var isEditing = false private set</ID>
    <ID>UndocumentedPublicProperty:ReadingsImportFragmentArgs.kt$ReadingsImportFragmentArgs$public val claimCode: String</ID>
    <ID>UndocumentedPublicProperty:RecSpans.kt$ResSpans$val context: Context</ID>
    <ID>UndocumentedPublicProperty:RecSpans.kt$ResSpans$val spans = ArrayList&lt;Any>()</ID>
    <ID>UndocumentedPublicProperty:RecentAchievementsResponse.kt$RecentAchievementsResponse$@Json(name = "recent_achievements") val recentAchievements: List&lt;AchievementDetail>?</ID>
    <ID>UndocumentedPublicProperty:RecentAchievementsViewModel.kt$RecentAchievementsViewModel$var recents by mutableStateOf&lt;State&lt;RecentAchievementsResponse>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemFailed$val currency: String</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemFailed$val error: String</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemFailed$val redeemableAmount: Int</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemFailed$val redeemablePoints: Long</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemResult$val currency: String</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemResult$val currentBalance: Long</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemResult$val previousBalance: Long</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemResult$val redeemableAmount: Int</ID>
    <ID>UndocumentedPublicProperty:RedeemResult.kt$RedeemResult$val redeemedBalance: Long</ID>
    <ID>UndocumentedPublicProperty:Refreshable.kt$Refreshable$val refreshFlow: Flow&lt;Unit></ID>
    <ID>UndocumentedPublicProperty:RefreshableViewModel.kt$val ViewModel.refreshFlow get() = refreshChannel.receiveAsFlow()</ID>
    <ID>UndocumentedPublicProperty:RegionSupport.kt$RegionSupport$val supported: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:RelationshipSelectionUseCase.kt$RelationshipSelectionState$val options: List&lt;PatientRelationship></ID>
    <ID>UndocumentedPublicProperty:RelationshipSelectionUseCase.kt$RelationshipSelectionState$val selectedOption: PatientRelationship?</ID>
    <ID>UndocumentedPublicProperty:RelationshipSelectionUseCase.kt$RelationshipSelectionState$val selectionChanged: (PatientRelationship) -> Unit</ID>
    <ID>UndocumentedPublicProperty:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagValue$val valueOrNull: T? get() = when (this) { is NotSet -> null is Set -> this.value }</ID>
    <ID>UndocumentedPublicProperty:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagValue.NotSet$val defaultValue: T</ID>
    <ID>UndocumentedPublicProperty:RemoteFeatureFlagsApi.kt$RemoteFeatureFlagValue.Set$val value: T</ID>
    <ID>UndocumentedPublicProperty:RemoveDependentDialog.kt$RemoveDependentDialog.Companion$const val EXTRA_RELATIONSHIP_TYPE = "extra_relationship_type"</ID>
    <ID>UndocumentedPublicProperty:RemoveReadingsController.kt$ReadingsToBeDeleted$val code: String</ID>
    <ID>UndocumentedPublicProperty:RemoveReadingsController.kt$ReadingsToBeDeleted$val name: String</ID>
    <ID>UndocumentedPublicProperty:RemoveReadingsController.kt$ReadingsToBeDeleted$val readings: List&lt;ReadingView></ID>
    <ID>UndocumentedPublicProperty:RemoveReadingsController.kt$ReadingsToBeDeleted$val valueUnit: ValueUnit</ID>
    <ID>UndocumentedPublicProperty:Repository.kt$Repository$// simple map based in memory cache, stopgap until we can create a proper in memory caching // layer between the database and the app. Used when reading from the database takes a long time var memoryCache = mutableMapOf&lt;String, Any>()</ID>
    <ID>UndocumentedPublicProperty:Repository.kt$Repository$val api: API</ID>
    <ID>UndocumentedPublicProperty:Repository.kt$Repository$val cache: Cache</ID>
    <ID>UndocumentedPublicProperty:Repository.kt$Repository$val userId: String? get() = api.authenticator.userId</ID>
    <ID>UndocumentedPublicProperty:Repository.kt$Repository.Companion$const val TAG = "Repository"</ID>
    <ID>UndocumentedPublicProperty:Repository_Banking.kt$val Repository.cachedPaymentCredentials: MutableList&lt;PaymentCredential>? get() { val credentials = cache.getDao&lt;RealmQuery&lt;PaymentCredential>>(PaymentCredential::class.java) ?.findAll() return if (credentials?.isValid == true) credentials else null }</ID>
    <ID>UndocumentedPublicProperty:Repository_ChatMessages.kt$val Repository.cachedMessagesFlow get() = chatMessageDao!!.getTableAsFlow().mapEach { it.leagueChatMessage }</ID>
    <ID>UndocumentedPublicProperty:Repository_ChatMessages.kt$val Repository.imagePreview: Flow&lt;File?> by lazy { MutableStateFlow(null) }</ID>
    <ID>UndocumentedPublicProperty:Repository_ChatMessages.kt$val Repository.previousChatReadTime: Flow&lt;Date> by lazy { MutableStateFlow(Date()) }</ID>
    <ID>UndocumentedPublicProperty:Repository_ChatMessages.kt$var Repository.cachedMessages: List&lt;LeagueChatMessage>? get() { val cachedMessagesList = mutableListOf&lt;LeagueChatMessage>() cache.getDao&lt;LeagueChatMessageDao>(LeagueChatMessageTable::class.java)?.getTable()?.forEach { cachedMessagesList.add(it.leagueChatMessage) } return cachedMessagesList } set(value) { value?.forEach { val table = LeagueChatMessageTable(leagueChatMessage = it) cache.insertOrUpdate(table) } }</ID>
    <ID>UndocumentedPublicProperty:Repository_Document.kt$val Repository.cachedFormList: List&lt;Form> get() { val cachedFormList = mutableListOf&lt;Form>() cache.getDao&lt;FormDao>(FormTable::class.java)?.getTable()?.forEach { cachedFormList.add(it.form) } return cachedFormList.toList() }</ID>
    <ID>UndocumentedPublicProperty:Repository_Document.kt$val Repository.cachedUserDocumentList: List&lt;UserDocument> get() { val cachedUserDocumentList = mutableListOf&lt;UserDocument>() cache.getDao&lt;UserDocumentDao>(UserDocumentTable::class.java)?.getTable()?.forEach { cachedUserDocumentList.add(it.userDocument) } return cachedUserDocumentList.toList() }</ID>
    <ID>UndocumentedPublicProperty:Repository_Home.kt$val Repository.homeNotification: HomeNotification get() = HomeNotificationData(notifications).homeNotification</ID>
    <ID>UndocumentedPublicProperty:Repository_Notification.kt$val Repository.notifications: NotificationData get() { val data = getLocalNotification() api.getNotifications( requestCallback { result -> when (result) { is Success -> { // Only save the notification items. Headers are remade during runtime. val table = NotificationTable(result.response) cache.insertOrUpdate(table) EventBus.getDefault().post(result.response) } is Failure -> { Log.e(TAG, "Error getting notifications: ${result.errorResponse}") } } } ) return data }</ID>
    <ID>UndocumentedPublicProperty:Repository_Pco.kt$val Repository.cachedHouseholdPoints: HouseholdPoints? get() { return cache.getDao&lt;HouseholdPointsDao>(HouseholdPointsTable::class.java) ?.getTable()?.householdPoints }</ID>
    <ID>UndocumentedPublicProperty:Repository_Pco.kt$val Repository.cachedMember: Member? get() { return cache.getDao&lt;MemberDao>(MemberTable::class.java)?.getTable()?.member }</ID>
    <ID>UndocumentedPublicProperty:RequestCallback.kt$ApiSuccess$val jsonResponse: JSONObject</ID>
    <ID>UndocumentedPublicProperty:RequestCallback.kt$Failure$val requestError: RequestError? = null</ID>
    <ID>UndocumentedPublicProperty:RequestCallback.kt$RequestCallback$// null signifies that the callback should execute on background thread val handler: Handler? get() = if (runOnBackgroundThread) { null } else { Handler(Looper.getMainLooper()) }</ID>
    <ID>UndocumentedPublicProperty:RequestError.kt$RequestError$@Json(name = "error") val error: String</ID>
    <ID>UndocumentedPublicProperty:RequestError.kt$RequestError$@Json(name = "error_description") val description: String</ID>
    <ID>UndocumentedPublicProperty:RequiredDocument.kt$RequiredDocument.Documents$val name: List&lt;UserText></ID>
    <ID>UndocumentedPublicProperty:RestAPIUtils.kt$RestAPIUtils.RequestErrorConverterFactory$val converter: (Moshi, ResponseBody) -> RequestError?</ID>
    <ID>UndocumentedPublicProperty:RestAPIUtils.kt$RestAPIUtils.RequestErrorConverterFactory$val moshi: Moshi</ID>
    <ID>UndocumentedPublicProperty:RevolvingCarousel.kt$RevolvingCarousel.CaptionedImage$val caption: String</ID>
    <ID>UndocumentedPublicProperty:RevolvingCarousel.kt$RevolvingCarousel.CaptionedImage$val drawable: Drawable?</ID>
    <ID>UndocumentedPublicProperty:RevolvingCarousel.kt$RevolvingCarousel.CaptionedImage$var contentId: String? = null</ID>
    <ID>UndocumentedPublicProperty:Reward.kt$Reward$@Json(name = "league_credit") val leagueCredit: Money</ID>
    <ID>UndocumentedPublicProperty:Reward.kt$Reward$@Json(name = "league_points") val points: Long</ID>
    <ID>UndocumentedPublicProperty:Reward.kt$Reward$val formattedPoints = points.formatWithComma()</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val canRedeem: Boolean</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val currency: String</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val currentTier: Reward</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val formattedLeagueCredit = leagueCredit.formatWithComma()</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val formattedLeaguePoints = leaguePoints.formatWithComma()</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val formattedRedeemablePoints = redeemablePoints.formatWithComma()</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val formattedRemainingPoints = remainingPoints.formatWithComma()</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val graphMax: Int</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val graphProgress: Int</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val isMax: Boolean</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val leagueCredit: Double</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val leaguePoints: Long</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val nextTier: Reward</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val redeemableAmount: Int</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val redeemablePoints: Long</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val remainingPoints: Long</ID>
    <ID>UndocumentedPublicProperty:RewardDetails.kt$RewardDetails$val rewardLevels: List&lt;Reward></ID>
    <ID>UndocumentedPublicProperty:RewardLevelsResponse.kt$RewardLevelsResponse$@Json(name = "league_points_reward_levels") val rewardLevels: List&lt;Reward></ID>
    <ID>UndocumentedPublicProperty:RewardRepository.kt$RewardRepository.Companion$const val TAG = "RewardRepository"</ID>
    <ID>UndocumentedPublicProperty:RewardViewModel.kt$RewardViewModel$val redeemDetails: LiveData&lt;State&lt;RedeemResult>> = mutableRedeemDetails</ID>
    <ID>UndocumentedPublicProperty:RewardViewModel.kt$RewardViewModel$val rewardDetails: LiveData&lt;State&lt;RewardDetails>> = mutableRewardDetails</ID>
    <ID>UndocumentedPublicProperty:RewardsAPI.kt$RewardsAPI.GetLeagueBalance$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:RewardsAPI.kt$RewardsAPI.GetRewardLevels$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:RewardsAPI.kt$RewardsAPI.RedeemLeaguePoints$@Json(name = "points") val redeemedPoints: Long</ID>
    <ID>UndocumentedPublicProperty:RewardsAPI.kt$RewardsAPI.RedeemLeaguePoints$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val healthProgramsBody: String</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val healthProgramsTitle: String</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val navigation: Navigation</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val openPcoTitle: String</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val productsBody: String</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val productsTitle: String</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$val waysToEarnTitle: String</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$var balanceLoading: Boolean = true set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceController.kt$RewardsBalanceController$var householdPoints: HouseholdPoints? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceViewModel.kt$RewardsBalanceViewModel$val householdPoints: LiveData&lt;State&lt;HouseholdPoints>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:RewardsBalanceViewModel.kt$RewardsBalanceViewModel$val noMember: SingleLiveEvent&lt;Empty> = SingleLiveEvent()</ID>
    <ID>UndocumentedPublicProperty:RewardsDataInjectionModule.kt$RewardsDataInjectionModule$val modules = arrayOf( RewardsRepositoryModule.module, RewardsViewModelModule.module, RewardsUseCaseModule.module )</ID>
    <ID>UndocumentedPublicProperty:RewardsModule.kt$RewardsDrawables$@RawRes val achievementCelebrationAnimation: Int</ID>
    <ID>UndocumentedPublicProperty:RewardsModule.kt$RewardsDrawables$val celebrationModalCloseImage: Int</ID>
    <ID>UndocumentedPublicProperty:RewardsModule.kt$RewardsDrawables$val milestoneTrackerSwoopImage: Int</ID>
    <ID>UndocumentedPublicProperty:RewardsModule.kt$RewardsDrawables$val placeHolderImageForBadges: Int?</ID>
    <ID>UndocumentedPublicProperty:RewardsModule.kt$RewardsDrawables$val tooltipImage: Int</ID>
    <ID>UndocumentedPublicProperty:RewardsRepositoryModule.kt$RewardsRepositoryModule$val module = module { single { AchievementsRepository(api = get()) } }</ID>
    <ID>UndocumentedPublicProperty:RewardsTransaction.kt$RewardsTransaction$@Json(name = "secondary_description") val secondaryDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:RewardsTransaction.kt$RewardsTransaction$@Json(name = "transaction_type") val transactionType: String = ""</ID>
    <ID>UndocumentedPublicProperty:RewardsTransaction.kt$RewardsTransaction$val amount: Int = 0</ID>
    <ID>UndocumentedPublicProperty:RewardsTransaction.kt$RewardsTransaction$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:RewardsTransaction.kt$RewardsTransaction$var date: Date</ID>
    <ID>UndocumentedPublicProperty:RewardsTransactions.kt$RewardsTransactions$val transactions: List&lt;RewardsTransaction> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:RewardsTransactionsController.kt$RewardsTransactionsController$var pointsTemplate: String = ""</ID>
    <ID>UndocumentedPublicProperty:RewardsTransactionsController.kt$RewardsTransactionsController$var rewardsTransactions: RewardsTransactions = RewardsTransactions(emptyList()) set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:RewardsTransactionsController.kt$RewardsTransactionsController$var transactionSubtitleTemplate: String = ""</ID>
    <ID>UndocumentedPublicProperty:RewardsTransactionsController.kt$RewardsTransactionsController$var transactionsHeader: String = ""</ID>
    <ID>UndocumentedPublicProperty:RewardsTransactionsViewModel.kt$RewardsTransactionsViewModel$val rewardsHistory: LiveData&lt;State&lt;RewardsTransactions>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:RewardsUseCaseModule.kt$RewardsUseCaseModule$val module = module { single { AchievementUseCase(repository = get()) } single { AchievementProgressUseCase(repository = get()) } single { RecentAchievementUseCase(repository = get()) } }</ID>
    <ID>UndocumentedPublicProperty:RewardsViewModelModule.kt$RewardsViewModelModule$val module = module { viewModel { ViewAllAchievementsViewModel(achievementUseCase = get()) } viewModel { ActivityCompletionViewModel(achievementUseCase = get()) } viewModel { AchievementProgressViewModel(achievementProgressUseCase = get()) } viewModel { RecentAchievementsViewModel(recentAchievementUseCase = get()) } }</ID>
    <ID>UndocumentedPublicProperty:RichText.kt$RichText$var lifecycleScope: LifecycleCoroutineScope? = null @ModelProp(options = [ ModelProp.Option.IgnoreRequireHashCode ]) set</ID>
    <ID>UndocumentedPublicProperty:RoadRunnerColorActivity.kt$RoadRunnerColorActivity$val colorGroups: List&lt;ColorController.ColorGroup> get() = listOf( ColorController.ColorGroup( getString(R.string.brand), listOf( R.color.roadrunner_blue_lightest_brand, R.color.roadrunner_blue_lighter_brand, R.color.roadrunner_blue_light_brand, R.color.roadrunner_blue_brand, R.color.roadrunner_blue_dark_brand, R.color.roadrunner_yellow_lightest_brand, R.color.roadrunner_yellow_lighter_brand, R.color.roadrunner_yellow_light_brand, R.color.roadrunner_yellow_brand, R.color.roadrunner_orange_brand, R.color.roadrunner_red_lightest_brand, R.color.roadrunner_red_lighter_brand, R.color.roadrunner_red_light_brand, R.color.roadrunner_magenta_brand, R.color.roadrunner_red_brand ) ), ColorController.ColorGroup( getString(R.string.neutral), listOf( R.color.roadrunner_white_neutral, R.color.roadrunner_gray_lightest_neutral, R.color.roadrunner_gray_lighter_neutral, R.color.roadrunner_gray_light_neutral, R.color.roadrunner_gray_neutral, R.color.roadrunner_gray_dark_neutral ) ), ColorController.ColorGroup( getString(R.string.functional), listOf( R.color.roadrunner_blue_light_functional, R.color.roadrunner_blue_functional, R.color.roadrunner_red_light_functional, R.color.roadrunner_red_functional, R.color.roadrunner_red_dark_functional, R.color.roadrunner_green_light_functional, R.color.roadrunner_green_functional, R.color.roadrunner_gray_functional ) ) )</ID>
    <ID>UndocumentedPublicProperty:RoadrunnerNavigation.kt$RoadrunnerNavigation.Companion$const val CARE_NAVIGATOR_CHAT_TYPE = "care-navigator"</ID>
    <ID>UndocumentedPublicProperty:RoadrunnerNavigation.kt$RoadrunnerNavigation.Companion$const val CUSTOMER_CARE_CHAT_TYPE = "customer-care"</ID>
    <ID>UndocumentedPublicProperty:RoadrunnerNavigation.kt$RoadrunnerNavigation.Companion$const val DIETITIAN_CHAT_TYPE = "dietitian"</ID>
    <ID>UndocumentedPublicProperty:RoadrunnerNavigation.kt$RoadrunnerNavigation.Companion$const val HEALTH_CONCIERGE_CHAT_TYPE = "health-concierge"</ID>
    <ID>UndocumentedPublicProperty:RoadrunnerNavigation.kt$RoadrunnerNavigation.Companion$const val PHARMACIST_CHAT_TYPE = "pharmacist"</ID>
    <ID>UndocumentedPublicProperty:RootActivity.kt$RootActivity$// File of image to upload. var imageFile: File? = null</ID>
    <ID>UndocumentedPublicProperty:RootActivity.kt$RootActivity$lateinit var privacyLockActivityLifecycleObserver: PrivacyLockActivityLifecycleObserver</ID>
    <ID>UndocumentedPublicProperty:RootActivity.kt$RootActivity$val isNetworkAvailable: Boolean get() = networkConnectionManager?.isNetworkAvailable(this) == true</ID>
    <ID>UndocumentedPublicProperty:RootActivity.kt$RootActivity.Companion$const val REQUEST_CHAT_FEEDBACK = 1001</ID>
    <ID>UndocumentedPublicProperty:RootActivity.kt$RootActivity.Companion$const val REQUEST_FILE_CHOOSER = 3</ID>
    <ID>UndocumentedPublicProperty:RootApplication.kt$RootApplication$abstract val appName: String</ID>
    <ID>UndocumentedPublicProperty:RootApplication.kt$RootApplication$abstract val id: String</ID>
    <ID>UndocumentedPublicProperty:RootApplication.kt$RootApplication.Companion$@JvmStatic lateinit var application: RootApplication private set</ID>
    <ID>UndocumentedPublicProperty:RowController.kt$RowController$val sampleIcons: Array&lt;Drawable?></ID>
    <ID>UndocumentedPublicProperty:RowController.kt$RowController$val sampleImages: Array&lt;Drawable?></ID>
    <ID>UndocumentedPublicProperty:SalesforceChatClientData.kt$SalesforceChatClientData$val chatAgentConfig: ChatAgentConfig</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatClientData.kt$SalesforceChatClientData$val config: ChatConfig</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatClientData.kt$SalesforceChatClientData$var chatToken: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatClientData.kt$SalesforceChatClientData$var contactId: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatClientData.kt$SalesforceChatClientData$var signature: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatClientData.kt$SalesforceChatClientData$var user: ChatClientUser</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatMapResponse.kt$SalesforceChatMapResponse$val chatAvailabilities: MutableList&lt;ChatAvailability> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatMapResponse.kt$SalesforceChatMapResponse$val chatToken: String = json.optString("chat_token")</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatMapResponse.kt$SalesforceChatMapResponse$val contactId: String = json.optString("contact_id")</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatMapResponse.kt$SalesforceChatMapResponse$val isAgentAvailable: Boolean = json.optBoolean("agent_is_available")</ID>
    <ID>UndocumentedPublicProperty:SalesforceChatMapResponse.kt$SalesforceChatMapResponse$val signature: String = json.optString("signature")</ID>
    <ID>UndocumentedPublicProperty:SalesforceConfigResponse.kt$SalesforceConfigResponse$val chatConfig: ChatConfig</ID>
    <ID>UndocumentedPublicProperty:SalesforceProvinceState.kt$SalesforceProvinceState$val longForm: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceProvinceState.kt$SalesforceProvinceState$val shortForm: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceUtils.kt$SalesforceUtils.SalesforceConfig$val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceUtils.kt$SalesforceUtils.SalesforceConfig$val appId: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceUtils.kt$SalesforceUtils.SalesforceConfig$val mid: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceUtils.kt$SalesforceUtils.SalesforceConfig$val senderId: String</ID>
    <ID>UndocumentedPublicProperty:SalesforceUtils.kt$SalesforceUtils.SalesforceConfig$val serverUrl: String</ID>
    <ID>UndocumentedPublicProperty:ScreenInfo.kt$ScreenInfo$@Json(name = "image_id")val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ScreenInfo.kt$ScreenInfo$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:ScreenInfo.kt$ScreenInfo$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:SdkPresenterViewModelModule.kt$SdkPresenterViewModelModule$val module = module { viewModel { LaunchViewModel( authenticator = get(), ) } }</ID>
    <ID>UndocumentedPublicProperty:SearchInputUseCase.kt$SearchInputState$val focused: Boolean</ID>
    <ID>UndocumentedPublicProperty:SearchInputUseCase.kt$SearchInputState$val onFocusChange: (Boolean) -> Unit</ID>
    <ID>UndocumentedPublicProperty:SearchInputUseCase.kt$SearchInputState$val onSearchChange: (String) -> Unit</ID>
    <ID>UndocumentedPublicProperty:SearchInputUseCase.kt$SearchInputState$val search: String</ID>
    <ID>UndocumentedPublicProperty:SelectDateUseCase.kt$SelectAvailableDateState$val availableDates: List&lt;LocalDate></ID>
    <ID>UndocumentedPublicProperty:SelectDateUseCase.kt$SelectAvailableDateState$val selectedDate = selectedAvailableTimeslot?.date</ID>
    <ID>UndocumentedPublicProperty:SelectDateUseCase.kt$SelectAvailableDateState$val selectedDateChange: (LocalDate) -> Unit</ID>
    <ID>UndocumentedPublicProperty:SelectGenderIdentityViewModel.kt$SelectGenderIdentityViewModel$val genderIdentities: LiveData&lt;List&lt;GenderIdentity>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:SelectPatientFragmentArgs.kt$SelectPatientFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:SelectPatientUseCase.kt$SelectablePatientModel$val id: String</ID>
    <ID>UndocumentedPublicProperty:SelectPatientUseCase.kt$SelectablePatientModel$val name: UserText</ID>
    <ID>UndocumentedPublicProperty:SelectPatientUseCase.kt$SelectablePatientModel$val patientSelected: (String) -> Unit</ID>
    <ID>UndocumentedPublicProperty:SelectPatientUseCase.kt$SelectablePatientModel$val selected: Boolean</ID>
    <ID>UndocumentedPublicProperty:SelectPatientUseCase.kt$SelectedPatientModel$val patients: List&lt;SelectablePatientModel></ID>
    <ID>UndocumentedPublicProperty:SelectPatientUseCase.kt$SelectedPatientModel$val userSelection: Patient?</ID>
    <ID>UndocumentedPublicProperty:SelectPatientViewModel.kt$SelectPatientModel$val patientSelected: Boolean</ID>
    <ID>UndocumentedPublicProperty:SelectPatientViewModel.kt$SelectPatientModel$val patients: List&lt;SelectablePatientModel></ID>
    <ID>UndocumentedPublicProperty:SelectPatientViewModel.kt$SelectPatientModel$val showBannedUserError: Boolean</ID>
    <ID>UndocumentedPublicProperty:SelectPatientViewModel.kt$SelectPatientModel$val title: String</ID>
    <ID>UndocumentedPublicProperty:SelectPatientViewModel.kt$const val BANNED_USER_ERROR = "USER_INFORMATION_HAS_BEEN_BANNED"</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyFragmentArgs.kt$SelectPharmacyFragmentArgs$public val banner: Banner = Banner.LCL</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillFragmentArgs.kt$SelectPharmacyRefillFragmentArgs$public val banner: Banner = Banner.LCL</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$Pharmacy$val address: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$Pharmacy$val banner: Banner</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$Pharmacy$val id: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$Pharmacy$val name: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$Pharmacy$val number: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$SelectPharmacyRefillViewModel$val listPharmacies: List&lt;Pharmacy> = listOf( Pharmacy("1", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("2", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("3", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("4", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("5", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("6", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("7", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("8", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("9", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("10", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("11", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("12", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("13", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("14", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("15", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("16", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("17", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("18", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("19", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("20", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("21", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7") )</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyRefillViewModel.kt$SelectPharmacyRefillViewModel$var isPharmacySelected = false</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$Pharmacy$val address: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$Pharmacy$val banner: Banner</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$Pharmacy$val id: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$Pharmacy$val name: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$Pharmacy$val number: String</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$SelectPharmacyViewModel$val listPharmacies: List&lt;Pharmacy> = listOf( Pharmacy("1", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("2", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("3", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("4", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("5", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("6", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("7", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("8", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("9", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("10", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("11", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("12", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("13", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("14", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("15", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("16", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("17", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("18", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7"), Pharmacy("19", Banner.LCL, "Store#1", "Queen and Portland", "585 Queen St W, Toronto, ON M5V 2B7"), Pharmacy("20", Banner.LCL, "Store#2", "Yonge and King", "10 Yonge St, Toronto, ON M5V 2B7"), Pharmacy("21", Banner.SDM, "Store#3", "Bay and Bloor", "378 Bay St, Toronto, ON M5V 2B7") )</ID>
    <ID>UndocumentedPublicProperty:SelectPharmacyViewModel.kt$SelectPharmacyViewModel$var isPharmacySelected = false</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val nextRefill: Date = Date()</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val prescriptionType: PrescriptionType = PrescriptionType.READY_FOR_REFILL</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val quantity: String = ""</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val refillsLeft: Int? = 0</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val subtitle: String = ""</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$Prescription$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel$val refillList = listOf( Prescription( "1", PrescriptionType.READY_FOR_REFILL, title = "Naprosyn", subtitle = "NAPROXEN 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-02-28") ?: Date(), refillsLeft = 1 ), Prescription( "2", PrescriptionType.LOG_ON_HOLD, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-01") ?: Date(), refillsLeft = 2 ), Prescription( "3", PrescriptionType.UNABLE_TO_RENEW_ONLINE, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-02") ?: Date(), refillsLeft = 3 ), Prescription( "4", PrescriptionType.UNABLE_TO_REFILL_ONLINE, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-03") ?: Date(), refillsLeft = 4 ), Prescription( "5", PrescriptionType.REFILL_REQUESTED, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-04") ?: Date(), refillsLeft = 5 ), Prescription( "6", PrescriptionType.PARTIAL_QUANTITY_REMAINING, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-05") ?: Date(), refillsLeft = 6 ), Prescription( "7", PrescriptionType.READY_FOR_PICKUP, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-06") ?: Date(), refillsLeft = 7 ), Prescription( "8", PrescriptionType.RENEWAL_REQUIRED, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-07") ?: Date(), refillsLeft = 8 ) )</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel$val renewalList = emptyList&lt;Prescription>()</ID>
    <ID>UndocumentedPublicProperty:SelectPrescriptionsViewModel.kt$SelectPrescriptionsViewModel$val unavailableList = listOf( Prescription( "101", PrescriptionType.READY_FOR_REFILL, title = "Naprosyn", subtitle = "NAPROXEN 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-02-28") ?: Date(), refillsLeft = 1 ), Prescription( "102", PrescriptionType.LOG_ON_HOLD, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-01") ?: Date(), refillsLeft = 2 ), Prescription( "103", PrescriptionType.UNABLE_TO_RENEW_ONLINE, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-02") ?: Date(), refillsLeft = 3 ), Prescription( "104", PrescriptionType.UNABLE_TO_REFILL_ONLINE, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-03") ?: Date(), refillsLeft = 4 ), Prescription( "105", PrescriptionType.REFILL_REQUESTED, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-04") ?: Date(), refillsLeft = 5 ), Prescription( "106", PrescriptionType.PARTIAL_QUANTITY_REMAINING, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-05") ?: Date(), refillsLeft = 6 ), Prescription( "107", PrescriptionType.READY_FOR_PICKUP, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-06") ?: Date(), refillsLeft = 7 ), Prescription( "108", PrescriptionType.RENEWAL_REQUIRED, title = "Celebrex", subtitle = "CELECOBIX 50mg", quantity = "30 tablets", nextRefill = DateUtils.parseShortDate("2021-03-07") ?: Date(), refillsLeft = 8 ) )</ID>
    <ID>UndocumentedPublicProperty:SelectPronounViewModel.kt$SelectPronounViewModel$val pronouns: LiveData&lt;List&lt;Pronoun>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:SelectServiceAnalyticEvents.kt$SelectServiceAnalyticEvents.TrackServiceSelected$val serviceName: String</ID>
    <ID>UndocumentedPublicProperty:SelectServiceFragmentArgs.kt$SelectServiceFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:SelectServiceUseCase.kt$ServicePricing.Price$val pricing: Pricing</ID>
    <ID>UndocumentedPublicProperty:SelectServiceUseCase.kt$ServicePricing.PriceRange$val maxPrice: Pricing</ID>
    <ID>UndocumentedPublicProperty:SelectServiceUseCase.kt$ServicePricing.PriceRange$val minPrice: Pricing</ID>
    <ID>UndocumentedPublicProperty:SelectServiceUseCase.kt$val ServiceAppointmentType.resourceId get() = when (this) { ServiceAppointmentType.VIRTUAL -> R.string.triage_virtual_appointment_type ServiceAppointmentType.IN_PERSON -> R.string.triage_in_person_appointment_type }</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotFragmentArgs.kt$SelectTimeslotFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotUseCase.kt$SelectableTimeslotModel$val id: String</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotUseCase.kt$SelectableTimeslotModel$val selected: Boolean</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotUseCase.kt$SelectableTimeslotModel$val timeslotSelected: (SelectableTimeslotModel) -> Unit</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotUseCase.kt$SelectableTimeslotModel$val title: String</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotUseCase.kt$SelectableTimeslotState$val availableTimeslots: List&lt;SelectableTimeslotModel></ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotUseCase.kt$SelectableTimeslotState$val formattedDate: String</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotViewModel.kt$SelectTimeslotState$val formSubmitted: () -> Unit</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotViewModel.kt$SelectTimeslotState$val formValid: Boolean</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotViewModel.kt$SelectTimeslotState$val selectAvailableDateState: SelectAvailableDateState</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotViewModel.kt$SelectTimeslotState$val selectableTimeslotState: SelectableTimeslotState?</ID>
    <ID>UndocumentedPublicProperty:SelectTimeslotViewModel.kt$SelectTimeslotState$val title: String</ID>
    <ID>UndocumentedPublicProperty:ServerError.kt$ServerError.Companion$const val CODE_SIGNED_OUT = "signed_out"</ID>
    <ID>UndocumentedPublicProperty:ServerError.kt$ServerError.Companion$const val CODE_UNAUTHORIZED = "unauthorized"</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingLandingDialogFragmentArgs.kt$ServiceBookingLandingDialogFragmentArgs$public val selectedProvince: Province? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingLandingDialogFragmentArgs.kt$ServiceBookingLandingDialogFragmentArgs$public val specialtyId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$IntakeFormSelections$val details: String</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$IntakeFormSelections$val needsNote: Boolean</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$IntakeFormSelections$val needsPrescription: Boolean</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$IntakeFormSelections$val selectedSymptoms: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$PractitionerSelection$val id: String?</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$SelectedProvince$val isUserProvince: Boolean</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$SelectedProvince$val province: Province</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val appointmentId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val appointmentType: AppointmentType? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val flow: List&lt;PreConsultSteps>? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val hasConsented: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val intakeForm: IntakeForm? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val locationId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val orgId: OrgId</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val patientId: PatientId? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val paymentToken: String? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val practitionerSelection: PractitionerSelection? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val pricing: Pricing? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val selectedProvince: SelectedProvince</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val serviceId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val specialtyId: String</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$val timeslotId: String? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceBookingSelections.kt$ServiceBookingSelections$var intakeFormSelections: IntakeFormSelections? = null</ID>
    <ID>UndocumentedPublicProperty:ServiceIntakeFormFragmentArgs.kt$ServiceIntakeFormFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:ServiceResult.kt$ServiceResult.Empty$val errorStringRes: Int</ID>
    <ID>UndocumentedPublicProperty:ServiceResult.kt$ServiceResult.Error$val errorMessage: String</ID>
    <ID>UndocumentedPublicProperty:ServiceResult.kt$ServiceResult.Loading$val showLoading: Boolean</ID>
    <ID>UndocumentedPublicProperty:ServiceResult.kt$ServiceResult.Success$val data: T</ID>
    <ID>UndocumentedPublicProperty:Session.kt$Session$@Json(name = "session_id")val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:Session.kt$Session$@Transient val value: Map&lt;String, String> = readings.first().lineValues</ID>
    <ID>UndocumentedPublicProperty:Session.kt$Session$val readings: List&lt;Reading> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:SessionUtils.kt$SessionUtils$val signOutListeners: MutableSet&lt;suspend (context: Context?, signOutReason: SignOutReason?) -> Unit> = mutableSetOf()</ID>
    <ID>UndocumentedPublicProperty:SessionUtils.kt$SessionUtils$var lastUserName: String? get() = sharedPrefs.getString( SessionUtils::lastUserName.name, defaultValue = null ) set(value) { var name = value if (name?.isEmpty() == true) { name = null } sharedPrefs.putString(SessionUtils::lastUserName.name, name) }</ID>
    <ID>UndocumentedPublicProperty:SessionUtils.kt$SessionUtils$var userSignOutReason: SignOutReason? get() = SignOutReason.getReason( sharedPrefs.getString( SessionUtils::userSignOutReason.name, defaultValue = null ) ) set(value) { sharedPrefs.putString(SessionUtils::userSignOutReason.name, value?.id) }</ID>
    <ID>UndocumentedPublicProperty:SettingsActivity.kt$SettingsActivity.Companion$const val EXTRA_NAVIGATION_TARGET = "EXTRA_NAVIGATION_TARGET"</ID>
    <ID>UndocumentedPublicProperty:SettingsFragment.kt$SettingsFragment$val viewModel by viewModel&lt;SettingsScreenViewModel>()</ID>
    <ID>UndocumentedPublicProperty:SettingsFragmentArgs.kt$SettingsFragmentArgs$public val userType: UserType = UserType.LCL</ID>
    <ID>UndocumentedPublicProperty:SettingsScreenViewModel.kt$SettingsData$val autoRefillAllPrescriptions: CheckBoxInputState</ID>
    <ID>UndocumentedPublicProperty:SettingsScreenViewModel.kt$SettingsData$val securityAnswer: TextInputState</ID>
    <ID>UndocumentedPublicProperty:SettingsScreenViewModel.kt$SettingsData$val securityQuestion: TextInputState</ID>
    <ID>UndocumentedPublicProperty:SettingsScreenViewModel.kt$SettingsScreenViewModel$var settingsFormState by mutableStateOf&lt;State&lt;SettingsData>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:SettingsViewModel.kt$SettingsViewModel$val appVersionData = AppVersionFooter.AppVersionData( "v", BuildConfig.VERSION_NAME, BuildConfig.VERSION_CODE, "" )</ID>
    <ID>UndocumentedPublicProperty:SettingsViewModel.kt$SettingsViewModel$val hasLinkedMapleAccount: StateFlow&lt;State&lt;Boolean>> = fetchMapleUserUseCase() .mapSuccess { isMapleUser -> isMapleUser &amp;&amp; isLinkedAccountsItemVisible } .asStateIn(viewModelScope)</ID>
    <ID>UndocumentedPublicProperty:SettingsViewModel.kt$SettingsViewModel$val privacyLockAuthMethod: LiveData&lt;PrivacyLockAuthMethod> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod$@StringRes val message: Int?</ID>
    <ID>UndocumentedPublicProperty:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod.Biometric$val hasAccepted: Boolean</ID>
    <ID>UndocumentedPublicProperty:SettingsViewModel.kt$SettingsViewModel.PrivacyLockAuthMethod.Pin$val hasAccepted: Boolean</ID>
    <ID>UndocumentedPublicProperty:Sex.kt$Sex$@StringRes val name: Int</ID>
    <ID>UndocumentedPublicProperty:Sex.kt$Sex$val type: String</ID>
    <ID>UndocumentedPublicProperty:SexSelectionUseCase.kt$SexSelectionState$val options: List&lt;PatientSex></ID>
    <ID>UndocumentedPublicProperty:SexSelectionUseCase.kt$SexSelectionState$val selectedOption: PatientSex?</ID>
    <ID>UndocumentedPublicProperty:SexSelectionUseCase.kt$SexSelectionState$val selectionChanged: (PatientSex) -> Unit</ID>
    <ID>UndocumentedPublicProperty:ShadowScrollView.kt$ShadowScrollView$var animationDuration: Int</ID>
    <ID>UndocumentedPublicProperty:ShadowScrollView.kt$ShadowScrollView$var shadowVisibilityChangedListener: OnShadowVisibilityChangedListener? = null</ID>
    <ID>UndocumentedPublicProperty:ShareScreenshotViewModel.kt$ShareScreenshotViewModel$val state: LiveData&lt;State&lt;Uri>> get() = mutableState</ID>
    <ID>UndocumentedPublicProperty:ShopifyMoney.kt$ShopifyMoney$val currency: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyMoney.kt$ShopifyMoney$val value: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$@Json(name = "alt_text") val altText: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$@Json(name = "image_url") val imageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$@Json(name = "product_type") val productType: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$@Json(name = "product_url") val productUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$val price: ShopifyMoney</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$ShopifyProduct$val vendor: String = ""</ID>
    <ID>UndocumentedPublicProperty:ShopifyProduct.kt$const val SHOPIFY_TYPE_CHARITY = "Virtual Products or Services/Social Good/Charities/Charities"</ID>
    <ID>UndocumentedPublicProperty:SignInMethod.kt$SignInMethod$val value: String</ID>
    <ID>UndocumentedPublicProperty:SignOutReason.kt$SignOutReason$val id: String</ID>
    <ID>UndocumentedPublicProperty:SignOutReason.kt$SignOutReason$val shouldShowDialog: Boolean</ID>
    <ID>UndocumentedPublicProperty:SingleRowTable.kt$SingleRowTable$// This is intentionally set to 0 so that we can only save one instance of the class @PrimaryKey var id = 0</ID>
    <ID>UndocumentedPublicProperty:SpacingAttrRes.kt$SpacingAttrRes$@AttrRes val bottomSpacingResId: Int = R.attr.spacing_none</ID>
    <ID>UndocumentedPublicProperty:SpacingAttrRes.kt$SpacingAttrRes$@AttrRes val leftSpacingResId: Int = R.attr.spacing_none</ID>
    <ID>UndocumentedPublicProperty:SpacingAttrRes.kt$SpacingAttrRes$@AttrRes val rightSpacingResId: Int = R.attr.spacing_none</ID>
    <ID>UndocumentedPublicProperty:SpacingAttrRes.kt$SpacingAttrRes$@AttrRes val topSpacingResId: Int = R.attr.spacing_none</ID>
    <ID>UndocumentedPublicProperty:SpannableAppendable.kt$SpannableAppendable$val creator: SpannableStringCreator</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "appointment_types") val appointmentTypes: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "fhir_code") val fhirCode: String</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "health_card_id_required") val isHealthCardIdRequired: Boolean?</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "icon_urls") val icons: IconResponse</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "long_description") val longDescription: String</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "partner_org_id") val partnerOrgId: String</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "price_string") val price: String</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$@Json(name = "short_description") val shortDescription: String</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$val name: String</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyAttributes$val suspended: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyResponse$val attributes: SpecialtyAttributes</ID>
    <ID>UndocumentedPublicProperty:SpecialitiesResponse.kt$SpecialtyResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val appointmentTypes: List&lt;AppointmentType></ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val iconUrl: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val id: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val isHealthCardIdRequired: Boolean</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val isPopular: Boolean</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val longDescription: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val name: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val orgId: OrgId</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val price: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$Specialty$val shortDescription: String</ID>
    <ID>UndocumentedPublicProperty:Speciality.kt$val AppointmentType.jsonName: String get() = when (this) { AppointmentType.VIRTUAL_SCHEDULED -> "virtualScheduled" AppointmentType.INPERSON_SCHEDULED -> "inpersonScheduled" AppointmentType.VIRTUAL_ON_DEMAND -> "virtualOnDemand" }</ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlow.kt$SpecialtyFlow$val id: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlow.kt$SpecialtyFlow$val inPersonScheduledSteps: List&lt;PreConsultSteps></ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlow.kt$SpecialtyFlow$val virtualOnDemandSteps: List&lt;PreConsultSteps></ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlow.kt$SpecialtyFlow$val virtualScheduledSteps: List&lt;PreConsultSteps></ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlowResponse.kt$SpecialtyFlowAttributes$val inpersonScheduled: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlowResponse.kt$SpecialtyFlowAttributes$val virtualOnDemand: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlowResponse.kt$SpecialtyFlowAttributes$val virtualScheduled: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlowResponse.kt$SpecialtyFlowResponse$val attributes: SpecialtyFlowAttributes</ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlowResponse.kt$SpecialtyFlowResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyFlowResponse.kt$SpecialtyFlowResponse$val type: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs$public val selectedProvince: SelectedProvince</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLandingFragmentArgs.kt$SpecialtyLandingFragmentArgs$public val specialtyId: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$Coordinates$val latitude: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$Coordinates$val longitude: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$DayHoursOfOperation$val day: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$DayHoursOfOperation$val timeframe: Timeframe</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val address: Address</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val coordinates: Coordinates</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val distance: Double</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val email: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val hoursOfOperation: List&lt;DayHoursOfOperation></ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val id: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val isFreeParkingAvailable: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val isPaidParkingAvailable: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val isTransitNearby: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val isWheelchairAccessible: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val name: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val phone: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$SpecialtyLocation$val url: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$Timeframe$val period: Period</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocation.kt$Timeframe$val startTime: DateTime</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$HoursOfOperation$@Json(name = "hours_iso_range") val hoursIsoRange: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$HoursOfOperation$val title: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$@Json(name = "free_parking") val freeParking: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$@Json(name = "geo_code") val geoCode: GeoCode</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$@Json(name = "paid_parking") val paidParking: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$@Json(name = "transit_close_by") val transitCloseBy: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$@Json(name = "wheel_chair_accessible") val wheelChairAccessible: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val address: Address</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val distance: Double</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val email: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val hours: Map&lt;DayOfTheWeek, HoursOfOperation></ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val name: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val phone: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsAttributes$val url: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsResponse$val attributes: SpecialtyLocationsAttributes</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsResponse$val id: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyLocationsResponse.kt$SpecialtyLocationsResponse$val type: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtySelectionFragmentArgs.kt$SpecialtySelectionFragmentArgs$public val selectedProvince: Province? = null</ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyFragmentArgs.kt$SpecialtyUrgencyFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyViewModel.kt$SpecialtyUrgencyModel$val continueEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyViewModel.kt$SpecialtyUrgencyModel$val flow: List&lt;PreConsultSteps></ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyViewModel.kt$SpecialtyUrgencyModel$val name: String</ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyViewModel.kt$SpecialtyUrgencyModel$val urgencies: List&lt;UrgencyModel></ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyViewModel.kt$UrgencyModel$val option: AppointmentType</ID>
    <ID>UndocumentedPublicProperty:SpecialtyUrgencyViewModel.kt$UrgencyModel$val selected: Boolean</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$Link$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$Link$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleBanner$@Json(name = "speech_bubble_component") val speechBubble: SpeechBubbleComponent = SpeechBubbleComponent()</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleBanner$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleBanner$val link: Link = Link()</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleBanner$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleComponent$@Json(name = "profile_image_id") val profileImageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleComponent$@Json(name = "profile_name") val profileName: String = ""</ID>
    <ID>UndocumentedPublicProperty:SpeechBubbleBanner.kt$SpeechBubbleComponent$val text: String = ""</ID>
    <ID>UndocumentedPublicProperty:SplashViewModel.kt$SplashViewModel$val appLaunchState get() = mutableAppLaunchState as LiveData&lt;AppLaunchState></ID>
    <ID>UndocumentedPublicProperty:SplashViewModel.kt$SplashViewModel$val loginState: LiveData&lt;LoginState> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:SplashViewModel.kt$SplashViewModel$val mutableLoginState: MutableLiveData&lt;LoginState> get() = loginState as MutableLiveData&lt;LoginState></ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion$val selectedOptions = mutableSetOf&lt;Option>()</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Companion$const val SELECTION_MODE_MULTI_SELECT = 2</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Companion$const val SELECTION_MODE_SINGLE_SELECT = 1</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$val allowTextEntry: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$val exclusive: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$val text: String</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$val value: String</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$var selected: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:StackSelectQuestion.kt$StackSelectQuestion.Option$var textEntry: String = ""</ID>
    <ID>UndocumentedPublicProperty:State.kt$Failed$var errorMessage = "" protected set</ID>
    <ID>UndocumentedPublicProperty:State.kt$Loaded$val data: T</ID>
    <ID>UndocumentedPublicProperty:StatusCounts.kt$StatusCounts$val active: Int = 0</ID>
    <ID>UndocumentedPublicProperty:StatusCounts.kt$StatusCounts$val completed: Int = 0</ID>
    <ID>UndocumentedPublicProperty:StatusCounts.kt$StatusCounts$val expired: Int = 0</ID>
    <ID>UndocumentedPublicProperty:StatusCounts.kt$StatusCounts$val missed: Int get() = removed + expired</ID>
    <ID>UndocumentedPublicProperty:StatusCounts.kt$StatusCounts$val removed: Int = 0</ID>
    <ID>UndocumentedPublicProperty:StatusCounts.kt$StatusCounts$val upcoming: Int = 0</ID>
    <ID>UndocumentedPublicProperty:StatusPageHeader.kt$StatusPageHeader.ButtonAction$@StringRes val buttonTextResId: Int? = null</ID>
    <ID>UndocumentedPublicProperty:StatusPageHeader.kt$StatusPageHeader.ButtonAction$val buttonAction: () -> Unit</ID>
    <ID>UndocumentedPublicProperty:StatusPageHeader.kt$StatusPageHeader.ButtonAction$val buttonText: CharSequence? = null</ID>
    <ID>UndocumentedPublicProperty:StringExtension.kt$const val HEX_COLOR_TRANSPARENT = "#00000000"</ID>
    <ID>UndocumentedPublicProperty:StringMap.kt$StringMap$var jsonString: String = ""</ID>
    <ID>UndocumentedPublicProperty:StringMap.kt$StringMap$var map: MutableMap&lt;String, String> = mutableMapOf() set(value) { field = value updateString() }</ID>
    <ID>UndocumentedPublicProperty:StringProvider.kt$StringProvider$val resources: Resources</ID>
    <ID>UndocumentedPublicProperty:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity.Companion$const val EXTRA_CLAIM_ID = "claimId"</ID>
    <ID>UndocumentedPublicProperty:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity.Companion$const val EXTRA_REQUESTED_BENEFIT_TYPE = "requestedBenefitTypeKey"</ID>
    <ID>UndocumentedPublicProperty:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity.Companion$const val STATE_CLAIM = "claim"</ID>
    <ID>UndocumentedPublicProperty:SubmitClaimReviewActivity.kt$SubmitClaimReviewActivity.Companion$const val TAG = "SubmitClaimReviewActivity"</ID>
    <ID>UndocumentedPublicProperty:SuccessScreen.kt$SuccessScreen$@Json(name = "button_text") val buttonText: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuccessScreen.kt$SuccessScreen$@Json(name = "button_url") val buttonUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuccessScreen.kt$SuccessScreen$@Json(name = "friction_screen") val frictionScreen: FrictionScreen? = null</ID>
    <ID>UndocumentedPublicProperty:SuccessScreen.kt$SuccessScreen$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuccessScreen.kt$SuccessScreen$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuccessScreen.kt$SuccessScreen$var description: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup$@Json(name = "activity_count") val activityCount: Int = 0</ID>
    <ID>UndocumentedPublicProperty:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup$@Json(name = "suggested_activity_group_id") val suggestedActivityGroupId: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroup$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:SuggestedActivityGroupsResponse.kt$SuggestedActivityGroupsResponse$@Json(name = "suggested_activities_groups") val suggestedActivityGroups: List&lt;SuggestedActivityGroup> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:Suggestion.kt$Suggestion$@Json(name = "action_url")val actionUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:Suggestion.kt$Suggestion$@Json(name = "image_url")val imageUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:Suggestion.kt$Suggestion$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:Suggestion.kt$Suggestion$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:SwitchInputState.kt$SwitchInputState$var checked by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:SwitchInputState.kt$SwitchInputState$var onUpdate: (Boolean) -> Unit = { checked = it }</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.Data$@DrawableRes val headerActionIconRes: Int? = null</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.Data$val headerActionOnClickListener: OnClickListener? = null</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.Data$val headerActionText: String = ""</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.Data$val headerText: String</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.Data$val rowValuesGravity: Int? = null</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.Data$val rows: List&lt;RowData></ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.RowData$val action: String = ""</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.RowData$val actionClickListener: OnClickListener? = null</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.RowData$val label: String</ID>
    <ID>UndocumentedPublicProperty:Table.kt$Table.RowData$val value: String</ID>
    <ID>UndocumentedPublicProperty:TermsConditionViewModel.kt$TermsConditionModel$val acceptAndContinueClicked: () -> Unit</ID>
    <ID>UndocumentedPublicProperty:TermsConditionViewModel.kt$TermsConditionModel$val isConsentCtaLoading: Boolean</ID>
    <ID>UndocumentedPublicProperty:TermsConditionViewModel.kt$TermsConditionModel$val orgId: AppointmentOrgId</ID>
    <ID>UndocumentedPublicProperty:TermsConditionsFragmentArgs.kt$TermsConditionsFragmentArgs$public val serviceBookingSelections: ServiceBookingSelections</ID>
    <ID>UndocumentedPublicProperty:TestAppointment.kt$TestAppointment$val id: String</ID>
    <ID>UndocumentedPublicProperty:TestAppointment.kt$TestAppointment$val status: String</ID>
    <ID>UndocumentedPublicProperty:TestAppointment.kt$TestAppointmentsRequest$@Json(name = "data") val appointments: List&lt;TestAppointment> = listOf()</ID>
    <ID>UndocumentedPublicProperty:TestAppointment.kt$TestAppointmentsResponse$@Json(name = "data") val appointments: List&lt;TestAppointment> = listOf()</ID>
    <ID>UndocumentedPublicProperty:TestChatClient.kt$TestChatClient$val repo: Repository</ID>
    <ID>UndocumentedPublicProperty:TextInputRow.kt$TextInputRow$var onFinishedEditing = { _: String -> }</ID>
    <ID>UndocumentedPublicProperty:TextInputRxNumberFieldState.kt$TextInputRxNumberFieldState$var error by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:TextInputRxNumberFieldState.kt$TextInputRxNumberFieldState$var onUpdate: (String) -> Unit = { text = it error = text.isEmpty() || text.length != 7 }</ID>
    <ID>UndocumentedPublicProperty:TextInputRxNumberFieldState.kt$TextInputRxNumberFieldState$var text by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:TextInputState.kt$TextInputState$var error by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:TextInputState.kt$TextInputState$var onUpdate: (String) -> Unit = { text = it error = text.isEmpty() }</ID>
    <ID>UndocumentedPublicProperty:TextInputState.kt$TextInputState$var text by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:TextInputStoreNumberFieldState.kt$TextInputStoreNumberFieldState$var error by mutableStateOf(false)</ID>
    <ID>UndocumentedPublicProperty:TextInputStoreNumberFieldState.kt$TextInputStoreNumberFieldState$var onUpdate: (String) -> Unit = { text = it error = text.isEmpty() || text.length != 4 }</ID>
    <ID>UndocumentedPublicProperty:TextInputStoreNumberFieldState.kt$TextInputStoreNumberFieldState$var text by mutableStateOf(initial)</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$ErrorResult$val errorMessage: UserText? = null</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$ErrorResult$val isInvalid: Boolean</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$TextErrorState$val error: ErrorResult?</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$TextErrorState$val focusChange: (Boolean) -> Unit</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$TextErrorState$val focused: Boolean</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$TextErrorState$val text: String</ID>
    <ID>UndocumentedPublicProperty:TextInputUseCases.kt$TextErrorState$val textChanged: (String) -> Unit</ID>
    <ID>UndocumentedPublicProperty:Theme.kt$Theme$val colors: GenesisColors</ID>
    <ID>UndocumentedPublicProperty:Theme.kt$Theme$val shapes: GenesisShapes = GenesisShapes()</ID>
    <ID>UndocumentedPublicProperty:Theme.kt$Theme$val spacing: GenesisSpacing = GenesisSpacing()</ID>
    <ID>UndocumentedPublicProperty:Theme.kt$Theme$val strokes: GenesisStrokes = GenesisStrokes()</ID>
    <ID>UndocumentedPublicProperty:Theme.kt$Theme$val typography: GenesisTypography</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$AvailableTimeslotDate$val date: LocalDate</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$AvailableTimeslotDate$val id: String</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$AvailableTimeslotDate$val timeslots: List&lt;Timeslot></ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$Timeslot$val apiEndDateTime: String</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$Timeslot$val apiStartDateTime: String</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$Timeslot$val endDateTime: DateTime</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$Timeslot$val id: String</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$Timeslot$val partnerId: String?</ID>
    <ID>UndocumentedPublicProperty:Timeslot.kt$Timeslot$val startDateTime: DateTime</ID>
    <ID>UndocumentedPublicProperty:TintedBackgroundResource.kt$TintedBackgroundResource$@ColorInt val color: Int? = null</ID>
    <ID>UndocumentedPublicProperty:TintedBackgroundResource.kt$TintedBackgroundResource$@ColorInt val lightColor: Int? = null</ID>
    <ID>UndocumentedPublicProperty:TintedBackgroundResource.kt$TintedBackgroundResource$@DrawableRes var resId: Int? = null</ID>
    <ID>UndocumentedPublicProperty:TintedBackgroundResource.kt$TintedBackgroundResource.Companion$val darkVectorNames = listOf("dark_one", "dark_two")</ID>
    <ID>UndocumentedPublicProperty:TintedBackgroundResource.kt$TintedBackgroundResource.Companion$val lightVectorNames = listOf("light_one", "light_two", "light_three", "light_four")</ID>
    <ID>UndocumentedPublicProperty:TokenSdkAuthenticatorImpl.kt$TokenSdkAuthenticatorImpl$// function which will authenticate the socket session. Returns true if successful, false otherwise var authenticateSocketSession: (suspend (jwt: String) -> Boolean)? = null</ID>
    <ID>UndocumentedPublicProperty:TokenSdkAuthenticatorImpl.kt$TokenSdkAuthenticatorImpl.Companion$const val AUTHORIZATION_HEADER_NAME = "Authorization"</ID>
    <ID>UndocumentedPublicProperty:TokenSdkAuthenticatorImpl.kt$TokenSdkAuthenticatorImpl.Companion$const val TAG = "LeagueAuthenticatorImpl"</ID>
    <ID>UndocumentedPublicProperty:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs$public val ctaText: String</ID>
    <ID>UndocumentedPublicProperty:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs$public val description: String</ID>
    <ID>UndocumentedPublicProperty:TooltipBottomSheetDialogFragmentArgs.kt$TooltipBottomSheetDialogFragmentArgs$public val title: String</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$@Json(name = "color") val hexColor: String = HEX_COLOR_TRANSPARENT</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$@Json(name = "image_id") val imageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$@Json(name = "light_color") val hexLightColor: String = HEX_COLOR_TRANSPARENT</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$@Transient @IgnoredOnParcel @ColorInt val color = hexColor.toColor()</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$@Transient @IgnoredOnParcel @ColorInt val lightColor = hexLightColor.toColor()</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$val id: String</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$val url: String = ""</ID>
    <ID>UndocumentedPublicProperty:Topic.kt$Topic$var questions: MutableList&lt;Question> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:TransactionHistoryActivity.kt$TransactionHistoryActivity.Companion$const val EXTRA_ACCOUNT_TYPE = "account_type"</ID>
    <ID>UndocumentedPublicProperty:TransactionHistoryViewModel.kt$TransactionHistoryViewModel$val errorLiveData: LiveData&lt;String> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:TransactionHistoryViewModel.kt$TransactionHistoryViewModel$val transactionLoadMoreData: LiveData&lt;List&lt;Transaction>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:TransactionHistoryViewModel.kt$TransactionHistoryViewModel$val transactionsLiveData: LiveData&lt;List&lt;Transaction>> = MutableLiveData()</ID>
    <ID>UndocumentedPublicProperty:TransactionRow.kt$TransactionRow.TransactionType$@StringRes val type: Int = R.string.genesis_empty</ID>
    <ID>UndocumentedPublicProperty:TransactionRow.kt$TransactionRow.TransactionType$val accountsUsed: HashSet&lt;Int> = HashSet()</ID>
    <ID>UndocumentedPublicProperty:TriageActivity.kt$TriageActivity.Companion$const val EXTRA_APPOINTMENT_ID = "appointment_id"</ID>
    <ID>UndocumentedPublicProperty:TriageErrorBody.kt$TriageErrorBody$val code: String = ""</ID>
    <ID>UndocumentedPublicProperty:TriageErrorBody.kt$TriageErrorBody$val detail: String = ""</ID>
    <ID>UndocumentedPublicProperty:TriageErrorBody.kt$TriageErrorBody$val status: String? = null</ID>
    <ID>UndocumentedPublicProperty:TriageErrorBody.kt$TriageErrorBody$val title: String? = null</ID>
    <ID>UndocumentedPublicProperty:TriageErrorBody.kt$val requestErrorConverter: (Moshi, ResponseBody) -> RequestError? = { moshi, responseBody -> moshi .adapter&lt;List&lt;TriageErrorBody>>( Types.newParameterizedType(List::class.java, TriageErrorBody::class.java) ) .fromJson(responseBody.string()) ?.firstOrNull() ?.run { RequestError(error = code, description = detail) } }</ID>
    <ID>UndocumentedPublicProperty:TriageFeatureFlags.kt$TriageFeatureFlags$val serviceBooking = FeatureFlag.BooleanFeatureFlag( id = "rel_hce_serviceBooking", name = "Service Booking", description = "Enables the Maple Phase Two and Service Booking flows", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:TriageLocationSelectorFragmentArgs.kt$TriageLocationSelectorFragmentArgs$public val currentProvince: Province</ID>
    <ID>UndocumentedPublicProperty:TriageMenuController.kt$TriageMenuController$var state: TriageMenuState? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:TriageMenuViewModel.kt$TriageMenuState$val providers: List&lt;Provider>?</ID>
    <ID>UndocumentedPublicProperty:TriageMenuViewModel.kt$TriageMenuState$val quickActions: QuickActionMainPage? = null</ID>
    <ID>UndocumentedPublicProperty:TriageMenuViewModel.kt$TriageMenuState$val showAllProvidersButton: Boolean</ID>
    <ID>UndocumentedPublicProperty:TriageMenuViewModel.kt$TriageMenuState$val upcomingAppointments: UpcomingAppointmentsState?</ID>
    <ID>UndocumentedPublicProperty:TriageMenuViewModel.kt$UpcomingAppointmentsState$val count: Int</ID>
    <ID>UndocumentedPublicProperty:TriageMenuViewModel.kt$UpcomingAppointmentsState$val hasAppointments get() = count != 0</ID>
    <ID>UndocumentedPublicProperty:TriageRetrofitService.kt$const val X_TENANT_ID_TOKEN_HEADER = "X-Tenant-ID-Token"</ID>
    <ID>UndocumentedPublicProperty:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs$public val step: Int = 0</ID>
    <ID>UndocumentedPublicProperty:TriageSubMenuFragmentArgs.kt$TriageSubMenuFragmentArgs$public val subMenu: QuickActionDetailItem</ID>
    <ID>UndocumentedPublicProperty:UseCaseModule.kt$UseCaseModule$val module = module { factory { FetchHasLinkedMapleUserUseCase(api = get()) } }</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$val ftuxComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$val isAccountSetup: Boolean get() = firstName.isNotEmpty() &amp;&amp; lastName.isNotEmpty() &amp;&amp; dateOfBirth != null &amp;&amp; sex.isNotEmpty() &amp;&amp; location.isSet</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var avatarImageId: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var balanceAmount: Double = 0.0</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var balanceCurrency: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var dateOfBirth: Date? = null</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var defaultCurrency: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var email: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var employerGroupId: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var firstName: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var genderIdentities: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var hasDependents: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var hasEmployerGroup: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var hasHsa: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var hasPsa: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var healthGoalPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isClinicAdmin: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isFtuxCreateBookingVersionOneComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isFtuxVersionOneComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isHealthAtWorkEmails: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isHealthAtWorkPushNotifications: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isHrAdmin: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var isLeaguebotFtuxComplete: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var lastName: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var locale: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var location: Location = Location()</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var optedIntoMarketingCommunications: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var phoneCountryCode: Int = 1</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var phoneNumber: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var preferredFirstName: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var pronouns: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var role: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var sex: String = ""</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var userDependents: List&lt;UserDependent> = listOf()</ID>
    <ID>UndocumentedPublicProperty:User.kt$User$var userId: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserAchievement.kt$AchievementCategory$val completed: List&lt;AchievementDetail></ID>
    <ID>UndocumentedPublicProperty:UserAchievement.kt$AchievementCategory$val inProgress: List&lt;AchievementDetail></ID>
    <ID>UndocumentedPublicProperty:UserAchievement.kt$AchievementCategory$val name: String</ID>
    <ID>UndocumentedPublicProperty:UserAchievement.kt$UserAchievement$val achievementCategories: List&lt;Category></ID>
    <ID>UndocumentedPublicProperty:UserAchievement.kt$UserAchievement$val rewardPoints: Int = 0</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "claims_assistant_skip_insurance_details_view") val claimsAssistantSkipInsuranceDetailsView: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "claims_processed_externally") val areClaimsProcessedExternally: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "hide_banking_info") val hideBankingInfo: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "hide_submit_claims") val hideSubmitClaims: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "marketplace_url") val marketplaceUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "member_banking_info_types") val bankingPaymentTypes: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "must_accept_terms") val mustAcceptTerms: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_add_dependents_with_qle") val showAddDependentsQle: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_add_dependents_without_qle") val showAddDependentsWithoutQle: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_benefit_summary") val showBenefitSummary: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_covid19_vaccine_page") val showCovid19VaccinePage: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_dependents_menu_item") val showDependentsMenuItem: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_dependents_menu_item_indicator") val showDependentsIndicator: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "show_health_at_work") val showHealthAtWork: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserConfig.kt$UserConfig$@Json(name = "terms_url") val termsUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserConfigTable.kt$UserConfigTable$val userConfig: UserConfig = UserConfig()</ID>
    <ID>UndocumentedPublicProperty:UserCredential.kt$UserCredential$@Json(name = "phone_set") val isPhoneSet: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:UserCredential.kt$UserCredential$@Json(name = "user_id") val userId: String</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var addQualifyingLifeEvent: String? get() = getStringForKey("add_qualifying_life_event") set(addQualifyingLifeEvent) = setValueForKey("add_qualifying_life_event", addQualifyingLifeEvent)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var addQualifyingLifeEventDate: Date? get() = getDateForKey("add_qualifying_life_event_date") set(addQualifyingLifeEventDate) = setValueForKey("add_qualifying_life_event_date", addQualifyingLifeEventDate.getShortDateString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var addQualifyingLifeEventReason: String? get() = getStringForKey("add_qualifying_life_event_reason") set(addQualifyingLifeEventReason) = setValueForKey("add_qualifying_life_event_reason", addQualifyingLifeEventReason)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var address1: String? get() = getStringForKey("address1") set(address1) = setValueForKey("address1", address1)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var address2: String? get() = getStringForKey("address2") set(address2) = setValueForKey("address2", address2)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var city: String? get() = getStringForKey("city") set(city) = setValueForKey("city", city)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var country: String? get() = getStringForKey("country") set(country) = setValueForKey("country", country)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var dateOfBirth: Date? get() = getDateForKey("date_of_birth") set(dateOfBirth) = setValueForKey("date_of_birth", dateOfBirth.getShortDateString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var drugPlanMemberNumber: String? get() = getStringForKey("drug_plan_member_number") set(drugPlanMemberNumber) = setValueForKey("drug_plan_member_number", drugPlanMemberNumber)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var email: String? get() = getStringForKey("email") set(email) = setValueForKey("email", email)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var gender: String? get() = getStringForKey("gender") set(gender) = setValueForKey("gender", gender)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var isOverAgeDisabled: Boolean get() = getBooleanForKey("over_age_disabled") set(overAgeDisabled) = setValueForKey("over_age_disabled", overAgeDisabled.toString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var isStudent: Boolean get() = getBooleanForKey("student") set(student) = setValueForKey("student", student.toString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var isSuspended: Boolean get() = getBooleanForKey("suspended") set(isSuspended) = setValueForKey("suspended", isSuspended.toString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var isTobaccoUser: Boolean get() = getBooleanForKey("tobacco_user") set(tobaccoUser) = setValueForKey("tobacco_user", tobaccoUser.toString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var nationalIdentificationNumber: String? get() = getStringForKey("national_identification_number") set(nationalIdentificationNumber) = setValueForKey("national_identification_number", nationalIdentificationNumber)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var omitNationalIdentificationNumber: Boolean? get() = getBooleanForKey("omit_national_identification_number") set(omitNationalIdentificationNumber) = setValueForKey("omit_national_identification_number", omitNationalIdentificationNumber.toString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var partnershipEffectiveDate: Date? get() = getDateForKey("partnership_effective_date") set(partnershipEffectiveDate) = setValueForKey("partnership_effective_date", partnershipEffectiveDate.getShortDateString())</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var postal: String? get() = getStringForKey("postal") set(postal) = setValueForKey("postal", postal)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var postalCode: String? get() = getStringForKey("postal_code") set(postalCode) = setValueForKey("postal_code", postalCode)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var province: String? get() = getStringForKey("province") set(province) = setValueForKey("province", province)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var relationship: String? get() = getStringForKey("relationship") set(relationship) = setValueForKey("relationship", relationship)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var removeQualifyingLifeEvent: String? get() = getStringForKey("remove_qualifying_life_event") set(qle) = setValueForKey("remove_qualifying_life_event", qle)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var removeQualifyingLifeEventDate: String? get() = getStringForKey("remove_qualifying_life_event_date") set(date) = setValueForKey("remove_qualifying_life_event_date", date)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var token: String? get() = getStringForKey("token") set(token) = setValueForKey("token", token)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent$var travelPlanMemberNumber: String? get() = getStringForKey("travel_plan_member_number") set(travelPlanMemberNumber) = setValueForKey("travel_plan_member_number", travelPlanMemberNumber)</ID>
    <ID>UndocumentedPublicProperty:UserDependent.kt$UserDependent.Companion$const val ADD_TYPE_HSA_ONLY = "not_applicable_hsa_only"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "content_id") val thumbnailContentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "content_ids") val contentIdArray: List&lt;String> = listOf()</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "content_type") val contentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "document_type") val documentType: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "document_type_other_description") val documentDescription: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "expiration_date") val expirationDateString: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "original_claim_id") val originalClaimId: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "uploaded_date") val uploadedDate: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "user_document_id") val userDocumentId: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$@Json(name = "user_id") val userId: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$val documents: MutableList&lt;Document> = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$val expirationDate: Date? = if (expirationDateString == "") DateUtils.parseISO8601(expirationDateString) else null</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$val isPdf: Boolean get() = contentType == "application/pdf"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$val notes: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument$val privacy: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_BENEFICIARY_FORM = "beneficiary_form"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_EVIDENCE_OF_INSURABILITY = "evidence_of_insurability"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_FOREIGN_CONTRACT_WORKER_QUESTIONNAIRE = "foreign_contract_worker_questionnaire"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_GYM_MEMBERSHIP = "gym_membership"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_IDENTIFICATION = "identification"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_OTHER = "other"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_PRESCRIPTION = "prescription"</ID>
    <ID>UndocumentedPublicProperty:UserDocument.kt$UserDocument.Companion$const val TYPE_PROOF_OF_BUSINESS = "proof_of_business"</ID>
    <ID>UndocumentedPublicProperty:UserDocumentTable.kt$UserDocumentTable$@PrimaryKey var id = userDocument.userDocumentId</ID>
    <ID>UndocumentedPublicProperty:UserDocumentTable.kt$UserDocumentTable$val userDocument: UserDocument = UserDocument()</ID>
    <ID>UndocumentedPublicProperty:UserDocumentsResponse.kt$UserDocumentsResponse$@Json(name = "documents") val documentsArray: List&lt;UserDocument> = listOf()</ID>
    <ID>UndocumentedPublicProperty:UserDocumentsResponse.kt$UserDocumentsResponse$@Json(name = "forms") val formsArray: List&lt;Form> = listOf()</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isClaimsAssistantFtuxViewed: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isEnableIngestPhysicalCard: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isEnableWalletCardStatusSelection: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isFtuxViewed: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isGoalsFtuxViewed: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isHealthGoalsEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isHealthProfileEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isManageDependentV2: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isMobileEnrollment: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isModularFlexEnrollment: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isNewMarketplace: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlags.kt$UserFlags$var isWearableCloudDevicesEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserFlagsTable.kt$UserFlagsTable$val userFlags: UserFlags = UserFlags()</ID>
    <ID>UndocumentedPublicProperty:UserInfo.kt$UserInfo$val isNewfoundlandLabrador: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:UserInfo.kt$UserInfo$val isReturned: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserInfo.kt$UserInfo$val userType: UserType = UserType.None</ID>
    <ID>UndocumentedPublicProperty:UserInfo.kt$UserInfo$val userUnverifiedType: UserType = UserType.None</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$Balances$@Json(name = "balance_name") val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$Balances$@Json(name = "balance_type") val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$Balances$@Json(name = "in_network") val inNetworkBalance: LiveBalanceNetwork = LiveBalanceNetwork()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$Balances$@Json(name = "out_of_network") val outOfNetworkBalance: LiveBalanceNetwork = LiveBalanceNetwork()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$LiveBalanceNetwork$@Json(name = "family") val familySpend: LiveBalanceSpendType = LiveBalanceSpendType()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$LiveBalanceNetwork$@Json(name = "individual") val individualSpend: LiveBalanceSpendType = LiveBalanceSpendType()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$LiveBalanceSpendType$@Json(name = "paid_amount") val paidAmount: Money = Money()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$LiveBalanceSpendType$@Json(name = "remaining_amount") val remainingAmount: Money = Money()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$LiveBalanceSpendType$val limit: Money = Money()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$UserLiveBalances$@Json(name = "carrier_name") val carrierName: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$UserLiveBalances$@Json(name = "last_updated") val lastUpdated: Date = Date()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$UserLiveBalances$val balances: List&lt;Balances> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:UserLiveBalances.kt$UserLiveBalancesData$@Json(name = "user_benefit_live_balances") val userLiveBalancesData: UserLiveBalances = UserLiveBalances()</ID>
    <ID>UndocumentedPublicProperty:UserPcid.kt$UserPcid$@Json(name = "pc_user_id") val pcid: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserProfile.kt$UserProfile$// Pro fields - these are kept outside the user object, so they are not cached val availability: JSONArray</ID>
    <ID>UndocumentedPublicProperty:UserProfile.kt$UserProfile$val isDependent: Boolean</ID>
    <ID>UndocumentedPublicProperty:UserProfile.kt$UserProfile$val mastheadImageId: String</ID>
    <ID>UndocumentedPublicProperty:UserProfile.kt$UserProfile$val title: String</ID>
    <ID>UndocumentedPublicProperty:UserProfile.kt$UserProfile$val user: User</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$@Json(name = "associated_code") val associateCode: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$@Json(name = "associated_name") val associateName: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$@Json(name = "associated_unit") val associateValueUnit: ValueUnit = ValueUnit("test", "test")</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$@Json(name = "unit")val valueUnit: ValueUnit</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$val code: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$val sessions: List&lt;Session> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:UserReading.kt$UserReading$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:UserRepository.kt$UserRepository$// deprecated methods var cachedUserFlags: UserFlags? @Deprecated(message = "Use suspend fun getUserFlags(): UserFlags? instead") get</ID>
    <ID>UndocumentedPublicProperty:UserRepository.kt$UserRepository$@Deprecated(message = "Use getUser(): Flow&lt;Outcome&lt;UserProfile>> instead") val cachedUser: User?</ID>
    <ID>UndocumentedPublicProperty:UserRepository.kt$UserRepository$@Deprecated(message = "Use getUserConfig(): Flow&lt;Outcome&lt;UserConfig>> instead") val cachedUserConfig: UserConfig?</ID>
    <ID>UndocumentedPublicProperty:UserRepository.kt$UserRepository$var currentUserId: String?</ID>
    <ID>UndocumentedPublicProperty:UserRepositoryImpl.kt$UserRepositoryImpl$val sessionUtils: SessionUtils</ID>
    <ID>UndocumentedPublicProperty:UserSettings.kt$UserSettings$var isAutoFillEnabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:UserSettings.kt$UserSettings$var isEmailNotificationEnabled: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserSettings.kt$UserSettings$var isSmsNotificationEnabled: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:UserTable.kt$UserTable$val user: User = User()</ID>
    <ID>UndocumentedPublicProperty:UserText.kt$UserText.NonTranslatable$val value: String</ID>
    <ID>UndocumentedPublicProperty:UserText.kt$UserText.Translatable$@StringRes val resourceId: Int</ID>
    <ID>UndocumentedPublicProperty:UserText.kt$UserText.Translatable$val resourceArgs: List&lt;String> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:UserTypeResponse.kt$UserTypeResponse$@Json(name = "user_unverified_type") val userUnverifiedType: UserType</ID>
    <ID>UndocumentedPublicProperty:UserTypeResponse.kt$UserTypeResponse$@Json(name = "user_verified_type") val userType: UserType</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$Appointment$val date: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$Appointment$val details: List&lt;Detail>? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$Appointment$val title: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$AppointmentDetails$val confirmationCode: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$AppointmentDetails$val storeAddress: String?</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$AppointmentDetails$val storeName: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$AppointmentDetails$val storePhone: String?</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val appointmentDetails: AppointmentDetails?</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val appointments: List&lt;Appointment></ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val patientInfo: PatientInfo?</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val registrationFormData: FormHeroFormData?</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val statusDetails: List&lt;StatusDetail></ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val userPcid: UserPcid</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val userProfile: UserProfile</ID>
    <ID>UndocumentedPublicProperty:VaccinationDetails.kt$VaccinationDetails$val vaccineStatus: VaccineState</ID>
    <ID>UndocumentedPublicProperty:VaccinationForm.kt$BookingFormData$val formId: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationForm.kt$BookingFormData$val url: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationForm.kt$FormHeroFormData$val formDetails: FormDetails</ID>
    <ID>UndocumentedPublicProperty:VaccinationForm.kt$FormHeroFormData$val formId: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationForm.kt$FormHeroFormData$val url: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val canceled: Boolean?</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val completed: Boolean?</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val cta: Cta?</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val date: Date?</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val icon: VaccinationStatusDetailIcon</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val state: VaccineState</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetail.kt$StatusDetail$val title: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetailIcon.kt$VaccinationStatusDetailIcon$@DrawableRes val drawableId: Int</ID>
    <ID>UndocumentedPublicProperty:VaccinationStatusDetailIcon.kt$VaccinationStatusDetailIcon$@StringRes val a11yDescId: Int</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AddressResponse$@Json(name = "postal_code") val postalCode: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AddressResponse$val city: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AddressResponse$val country: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AddressResponse$val district: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AddressResponse$val line: List&lt;String>? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AddressResponse$val state: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentDetailsResponse$@Json(name = "registration_code") val registrationCode: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentDetailsResponse$@Json(name = "store_details") val store: Store? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentDetailsResponse$val appointments: List&lt;AppointmentResponse>? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentResponse$val canceled: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentResponse$val date: Date? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentResponse$val details: List&lt;Detail>? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$AppointmentResponse$val title: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Cta$@Json(name = "expiry_date") val expiryDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Cta$@Json(name = "form_details") val formDetails: FormDetails? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Cta$@Json(name = "form_id") val formId: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Cta$val url: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Detail$val description: String = ""</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Detail$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$FormDetails$val form: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$FormDetails$val host: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$FormDetails$val organization: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$FormDetails$val team: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$PatientInfo$@Json(name = "province_code") val provinceCode: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$PatientInfo$val guid: String</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$StatusDetailResponse$val canceled: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$StatusDetailResponse$val completed: Boolean? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$StatusDetailResponse$val cta: Cta? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$StatusDetailResponse$val date: Date? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$StatusDetailResponse$val state: VaccineState</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$StatusDetailResponse$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Store$val address: AddressResponse? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Store$val name: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$Store$val phone: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$VaccinationWorkflow$@Json(name = "appointment_details") val appointmentDetails: AppointmentDetailsResponse? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$VaccinationWorkflow$@Json(name = "patient_info") val patientInfo: PatientInfo? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$VaccinationWorkflow$@Json(name = "status_details") val statusDetails: List&lt;StatusDetailResponse></ID>
    <ID>UndocumentedPublicProperty:VaccinationWorkflow.kt$VaccinationWorkflow$@Json(name = "user_status") val userStatus: VaccineState</ID>
    <ID>UndocumentedPublicProperty:VaccineFormInterface.kt$VaccineFormInterface$val script: String</ID>
    <ID>UndocumentedPublicProperty:VaccineFormInterface.kt$VaccineFormInterface.Companion$const val JAVASCRIPT_INTERFACE_NAME = "NativeAndroid"</ID>
    <ID>UndocumentedPublicProperty:VaccineLandingActivity.kt$VaccineLandingActivity.Companion$const val EXTRA_VACCINE_TYPE = "vaccine_type"</ID>
    <ID>UndocumentedPublicProperty:VaccineLandingController.kt$VaccineLandingController$var vaccinationDetails: VaccinationDetails? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:VaccineLandingViewModel.kt$VaccineLandingViewModel$@OptIn(ExperimentalCoroutinesApi::class) val vaccinationDetails: LiveData&lt;State&lt;VaccinationDetails>> = combine(refresh.receiveAsFlow(), userProfile, userPcid) { _, profile, pcid -> when { profile is Failed -> flowOf(Failed(profile.errorMessage)) pcid is Failed -> flowOf(Failed(pcid.errorMessage)) profile is Loaded &amp;&amp; pcid is Loaded -> { vaccineRepository.getUserVaccinationWorkflow(profile.data.user.location.province) .map { response -> when (response) { is Success -> { Loaded( response().toVaccinationDetails( profile.data, pcid.data, localeAccessor, stringProvider ) ) } is Failure -> Failed&lt;VaccinationDetails>(response.errorResponse) } } } else -> flowOf(Loading()) } } .flatMapLatest { it } .distinctUntilChanged() .asLiveData(viewModelScope.coroutineContext)</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineAssessmentPreFilledFields$val enrolmentBanner: String = "pch"</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineAssessmentPreFilledFields$val enrolmentChannel: String = "mobile"</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineAssessmentPreFilledFields$val guid: String</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineAssessmentPreFilledFields$val province: String</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$@Json(name = "registrant.dob") val dateOfBirth: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$@Json(name = "registrant.email") val email: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$@Json(name = "registrant.firstName") val firstName: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$@Json(name = "registrant.lastName") val lastName: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$@Json(name = "registrant.phone") val phone: String? = null</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$val enrolmentBanner: String = "pch"</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$val enrolmentChannel: String = "mobile"</ID>
    <ID>UndocumentedPublicProperty:VaccinePreFilledFields.kt$VaccineRegistrationPreFilledFields$val pcid: String</ID>
    <ID>UndocumentedPublicProperty:VaccineType.kt$VaccineType$val analyticsValue: String</ID>
    <ID>UndocumentedPublicProperty:VaccineType.kt$VaccineType$val type: String</ID>
    <ID>UndocumentedPublicProperty:VaccineViewModelModule.kt$VaccineViewModelModule$val module = module { viewModel { VaccineLandingViewModel( userRepository = get(), vaccineRepository = get(), stringProvider = get(), localeAccessor = { LocaleUtils.getCurrentLocale(get()) } ) } }</ID>
    <ID>UndocumentedPublicProperty:VaccineWebViewClient.kt$VaccineWebViewClient.Companion$const val TAG = "VaccineWebViewClient"</ID>
    <ID>UndocumentedPublicProperty:ValidicDataType.kt$ValidicDataType$val value: String</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$DeviceType$val value: String</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$DisconnectResponse$@Json(name = "devices") val devices: List&lt;WearableDevice></ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$ValidicUser$@Json(name = "available_devices") val availableDevices: List&lt;WearableDevice>? = mutableListOf()</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$ValidicUser$@Json(name = "created_at")val createdAt: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$ValidicUser$@Json(name = "league_consent_given") val leagueConsentGiven: Boolean</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$ValidicUser$@Json(name = "mobile_token") val mobileToken: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$ValidicUser$@Json(name = "updated_at")val updatedAt: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$ValidicUser$@Json(name = "validic_user_id") val validicUserId: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "connect_url")val connectUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "connected")val connected: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "disconnect_url")val disconnectUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "display_name")val displayName: String</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "last_synced_at") val lastSyncedAt: Date ? = null</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "logo_url")val logoUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Json(name = "type")val type: DeviceType</ID>
    <ID>UndocumentedPublicProperty:ValidicUser.kt$WearableDevice$@Transient var noDataAvailable: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$MeasureUnit$val shortForm: String</ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$ValueQuestion.Companion$const val INCHES_VALUE = "in"</ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$ValueQuestion.Units$val availableUnits: List&lt;ValueUnit></ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$ValueQuestion.Units$val defaultUnit: ValueUnit</ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$ValueQuestion.ValueAndUnits$val selectedUnit: ValueUnit? = null</ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$ValueQuestion.ValueAndUnits$val units: Units? = null</ID>
    <ID>UndocumentedPublicProperty:ValueQuestion.kt$ValueQuestion.ValueAndUnits$val value: Int? = null</ID>
    <ID>UndocumentedPublicProperty:ValueUnit.kt$ValueUnit$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:ValueUnit.kt$ValueUnit$val type: String = ""</ID>
    <ID>UndocumentedPublicProperty:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail$@Json(name = "current_progress") val currentProgress: Float = 0f</ID>
    <ID>UndocumentedPublicProperty:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail$@Json(name = "data_type") val dataType: WearableDataType? = null</ID>
    <ID>UndocumentedPublicProperty:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail$@Json(name = "goal_total") val grandTotal: Float = 0f</ID>
    <ID>UndocumentedPublicProperty:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail$@Json(name = "last_updated") val lastUpdated: String = ""</ID>
    <ID>UndocumentedPublicProperty:VerifiableActivityProgressDetail.kt$VerifiableActivityProgressDetail$val unit: String = ""</ID>
    <ID>UndocumentedPublicProperty:VerificationQuestion.kt$VerificationAnswer$val answer: String</ID>
    <ID>UndocumentedPublicProperty:VerificationQuestion.kt$VerificationAnswer$var selected: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:VerificationQuestion.kt$VerificationQuestion$val question: String</ID>
    <ID>UndocumentedPublicProperty:VerificationQuestion.kt$VerificationQuestion$var answers: List&lt;VerificationAnswer></ID>
    <ID>UndocumentedPublicProperty:VerificationQuestion.kt$VerificationQuestion$var isAnswered: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ViewAllAchievementsViewModel.kt$ViewAllAchievementsViewModel$var userAchievement by mutableStateOf&lt;State&lt;UserAchievement>>(Uninitialized()) private set</ID>
    <ID>UndocumentedPublicProperty:ViewBindingProperty.kt$ClearOnDestroyProperty$val createProp: () -> T</ID>
    <ID>UndocumentedPublicProperty:ViewExtension.kt$val View.layoutInflator: LayoutInflater get() = LayoutInflater.from(context)</ID>
    <ID>UndocumentedPublicProperty:ViewExtension.kt$val View.leagueActivity: LeagueRootActivity? get() = this.context as? LeagueRootActivity</ID>
    <ID>UndocumentedPublicProperty:ViewModelModule.kt$ViewModelModule$val module = module { viewModel { (maxImageHeightInPx: Int, stringProvider: StringProvider) -> HomeViewModel( repository = get(), api = get(), userRepository = get(), healthJourneyRepository = get(), maxImageHeightInPx = maxImageHeightInPx, stringProvider = stringProvider ) } viewModel { AccountViewModel(userRepository = get(), leagueAPI = get()) } viewModel { PersonalInfoViewModel(userRepository = get(), leagueAPI = get()) } viewModel { AccountDetailsViewModel(userRepository = get(), leagueAPI = get()) } viewModel { AppSettingsViewModel(userRepository = get()) } viewModel { life.league.authentication.core.AuthenticationViewModel( api = get(), repo = get() ) } viewModel { TransactionHistoryViewModel(leagueAPI = get()) } viewModel { DependentsViewModel( api = get(), repo = get(), userRepository = get(), analytics = get() ) } viewModel { DependentInviteViewModel(api = get(), analytics = get()) } viewModel { WalletEnrollmentViewModel(repository = get(), userRepository = get()) } viewModel { SplashViewModel(authenticator = get(), featureFlagsRepository = get()) } viewModel { RewardViewModel(rewardUseCase = get()) } viewModel { DirectorPageViewModel() } viewModel { EnvironmentViewModel() } }</ID>
    <ID>UndocumentedPublicProperty:ViewModelModule.kt$ViewModelModule$val module = module { viewModel { SplashViewModel( authenticator = get(), featureFlagsRepository = get(), onboardingUtils = get(), analytics = get() ) } viewModel { LoginViewModel( api = get(), userRepository = get(), authenticator = get(), pcoAccountUtils = get(), buildInfoUtils = get(), analyticsTracker = get(), ) } viewModel { life.league.authentication.core.AuthenticationViewModel( api = get(), repo = get() ) } viewModel { AccountSetupViewModel(userRepository = get(), analytics = get()) } viewModel { MainViewModel( api = get(), repo = get(), authenticator = get(), privacyLockUtils = get(), pcoAccountUtils = get(), analyticsTracker = get() ) } viewModel { PermissionViewModel() } viewModel { RewardsBalanceViewModel(repository = get(), pcoAccountUtils = get()) } viewModel { RewardsTransactionsViewModel(repository = get()) } viewModel { PersonalInfoViewModel(api = get(), userRepository = get()) } viewModel { SettingsViewModel( authenticator = get(), privacyLockUtils = get(), analyticsTracker = get(), fetchMapleUserUseCase = get(), featureFlagsUtil = get() ) } viewModel { PCHMapleChatViewModel(api = get()) } viewModel { HomeViewModel( repo = get(), userRepository = get(), healthJourneyRepo = get(), pcoAccountUtils = get() ) } viewModel { NotificationSettingsViewModel(api = get(), userRepository = get()) } viewModel { EnvironmentViewModel() } }</ID>
    <ID>UndocumentedPublicProperty:WaitingRoomLinkOuts.kt$WaitingRoomLinkOuts$@Json(name = "waiting_room_links") var menuItems: List&lt;WaitingRoomMenuItems> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WaitingRoomLinkOuts.kt$WaitingRoomMenuItems$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:WaitingRoomLinkOuts.kt$WaitingRoomMenuItems$@Json(name = "link") val link: String = ""</ID>
    <ID>UndocumentedPublicProperty:WaitingRoomLinkOuts.kt$WaitingRoomMenuItems$val title: String = ""</ID>
    <ID>UndocumentedPublicProperty:WaitingScreenMenuController.kt$WaitingScreenMenuController$var waitingMenuItems: WaitingRoomLinkOuts? = null set(value) { field = value requestModelBuild() }</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$DependentCardsResponse$@Json(name = "benefit_cards") var cards: List&lt;GenericCard></ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "benefit_cards") var genericCards: List&lt;GenericCard> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "enrollment_end_date") var enrollmentLegacyEndDate: Date? = null</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "in_enrollment_period") var isInEnrollmentPeriod: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "is_first_time_enrollment") var isFirstTimeEnrollment: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "personal_store_credit_balance") var personalStoreCreditBalance: PersonalStoreCreditBalance = PersonalStoreCreditBalance()</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "selection_status") var selectionStatus: String = ""</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$Wallet$@Json(name = "short_enrollment_end_date") var enrollmentShortEndDate: ShortDate? = null</ID>
    <ID>UndocumentedPublicProperty:Wallet.kt$const val LEAGUE_CREDIT_WALLET_CARD_ID = "personal_store_credit_balance"</ID>
    <ID>UndocumentedPublicProperty:WalletCardAction.kt$WalletCardActionIconInfo$@Json(name = "icon_path") var iconPath: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCardAction.kt$WalletCardActionIconInfo$@Json(name = "name") var name: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCardAction.kt$WalletCardActionIconInfo$@Json(name = "unicode") var unicode: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCardAddCreditViewModel.kt$WalletCardAddCreditViewModel$val creditBalanceValue: LiveData&lt;ServiceResult&lt;Pair&lt;Double, Double>>> get() = mutableCreditBalanceValue</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailActivity.kt$WalletCardDetailActivity.Companion$const val EXTRA_ACTION_ID = "action_id"</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailActivity.kt$WalletCardDetailActivity.Companion$const val EXTRA_CARD_NAME = "card_name"</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailActivity.kt$WalletCardDetailActivity.Companion$const val EXTRA_ID = "benefit_id"</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailActivity.kt$WalletCardDetailActivity.Companion$const val EXTRA_WALLET_CARD_ID = "card_id"</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailController.kt$FeedbackWidgetData$val groupId: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailController.kt$FeedbackWidgetData$val memberId: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$val bitmapFileUriState: LiveData&lt;State&lt;Uri>> get() = mutableBitmapFileUriState</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$val feedbackWidgetData: LiveData&lt;FeedbackWidgetData> get() = mutableFeedbackWidgetData</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$val ingestPhysicalCardBoolean: LiveData&lt;Boolean> get() = mutableIngestPhysicalCardBoolean</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$val liveBalancesData: LiveData&lt;State&lt;LiveBalancesViewData>> get() = mutableLiveBalancesData</ID>
    <ID>UndocumentedPublicProperty:WalletCardDetailViewModel.kt$WalletCardDetailViewModel$val selectedCard: LiveData&lt;State&lt;GenericCard>> get() = mutableSelectedCard</ID>
    <ID>UndocumentedPublicProperty:WalletCardUtils.kt$const val EXTRA_HTML = "extra_html"</ID>
    <ID>UndocumentedPublicProperty:WalletCardUtils.kt$const val EXTRA_TITLE = "extra_title"</ID>
    <ID>UndocumentedPublicProperty:WalletCardUtils.kt$const val TEMP_WALLET_DIRECTORY = "screenshots"</ID>
    <ID>UndocumentedPublicProperty:WalletCardView.kt$WalletCardView.Companion$const val ASPECT_RATIO = 1.64</ID>
    <ID>UndocumentedPublicProperty:WalletCardView.kt$WalletCardView.Companion$const val CARD_CORNER_PERCENTAGE = .05 // webview html sets corner by width percentage, not radius</ID>
    <ID>UndocumentedPublicProperty:WalletCardView.kt$WalletCardView.WalletCardData$val card: GenericCard</ID>
    <ID>UndocumentedPublicProperty:WalletCardView.kt$WalletCardView.WalletCardData$val forDependent: Dependent? = null</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$Name$@Json(name = "text") val nameText: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val benefitId: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val groupId: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val iconUrl: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val name: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val productType: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val status: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val vendorName: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.BenefitCard$val walletCardId: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.FinanceCard$val iconUrl: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.FinanceCard$val id: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.FinanceCard$val name: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.FinanceCard$val vendorName: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCard.FinanceCard$val walletCardId: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCategoriesItemSectioned$@Json(name = "items_sectioned") val walletSections: List&lt;WalletResponseSection> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCategoriesItemSectioned$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCategory$val items: List&lt;WalletCard> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletCategory$val name: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseCategory$@Json(name = "section_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseCategory$@Json(name = "wallet_items") val walletItems: List&lt;WalletResponseItem> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseCategory$val name: Name = Name()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$@Json(name = "benefit_id") val benefitId: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$@Json(name = "benefit_product_type") val benefitProductType: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$@Json(name = "group_id") val groupId: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$@Json(name = "icon_url") val iconUrl: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$@Json(name = "vendor_name") val vendorName: Name = Name()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$@Json(name = "wallet_item_id") val walletItemId: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$val name: Name = Name()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$val status: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseItem$val type: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseSection$@Json(name = "section_id") val id: String = ""</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseSection$@Json(name = "sections") val categories: List&lt;WalletResponseCategory> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseSection$@Json(name = "wallet_items") val walletItems: List&lt;WalletResponseItem> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$WalletResponseSection$val name: Name = Name()</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$const val WALLET_CATEGORIES_CARD_STATUS_ACTIVE = "Active"</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$const val WALLET_CATEGORIES_CARD_STATUS_PAST = "Past"</ID>
    <ID>UndocumentedPublicProperty:WalletCategories.kt$const val WALLET_CATEGORIES_CARD_STATUS_PENDING = "Pending"</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesController.kt$WalletCardClickData$val benefitName: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesController.kt$WalletCardClickData$val cardStatus: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesController.kt$WalletCardClickData$val id: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesController.kt$WalletCardClickData$val walletCardId: String</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesViewModel.kt$WalletCategoriesPageData$val activeBenefits: List&lt;WalletCategory> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesViewModel.kt$WalletCategoriesPageData$val pastBenefits: List&lt;WalletCategory> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesViewModel.kt$WalletCategoriesPageData$val pendingBenefits: List&lt;WalletCategory> = emptyList()</ID>
    <ID>UndocumentedPublicProperty:WalletCategoriesViewModel.kt$WalletCategoriesViewModel$val walletCategoriesData: LiveData&lt;State&lt;WalletCategoriesPageData>> get() = mutableCategoriesData</ID>
    <ID>UndocumentedPublicProperty:WalletConfiguration.kt$WalletSettings$val appHost: String</ID>
    <ID>UndocumentedPublicProperty:WalletEnrollmentFragment.kt$WalletEnrollmentFragment$val analyticsTracker: AnalyticsTracker by inject()</ID>
    <ID>UndocumentedPublicProperty:WalletEnrollmentFragment.kt$WalletEnrollmentFragment$val viewModel: WalletEnrollmentViewModel by inject()</ID>
    <ID>UndocumentedPublicProperty:WalletEnrollmentViewModel.kt$WalletEnrollmentViewModel$val enrollmentData: LiveData&lt;State&lt;EnrollmentData>> get() = mutableEnrollmentData</ID>
    <ID>UndocumentedPublicProperty:WalletEnrollmentViewModel.kt$WalletEnrollmentViewModel$val mobileEnrollmentFlag: LiveData&lt;State&lt;Boolean>> get() = mutableMobileEnrollmentFlag</ID>
    <ID>UndocumentedPublicProperty:WalletFeatureFlags.kt$WalletFeatureFlags$val newManageDependents = FeatureFlag.BooleanFeatureFlag( id = "new_dependents", name = "Show New Manage Dependents Work", description = "Shows work in progress for the new Manage Dependents work", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:WalletIndividualLiveBalanceActivity.kt$WalletIndividualLiveBalanceActivity.Companion$const val EXTRA_LIVE_BALANCES_DATA = "live_balances_data"</ID>
    <ID>UndocumentedPublicProperty:WalletModule.kt$WalletModule$val modules = arrayOf( WalletViewModelModule.module, WalletUseCaseModule.module, WalletRepository.module )</ID>
    <ID>UndocumentedPublicProperty:WalletRepository.kt$WalletRepository$val module = module { single { ManageDependentsRepository(api = get()) } }</ID>
    <ID>UndocumentedPublicProperty:WalletUseCaseModule.kt$WalletUseCaseModule$val module = module { single { WalletUseCases(api = get()) } single { FetchEditDependentFormSchema(manageDependentsRepo = get()) } single { FetchAddDependentFormSchema(manageDependentsRepo = get()) } single { FetchSingleDependentData(manageDependentsRepo = get()) } single { UploadDependentFormUseCase(manageDependentsRepo = get()) } single { FetchDependentUseCase(userRepository = get(), manageDependentsRepo = get()) } single { FetchManageDependentsActionsUseCase(manageDependentsRepo = get()) } factory { ValidateDependentFormFieldsUseCase() } }</ID>
    <ID>UndocumentedPublicProperty:WalletViewModelModule.kt$WalletViewModelModule$val module = module { viewModel { WalletCategoriesViewModel( api = get() ) } viewModel { WalletCardDetailViewModel( repository = get(), userRepository = get(), api = get(), walletUseCases = get(), analyticsTracker = get(), fileUtils = FileUtils ) } viewModel { WalletCardAddCreditViewModel( api = get(), ) } viewModel { MemberInfoViewModel( walletUseCases = get(), userRepository = get() ) } viewModel { DependentCardViewModel( api = get(), fileUtils = FileUtils ) } viewModel { AddDependentsViewModel( fetchAddSchemaUseCase = get(), uploadDependentFormUseCase = get(), validateDependentFormFieldsUseCase = get(), ) } viewModel { DependentDetailsViewModel( fetchSingleDependentData = get() ) } viewModel { (dependentId: String, relationshipType: String) -> EditDependentViewModel( fetchEditDependentFormSchema = get(), uploadDependentFormUseCase = get(), validateDependentFormFieldsUseCase = get(), dependentId = dependentId, relationshipType = relationshipType ) } viewModel { ManageDependentsLandingViewModel( fetchActionsUseCase = get(), fetchDependentUseCase = get(), analytics = get() ) } viewModel { DependentInviteViewModel( manageDependentsRepo = get(), analytics = get() ) } }</ID>
    <ID>UndocumentedPublicProperty:WalletWebView.kt$WalletWebView$// we keep this around to facilitate identifying webviews for automated testing var data: String = ""</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val appLogoIcon: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val connectionSuccessful: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val consentIcon: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val failureIcon: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val loadingError: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val placeholderIcon: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableDrawables$@DrawableRes val successIcon: Int</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableTheme$val drawables: WearableDrawables</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableTheme$val showConsentCheckbox: Boolean</ID>
    <ID>UndocumentedPublicProperty:WearableConfiguration.kt$WearableTheme$val strings: WearableStrings</ID>
    <ID>UndocumentedPublicProperty:WearableConsent.kt$WearableConsent$@Json(name = "updated") val leagueConsent: Boolean</ID>
    <ID>UndocumentedPublicProperty:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs$public val dataPoints: Array&lt;String>? = null</ID>
    <ID>UndocumentedPublicProperty:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs$public val moduleIdentifier: String? = null</ID>
    <ID>UndocumentedPublicProperty:WearableConsentPrimerFragmentArgs.kt$WearableConsentPrimerFragmentArgs$public val wearableDevice: WearableDevice</ID>
    <ID>UndocumentedPublicProperty:WearableConsentResponse.kt$ConsentData$@Json(name = "consent_requested") val consentRequested: Boolean</ID>
    <ID>UndocumentedPublicProperty:WearableConsentResponse.kt$ConsentData$@Json(name = "receiving_data") val receivingData: Boolean</ID>
    <ID>UndocumentedPublicProperty:WearableConsentResponse.kt$ConsentData$val device: String</ID>
    <ID>UndocumentedPublicProperty:WearableConsentResponse.kt$WearableConsentResponse$@Json(name = "data_point_device_map") val response: Map&lt;String, List&lt;ConsentData>></ID>
    <ID>UndocumentedPublicProperty:WearableConsentResponse.kt$WearableConsentResponse$@Json(name = "receiving_data") val receivingData: Map&lt;String, Boolean>?</ID>
    <ID>UndocumentedPublicProperty:WearableConsentResponse.kt$WearableConsentResponse$@Json(name = "receiving_data_v2") val receivingDataV2: Map&lt;DeviceType, Map&lt;WearableDataType, Boolean>></ID>
    <ID>UndocumentedPublicProperty:WearableDataType.kt$WearableDataType$val value: String</ID>
    <ID>UndocumentedPublicProperty:WearableFeatureFlag.kt$WearableFeatureFlag$val wearableCloudPhaseTwo = FeatureFlag.BooleanFeatureFlag( id = "rel_wb_cloud_phase_two", name = "Wearable Cloud Phase2 Enabled", description = "Enable cloud devices phase 2 features", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:WearableFeatureFlag.kt$WearableFeatureFlag$val wearableFlow = FeatureFlag.BooleanFeatureFlag( id = "rel_wb_wearableFlow", name = "Wearable Flow", description = "Shows new views related to Wearable Flow. To be deleted once this feature is ready to be released to all users.", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel$val consentAgreedFlow: StateFlow&lt;Boolean> get() = mutableConsentAgreedFlow</ID>
    <ID>UndocumentedPublicProperty:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel$val validicUser: LiveData&lt;State&lt;ValidicUser>> get() = mutableValidicUser</ID>
    <ID>UndocumentedPublicProperty:WearableGenericConsentViewModel.kt$WearableGenericConsentViewModel$val wearableConsent: LiveData&lt;State&lt;WearableConsent>> get() = mutableWearableConsent</ID>
    <ID>UndocumentedPublicProperty:WearableService.kt$WearableService$val api: API</ID>
    <ID>UndocumentedPublicProperty:WearablesPresenterViewModelModule.kt$WearablesPresenterViewModelModule$val module = module { viewModel { LaunchViewModel( authenticator = get(), api = get(), environmentUtils = get(), userRepository = get(), buildInfoUtils = get() ) } }</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragment.kt$WebBrowserFragment$var onHandleNavigationListener: ((target: NavigationTarget, isRootNavigation: Boolean) -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragment.kt$WebBrowserFragment$var onInvalidateOptionsMenuListener: (() -> Unit)? = null</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragment.kt$WebBrowserFragment.Companion$const val EXTRA_HTML = "extra_html"</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragment.kt$WebBrowserFragment.Companion$const val EXTRA_TITLE = "extra_title"</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragment.kt$WebBrowserFragment.Companion$const val EXTRA_TYPEFORM_URL = "typeform_url"</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragment.kt$WebBrowserFragment.Companion$const val EXTRA_URL = "extra_url"</ID>
    <ID>UndocumentedPublicProperty:WebBrowserFragmentArgs.kt$WebBrowserFragmentArgs$public val extraUrl: String</ID>
    <ID>UndocumentedPublicProperty:WebviewAuthenticator.kt$WebviewAuthenticator$val userId: String?</ID>
    <ID>UndocumentedPublicProperty:WelcomeFragmentArgs.kt$WelcomeFragmentArgs$public val banner: Banner = Banner.LCL</ID>
    <ID>UndocumentedPublicProperty:WelcomeNewUserViewModel.kt$WelcomeNewUserViewModel$val userInfo = fakeUserInfoUseCase().map { userInfo -> when (userInfo) { is Success -> Loaded(data = userInfo.response) is Failure -> Failed(userInfo.errorResponse) } }.stateIn( viewModelScope, SharingStarted.WhileSubscribed(), Loading() )</ID>
    <ID>UndocumentedPublicProperty:WelcomeViewModel.kt$WelcomeViewModel$val userInfo = fakeUserInfoUseCase().map { userInfo -> when (userInfo) { is Success -> Loaded(data = userInfo.response) is Failure -> Failed(userInfo.errorResponse) } } .stateIn( viewModelScope, SharingStarted.WhileSubscribed(), Loading() )</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetAddedReadings$@Json(name = "access_token") val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetAddedReadings$@Json(name = "claim_code") val claimCode: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetAddedReadings$@Json(name = "policy_consent") val policyConsent: PCHPolicy = WellnessStationPolicy.getQrCodePolicy()</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetAddedReadings$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetClaimCode$@Json(name = "access_token") val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetClaimCode$@Json(name = "policy_consent") val policyConsent: PCHPolicy = WellnessStationPolicy.getClaimCodePolicy()</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetClaimCode$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetInsightCards$@Json(name = "access_token") val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetInsightCards$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetReadings$@Json(name = "access_token") val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetReadings$@Json(name = "include_all_readings") val includeAllReadings: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetReadings$@Json(name = "reading_code") val readingCode: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.GetReadings$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.RemoveReadings$@Json(name = "access_token") val accessToken: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.RemoveReadings$@Json(name = "reading_ids") val readingIds: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:WellnessStationAPI.kt$WellnessStationAPI.RemoveReadings$val version: Int = 1</ID>
    <ID>UndocumentedPublicProperty:WellnessStationFeatureFlags.kt$WellnessStationFeatureFlags$val wellnessStations = FeatureFlag.BooleanFeatureFlag( id = "rel_hp_wellnessStations", name = "Wellness Stations", description = "Enable Wellness Station", defaultValue = false )</ID>
    <ID>UndocumentedPublicProperty:WellnessStationHighlightResponse.kt$WellnessStationHighlightResponse$@Json(name = "user_reading_highlights") val insightCards: List&lt;InsightCard></ID>
    <ID>UndocumentedPublicProperty:WellnessStationModule.kt$WellnessStationModule$val modules = arrayOf( WellnessStationsUseCaseModule.module, WellnessStationViewModuleModule.module, WellnessStationRepositoryModule.module, )</ID>
    <ID>UndocumentedPublicProperty:WellnessStationRepositoryModule.kt$WellnessStationRepositoryModule$val module = module { single { WellnessStationsRepository(api = get()) } }</ID>
    <ID>UndocumentedPublicProperty:WellnessStationViewModuleModule.kt$WellnessStationViewModuleModule$val module = module { // wellness station viewModel { PCHealthStationReadingViewModel(wellnessStationUseCase = get()) } viewModel { InsightDetailsViewModel(readingsUseCase = get(), removeReadingUseCase = get()) } viewModel { QRCodeViewModel(qrCodeUseCase = get()) } viewModel { ImportReadingViewModel(useCase = get()) } }</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val ADD_READINGS = "Add Readings"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CANCEL = "Cancel"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CANCEL_REMOVAL = "Cancel Removal"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CHAT_WITH_CARE_TEAM = "Chat with care team"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CLOSE = "Close"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CLOSE_CONNECTION_CONFIGURATION = "Close Connection Configuration"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CLOSE_GUIDELINES = "Close Guidelines"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CLOSE_INFO_MODAL = "Close Info Modal"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CLOSE_QR_CODE_SCAN = "Close QR Code Scan"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val COMPLETED_READINGS_REMOVAL = "Completed Readings Removal"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CONFIRM_QR_CODE_SCAN = "Confirm QR Code Scan"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CONFIRM_REMOVAL = "Confirm Removal"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val CONSENT_CONNECTION = "Consent Connection"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val EDIT_READINGS = "Edit Readings"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val GENERATE_NEW_CODE = "Generate New Code"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val READ_INFO_GUIDELINES = "Read Info Guidelines"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val REMOVE_READINGS = "Remove Readings"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val SELECT_CONNECTION_MODE = "Select Connection Mode"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val SELECT_HIGHLIGHT = "Select Highlight"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val SELECT_INFO_MODAL = "Select Info Modal"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Actions$const val SELECT_NAVIGATION_TAB = "Select Navigation Tab"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_CONNECTION_CONFIGURATION = "Health Station Connection Configuration"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_CONNECTION_CONSENT = "Health Station Connection Consent"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_CONNECTION_QR_CODE_EXPIRED = "Health Station Connection QR Code Expired"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_CONNECTION_SCAN_QR_CODE = "Health Station Connection Scan QR Code"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_METRIC_EMPTY_STATE = "Health Station Metric Empty State"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READINGS_IMPORT_SUCCESSFUL = "Health Station Readings Import Successful"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READING_DETAILS = "Health Station Reading Details- %s"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING = "Health Station Reading Details- %s-Confirm Remove Reading"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READING_DETAILS_HIGHLIGHTS_TAB = "Health Station Reading Details- %s-%s"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READING_DETAILS_INFO_GUIDELINES = "Health Station Reading Details- %s Info Guidelines"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Categories$const val HEALTH_STATION_READING_HIGHLIGHTS = "Health Station Reading Highlights"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val ADD_A_GUEST_SESSION_READING = "Add a guest session reading"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val ALL_READINGS = "All readings"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val CANCEL = "Cancel"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val CONNECT_AT_A_PC_HEALTH_STATION = "Connect at a PC Health Station"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val IVE_SCANNED_THE_CODE = "I’ve scanned the code"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val LAST_10_SESSIONS = "Last 10 sessions"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val LEARN_MORE_ABOUT_PC_HEALTH_STATION = "Learn More About PC Health Station"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val REGISTERED_NURSE = "Registered nurse"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Labels$const val YES_CONFIRM_AND_CONTINUE = "Yes, confirm and continue"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val EMPTY_WELLNESS_STATION_STATE = "Health Station Metric Empty State"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_CONNECTION_CONFIGURATION = "Health Station Connection Configuration"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_CONNECTION_CONSENT = "Health Station Connection Consent"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_CONNECTION_QR_CODE_EXPIRED = "Health Station Connection QR Code Expired"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_CONNECTION_SCAN_QR_CODE = "Health Station Connection Scan QR Code"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_INFO_MODAL = "Health Station Info Modal"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_READINGS_IMPORT_SUCCESSFUL = "Health Station Readings Import Successful"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_READING_DETAILS = "Health Station Reading Details- %s"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_READING_DETAILS_CONFIRM_REMOVE_READING = "Health Station Reading Details- %s-Confirm Remove Reading"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_READING_DETAILS_INFO_GUIDELINES = "Health Station Reading Details- %s Info Guidelines"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.Pages$const val HEALTH_STATION_READING_HIGHLIGHTS = "Health Station Reading Highlights"</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsAnalytics.kt$WellnessStationsAnalytics.User$val value: String</ID>
    <ID>UndocumentedPublicProperty:WellnessStationsUseCaseModule.kt$WellnessStationsUseCaseModule$val module = module { single { WellnessStationUseCase(repository = get()) } single { ReadingsUseCase(repository = get()) } single { QRCodeUseCase(repository = get()) } single { QrCodeScannerUseCase(repository = get()) } single { RemoveReadingUseCase(repository = get()) } }</ID>
    <ID>UndocumentedPublicProperty:WipFragmentArgs.kt$WipFragmentArgs$public val title: String</ID>
    <ID>UndocumentedPublicProperty:YAxisConfig.kt$YAxisConfig$@Json(name = "lower_bound") val lowerBound: Int = 0</ID>
    <ID>UndocumentedPublicProperty:YAxisConfig.kt$YAxisConfig$@Json(name = "upper_bound") val upperBound: Int = 0</ID>
    <ID>UndocumentedPublicProperty:YAxisConfig.kt$YAxisConfig$val enabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Configuration$val version: String</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.AppModule$val uiTest: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.AppModule$val variants: List&lt;String> = listOf("debug")</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.JarModule$val artifactId: String = path.split(":").last()</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.JarModule$val publish: Boolean</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.JarModule.Companion$const val GROUP_ID = "com.league.lib"</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.LibraryModule$val artifactId: String = path.split(":").last()</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.LibraryModule.Companion$const val GROUP_ID = "com.league.lib"</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.PublishableModule$val path: String</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.PublishableModule$val publish: Boolean</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.PublishableModule$val uiTest: Boolean</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.SdkModule$val artifactId: String = path.split(":").last()</ID>
    <ID>UndocumentedPublicProperty:settings.gradle.kts$Module.SdkModule.Companion$const val GROUP_ID = "com.league.sdk"</ID>
    <ID>UnnecessaryAbstractClass:ApplyModuleAdapters.kt$ApplyModuleAdapters</ID>
    <ID>UnnecessaryAbstractClass:MessageRequest.kt$MessageRequest</ID>
    <ID>UnnecessaryAbstractClass:Repository.kt$Repository</ID>
    <ID>UnnecessaryAbstractClass:SingleRowTable.kt$SingleRowTable</ID>
    <ID>UnusedPrivateClass:LogSanitizationTest.kt$LogSanitizationTest$LogData</ID>
    <ID>UnusedPrivateMember:API_Setting.kt$private const val TAG = "LeagueAPI_Setting"</ID>
    <ID>UnusedPrivateMember:AccountActivity.kt$AccountActivity.Companion$private const val TAG = "AccountActivity"</ID>
    <ID>UnusedPrivateMember:AccountDetailsFragment.kt$AccountDetailsFragment.Companion$private const val TAG = "AccountDetailsFragment"</ID>
    <ID>UnusedPrivateMember:AccountDetailsViewModel.kt$AccountDetailsViewModel.Companion$private const val TAG = "AccountDetailsViewModel"</ID>
    <ID>UnusedPrivateMember:AccountDetailsViewModelTest.kt$AccountDetailsViewModelTest$private val api: API by lazy { mockk(relaxed = true) }</ID>
    <ID>UnusedPrivateMember:AccountDetailsViewModelTest.kt$AccountDetailsViewModelTest$private val repo: Repository by lazy { mockk(relaxed = true) }</ID>
    <ID>UnusedPrivateMember:AccountUnlinkedFragment.kt$AccountUnlinkedFragment$private val analyticsTracker: AnalyticsTracker by inject()</ID>
    <ID>UnusedPrivateMember:ActionButton.kt$ActionButton$private fun setProgressColor(@AttrRes color: Int)</ID>
    <ID>UnusedPrivateMember:AgentLoadingFragment.kt$AgentLoadingFragment$private val api: API by inject()</ID>
    <ID>UnusedPrivateMember:AgentLoadingViewModel.kt$AgentLoadingViewModel$private val analyticsTracker: AnalyticsTracker</ID>
    <ID>UnusedPrivateMember:AnalyticsTracker_Chat.kt$private fun AnalyticsTracker.trackChatReminderEvent(action: String, label: String? = null)</ID>
    <ID>UnusedPrivateMember:AnalyticsTracker_Marketplace.kt$private fun AnalyticsTracker.trackMarketplaceEvent(action: String, label: String? = null)</ID>
    <ID>UnusedPrivateMember:AppLoggingRepositoryTest.kt$AppLoggingRepositoryTest$private val remoteSeverityLevel = "DEBUG,CRITICAL"</ID>
    <ID>UnusedPrivateMember:AppsAndDevicesConnectionDialogViewModel.kt$AppsAndDevicesConnectionDialogViewModel$private val cloudDeviceUtil: CloudDeviceUtil</ID>
    <ID>UnusedPrivateMember:ArticlesViewModelTest.kt$ArticlesViewModelTest.Companion$private const val USER_ID = "UserId"</ID>
    <ID>UnusedPrivateMember:AssessmentOnboardingAdditionalInfoFragment.kt$AssessmentOnboardingAdditionalInfoFragment.Companion$private const val TAG = "BuilderOnboardingFragment"</ID>
    <ID>UnusedPrivateMember:Auth0LeagueAuthenticatorTest.kt$Auth0LeagueAuthenticatorTest$@MockK private lateinit var api: API</ID>
    <ID>UnusedPrivateMember:AuthPhoneNumberFragment.kt$AuthPhoneNumberFragment.Companion$private const val TAG = "AuthPhoneNumberFragment"</ID>
    <ID>UnusedPrivateMember:AuthenticationViewModel.kt$AuthenticationViewModel$private val repo: Repository</ID>
    <ID>UnusedPrivateMember:BaseRadioSelectionBottomSheetDialog.kt$BaseRadioSelectionBottomSheetDialog.Companion$private const val TAG = "BaseRadioSelectionBottomSheetDialog"</ID>
    <ID>UnusedPrivateMember:ChangePasswordFragment.kt$ChangePasswordFragment.Companion$private const val TAG = "ChangePasswordFragment"</ID>
    <ID>UnusedPrivateMember:ChatHistoryActivity.kt$ChatHistoryActivity$private var progressDialog: ProgressDialog? = null</ID>
    <ID>UnusedPrivateMember:ChatHistoryActivity.kt$ChatHistoryActivity.Companion$private const val TAG = "ChatHistoryActivity"</ID>
    <ID>UnusedPrivateMember:ChatInput.kt$ChatInput.Companion$private const val TAG = "ChatInput"</ID>
    <ID>UnusedPrivateMember:CreateAppointmentMappingTest.kt$CreateAppointmentMappingTest$private val mockPrices = listOf(mockPricing)</ID>
    <ID>UnusedPrivateMember:CurrentGoalCard.kt$CurrentGoalCard$private var showPoints: Boolean = true</ID>
    <ID>UnusedPrivateMember:DependentsControllerTest.kt$DependentsControllerTest$@MockK private lateinit var dependentClickListener: OnDependentClickListener</ID>
    <ID>UnusedPrivateMember:DirectorPageFragment.kt$DirectorPageFragment.Companion$private const val TAG = "DirectorPageFragment"</ID>
    <ID>UnusedPrivateMember:EnvironmentUtils.kt$EnvironmentUtils$private fun getListOfEnvironments(hardCodedEnvironments: Array&lt;Environment>): List&lt;Environment></ID>
    <ID>UnusedPrivateMember:FetchProvidersUseCaseTest.kt$i</ID>
    <ID>UnusedPrivateMember:FetchSpecialtiesUseCaseTest.kt$i: Int</ID>
    <ID>UnusedPrivateMember:FetchSpecialtiesUseCaseTest.kt$private val ONTARIO = Province.getAll().first()</ID>
    <ID>UnusedPrivateMember:GenesisNoScrollGridView.kt$pos</ID>
    <ID>UnusedPrivateMember:GraphViewFragment.kt$GraphViewFragment.Companion$private const val TAG = "GraphViewFragment"</ID>
    <ID>UnusedPrivateMember:HealthProgramExt.kt$private fun HealthProgramDetails.getActivitiesCompletedInfo(context: Context)</ID>
    <ID>UnusedPrivateMember:HealthProgramExt.kt$private fun HealthProgramDetails.getDaysRemainingString(context: Context)</ID>
    <ID>UnusedPrivateMember:HomeController.kt$HomeController$private var programsCount: Int = 0</ID>
    <ID>UnusedPrivateMember:HomeLayoutItem.kt$HomeLayoutItem.Companion$private const val TAG = "HomeLayoutItem"</ID>
    <ID>UnusedPrivateMember:InsightsDetailsViewModelTest.kt$InsightsDetailsViewModelTest$private val deleteReadingFailed = DeletedReadingResponse(listOf(DeletedReading("", "reading0", false), DeletedReading("", "reading1", true)))</ID>
    <ID>UnusedPrivateMember:LaunchFragment.kt$LaunchFragment$private fun logoutBiometrics()</ID>
    <ID>UnusedPrivateMember:LaunchFragment.kt$LaunchFragment$private val api: API by inject()</ID>
    <ID>UnusedPrivateMember:LeagueRepository.kt$LeagueRepository.Companion$private const val TAG = "LeagueRepository"</ID>
    <ID>UnusedPrivateMember:LeagueRootActivity.kt$LeagueRootActivity$private val analyticsTracker: AnalyticsTracker by inject()</ID>
    <ID>UnusedPrivateMember:LiveAgentChatFragment.kt$LiveAgentChatFragment.Companion$private const val TAG = "LiveAgentChatFragment"</ID>
    <ID>UnusedPrivateMember:LiveAgentViewModel.kt$LiveAgentViewModel.Companion$private const val TAG = "LiveAgentViewModel"</ID>
    <ID>UnusedPrivateMember:LiveAgentViewModelTest.kt$LiveAgentViewModelTest.Companion$private const val FIRST_NAME = "firstName"</ID>
    <ID>UnusedPrivateMember:LiveAgentViewModelTest.kt$LiveAgentViewModelTest.Companion$private const val LAST_NAME = "lastName"</ID>
    <ID>UnusedPrivateMember:LiveAgentViewModelTest.kt$LiveAgentViewModelTest.Companion$private const val PROVINCE = "Ontario"</ID>
    <ID>UnusedPrivateMember:LoginIntroFragment.kt$LoginIntroFragment.Companion$private const val TAG = "LoginIntroFragment"</ID>
    <ID>UnusedPrivateMember:LoginWelcomeBackFragment.kt$LoginWelcomeBackFragment$private val api: API by inject()</ID>
    <ID>UnusedPrivateMember:LoginWelcomeBackFragment.kt$LoginWelcomeBackFragment.Companion$private const val TAG = "LoginWelcomeBackFragment"</ID>
    <ID>UnusedPrivateMember:MapleChatViewModel.kt$MapleChatViewModel$private val analyticsTracker: AnalyticsTracker</ID>
    <ID>UnusedPrivateMember:MapleChatViewModelTest.kt$MapleChatViewModelTest$private fun mockUtmParams(): JSONObject</ID>
    <ID>UnusedPrivateMember:MapleHistoryViewModel.kt$MapleHistoryViewModel$private val analyticsTracker: AnalyticsTracker</ID>
    <ID>UnusedPrivateMember:MapleIntroActivity.kt$MapleIntroActivity.Companion$private const val TAG = "MapleIntroActivity"</ID>
    <ID>UnusedPrivateMember:OnboardingUtils.kt$OnboardingUtils.Companion$private const val TAG = "OnboardingUtils"</ID>
    <ID>UnusedPrivateMember:PCHMapleChatViewModelTest.kt$MapleChatViewModelTest$private fun mockChatProviderResponse()</ID>
    <ID>UnusedPrivateMember:PCHMapleChatViewModelTest.kt$MapleChatViewModelTest$private fun mockMapleAuthorization()</ID>
    <ID>UnusedPrivateMember:PCHMapleChatViewModelTest.kt$MapleChatViewModelTest$private fun mockUtmParams(): JSONObject</ID>
    <ID>UnusedPrivateMember:PCHMapleChatViewModelTest.kt$private const val AGENT_TYPE = "AGENT_TYPE"</ID>
    <ID>UnusedPrivateMember:PCHealthStationMoreInfoFragment.kt$PCHealthStationMoreInfoFragment.Companion$private const val TAG = "PCHealthStationReadings"</ID>
    <ID>UnusedPrivateMember:PersonalInfoViewModel.kt$PersonalInfoViewModel.Companion$private const val TAG = "PersonalInfoViewModel"</ID>
    <ID>UnusedPrivateMember:PersonalInfoViewModelTest.kt$PersonalInfoViewModelTest$private fun mockUserData(viewModel: PersonalInfoViewModel)</ID>
    <ID>UnusedPrivateMember:PersonalInfoViewModelTest.kt$PersonalInfoViewModelTest$private val api: API by lazy { mockk(relaxed = true) }</ID>
    <ID>UnusedPrivateMember:PersonalInfoViewModelTest.kt$PersonalInfoViewModelTest$private val repo: Repository by lazy { mockk(relaxed = true) }</ID>
    <ID>UnusedPrivateMember:PushNotificationSettingsFragment.kt$PushNotificationSettingsFragment.Companion$private const val TAG = "PushNotificationSettingsFragment"</ID>
    <ID>UnusedPrivateMember:RedeemRewardActivity.kt$RedeemRewardActivity.Companion$private const val TAG = "RedeemRewardActivity"</ID>
    <ID>UnusedPrivateMember:Repository_Auth.kt$private const val TAG = "Repository_Auth"</ID>
    <ID>UnusedPrivateMember:Repository_ChatMessages.kt$private const val TAG = "LeagueRepository_ChatMessages"</ID>
    <ID>UnusedPrivateMember:Repository_Rewards.kt$private const val TAG = "Repository_Rewards"</ID>
    <ID>UnusedPrivateMember:RootActivity.kt$RootActivity$ private fun debugMemoryLeaks()</ID>
    <ID>UnusedPrivateMember:RootActivity.kt$RootActivity$private val buildInfoUtils: BuildInfoUtils by koin.inject()</ID>
    <ID>UnusedPrivateMember:RootApplication.kt$RootApplication$private fun setupStrictModePolicies()</ID>
    <ID>UnusedPrivateMember:TransactionHistoryActivity.kt$TransactionHistoryActivity.Companion$private const val TAG = "TransactionHistoryActivity"</ID>
    <ID>UnusedPrivateMember:TriageMenuViewModelTest.kt$i</ID>
    <ID>UnusedPrivateMember:VaccineLandingViewModelTest.kt$VaccineLandingViewModelTest$@MockK private lateinit var userPcid: Observer&lt;State&lt;UserPcid>></ID>
    <ID>UnusedPrivateMember:VaccineLandingViewModelTest.kt$VaccineLandingViewModelTest$@MockK private lateinit var userProfile: Observer&lt;State&lt;UserProfile>></ID>
    <ID>UnusedPrivateMember:VaccineWebViewClientTest.kt$VaccineWebViewClientTest$private val sslErrorHandler = mockk&lt;SslErrorHandler>()</ID>
    <ID>UnusedPrivateMember:WalletCardDetailController.kt$WalletCardDetailController.Companion$private const val ID_SHARE_CARD = "share_card"</ID>
    <ID>UnusedPrivateMember:WalletCategories.kt$private const val LEAGUE_CREDIT_CARD_ID = "user_bt_cc_payment"</ID>
    <ID>UtilityClassWithPublicConstructor:Constants.kt$Constants</ID>
    <ID>UtilityClassWithPublicConstructor:ContactUsDemo.kt$ContactUsDemo</ID>
    <ID>UtilityClassWithPublicConstructor:Notification.kt$NotificationType</ID>
    <ID>UtilityClassWithPublicConstructor:Secrets.kt$Secrets</ID>
    <ID>UtilityClassWithPublicConstructor:StubbedData.kt$StubbedData</ID>
    <ID>VariableNaming:AddedReadingJsonAdapter.kt$AddedReadingJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:AssociateReadingJsonAdapter.kt$AssociateReadingJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:DependentKeyValuePairJsonAdapter.kt$DependentKeyValuePairJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:DropDownAnswerJsonAdapter.kt$DropDownAnswerJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:FieldsJsonAdapter.kt$FieldsJsonAdapter$var file_: File? = null</ID>
    <ID>VariableNaming:HealthProfileJsonAdapter.kt$HealthProfileJsonAdapter$var LastUpdatedDate: Date? = null</ID>
    <ID>VariableNaming:ImageAssetJsonAdapter.kt$ImageAssetJsonAdapter$var file_: File? = null</ID>
    <ID>VariableNaming:InputAnswerJsonAdapter.kt$InputAnswerJsonAdapter$var value__: Any? = null</ID>
    <ID>VariableNaming:InsightCardJsonAdapter.kt$InsightCardJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:JsonApiDataJsonAdapter.kt$JsonApiDataJsonAdapter$var data_: T? = null</ID>
    <ID>VariableNaming:JsonApiResponseJsonAdapter.kt$JsonApiResponseJsonAdapter$var data_: T? = null</ID>
    <ID>VariableNaming:MultipleChoiceAnswerJsonAdapter.kt$MultipleChoiceAnswerJsonAdapter$var value__: Int? = 0</ID>
    <ID>VariableNaming:MultipleSelectionAnswerJsonAdapter.kt$MultipleSelectionAnswerJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:PersonalStoreCreditBalanceJsonAdapter.kt$PersonalStoreCreditBalanceJsonAdapter$var options_: List&lt;WalletCardAction>? = null</ID>
    <ID>VariableNaming:ReadingJsonAdapter.kt$ReadingJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:ShopifyMoneyJsonAdapter.kt$ShopifyMoneyJsonAdapter$var value__: String? = null</ID>
    <ID>VariableNaming:UserProfile.kt$UserProfile$val `val` = if (address.isNull(addressKey)) null else address.optString(addressKey)</ID>
    <ID>VariableNaming:UserProfile.kt$UserProfile$val `val` = if (dependent.isNull(key)) null else dependent.optString(key)</ID>
    <ID>WildcardImport:API.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:API_Claim.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:API_Document.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:API_HealthProfile.kt$import life.league.health.model.profile.*</ID>
    <ID>WildcardImport:API_History.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:API_Maple.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:API_Messages.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:API_Wallet.kt$import life.league.wallet.model.*</ID>
    <ID>WildcardImport:API_WearableConsent.kt$import life.league.wearable.model.*</ID>
    <ID>WildcardImport:AccountDeletionConfirmationViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:AccountDetailsFragment.kt$import android.view.*</ID>
    <ID>WildcardImport:AccountSetupGenderFragment.kt$import com.loblaw.pchealth.analytics.*</ID>
    <ID>WildcardImport:AccountSetupLocationFragment.kt$import com.loblaw.pchealth.analytics.*</ID>
    <ID>WildcardImport:AccountSetupPersonalInfoFragment.kt$import com.loblaw.pchealth.analytics.*</ID>
    <ID>WildcardImport:AccountSetupViewModel.kt$import life.league.core.model.user.*</ID>
    <ID>WildcardImport:ActionBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ActionButton.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ActionRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ActivityCompletion.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AgentChatClient.kt$import com.salesforce.android.chat.core.*</ID>
    <ID>WildcardImport:AgentChatClient.kt$import com.salesforce.android.chat.core.model.*</ID>
    <ID>WildcardImport:AppDatabase.kt$import life.league.health.repository.database.typeconverter.*</ID>
    <ID>WildcardImport:ApplicationModule.kt$import life.league.core.util.*</ID>
    <ID>WildcardImport:ArchivePrescriptionBottomSheet.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AssessmentContract.kt$import life.league.health.model.profile.*</ID>
    <ID>WildcardImport:AssessmentQuestionsViewModel.kt$import life.league.health.profile.builder.QuestionStatus.*</ID>
    <ID>WildcardImport:AssessmentQuestionsViewModel.kt$import life.league.health.profile.builder.QuestionViewEffect.*</ID>
    <ID>WildcardImport:AssessmentQuestionsViewModel.kt$import life.league.health.profile.builder.QuestionViewEvent.*</ID>
    <ID>WildcardImport:AssessmentRepositoryImpl.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:AssessmentViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:AssessmentViewModel.kt$import life.league.health.profile.assessment.AssessmentViewModel.AssessmentFlows.*</ID>
    <ID>WildcardImport:AssetBanner.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AssetBanner.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:AssetBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:AutoRefillWarningBottomSheet.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:BMIInfoFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:BannerController.kt$import life.league.genesis.widget.banner.*</ID>
    <ID>WildcardImport:BarcodeOverlayView.kt$import android.graphics.*</ID>
    <ID>WildcardImport:BasicIconBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:BloodPressureInfoFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:BottomPageTab.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:BrandedPointsBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:BrowserFragment.kt$import android.webkit.*</ID>
    <ID>WildcardImport:BuilderDailyScreenerResponsesFragment.kt$import life.league.health.analytics.*</ID>
    <ID>WildcardImport:BuilderDailyScreenerResponsesFragment.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:Button.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:Card.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:CardController.kt$import life.league.genesis.widget.card.*</ID>
    <ID>WildcardImport:CenteredBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ChangePasswordFragment.kt$import life.league.analytics.events.*</ID>
    <ID>WildcardImport:ChatController.kt$import life.league.genesis.widget.chat.*</ID>
    <ID>WildcardImport:ChatLandingViewModel.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:CircleButton.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CircleButton.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:CircleButton.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:CircularProgressBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CircularProgressBar.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CobrandingBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ComponentBrowserScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ComponentBrowserScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ComponentBrowserScreen.kt$import life.league.digitalpharmacy.ui.widget.*</ID>
    <ID>WildcardImport:ConsentScreen.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ContactUsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ContentAPI.kt$import okhttp3.*</ID>
    <ID>WildcardImport:ContentConfirmDialog.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ContentProviderInfo.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ContextExtension.kt$import androidx.annotation.*</ID>
    <ID>WildcardImport:CovidOnboardingSlide.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:CreateProfileScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CreateProfileScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:CreateProfileScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:DashboardScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:DashboardScreen.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:DashboardScreen.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:DefaultHealthJourneyRepository.kt$import life.league.healthjourney.journey.models.*</ID>
    <ID>WildcardImport:DefaultHealthProgramsRepository.kt$import life.league.healthjourney.programs.models.*</ID>
    <ID>WildcardImport:DependentCardController.kt$import life.league.wallet.cardview.*</ID>
    <ID>WildcardImport:DependentInviteSuccessFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:DependentWalletCardActivity.kt$import life.league.wallet.cardview.*</ID>
    <ID>WildcardImport:DependentsActivity.kt$import life.league.dependents.*</ID>
    <ID>WildcardImport:DependentsViewModel.kt$import life.league.analytics.events.*</ID>
    <ID>WildcardImport:DependentsViewModel.kt$import life.league.wallet.analytics.*</ID>
    <ID>WildcardImport:DetailRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:DetailedProgressCard.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:DeviceInfoViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:DialogActivity.kt$import life.league.genesis.widget.dialog.*</ID>
    <ID>WildcardImport:DigitalPharmacyUseCaseModule.kt$import life.league.digitalpharmacy.usecase.*</ID>
    <ID>WildcardImport:DirectorPageFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:DropDown.kt$import android.widget.*</ID>
    <ID>WildcardImport:DualColumnRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:DualTableRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:EditDate.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:EditorialRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:EmptyResultsView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EmptyResultsView.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:EmptyStateBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:EnableNotificationScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EnableNotificationScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:EnableNotificationScreen.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:EnvironmentConfiguration.kt$import ca.loblaw.pcid.login.internal.Environment.*</ID>
    <ID>WildcardImport:EnvironmentSwitcherFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EnvironmentSwitcherFragment.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:EpoxyTextView.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ExpandableStatusRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ExpandableText.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:FadeAnimation.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:FadeAnimation.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:FeatureFlagDetailFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:FeatureFlagDetailFragment.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:FeedbackScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:FeedbackScreen.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:FileTransferRequestClient.kt$import com.salesforce.android.chat.core.*</ID>
    <ID>WildcardImport:FileTransferRequestClient.kt$import com.salesforce.android.chat.core.model.*</ID>
    <ID>WildcardImport:FindLocationWithRxAndStoreNumberScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:FindPharmacyScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:FullInformationalBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:GenericEmptyState.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:GenericPagesWithTabs.kt$import com.airbnb.epoxy.*</ID>
    <ID>WildcardImport:GenesisBordedListTile.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisButton.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisButton.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:GenesisButton.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:GenesisCalendarView.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:GenesisComposableBottomSheet.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisDateField.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:GenesisEmptySectionView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisEmptySectionView.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:GenesisEmptyStateWidget.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisErrorScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisErrorScreen.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:GenesisGridView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisHorizontalPager.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisHorizontalPager.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:GenesisHorizontalPager.kt$import com.google.accompanist.pager.*</ID>
    <ID>WildcardImport:GenesisInformationalSlide.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisNoScrollGridView.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisStaticDropdown.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisStaticDropdown.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:GenesisSwitch.kt$import androidx.compose.foundation.interaction.*</ID>
    <ID>WildcardImport:GenesisSwitch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisSwitch.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:GenesisSwitch.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:GenesisToolbar.kt$import androidx.annotation.*</ID>
    <ID>WildcardImport:GenesisToolbar.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:GenesisTopAppBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:GenesisTopAppBar.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:GoalDetails.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:Header.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:HeaderController.kt$import life.league.genesis.widget.header.*</ID>
    <ID>WildcardImport:HealthJourneyHomeScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HealthJourneyItemCompletionTypeUnsupportedBottomSheetDialog.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:HealthJourneyItemDetail.kt$import life.league.healthjourney.journey.models.*</ID>
    <ID>WildcardImport:HealthJourneyPageControls.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HealthJourneyPageControls.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:HealthJourneyRemovalConfirmationViewModel.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:HealthJourneyRepository.kt$import life.league.healthjourney.journey.models.*</ID>
    <ID>WildcardImport:HealthJourneySuggestedActivityGroupFragment.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:HealthProgramCategoryFragment.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:HealthProgramLibraryFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HealthProgramLibraryFragment.kt$import androidx.compose.foundation.lazy.*</ID>
    <ID>WildcardImport:HealthProgramLibraryFragment.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:HealthProgramLibraryFragment.kt$import life.league.healthjourney.analytics.*</ID>
    <ID>WildcardImport:HealthProgramLibraryFragment.kt$import life.league.healthjourney.programs.models.*</ID>
    <ID>WildcardImport:HealthProgramLibraryViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:HealthProgramLibraryViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:HealthProgramLibraryViewModel.kt$import life.league.healthjourney.programs.models.*</ID>
    <ID>WildcardImport:HealthProgramsAPI.kt$import life.league.healthjourney.programs.models.*</ID>
    <ID>WildcardImport:HealthProgramsRepository.kt$import life.league.healthjourney.programs.models.*</ID>
    <ID>WildcardImport:HomeContract.kt$import life.league.model.home.*</ID>
    <ID>WildcardImport:HomeController.kt$import life.league.analytics.events.*</ID>
    <ID>WildcardImport:HomeController.kt$import life.league.genesis.widget.banner.*</ID>
    <ID>WildcardImport:HomeController.kt$import life.league.genesis.widget.card.*</ID>
    <ID>WildcardImport:HomeController.kt$import life.league.model.home.*</ID>
    <ID>WildcardImport:HomeFragment.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:HomeViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:HomeViewModel.kt$import life.league.data.remote.repository.*</ID>
    <ID>WildcardImport:HomeViewModel.kt$import life.league.model.home.*</ID>
    <ID>WildcardImport:HorizontalProgressBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HorizontalProgressBar.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:HorizontalTranslationAnimation.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HorizontalTranslationAnimation.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ImageBanner.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ImagePromptWidget.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ImageViewExtension.kt$import androidx.annotation.*</ID>
    <ID>WildcardImport:ImportantBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:InformationalSlide.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:InsightsBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:KeyValueRow.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LandingScreen.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:LandingScreen.kt$import life.league.digitalpharmacy.model.*</ID>
    <ID>WildcardImport:LandingViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:LaunchFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LaunchFragment.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:LaunchFragment.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:LeagueAPIMessageListener.kt$import life.league.data.remote.events.*</ID>
    <ID>WildcardImport:LearnMoreBottomSheetScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LeaveHealthJourneyActivityConfirmationFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LeaveHealthJourneyActivityConfirmationFragment.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:LineChartView.kt$import life.league.wellnessstation.ui.presentation.graph.models.*</ID>
    <ID>WildcardImport:LinkButton.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:LinkButton.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ListSpacingDecoration.kt$import androidx.recyclerview.widget.*</ID>
    <ID>WildcardImport:LiveAgentChatActivity.kt$import life.league.chat.*</ID>
    <ID>WildcardImport:LiveAgentChatActivity.kt$import life.league.chat.analytics.*</ID>
    <ID>WildcardImport:LiveAgentChatFragment.kt$import life.league.chat.analytics.*</ID>
    <ID>WildcardImport:LiveAgentChatFragment.kt$import life.league.chat.client.*</ID>
    <ID>WildcardImport:LiveAgentViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:LockedOutScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:MapleChatViewModel.kt$import life.league.chat.api.*</ID>
    <ID>WildcardImport:MapleChatViewModel.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:MapleHistoryViewModel.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:MarketplaceProductCard.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:MarketplaceWebFragment.kt$import android.webkit.*</ID>
    <ID>WildcardImport:MilestoneTracker.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:MoshiEmptyAdapter.kt$import com.squareup.moshi.*</ID>
    <ID>WildcardImport:MoshiUnitAdapter.kt$import com.squareup.moshi.*</ID>
    <ID>WildcardImport:MultiStepHealthJourneyItemCompletionScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:MultiStepHealthJourneyItemCompletionScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:NetworkConnectionManager.kt$import androidx.lifecycle.*</ID>
    <ID>WildcardImport:PCHMapleChatViewModel.kt$import life.league.chat.api.*</ID>
    <ID>WildcardImport:PCHMapleChatViewModel.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:PCHealthAuthenticator_RefreshAndAuthenticateJWT.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:PCHealthStationMoreInfoFragment.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PCHealthStationReadingsFragment.kt$import life.league.wellnessstation.analytics.*</ID>
    <ID>WildcardImport:PageHeader.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:PagerControls.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PcoAPI.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:PcoAPIInterceptor.kt$import okhttp3.*</ID>
    <ID>WildcardImport:PersonalInfoFragment.kt$import android.view.*</ID>
    <ID>WildcardImport:PersonalInfoFragment.kt$import life.league.core.model.user.*</ID>
    <ID>WildcardImport:PersonalInfoViewModel.kt$import life.league.core.model.user.*</ID>
    <ID>WildcardImport:PillButton.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PrescriptionDetailsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PrescriptionDetailsScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:PrescriptionDetailsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PrescriptionDetailsScreen.kt$import life.league.digitalpharmacy.model.*</ID>
    <ID>WildcardImport:PrescriptionDetailsScreen.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:PrescriptionDetailsViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:PrescriptionDetailsViewModel.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:PrescriptionTile.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PrivacyLockLoginPrompt.kt$import life.league.core.analytics.*</ID>
    <ID>WildcardImport:ProfileVerificationScreen.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:ProgressCard.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ProgressRow.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ProgressRow.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:ProgressRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:PulseAnimation.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:QuestionController.kt$import life.league.genesis.widget.question.*</ID>
    <ID>WildcardImport:QuestionController.kt$import life.league.health.model.profile.*</ID>
    <ID>WildcardImport:RealmCache.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:RecSpans.kt$import android.text.style.*</ID>
    <ID>WildcardImport:RedeemRewardActivity.kt$import life.league.analytics.events.*</ID>
    <ID>WildcardImport:RemoteImage.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:Repository.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:Repository_Document.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:RewardUseCase.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:RowController.kt$import life.league.genesis.widget.row.*</ID>
    <ID>WildcardImport:SecurityQuestionBottomSheet.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SecurityQuestionBottomSheet.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SelectPharmacyRefillScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SelectPharmacyRefillScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SelectPharmacyScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SelectPharmacyScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SelectPrescriptionsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SelectPrescriptionsScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SelectPrescriptionsScreen.kt$import life.league.digitalpharmacy.ui.widget.*</ID>
    <ID>WildcardImport:SelectPrescriptionsViewModel.kt$import life.league.digitalpharmacy.ui.widget.*</ID>
    <ID>WildcardImport:SessionStateChatClient.kt$import com.salesforce.android.chat.core.*</ID>
    <ID>WildcardImport:SessionUtils.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:SettingsPersonalInfoFragment.kt$import android.view.*</ID>
    <ID>WildcardImport:SettingsScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SettingsScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:StackedActionBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:StartedEagerlyWhileSubscribed.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:StickyButtonFooter.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:TagBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:TestChatClient.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:TextInputRow.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:ToolTip.kt$import life.league.genesis.compose.theme.*</ID>
    <ID>WildcardImport:TooltipHeaderRow.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:TopicBanner.kt$import life.league.genesis.extension.*</ID>
    <ID>WildcardImport:TransactionHistoryController.kt$import life.league.model.Transaction.*</ID>
    <ID>WildcardImport:TriageSubMenuFragment.kt$import life.league.triage.analytics.*</ID>
    <ID>WildcardImport:UserRepositoryImpl.kt$import life.league.core.api.*</ID>
    <ID>WildcardImport:UserRepositoryImpl.kt$import life.league.networking.callback.*</ID>
    <ID>WildcardImport:VaccinationDetails.kt$import life.league.vaccine.model.*</ID>
    <ID>WildcardImport:VaccineLandingFragment.kt$import life.league.vaccine.analytics.*</ID>
    <ID>WildcardImport:VaccineLandingViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:VerticalTranslationAnimation.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:WalletCardDetailActivity.kt$import android.webkit.WebView.*</ID>
    <ID>WildcardImport:WalletCardDetailActivity.kt$import life.league.wallet.cardview.*</ID>
    <ID>WildcardImport:WalletCardDetailController.kt$import life.league.genesis.widget.*</ID>
    <ID>WildcardImport:WalletCardDetailController.kt$import life.league.wallet.livebalances.*</ID>
    <ID>WildcardImport:WalletCategoriesController.kt$import life.league.wallet.model.*</ID>
    <ID>WildcardImport:WalletCategoriesViewModel.kt$import life.league.wallet.model.*</ID>
    <ID>WildcardImport:WalletUseCaseModule.kt$import life.league.wallet.usecases.*</ID>
    <ID>WildcardImport:WalletUseCases.kt$import life.league.wallet.model.*</ID>
    <ID>WildcardImport:WarningBanner.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:WarningBanner.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:WearableConsentPrimerFragment.kt$import life.league.wearable.model.*</ID>
    <ID>WildcardImport:WebBrowserFragment.kt$import android.webkit.*</ID>
    <ID>WildcardImport:WebSocket.kt$import com.neovisionaries.ws.client.*</ID>
    <ID>WildcardImport:WelcomeNewUserScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:WelcomeNewUserScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:WelcomeNewUserScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:WelcomeNewUserScreen.kt$import life.league.core.observable.*</ID>
    <ID>WildcardImport:WelcomeNewUserScreen.kt$import life.league.digitalpharmacy.model.*</ID>
    <ID>WildcardImport:WelcomeScreen.kt$import life.league.core.observable.*</ID>
  </CurrentIssues>
</SmellBaseline>
